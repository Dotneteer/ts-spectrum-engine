(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!(0x75bcd15-0O726746425));if(u)return u(i,!(0x75bcd15-0O726746425));var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][(0x75bcd15-0O726746425)].call(p.exports,function(r){var n=e[i][(0O57060516-0xbc614d)][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=(0x75bcd15-0O726746425);i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.defaultSpectNetConfig={model:"ZX Spectrum 48K",edition:"PAL",defaultTape:"pac-man",fastLoad:false};},{}],2:[function(require,module,exports){"use strict";var __values=(this&&this.__values)||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=(0x75bcd15-0O726746425);if(m)return m.call(o);return {next:function(){if(o&&i>=o.length)o=void (0x75bcd15-0O726746425);return {value:o&&o[i++],done:!o};}};};Object.defineProperty(exports,"__esModule",{value:true});exports.FRAMES_BUFFERED=0o144;exports.FRAMES_DELAYED=(15658734^0O73567354);exports.AUDIO_BUFFER_SIZE=0o10000;var AudioRenderer=(function(){function AudioRenderer(_samplesPerFrame){this._samplesPerFrame=_samplesPerFrame;this._waveBuffer=new Float32Array((0x75bcd15-0O726746425));this._writeIndex=(0x75bcd15-0O726746425);this._readIndex=(0x75bcd15-0O726746425);this._suspended=false;this.initializeAudio();}AudioRenderer.prototype.initializeAudio=function(){this.closeAudio();this._ctx=new AudioContext();this._waveBuffer=new Float32Array((Math.floor(this._samplesPerFrame)+(0O57060516-0xbc614d))*exports.FRAMES_BUFFERED);this._writeIndex=(0x75bcd15-0O726746425);this._readIndex=(0x75bcd15-0O726746425);for(var i=(0x75bcd15-0O726746425);i<exports.FRAMES_DELAYED*this._samplesPerFrame;i++){this._waveBuffer[this._writeIndex++]=(0x75bcd15-0O726746425);}var node=this._ctx.createScriptProcessor(exports.AUDIO_BUFFER_SIZE,(0O57060516-0xbc614d),(0O57060516-0xbc614d));var self=this;node.onaudioprocess=function(e){return self._processAudio(self,e);};var gainNode=this._ctx.createGain();gainNode.connect(this._ctx.destination);gainNode.gain.setValueAtTime((0O57060516-0xbc614d),this._ctx.currentTime);var highpass=this._ctx.createBiquadFilter();highpass.type="highpass";highpass.frequency.value=0o24;var lowpass=this._ctx.createBiquadFilter();lowpass.type="lowpass";lowpass.frequency.value=0o17500;node.connect(highpass);highpass.connect(lowpass);lowpass.connect(this._ctx.destination);};AudioRenderer.prototype.storeSamples=function(samples){var e_1,_a;try{for(var samples_1=__values(samples),samples_1_1=samples_1.next();!samples_1_1.done;samples_1_1=samples_1.next()){var sample=samples_1_1.value;this._waveBuffer[this._writeIndex++]=sample;if(this._writeIndex>=this._waveBuffer.length){this._writeIndex=(0x75bcd15-0O726746425);}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(samples_1_1&&!samples_1_1.done&&(_a=samples_1.return))_a.call(samples_1);}finally{if(e_1)throw e_1.error;}}};AudioRenderer.prototype.closeAudio=function(){this._suspended=false;if(this._ctx){this._ctx.close();this._ctx=undefined;}};AudioRenderer.prototype.suspendAudio=function(){if(this._suspended){return;}if(this._ctx){this._ctx.suspend();}this._suspended=true;};AudioRenderer.prototype.resumeAudio=function(){if(!this._suspended){return;}if(this._ctx){this._ctx.resume();}this._suspended=false;};AudioRenderer.prototype._processAudio=function(renderer,e){var output=e.outputBuffer.getChannelData((0x75bcd15-0O726746425));for(var i=(0x75bcd15-0O726746425);i<exports.AUDIO_BUFFER_SIZE;i++){output[i]=renderer._waveBuffer[renderer._readIndex++];if(renderer._readIndex>=renderer._waveBuffer.length){renderer._readIndex=(0x75bcd15-0O726746425);}}};return AudioRenderer;}());exports.AudioRenderer=AudioRenderer;},{}],3:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var SpectrumViewModelBase_1=require("./SpectrumViewModelBase");var LiteEvent_1=require("../emulator/LiteEvent");var ChildViewModelBase=(function(_super){__extends(ChildViewModelBase,_super);function ChildViewModelBase(_parent){var _this=_super.call(this)||this;_this._parent=_parent;_this._gotFocus=new LiteEvent_1.LiteEvent();_this._lostFocus=new LiteEvent_1.LiteEvent();_parent.addChild(_this);return _this;}Object.defineProperty(ChildViewModelBase.prototype,"parent",{get:function(){return this._parent;},enumerable:true,configurable:true});Object.defineProperty(ChildViewModelBase.prototype,"paneId",{get:function(){return "#no-pane-tag";},enumerable:true,configurable:true});Object.defineProperty(ChildViewModelBase.prototype,"paneHeaderId",{get:function(){return "#no-header-tag";},enumerable:true,configurable:true});Object.defineProperty(ChildViewModelBase.prototype,"gotFocus",{get:function(){return this._gotFocus.expose();},enumerable:true,configurable:true});Object.defineProperty(ChildViewModelBase.prototype,"lostFocus",{get:function(){return this._lostFocus.expose();},enumerable:true,configurable:true});Object.defineProperty(ChildViewModelBase.prototype,"canReceiveFocus",{get:function(){return true;},enumerable:true,configurable:true});ChildViewModelBase.prototype.onKeydown=function(e){};ChildViewModelBase.prototype.onKeyup=function(e){};ChildViewModelBase.prototype.onKeypress=function(e){};ChildViewModelBase.prototype._raiseGotFocus=function(){this._gotFocus.trigger();};ChildViewModelBase.prototype._raiseLostFocus=function(){this._lostFocus.trigger();};ChildViewModelBase.prototype.init=function(){_super.prototype.init.call(this);this._gotFocus.on(function(){});this._lostFocus.on(function(){});};return ChildViewModelBase;}(SpectrumViewModelBase_1.SpectrumViewModelBase));exports.ChildViewModelBase=ChildViewModelBase;},{"../emulator/LiteEvent":8,"./SpectrumViewModelBase":9}],4:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var SpectrumViewModelBase_1=require("./SpectrumViewModelBase");var ContainerViewModelBase=(function(_super){__extends(ContainerViewModelBase,_super);function ContainerViewModelBase(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this._childViewModels=[];return _this;}Object.defineProperty(ContainerViewModelBase.prototype,"childViewModels",{get:function(){return this._childViewModels;},enumerable:true,configurable:true});ContainerViewModelBase.prototype.addChild=function(child){var _this=this;this._childViewModels.push(child);$(child.paneId).click(function(e){_this.setFocus(child);});$(child.paneHeaderId).click(function(e){_this.setFocus(child);});};ContainerViewModelBase.prototype.forEachChild=function(action){this._childViewModels.forEach(function(child){return action(child);});};Object.defineProperty(ContainerViewModelBase.prototype,"focusedChild",{get:function(){return this._focusedChild;},enumerable:true,configurable:true});ContainerViewModelBase.prototype.setFocus=function(child){var _this=this;if(child===this._focusedChild||!child.canReceiveFocus){return;}if(this._focusedChild){this._focusedChild._raiseLostFocus();}this._focusedChild=child;setTimeout(function(){if(_this&&_this._focusedChild){_this._focusedChild._raiseGotFocus();}},(0x75bcd15-0O726746425));};return ContainerViewModelBase;}(SpectrumViewModelBase_1.SpectrumViewModelBase));exports.ContainerViewModelBase=ContainerViewModelBase;},{"./SpectrumViewModelBase":9}],5:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var SpectrumMachine_1=require("../spectrumemu/machine/SpectrumMachine");var DeviceTypes_1=require("../spectrumemu/devices/DeviceTypes");var SpectrumRomProvider_1=require("../spectrumemu/devices/rom/SpectrumRomProvider");var KeyboardProvider_1=require("../spectrumemu/devices/keyboard/KeyboardProvider");var TapeProvider_1=require("../spectrumemu/devices/tape/TapeProvider");var SpectrumDebugInfoProvider_1=require("../spectrumemu/machine/SpectrumDebugInfoProvider");SpectrumMachine_1.SpectrumMachine.registerProvider(DeviceTypes_1.PT_ROM,function(){return new SpectrumRomProvider_1.SpectrumRomProvider();});SpectrumMachine_1.SpectrumMachine.registerProvider(DeviceTypes_1.PT_KEYBOARD,function(){return new KeyboardProvider_1.KeyboardProvider();});SpectrumMachine_1.SpectrumMachine.registerProvider(DeviceTypes_1.PT_TAPE,function(){return new TapeProvider_1.TapeProvider();});SpectrumMachine_1.SpectrumMachine.registerProvider(DeviceTypes_1.PT_DEBUGINFO,function(){return new SpectrumDebugInfoProvider_1.SpectrumDebugInfoProvider();});exports.zxSpectrumMachine=SpectrumMachine_1.SpectrumMachine.createMachine("ZX Spectrum 48K","PAL");},{"../spectrumemu/devices/DeviceTypes":29,"../spectrumemu/devices/keyboard/KeyboardProvider":46,"../spectrumemu/devices/rom/SpectrumRomProvider":83,"../spectrumemu/devices/tape/TapeProvider":111,"../spectrumemu/machine/SpectrumDebugInfoProvider":161,"../spectrumemu/machine/SpectrumMachine":164}],6:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var UiConstants_1=require("./UiConstants");var AudioRenderer_1=require("./AudioRenderer");var ChildViewModelBase_1=require("./ChildViewModelBase");var VmState_1=require("../spectrumemu/machine/VmState");var EmulatorMachine_1=require("./EmulatorMachine");var EMULATOR_BODY="#emulator-screen";var EmulatorPaneViewModel=(function(_super){__extends(EmulatorPaneViewModel,_super);function EmulatorPaneViewModel(parent){var _this=_super.call(this,parent)||this;_this._palette=[];_this._imageBuffer=new ArrayBuffer((0x75bcd15-0O726746425));_this._imageBuffer8=new Uint8Array((0x75bcd15-0O726746425));_this._pixelData=new Uint32Array((0x75bcd15-0O726746425));_this._intervalHandle=null;_this._audioSamplesPerFrame=(0x75bcd15-0O726746425);EmulatorMachine_1.zxSpectrumMachine.vmBeeperSamplesEmitted.on(function(samples){if(samples){_this.storeBeeperSamples(samples);}});return _this;}Object.defineProperty(EmulatorPaneViewModel.prototype,"paneId",{get:function(){return EMULATOR_BODY;},enumerable:true,configurable:true});EmulatorPaneViewModel.prototype.init=function(){var _this=this;_super.prototype.init.call(this);this.gotFocus.on(function(){_this._setKeyboardOverlayState(true);});this.lostFocus.on(function(){_this._setKeyboardOverlayState(false);});};EmulatorPaneViewModel.prototype.onKeydown=function(e){EmulatorMachine_1.zxSpectrumMachine.spectrumVm.keyboardProvider.keydown({keyCode:e.keyCode,altKey:e.altKey,ctrlKey:e.ctrlKey,shiftKey:e.shiftKey});};EmulatorPaneViewModel.prototype.onKeyup=function(e){EmulatorMachine_1.zxSpectrumMachine.spectrumVm.keyboardProvider.keyup({keyCode:e.keyCode,altKey:e.altKey,ctrlKey:e.ctrlKey,shiftKey:e.shiftKey});};EmulatorPaneViewModel.prototype.setAudioSamplesPerFrame=function(samplesPerFrame){this._audioSamplesPerFrame=samplesPerFrame;};EmulatorPaneViewModel.prototype.storeBeeperSamples=function(samples){if(this._beeperRenderer){this._beeperRenderer.storeSamples(samples);}};EmulatorPaneViewModel.prototype.configureScreen=function(message){if(!this.parent||!this.parent.screenConfig){return;}this._palette=message.palette.slice((0x75bcd15-0O726746425));var dataLen=this.parent.screenConfig.screenLines*this.parent.screenConfig.screenWidth*(0x5E30A78-0O570605164);this._imageBuffer=new ArrayBuffer(dataLen);this._imageBuffer8=new Uint8Array(this._imageBuffer);this._pixelData=new Uint32Array(this._imageBuffer);};EmulatorPaneViewModel.prototype.provideAudio=function(){if(!this._beeperRenderer){this._beeperRenderer=new AudioRenderer_1.AudioRenderer(this._audioSamplesPerFrame);}this._beeperRenderer.resumeAudio();if(!this._soundRenderer){this._soundRenderer=new AudioRenderer_1.AudioRenderer(this._audioSamplesPerFrame);}this._soundRenderer.resumeAudio();};EmulatorPaneViewModel.prototype.suspendAudio=function(){if(this._beeperRenderer){this._beeperRenderer.suspendAudio();}if(this._soundRenderer){this._soundRenderer.suspendAudio();}};EmulatorPaneViewModel.prototype.resumeAudio=function(){if(this._beeperRenderer){this._beeperRenderer.resumeAudio();}if(this._soundRenderer){this._soundRenderer.resumeAudio();}};EmulatorPaneViewModel.prototype.closeAudio=function(){if(this._beeperRenderer){this._beeperRenderer.closeAudio();this._beeperRenderer=undefined;}if(this._soundRenderer){this._soundRenderer.closeAudio();this._soundRenderer=undefined;}};EmulatorPaneViewModel.prototype.onVmStateChanged=function(args){var _this=this;_super.prototype.onVmStateChanged.call(this,args);var showOff=false;this._setOverlayState();if(args.newState===VmState_1.VmState.Running){this.suspendAudio();this.resumeAudio();}else if(args.newState===VmState_1.VmState.Paused){setTimeout(function(){return _this.suspendAudio();},0o24);}else if(args.newState===VmState_1.VmState.None||args.newState===VmState_1.VmState.Stopped){showOff=true;}if(this._intervalHandle){clearInterval(this._intervalHandle);this._intervalHandle=null;}if(showOff){this._intervalHandle=setInterval(function(){_this._fillShowOffDisplayData();},0o24);}};EmulatorPaneViewModel.prototype.onScreenRefreshed=function(args){_super.prototype.onScreenRefreshed.call(this,args);this._displayScreenData(args.screenData);};EmulatorPaneViewModel.prototype._setOverlayState=function(){var s=this.parent.lastVmState;$(UiConstants_1.OVERLAY_TEXT).css("display",s===VmState_1.VmState.None||s===VmState_1.VmState.Paused||s===VmState_1.VmState.Stopped?"inline-block":"none");$(UiConstants_1.OVERLAY_TEXT).text(s===(0x75bcd15-0O726746425)?"Not started yet":s===(0O334664274-0x37368B9)?"Paused":"Stopped");};EmulatorPaneViewModel.prototype._setKeyboardOverlayState=function(attached){if(this.parent.lastVmState!==VmState_1.VmState.Running){return;}$(UiConstants_1.OVERLAY_TEXT).css("display",attached?"none":"inline-block");$(UiConstants_1.OVERLAY_TEXT).text(attached?"":"Keyboard detached");};EmulatorPaneViewModel.prototype._displayScreenData=function(screenData,fillerAction){if(fillerAction===void (0x75bcd15-0O726746425)){fillerAction=undefined;}var shadowCanvas=$(UiConstants_1.SHADOW_SCREEN)[(0x75bcd15-0O726746425)];if(!shadowCanvas)return;var shadowCtx=shadowCanvas.getContext("2d");if(!shadowCtx){return;}var shadowImageData=shadowCtx.getImageData((0x75bcd15-0O726746425),(0x75bcd15-0O726746425),shadowCanvas.width,shadowCanvas.height);var canvas=$(UiConstants_1.SCREEN)[(0x75bcd15-0O726746425)];var ctx=canvas.getContext("2d");var pixelData=this._pixelData;var palette=this._palette;if(!canvas||!shadowImageData||!this.parent.screenConfig){return;}var j=(0x75bcd15-0O726746425);if(fillerAction){fillerAction(pixelData);}else{for(var i=(0x75bcd15-0O726746425);i<screenData.length;i++){var code=screenData[i];pixelData[j++]=palette[code&0o17];}}shadowImageData.data.set(this._imageBuffer8);shadowCtx.putImageData(shadowImageData,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425));if(ctx){ctx.imageSmoothingEnabled=false;ctx.drawImage(shadowCanvas,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),canvas.width,canvas.height);}};EmulatorPaneViewModel.prototype._fillNoise=function(pixelData){for(var i=(0x75bcd15-0O726746425);i<pixelData.length;i++){var rndNum=(Math.floor(Math.random()*0o200)+0o100)&0o377;var value=0o37700000000|(rndNum<<0o20)|(rndNum<<(0O347010110&0x463A71D))|rndNum;pixelData[i]=value;}};EmulatorPaneViewModel.prototype._fillShowOffDisplayData=function(){this._displayScreenData(null,this._fillNoise);};return EmulatorPaneViewModel;}(ChildViewModelBase_1.ChildViewModelBase));exports.EmulatorPaneViewModel=EmulatorPaneViewModel;},{"../spectrumemu/machine/VmState":167,"./AudioRenderer":2,"./ChildViewModelBase":3,"./EmulatorMachine":5,"./UiConstants":11}],7:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();var __awaiter=(this&&this.__awaiter)||function(thisArg,_arguments,P,generator){return new (P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value);}).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __generator=(this&&this.__generator)||function(thisArg,body){var _={label:0,sent:function(){if(t[(0x75bcd15-0O726746425)]&(0O57060516-0xbc614d))throw t[(0O57060516-0xbc614d)];return t[(0O57060516-0xbc614d)];},trys:[],ops:[]},f,y,t,g;return g={next:verb((0x75bcd15-0O726746425)),"throw":verb((0O57060516-0xbc614d)),"return":verb((15658734^0O73567354))},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this;}),g;function verb(n){return function(v){return step([n,v]);};}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=(0O57060516-0xbc614d),y&&(t=op[(0x75bcd15-0O726746425)]&(15658734^0O73567354)?y["return"]:op[(0x75bcd15-0O726746425)]?y["throw"]||((t=y["return"])&&t.call(y),(0x75bcd15-0O726746425)):y.next)&&!(t=t.call(y,op[(0O57060516-0xbc614d)])).done)return t;if(y=(0x75bcd15-0O726746425),t)op=[op[(0x75bcd15-0O726746425)]&(15658734^0O73567354),t.value];switch(op[(0x75bcd15-0O726746425)]){case (0x75bcd15-0O726746425):case (0O57060516-0xbc614d):t=op;break;case (0x5E30A78-0O570605164):_.label++;return {value:op[(0O57060516-0xbc614d)],done:false};case (0O507646144^0x51F4C61):_.label++;y=op[(0O57060516-0xbc614d)];op=[(0x75bcd15-0O726746425)];continue;case (0x9D8DE4-0O47306735):op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>(0x75bcd15-0O726746425)&&t[t.length-(0O57060516-0xbc614d)])&&(op[(0x75bcd15-0O726746425)]===(1011010-0O3666474)||op[(0x75bcd15-0O726746425)]===(15658734^0O73567354))){_=(0x75bcd15-0O726746425);continue;}if(op[(0x75bcd15-0O726746425)]===(0O334664274-0x37368B9)&&(!t||(op[(0O57060516-0xbc614d)]>t[(0x75bcd15-0O726746425)]&&op[(0O57060516-0xbc614d)]<t[(0O334664274-0x37368B9)]))){_.label=op[(0O57060516-0xbc614d)];break;}if(op[(0x75bcd15-0O726746425)]===(1011010-0O3666474)&&_.label<t[(0O57060516-0xbc614d)]){_.label=t[(0O57060516-0xbc614d)];t=op;break;}if(t&&_.label<t[(15658734^0O73567354)]){_.label=t[(15658734^0O73567354)];_.ops.push(op);break;}if(t[(15658734^0O73567354)])_.ops.pop();_.trys.pop();continue;}op=body.call(thisArg,_);}catch(e){op=[(1011010-0O3666474),e];y=(0x75bcd15-0O726746425);}finally{f=t=(0x75bcd15-0O726746425);}if(op[(0x75bcd15-0O726746425)]&(0O507646144^0x51F4C61))throw op[(0O57060516-0xbc614d)];return {value:op[(0x75bcd15-0O726746425)]?op[(0O57060516-0xbc614d)]:void (0x75bcd15-0O726746425),done:true};}};Object.defineProperty(exports,"__esModule",{value:true});var ToolbarViewModel_1=require("./ToolbarViewModel");var UiConstants_1=require("./UiConstants");var EmulatorPaneViewModel_1=require("./EmulatorPaneViewModel");var ContainerViewModelBase_1=require("./ContainerViewModelBase");var VmState_1=require("../spectrumemu/machine/VmState");var EmulatorMachine_1=require("./EmulatorMachine");var EmulatorToolViewModel=(function(_super){__extends(EmulatorToolViewModel,_super);function EmulatorToolViewModel(){var _this=_super.call(this)||this;_this._lastVmState=VmState_1.VmState.None;_this._toolbar=new ToolbarViewModel_1.ToolbarViewModel(_this);_this._emulatorPane=new EmulatorPaneViewModel_1.EmulatorPaneViewModel(_this);return _this;}Object.defineProperty(EmulatorToolViewModel.prototype,"toolbarPane",{get:function(){return this._toolbar;},enumerable:true,configurable:true});Object.defineProperty(EmulatorToolViewModel.prototype,"emulatorPane",{get:function(){return this._emulatorPane;},enumerable:true,configurable:true});Object.defineProperty(EmulatorToolViewModel.prototype,"screenConfig",{get:function(){return this._screenConfig;},set:function(value){this._screenConfig=value;},enumerable:true,configurable:true});Object.defineProperty(EmulatorToolViewModel.prototype,"lastVmState",{get:function(){return this._lastVmState;},enumerable:true,configurable:true});EmulatorToolViewModel.prototype.init=function(){this._statusPanel=$("#emulator-status");this.setDisplayLayout();this._initializeUiEventHandlers();this.forEachChild(function(child){return child.init();});};EmulatorToolViewModel.prototype.setStatus=function(info){if(this._statusPanel){this._statusPanel.text(info);}};EmulatorToolViewModel.prototype.onVmStateChanged=function(args){this._lastVmState=args.newState;_super.prototype.onVmStateChanged.call(this,args);if(args.isFirstStart){this._frames=(0x75bcd15-0O726746425);this._sumProcessingTime=(0x75bcd15-0O726746425);}this.forEachChild(function(child){return child.onVmStateChanged(args);});};EmulatorToolViewModel.prototype.onScreenRefreshed=function(args){var _this=this;_super.prototype.onScreenRefreshed.call(this,args);this._frames++;this._sumProcessingTime+=EmulatorMachine_1.zxSpectrumMachine.lastFrameProcessingTime;this.setStatus("Frames: "+args.frame+", Processing Time: "+EmulatorMachine_1.zxSpectrumMachine.lastFrameProcessingTime+" ms, Avg: "+this._sumProcessingTime/this._frames);this.forEachChild(function(child){return __awaiter(_this,void (0x75bcd15-0O726746425),void (0x75bcd15-0O726746425),function(){return __generator(this,function(_a){switch(_a.label){case (0x75bcd15-0O726746425):return [(0x5E30A78-0O570605164),child.onScreenRefreshed(args)];case (0O57060516-0xbc614d):return [(15658734^0O73567354),_a.sent()];}});});});};EmulatorToolViewModel.prototype.setDisplayLayout=function(){if(!this._screenConfig){return;}var screenWidth=this._screenConfig.screenWidth;var screenHeight=this._screenConfig.screenLines;var shadowCanvas=$(UiConstants_1.SHADOW_SCREEN)[(0x75bcd15-0O726746425)];$(UiConstants_1.SHADOW_SCREEN).width(screenWidth).height(screenHeight);var shadowCtx=shadowCanvas.getContext("2d");if(shadowCtx){shadowCtx.canvas.width=screenWidth;shadowCtx.canvas.height=screenHeight;}var zoomFactor=(15658734^0O73567354);var canvasWidth=screenWidth*zoomFactor;var canvasHeight=screenHeight*zoomFactor;var canvas=$(UiConstants_1.SCREEN)[(0x75bcd15-0O726746425)];var ctx=canvas.getContext("2d");if(ctx){ctx.canvas.width=canvasWidth;ctx.canvas.height=canvasHeight;}$(UiConstants_1.EMULATOR_COLUMN).width(canvasWidth);};EmulatorToolViewModel.prototype._initializeUiEventHandlers=function(){var _this=this;$(window).resize(function(){_this.setDisplayLayout();_this.forEachChild(function(child){return child.onResize();});});$("body").keydown(function(e){var target=_this.focusedChild||_this.emulatorPane;target.onKeydown(e);});$("body").keyup(function(e){var target=_this.focusedChild||_this.emulatorPane;target.onKeyup(e);});$("body").keypress(function(e){var target=_this.focusedChild||_this.emulatorPane;target.onKeypress(e);});};return EmulatorToolViewModel;}(ContainerViewModelBase_1.ContainerViewModelBase));exports.EmulatorToolViewModel=EmulatorToolViewModel;},{"../spectrumemu/machine/VmState":167,"./ContainerViewModelBase":4,"./EmulatorMachine":5,"./EmulatorPaneViewModel":6,"./ToolbarViewModel":10,"./UiConstants":11}],8:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var LiteEvent=(function(){function LiteEvent(){this._handlers=[];}LiteEvent.prototype.on=function(handler){this._handlers.push(handler);};LiteEvent.prototype.off=function(handler){this._handlers=this._handlers.filter(function(h){return h!==handler;});};LiteEvent.prototype.trigger=function(data){this._handlers.slice((0x75bcd15-0O726746425)).forEach(function(h){return h(data);});};Object.defineProperty(LiteEvent.prototype,"handlers",{get:function(){return this._handlers.length;},enumerable:true,configurable:true});LiteEvent.prototype.expose=function(){return this;};return LiteEvent;}());exports.LiteEvent=LiteEvent;},{}],9:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var VmState_1=require("../spectrumemu/machine/VmState");var EmulatorMachine_1=require("./EmulatorMachine");var SpectrumViewModelBase=(function(){function SpectrumViewModelBase(){var _this=this;this._state=VmState_1.VmState.None;this._frameCount=(0x75bcd15-0O726746425);EmulatorMachine_1.zxSpectrumMachine.vmStateChanged.on(function(arg){_this.onVmStateChanged({oldState:arg.oldState,newState:arg.newState,isFirstStart:EmulatorMachine_1.zxSpectrumMachine.isFirstStart,isFirstPause:EmulatorMachine_1.zxSpectrumMachine.isFirstPause,justRestoredState:EmulatorMachine_1.zxSpectrumMachine.justRestoredState});});EmulatorMachine_1.zxSpectrumMachine.vmScreenRefreshed.on(function(){return _this._onScreenRefresh();});}Object.defineProperty(SpectrumViewModelBase.prototype,"state",{get:function(){return this._state;},enumerable:true,configurable:true});SpectrumViewModelBase.prototype.init=function(){};SpectrumViewModelBase.prototype.onResize=function(){};SpectrumViewModelBase.prototype.onFirstStart=function(){};SpectrumViewModelBase.prototype.onStart=function(){};SpectrumViewModelBase.prototype.onPaused=function(){};SpectrumViewModelBase.prototype.onFirstPaused=function(){};SpectrumViewModelBase.prototype.onStopped=function(){};SpectrumViewModelBase.prototype.onScreenRefreshed=function(args){};SpectrumViewModelBase.prototype.onVmStateChanged=function(args){var state=(this._state=args.newState);if(state===VmState_1.VmState.Running){if(args.isFirstStart||args.justRestoredState){this.onFirstStart();}this.onStart();}else if(state===VmState_1.VmState.Paused){if(args.isFirstPause||args.justRestoredState){this.onFirstPaused();}this.onPaused();}else if(state===VmState_1.VmState.Stopped){this.onStopped();}};SpectrumViewModelBase.prototype.updateView=function(){};SpectrumViewModelBase.prototype._onScreenRefresh=function(){this._frameCount++;var spectrumVm=EmulatorMachine_1.zxSpectrumMachine.spectrumVm;var screenDevice=spectrumVm.screenDevice;var buffer=screenDevice.getPixelBuffer();this.onScreenRefreshed({frame:this._frameCount,screenData:buffer,ts:new Date().getTime()});};return SpectrumViewModelBase;}());exports.SpectrumViewModelBase=SpectrumViewModelBase;},{"../spectrumemu/machine/VmState":167,"./EmulatorMachine":5}],10:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();var __awaiter=(this&&this.__awaiter)||function(thisArg,_arguments,P,generator){return new (P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value);}).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __generator=(this&&this.__generator)||function(thisArg,body){var _={label:0,sent:function(){if(t[(0x75bcd15-0O726746425)]&(0O57060516-0xbc614d))throw t[(0O57060516-0xbc614d)];return t[(0O57060516-0xbc614d)];},trys:[],ops:[]},f,y,t,g;return g={next:verb((0x75bcd15-0O726746425)),"throw":verb((0O57060516-0xbc614d)),"return":verb((15658734^0O73567354))},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this;}),g;function verb(n){return function(v){return step([n,v]);};}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=(0O57060516-0xbc614d),y&&(t=op[(0x75bcd15-0O726746425)]&(15658734^0O73567354)?y["return"]:op[(0x75bcd15-0O726746425)]?y["throw"]||((t=y["return"])&&t.call(y),(0x75bcd15-0O726746425)):y.next)&&!(t=t.call(y,op[(0O57060516-0xbc614d)])).done)return t;if(y=(0x75bcd15-0O726746425),t)op=[op[(0x75bcd15-0O726746425)]&(15658734^0O73567354),t.value];switch(op[(0x75bcd15-0O726746425)]){case (0x75bcd15-0O726746425):case (0O57060516-0xbc614d):t=op;break;case (0x5E30A78-0O570605164):_.label++;return {value:op[(0O57060516-0xbc614d)],done:false};case (0O507646144^0x51F4C61):_.label++;y=op[(0O57060516-0xbc614d)];op=[(0x75bcd15-0O726746425)];continue;case (0x9D8DE4-0O47306735):op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>(0x75bcd15-0O726746425)&&t[t.length-(0O57060516-0xbc614d)])&&(op[(0x75bcd15-0O726746425)]===(1011010-0O3666474)||op[(0x75bcd15-0O726746425)]===(15658734^0O73567354))){_=(0x75bcd15-0O726746425);continue;}if(op[(0x75bcd15-0O726746425)]===(0O334664274-0x37368B9)&&(!t||(op[(0O57060516-0xbc614d)]>t[(0x75bcd15-0O726746425)]&&op[(0O57060516-0xbc614d)]<t[(0O334664274-0x37368B9)]))){_.label=op[(0O57060516-0xbc614d)];break;}if(op[(0x75bcd15-0O726746425)]===(1011010-0O3666474)&&_.label<t[(0O57060516-0xbc614d)]){_.label=t[(0O57060516-0xbc614d)];t=op;break;}if(t&&_.label<t[(15658734^0O73567354)]){_.label=t[(15658734^0O73567354)];_.ops.push(op);break;}if(t[(15658734^0O73567354)])_.ops.pop();_.trys.pop();continue;}op=body.call(thisArg,_);}catch(e){op=[(1011010-0O3666474),e];y=(0x75bcd15-0O726746425);}finally{f=t=(0x75bcd15-0O726746425);}if(op[(0x75bcd15-0O726746425)]&(0O507646144^0x51F4C61))throw op[(0O57060516-0xbc614d)];return {value:op[(0x75bcd15-0O726746425)]?op[(0O57060516-0xbc614d)]:void (0x75bcd15-0O726746425),done:true};}};Object.defineProperty(exports,"__esModule",{value:true});var UiConstants_1=require("./UiConstants");var ChildViewModelBase_1=require("./ChildViewModelBase");var VmState_1=require("../spectrumemu/machine/VmState");var ExecuteCycleOptions_1=require("../spectrumemu/machine/ExecuteCycleOptions");var EmulationMode_1=require("../spectrumemu/machine/EmulationMode");var SpectNetConfig_1=require("../config/SpectNetConfig");var EmulatorMachine_1=require("./EmulatorMachine");var AsyncUtils_1=require("../spectrumemu/utils/AsyncUtils");var SpectrumKeyCode_1=require("../spectrumemu/devices/keyboard/SpectrumKeyCode");var EmulatedKeyStroke_1=require("../spectrumemu/devices/keyboard/EmulatedKeyStroke");var TOOLBAR="#toolbar";var ToolbarViewModel=(function(_super){__extends(ToolbarViewModel,_super);function ToolbarViewModel(parent){var _this=_super.call(this,parent)||this;_this._anyButtonDown=false;return _this;}Object.defineProperty(ToolbarViewModel.prototype,"paneId",{get:function(){return TOOLBAR;},enumerable:true,configurable:true});ToolbarViewModel.prototype.init=function(){var _this=this;this._initButtonEvents();this._updateVmControlButtons(VmState_1.VmState.None);this.gotFocus.on(function(){_this.parent.setFocus(_this.parent.emulatorPane);});};ToolbarViewModel.prototype.onVmStateChanged=function(args){_super.prototype.onVmStateChanged.call(this,args);this._lastState=args.newState;this._updateVmControlButtons(args.newState);};ToolbarViewModel.prototype._initButtonEvents=function(){var _this=this;var self=this;var parent=this.parent;var emulatorPane=parent.emulatorPane;$(UiConstants_1.BUTTON_IDS).addClass("tooltip");$(UiConstants_1.DIS_BUTTON_IDS).addClass("tooltip");$(""+UiConstants_1.ALL_BUTTON_IDS).mouseover(function(e){$(this).find(".tooltiptext").css("visibility","visible").css("opacity","1");}).mouseleave(function(e){$(this).find(".tooltiptext").css("visibility","hidden").css("opacity","0");}).click(function(e){$(this).find(".tooltiptext").css("visibility","hidden").css("opacity","0");});$(UiConstants_1.BUTTON_IDS).mousedown(function(e){if(e.button===(0x75bcd15-0O726746425)){$(this).addClass("down-button");self._anyButtonDown=true;}}).mouseup(function(e){if(self._anyButtonDown){$(UiConstants_1.BUTTON_IDS).removeClass("down-button");self._anyButtonDown=false;}});$("body").mouseleave(function(e){$(UiConstants_1.BUTTON_IDS).removeClass("down-button");self._anyButtonDown=false;});$(UiConstants_1.START).click(function(){_this._startMachine();emulatorPane.provideAudio();});$(UiConstants_1.PAUSE).click(function(){return __awaiter(_this,void (0x75bcd15-0O726746425),void (0x75bcd15-0O726746425),function(){return __generator(this,function(_a){switch(_a.label){case (0x75bcd15-0O726746425):emulatorPane.suspendAudio();return [(0x5E30A78-0O570605164),EmulatorMachine_1.zxSpectrumMachine.pause()];case (0O57060516-0xbc614d):_a.sent();return [(15658734^0O73567354)];}});});});$(UiConstants_1.STOP).click(function(){return __awaiter(_this,void (0x75bcd15-0O726746425),void (0x75bcd15-0O726746425),function(){return __generator(this,function(_a){switch(_a.label){case (0x75bcd15-0O726746425):emulatorPane.closeAudio();return [(0x5E30A78-0O570605164),EmulatorMachine_1.zxSpectrumMachine.stop()];case (0O57060516-0xbc614d):_a.sent();return [(15658734^0O73567354)];}});});});$(UiConstants_1.RESTART).click(function(){return __awaiter(_this,void (0x75bcd15-0O726746425),void (0x75bcd15-0O726746425),function(){return __generator(this,function(_a){switch(_a.label){case (0x75bcd15-0O726746425):emulatorPane.closeAudio();return [(0x5E30A78-0O570605164),EmulatorMachine_1.zxSpectrumMachine.stop()];case (0O57060516-0xbc614d):_a.sent();this._startMachine();emulatorPane.provideAudio();return [(15658734^0O73567354)];}});});});$(UiConstants_1.LOAD_MODE).click(function(){if(_this._lastState!==VmState_1.VmState.None&&_this._lastState!==VmState_1.VmState.Stopped){return;}var fastMode=(SpectNetConfig_1.defaultSpectNetConfig.fastLoad=!SpectNetConfig_1.defaultSpectNetConfig.fastLoad);if(fastMode){$(UiConstants_1.LOAD_MODE).text("Fast Load");}else{$(UiConstants_1.LOAD_MODE).text("Slow Load");}});$(UiConstants_1.PACMAN).click(function(){SpectNetConfig_1.defaultSpectNetConfig.defaultTape="pac-man";$(UiConstants_1.PACMAN).addClass("hilited");$(UiConstants_1.JETSET).removeClass("hilited");});$(UiConstants_1.JETSET).click(function(){SpectNetConfig_1.defaultSpectNetConfig.defaultTape="jet-set-willy";$(UiConstants_1.JETSET).addClass("hilited");$(UiConstants_1.PACMAN).removeClass("hilited");});$(UiConstants_1.TEST_IT).click(function(){return __awaiter(_this,void (0x75bcd15-0O726746425),void (0x75bcd15-0O726746425),function(){return __generator(this,function(_a){switch(_a.label){case (0x75bcd15-0O726746425):SpectNetConfig_1.defaultSpectNetConfig.fastLoad=true;$(UiConstants_1.LOAD_MODE).text("Fast Load");emulatorPane.closeAudio();return [(0x5E30A78-0O570605164),EmulatorMachine_1.zxSpectrumMachine.stop()];case (0O57060516-0xbc614d):_a.sent();this._startMachine();emulatorPane.provideAudio();return [(0x5E30A78-0O570605164),AsyncUtils_1.delay(0o11610)];case (15658734^0O73567354):_a.sent();this._queueKeyStroke((0O334664274-0x37368B9),SpectrumKeyCode_1.SpectrumKeyCode.J);return [(0x5E30A78-0O570605164),AsyncUtils_1.delay(0o620)];case (0O334664274-0x37368B9):_a.sent();this._queueKeyStroke((0O334664274-0x37368B9),SpectrumKeyCode_1.SpectrumKeyCode.P,SpectrumKeyCode_1.SpectrumKeyCode.SShift);return [(0x5E30A78-0O570605164),AsyncUtils_1.delay(0o620)];case (0x5E30A78-0O570605164):_a.sent();this._queueKeyStroke((0O334664274-0x37368B9),SpectrumKeyCode_1.SpectrumKeyCode.P,SpectrumKeyCode_1.SpectrumKeyCode.SShift);return [(0x5E30A78-0O570605164),AsyncUtils_1.delay(0o620)];case (0O507646144^0x51F4C61):_a.sent();this._queueKeyStroke((0O334664274-0x37368B9),SpectrumKeyCode_1.SpectrumKeyCode.Enter);return [(0x5E30A78-0O570605164),AsyncUtils_1.delay(0o72460)];case (1011010-0O3666474):_a.sent();emulatorPane.suspendAudio();return [(0x5E30A78-0O570605164),EmulatorMachine_1.zxSpectrumMachine.pause()];case (0x9D8DE4-0O47306735):_a.sent();return [(15658734^0O73567354)];}});});});};ToolbarViewModel.prototype._updateVmControlButtons=function(vmstate){var none=vmstate===VmState_1.VmState.None;var running=vmstate===VmState_1.VmState.Running;var paused=vmstate===VmState_1.VmState.Paused;var stopped=vmstate===VmState_1.VmState.Stopped;this._showButton(UiConstants_1.START,none||paused||stopped);this._showButton(UiConstants_1.PAUSE,running);this._showButton(UiConstants_1.STOP,running||paused);this._showButton(UiConstants_1.RESTART,running||paused);this._enableButton(UiConstants_1.LOAD_MODE,none||stopped);};ToolbarViewModel.prototype._showButton=function(id,pred){var disId=id+"-disabled";if(pred){$(id).show();$(disId).hide();}else{$(id).hide();$(disId).show();}};ToolbarViewModel.prototype._enableButton=function(id,pred){if(pred){$(id).removeClass("disabled");}else{$(id).addClass("disabled");}};ToolbarViewModel.prototype._startMachine=function(){var config=SpectNetConfig_1.defaultSpectNetConfig;var options=new ExecuteCycleOptions_1.ExecuteCycleOptions(EmulationMode_1.EmulationMode.UntilFrameEnds,undefined,config.fastLoad);EmulatorMachine_1.zxSpectrumMachine.start(options);};ToolbarViewModel.prototype._queueKeyStroke=function(time,primaryCode,secondaryCode){if(secondaryCode===void (0x75bcd15-0O726746425)){secondaryCode=null;}var spectrumVm=EmulatorMachine_1.zxSpectrumMachine.spectrumVm;var currentTact=spectrumVm.cpu.tacts;var lastTact=currentTact+spectrumVm.frameTacts*time*spectrumVm.clockMultiplier;spectrumVm.keyboardProvider.queueKeyPress(new EmulatedKeyStroke_1.EmulatedKeyStroke(currentTact,lastTact,primaryCode,secondaryCode));};return ToolbarViewModel;}(ChildViewModelBase_1.ChildViewModelBase));exports.ToolbarViewModel=ToolbarViewModel;},{"../config/SpectNetConfig":1,"../spectrumemu/devices/keyboard/EmulatedKeyStroke":40,"../spectrumemu/devices/keyboard/SpectrumKeyCode":49,"../spectrumemu/machine/EmulationMode":156,"../spectrumemu/machine/ExecuteCycleOptions":157,"../spectrumemu/machine/VmState":167,"../spectrumemu/utils/AsyncUtils":169,"./ChildViewModelBase":3,"./EmulatorMachine":5,"./UiConstants":11}],11:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.START="#start";exports.PAUSE="#pause";exports.STOP="#stop";exports.RESTART="#restart";exports.TEST_IT="#test-it";exports.LOAD_MODE="#load-mode";exports.PACMAN="#pac-man";exports.JETSET="#jet-set";exports.BUTTON_NAMES=[exports.START,exports.PAUSE,exports.STOP,exports.RESTART];exports.BUTTON_IDS=exports.BUTTON_NAMES.join(',');exports.DIS_BUTTON_IDS=exports.BUTTON_NAMES.map(function(name){return name+"-disabled";}).join(',');exports.ALL_BUTTON_IDS=exports.BUTTON_IDS+","+exports.DIS_BUTTON_IDS;exports.SHADOW_SCREEN="#shadowscreen";exports.SCREEN="#screen";exports.EMULATOR_COLUMN="#emulator-column";exports.PLAY_OVERLAY="#play-overlay";exports.OVERLAY_TEXT="#overlay-text";},{}],12:[function(require,module,exports){"use strict";var __awaiter=(this&&this.__awaiter)||function(thisArg,_arguments,P,generator){return new (P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value);}).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __generator=(this&&this.__generator)||function(thisArg,body){var _={label:0,sent:function(){if(t[(0x75bcd15-0O726746425)]&(0O57060516-0xbc614d))throw t[(0O57060516-0xbc614d)];return t[(0O57060516-0xbc614d)];},trys:[],ops:[]},f,y,t,g;return g={next:verb((0x75bcd15-0O726746425)),"throw":verb((0O57060516-0xbc614d)),"return":verb((15658734^0O73567354))},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this;}),g;function verb(n){return function(v){return step([n,v]);};}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=(0O57060516-0xbc614d),y&&(t=op[(0x75bcd15-0O726746425)]&(15658734^0O73567354)?y["return"]:op[(0x75bcd15-0O726746425)]?y["throw"]||((t=y["return"])&&t.call(y),(0x75bcd15-0O726746425)):y.next)&&!(t=t.call(y,op[(0O57060516-0xbc614d)])).done)return t;if(y=(0x75bcd15-0O726746425),t)op=[op[(0x75bcd15-0O726746425)]&(15658734^0O73567354),t.value];switch(op[(0x75bcd15-0O726746425)]){case (0x75bcd15-0O726746425):case (0O57060516-0xbc614d):t=op;break;case (0x5E30A78-0O570605164):_.label++;return {value:op[(0O57060516-0xbc614d)],done:false};case (0O507646144^0x51F4C61):_.label++;y=op[(0O57060516-0xbc614d)];op=[(0x75bcd15-0O726746425)];continue;case (0x9D8DE4-0O47306735):op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>(0x75bcd15-0O726746425)&&t[t.length-(0O57060516-0xbc614d)])&&(op[(0x75bcd15-0O726746425)]===(1011010-0O3666474)||op[(0x75bcd15-0O726746425)]===(15658734^0O73567354))){_=(0x75bcd15-0O726746425);continue;}if(op[(0x75bcd15-0O726746425)]===(0O334664274-0x37368B9)&&(!t||(op[(0O57060516-0xbc614d)]>t[(0x75bcd15-0O726746425)]&&op[(0O57060516-0xbc614d)]<t[(0O334664274-0x37368B9)]))){_.label=op[(0O57060516-0xbc614d)];break;}if(op[(0x75bcd15-0O726746425)]===(1011010-0O3666474)&&_.label<t[(0O57060516-0xbc614d)]){_.label=t[(0O57060516-0xbc614d)];t=op;break;}if(t&&_.label<t[(15658734^0O73567354)]){_.label=t[(15658734^0O73567354)];_.ops.push(op);break;}if(t[(15658734^0O73567354)])_.ops.pop();_.trys.pop();continue;}op=body.call(thisArg,_);}catch(e){op=[(1011010-0O3666474),e];y=(0x75bcd15-0O726746425);}finally{f=t=(0x75bcd15-0O726746425);}if(op[(0x75bcd15-0O726746425)]&(0O507646144^0x51F4C61))throw op[(0O57060516-0xbc614d)];return {value:op[(0x75bcd15-0O726746425)]?op[(0O57060516-0xbc614d)]:void (0x75bcd15-0O726746425),done:true};}};Object.defineProperty(exports,"__esModule",{value:true});var EmulatorMachine_1=require("./EmulatorMachine");var EmulatorToolViewModel_1=require("./EmulatorToolViewModel");var Spectrum48ScreenDevice_1=require("../spectrumemu/devices/screen/Spectrum48ScreenDevice");var VmState_1=require("../spectrumemu/machine/VmState");var emulatorViewModel;var spectrumMachine=EmulatorMachine_1.zxSpectrumMachine;$(document).ready(function(){return __awaiter(this,void (0x75bcd15-0O726746425),void (0x75bcd15-0O726746425),function(){var audioCtx,sampleRate,spectrumVm,screenConfig,palette,samplesPerFrame;return __generator(this,function(_a){emulatorViewModel=new EmulatorToolViewModel_1.EmulatorToolViewModel();emulatorViewModel.init();emulatorViewModel.setStatus("Emulator created");audioCtx=new AudioContext();sampleRate=audioCtx.sampleRate;audioCtx.close();spectrumVm=spectrumMachine.spectrumVm;spectrumVm.beeperDevice.overrideSampleRate(sampleRate);if(spectrumVm.soundDevice){spectrumVm.soundDevice.overrideSampleRate(sampleRate);}screenConfig=spectrumVm.screenConfiguration;palette=Spectrum48ScreenDevice_1.SpectrumColors;samplesPerFrame=spectrumVm.beeperDevice.samplesPerFrame;emulatorViewModel.screenConfig=screenConfig;emulatorViewModel.emulatorPane.configureScreen({screenConfig:screenConfig,palette:palette,samplesPerFrame:samplesPerFrame});emulatorViewModel.setDisplayLayout();emulatorViewModel.emulatorPane.setAudioSamplesPerFrame(samplesPerFrame);emulatorViewModel.onVmStateChanged({oldState:VmState_1.VmState.None,newState:VmState_1.VmState.None,isFirstPause:false,isFirstStart:false,justRestoredState:false});return [(15658734^0O73567354)];});});});},{"../spectrumemu/devices/screen/Spectrum48ScreenDevice":93,"../spectrumemu/machine/VmState":167,"./EmulatorMachine":5,"./EmulatorToolViewModel":7}],13:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var DeviceTypeBase=(function(){function DeviceTypeBase(){}return DeviceTypeBase;}());exports.DeviceTypeBase=DeviceTypeBase;},{}],14:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var BranchEvent=(function(){function BranchEvent(OperationAddress,operation,jumpAddress,tacts){this.OperationAddress=OperationAddress;this.operation=operation;this.jumpAddress=jumpAddress;this.tacts=tacts;}return BranchEvent;}());exports.BranchEvent=BranchEvent;},{}],15:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var CpuConfigurationData=(function(){function CpuConfigurationData(){this.baseClockFrequency=(0x75bcd15-0O726746425);this.clockMultiplier=(0x75bcd15-0O726746425);this.supportsNextOperations=false;}CpuConfigurationData.prototype.clone=function(){var cd=new CpuConfigurationData();cd.baseClockFrequency=this.baseClockFrequency;cd.clockMultiplier=this.clockMultiplier;cd.supportsNextOperations=this.supportsNextOperations;return cd;};return CpuConfigurationData;}());exports.CpuConfigurationData=CpuConfigurationData;},{}],16:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceInfoBase_1=require("../devices/DeviceInfoBase");var CpuDeviceInfo=(function(_super){__extends(CpuDeviceInfo,_super);function CpuDeviceInfo(configurationData){return _super.call(this,undefined,configurationData)||this;}return CpuDeviceInfo;}(DeviceInfoBase_1.DeviceInfoBase));exports.CpuDeviceInfo=CpuDeviceInfo;},{"../devices/DeviceInfoBase":28}],17:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var FlagsResetMask;(function(FlagsResetMask){FlagsResetMask[FlagsResetMask["S"]=0o177]="S";FlagsResetMask[FlagsResetMask["Z"]=0o277]="Z";FlagsResetMask[FlagsResetMask["R5"]=0o337]="R5";FlagsResetMask[FlagsResetMask["H"]=0o357]="H";FlagsResetMask[FlagsResetMask["R3"]=0o367]="R3";FlagsResetMask[FlagsResetMask["PV"]=0o373]="PV";FlagsResetMask[FlagsResetMask["N"]=0o375]="N";FlagsResetMask[FlagsResetMask["C"]=0o376]="C";})(FlagsResetMask=exports.FlagsResetMask||(exports.FlagsResetMask={}));},{}],18:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var FlagsSetMask;(function(FlagsSetMask){FlagsSetMask[FlagsSetMask["S"]=0o200]="S";FlagsSetMask[FlagsSetMask["Z"]=0o100]="Z";FlagsSetMask[FlagsSetMask["R5"]=0o40]="R5";FlagsSetMask[FlagsSetMask["H"]=0o20]="H";FlagsSetMask[FlagsSetMask["R3"]=(0O347010110&0x463A71D)]="R3";FlagsSetMask[FlagsSetMask["PV"]=(0x5E30A78-0O570605164)]="PV";FlagsSetMask[FlagsSetMask["N"]=(15658734^0O73567354)]="N";FlagsSetMask[FlagsSetMask["C"]=(0O57060516-0xbc614d)]="C";FlagsSetMask[FlagsSetMask["SZPV"]=0o304]="SZPV";FlagsSetMask[FlagsSetMask["NH"]=0o22]="NH";FlagsSetMask[FlagsSetMask["R3R5"]=0o50]="R3R5";})(FlagsSetMask=exports.FlagsSetMask||(exports.FlagsSetMask={}));},{}],19:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var MemoryStatusArray=(function(){function MemoryStatusArray(){this._memoryBits=[];this.clearAll();}MemoryStatusArray.prototype.clearAll=function(){for(var i=(0x75bcd15-0O726746425);i<0o4000;i++){this._memoryBits[i]=(0x75bcd15-0O726746425);}};MemoryStatusArray.prototype.clearSet=function(start,end){var startPos=start>>(0O507646144^0x51F4C61);var endPos=end>>(0O507646144^0x51F4C61);var firstBit=start%0o40;var lastBit=startPos===endPos?end%0o40:0o37;var mask=(0x75bcd15-0O726746425);for(var i=firstBit;i<=lastBit;i++){mask|=((0O57060516-0xbc614d)<<i);}mask=~mask&0o37777777777;this._memoryBits[startPos]&=mask;if(startPos===endPos){return;}for(var i=startPos+(0O57060516-0xbc614d);i<=endPos-(0O57060516-0xbc614d);i++){this._memoryBits[i]=(0x75bcd15-0O726746425);}mask=(0x75bcd15-0O726746425);for(var i=(0x75bcd15-0O726746425);i<=end%0o40;i++){mask|=((0O57060516-0xbc614d)<<i);}mask=~mask&0o37777777777;this._memoryBits[endPos]&=mask;};MemoryStatusArray.prototype.getBit=function(index){index&=0o177777;var position=index>>(0O507646144^0x51F4C61);var mask=(0O57060516-0xbc614d)<<(index%0o40);return (this._memoryBits[position]&mask)!==(0x75bcd15-0O726746425);};MemoryStatusArray.prototype.touch=function(index){index&=0o177777;var position=index>>(0O507646144^0x51F4C61);var mask=(0O57060516-0xbc614d)<<(index%0o40);this._memoryBits[position]|=mask;};MemoryStatusArray.prototype.touchedAll=function(start,end){start&=0o177777;end&=0o177777;for(var i=start;i<=end;i++){if(!this.getBit(i)){return false;}}return true;};MemoryStatusArray.prototype.touchedAny=function(start,end){start&=0o177777;if(end>0o177777){end=0o177777;}for(var i=start;i<=end;i++){if(this.getBit(i)){return true;}}return false;};return MemoryStatusArray;}());exports.MemoryStatusArray=MemoryStatusArray;},{}],20:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var Registers_1=require("./Registers");var Z80StateFlags_1=require("./Z80StateFlags");var NoopZ80Cpu=(function(){function NoopZ80Cpu(){this.key="Z80Cpu";this.a=(0x75bcd15-0O726746425);this.f=(0x75bcd15-0O726746425);this.af=(0x75bcd15-0O726746425);this.b=(0x75bcd15-0O726746425);this.c=(0x75bcd15-0O726746425);this.bc=(0x75bcd15-0O726746425);this.d=(0x75bcd15-0O726746425);this.e=(0x75bcd15-0O726746425);this.de=(0x75bcd15-0O726746425);this.h=(0x75bcd15-0O726746425);this.l=(0x75bcd15-0O726746425);this.hl=(0x75bcd15-0O726746425);this._af_=(0x75bcd15-0O726746425);this._bc_=(0x75bcd15-0O726746425);this._de_=(0x75bcd15-0O726746425);this._hl_=(0x75bcd15-0O726746425);this.i=(0x75bcd15-0O726746425);this.r=(0x75bcd15-0O726746425);this.ir=(0x75bcd15-0O726746425);this.pc=(0x75bcd15-0O726746425);this.sp=(0x75bcd15-0O726746425);this.xh=(0x75bcd15-0O726746425);this.xl=(0x75bcd15-0O726746425);this.ix=(0x75bcd15-0O726746425);this.yh=(0x75bcd15-0O726746425);this.yl=(0x75bcd15-0O726746425);this.iy=(0x75bcd15-0O726746425);this.wzh=(0x75bcd15-0O726746425);this.wzl=(0x75bcd15-0O726746425);this.wz=(0x75bcd15-0O726746425);this.sFlag=false;this.zFlag=false;this.r5Flag=false;this.hFlag=false;this.r3Flag=false;this.pvFlag=false;this.nFlag=false;this.cFlag=false;this.tacts=(0x75bcd15-0O726746425);this.registers=new Registers_1.Registers();this.stateFlags=Z80StateFlags_1.Z80StateFlags.None;this.useGateArrayContention=false;this.iff1=false;this.iff2=false;this.interruptMode=(0x75bcd15-0O726746425);this.isInterruptBlocked=false;this.isInOpExecution=false;this.allowExtendedInstructionSet=false;}NoopZ80Cpu.prototype.exchangeAfSet=function(){};NoopZ80Cpu.prototype.exchangeRegisterSet=function(){};NoopZ80Cpu.prototype.getReg8=function(index){return (0x75bcd15-0O726746425);};NoopZ80Cpu.prototype.setReg8=function(index,value){};NoopZ80Cpu.prototype.getReg16=function(index){return (0x75bcd15-0O726746425);};NoopZ80Cpu.prototype.setReg16=function(index,value){};NoopZ80Cpu.prototype.incPc=function(){};NoopZ80Cpu.prototype.reset=function(){};NoopZ80Cpu.prototype.getDeviceState=function(){};NoopZ80Cpu.prototype.restoreDeviceState=function(state){};NoopZ80Cpu.prototype.delay=function(tacts){};NoopZ80Cpu.prototype.executeCpuCycle=function(){};NoopZ80Cpu.prototype.getCallInstructionLength=function(){return (0x75bcd15-0O726746425);};NoopZ80Cpu.prototype.setResetSignal=function(){};NoopZ80Cpu.prototype.releaseResetSignal=function(){};return NoopZ80Cpu;}());exports.NoopZ80Cpu=NoopZ80Cpu;},{"./Registers":23,"./Z80StateFlags":27}],21:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var OpIndexMode;(function(OpIndexMode){OpIndexMode[OpIndexMode["None"]=(0x75bcd15-0O726746425)]="None";OpIndexMode[OpIndexMode["IX"]=(0O57060516-0xbc614d)]="IX";OpIndexMode[OpIndexMode["IY"]=(15658734^0O73567354)]="IY";})(OpIndexMode=exports.OpIndexMode||(exports.OpIndexMode={}));},{}],22:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var OpPrefixMode;(function(OpPrefixMode){OpPrefixMode[OpPrefixMode["None"]=(0x75bcd15-0O726746425)]="None";OpPrefixMode[OpPrefixMode["Extended"]=(0O57060516-0xbc614d)]="Extended";OpPrefixMode[OpPrefixMode["Bit"]=(15658734^0O73567354)]="Bit";})(OpPrefixMode=exports.OpPrefixMode||(exports.OpPrefixMode={}));},{}],23:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var FlagsSetMask_1=require("./FlagsSetMask");var Registers=(function(){function Registers(){this._a=0o377;this._f=0o377;this._b=0o377;this._c=0o377;this._de=0o177777;this._hl=0o177777;this._af_=0o177777;this._bc_=0o177777;this._de_=0o177777;this._hl_=0o177777;this._i=0o377;this._r=0o377;this._pc=0o177777;this._sp=0o177777;this._ix=0o177777;this._iy=0o177777;this._wz=0o177777;}Object.defineProperty(Registers.prototype,"A",{get:function(){return this._a;},set:function(value){this._a=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"F",{get:function(){return this._f;},set:function(value){this._f=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"AF",{get:function(){return (this._a<<(0O347010110&0x463A71D))|this._f;},set:function(value){this._a=(value>>(0O347010110&0x463A71D))&0o377;this._f=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"B",{get:function(){return this._b;},set:function(value){this._b=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"C",{get:function(){return this._c;},set:function(value){this._c=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"BC",{get:function(){return (this._b<<(0O347010110&0x463A71D))|this._c;},set:function(value){this._b=(value>>(0O347010110&0x463A71D))&0o377;this._c=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"D",{get:function(){return (this._de>>(0O347010110&0x463A71D))&0o377;},set:function(value){this._de=((value<<(0O347010110&0x463A71D))&0o177400)|(this._de&0o377);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"E",{get:function(){return this._de&0o377;},set:function(value){this._de=(this._de&0o177400)|(value&0o377);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"DE",{get:function(){return this._de;},set:function(value){this._de=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"H",{get:function(){return (this._hl>>(0O347010110&0x463A71D))&0o377;},set:function(value){this._hl=((value<<(0O347010110&0x463A71D))&0o177400)|(this._hl&0o377);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"L",{get:function(){return this._hl&0o377;},set:function(value){this._hl=(this._hl&0o177400)|(value&0o377);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"HL",{get:function(){return this._hl;},set:function(value){this._hl=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"_AF_",{get:function(){return this._af_;},set:function(value){this._af_=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"_BC_",{get:function(){return this._bc_;},set:function(value){this._bc_=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"_DE_",{get:function(){return this._de_;},set:function(value){this._de_=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"_HL_",{get:function(){return this._hl_;},set:function(value){this._hl_=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"I",{get:function(){return this._i;},set:function(value){this._i=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"R",{get:function(){return this._r;},set:function(value){this._r=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"IR",{get:function(){return (this._i<<(0O347010110&0x463A71D))|this._r;},set:function(value){this._i=(value>>(0O347010110&0x463A71D))&0o377;this._r=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"PC",{get:function(){return this._pc;},set:function(value){this._pc=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"SP",{get:function(){return this._sp;},set:function(value){this._sp=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"XH",{get:function(){return (this._ix>>(0O347010110&0x463A71D))&0o377;},set:function(value){this._ix=((value<<(0O347010110&0x463A71D))&0o177400)|(this._ix&0o377);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"XL",{get:function(){return this._ix&0o377;},set:function(value){this._ix=(this._ix&0o177400)|(value&0o377);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"IX",{get:function(){return this._ix;},set:function(value){this._ix=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"YH",{get:function(){return (this._iy>>(0O347010110&0x463A71D))&0o377;},set:function(value){this._iy=((value<<(0O347010110&0x463A71D))&0o177400)|(this._iy&0o377);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"YL",{get:function(){return this._iy&0o377;},set:function(value){this._iy=(this._iy&0o177400)|(value&0o377);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"IY",{get:function(){return this._iy;},set:function(value){this._iy=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"WZH",{get:function(){return (this._wz>>(0O347010110&0x463A71D))&0o377;},set:function(value){this._wz=((value<<(0O347010110&0x463A71D))&0o177400)|(this._wz&0o377);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"WZL",{get:function(){return this._wz&0o377;},set:function(value){this._wz=(this._wz&0o177400)|(value&0o377);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"WZ",{get:function(){return this._wz;},set:function(value){this._wz=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"SFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.S)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"ZFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.Z)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"R5Flag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.R5)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"HFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.H)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"R3Flag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.R3)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"PVFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.PV)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"NFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.N)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Registers.prototype,"CFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.C)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});return Registers;}());exports.Registers=Registers;},{"./FlagsSetMask":18}],24:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var StackContentManipulationEvent=(function(){function StackContentManipulationEvent(operationAddress,operation,spValue,content,tacts){this.operationAddress=operationAddress;this.operation=operation;this.spValue=spValue;this.content=content;this.tacts=tacts;}return StackContentManipulationEvent;}());exports.StackContentManipulationEvent=StackContentManipulationEvent;},{}],25:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var StackPointerManipulationEvent=(function(){function StackPointerManipulationEvent(operationAddress,operation,oldValue,newValue,tacts){this.operationAddress=operationAddress;this.operation=operation;this.oldValue=oldValue;this.newValue=newValue;this.tacts=tacts;}return StackPointerManipulationEvent;}());exports.StackPointerManipulationEvent=StackPointerManipulationEvent;},{}],26:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var Z80StateFlags_1=require("./Z80StateFlags");var OpPrefixMode_1=require("./OpPrefixMode");var OpIndexMode_1=require("./OpIndexMode");var MemoryStatusArray_1=require("./MemoryStatusArray");var FlagsSetMask_1=require("./FlagsSetMask");var BranchEvent_1=require("./BranchEvent");var FlagsResetMask_1=require("./FlagsResetMask");var StackContentManipulationEvent_1=require("./StackContentManipulationEvent");var StackPointerManipulationEvent_1=require("./StackPointerManipulationEvent");var NoopMemoryDevice_1=require("../devices/memory/NoopMemoryDevice");var NoopPortDevice_1=require("../devices/ports/NoopPortDevice");var _standardOperations=[null,LdBCNN,LdBCiA,IncBC,IncB,DecB,LdBN,Rlca,ExAF,AddHLBC,LdABCi,DecBC,IncC,DecC,LdCN,Rrca,Djnz,LdDENN,LdDEiA,IncDE,IncD,DecD,LdDN,Rla,JrE,AddHLDE,LdADEi,DecDE,IncE,DecE,LdEN,Rra,JrNZ,LdHLNN,LdNNiHL,IncHL,IncH,DecH,LdHN,Daa,JrZ,AddHLHL,LdHLNNi,DecHL,IncL,DecL,LdLN,Cpl,JrNC,LdSPNN,LdNNiA,IncSP,IncHLi,DecHLi,LdHLiN,Scf,JrC,AddHLSP,LdANNi,DecSP,IncA,DecA,LdAN,Ccf,null,LdB_C,LdB_D,LdB_E,LdB_H,LdB_L,LdB_HLi,LdB_A,LdC_B,null,LdC_D,LdC_E,LdC_H,LdC_L,LdC_HLi,LdC_A,LdD_B,LdD_C,null,LdD_E,LdD_H,LdD_L,LdD_HLi,LdD_A,LdE_B,LdE_C,LdE_D,null,LdE_H,LdE_L,LdE_HLi,LdE_A,LdH_B,LdH_C,LdH_D,LdH_E,null,LdH_L,LdH_HLi,LdH_A,LdL_B,LdL_C,LdL_D,LdL_E,LdL_H,null,LdL_HLi,LdL_A,LdHLi_B,LdHLi_C,LdHLi_D,LdHLi_E,LdHLi_H,LdHLi_L,Halt,LdHLi_A,LdA_B,LdA_C,LdA_D,LdA_E,LdA_H,LdA_L,LdA_HLi,null,AddA_B,AddA_C,AddA_D,AddA_E,AddA_H,AddA_L,AddA_HLi,AddA_A,AdcA_B,AdcA_C,AdcA_D,AdcA_E,AdcA_H,AdcA_L,AdcA_HLi,AdcA_A,SubB,SubC,SubD,SubE,SubH,SubL,SubHLi,SubA,SbcB,SbcC,SbcD,SbcE,SbcH,SbcL,SbcHLi,SbcA,AndB,AndC,AndD,AndE,AndH,AndL,AndHLi,AndA,XorB,XorC,XorD,XorE,XorH,XorL,XorHLi,XorA,OrB,OrC,OrD,OrE,OrH,OrL,OrHLi,OrA,CpB,CpC,CpD,CpE,CpH,CpL,CpHLi,CpA,RetNZ,PopBC,JpNZ_NN,JpNN,CallNZ,PushBC,AluAN,Rst00,RetZ,Ret,JpZ_NN,null,CallZ,CallNN,AluAN,Rst08,RetNC,PopDE,JpNC_NN,OutNA,CallNC,PushDE,AluAN,Rst10,RetC,Exx,JpC_NN,InAN,CallC,null,AluAN,Rst18,RetPO,PopHL,JpPO_NN,ExSPiHL,CallPO,PushHL,AluAN,Rst20,RetPE,JpHL,JpPE_NN,ExDEHL,CallPE,null,AluAN,Rst28,RetP,PopAF,JpP_NN,Di,CallP,PushAF,AluAN,Rst30,RetM,LdSPHL,JpM_NN,Ei,CallM,null,AluAN,Rst38];var _extendedOperations=[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,Swapnib,MirrA,null,MirrDE,TestN,null,null,null,null,null,null,null,null,Mul,AddHL_A,AddDE_A,AddBC_A,AddHLNN,AddDENN,AddBCNN,null,null,null,null,null,null,null,null,null,InB_C,OutC_B,SbcHL_QQ,LdNNi_QQ,Neg,Retn,ImN,LdXR_A,InC_C,OutC_C,AdcHL_QQ,LdQQ_NNi,Neg,Reti,ImN,LdXR_A,InD_C,OutC_D,SbcHL_QQ,LdNNi_QQ,Neg,Retn,ImN,LdA_XR,InE_C,OutC_E,AdcHL_QQ,LdQQ_NNi,Neg,Retn,ImN,LdA_XR,InH_C,OutC_H,SbcHL_QQ,LdNNi_QQ,Neg,Retn,ImN,Rrd,InL_C,OutC_L,AdcHL_QQ,LdQQ_NNi,Neg,Retn,ImN,Rld,InF_C,OutC_0,SbcHL_QQ,LdNNi_QQ,Neg,Retn,ImN,null,InA_C,OutC_A,AdcHL_QQ,LdSP_NNi,Neg,Retn,ImN,null,null,null,null,null,null,null,null,null,null,null,PushNN,null,null,null,null,null,Outinb,Nextreg,NextregA,Pixeldn,Pixelad,Setae,null,null,null,null,null,null,null,null,null,null,Ldi,Cpi,Ini,Outi,Ldix,null,null,null,Ldd,Cpd,Ind,Outd,Lddx,null,null,null,Ldir,Cpir,Inir,Otir,Ldirx,null,Ldirscale,Ldpirx,Lddr,Cpdr,Indr,Otdr,Lddrx,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];var _bitOperations=[RlcB,RlcC,RlcD,RlcE,RlcH,RlcL,RlcHLi,RlcA,RrcB,RrcC,RrcD,RrcE,RrcH,RrcL,RrcHLi,RrcA,RlB,RlC,RlD,RlE,RlH,RlL,RlHLi,RlA,RrB,RrC,RrD,RrE,RrH,RrL,RrHLi,RrA,SlaB,SlaC,SlaD,SlaE,SlaH,SlaL,SlaHLi,SlaA,SraB,SraC,SraD,SraE,SraH,SraL,SraHLi,SraA,SllB,SllC,SllD,SllE,SllH,SllL,SllHLi,SllA,SrlB,SrlC,SrlD,SrlE,SrlH,SrlL,SrlHLi,SrlA,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BinN_HLi,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BinN_HLi,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BinN_HLi,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BinN_HLi,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BinN_HLi,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BinN_HLi,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BinN_HLi,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BitN_Q,BinN_HLi,BitN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_HLi,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_HLi,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_HLi,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_HLi,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_HLi,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_HLi,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_HLi,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_Q,ResN_HLi,ResN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_HLi,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_HLi,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_HLi,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_HLi,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_HLi,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_HLi,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_HLi,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_Q,SetN_HLi,SetN_Q];var indexedOperations=[null,LdBCNN,LdBCiA,IncBC,IncB,DecB,LdBN,Rlca,ExAF,AddIX_QQ,LdABCi,DecBC,IncC,DecC,LdCN,Rrca,Djnz,LdDENN,LdDEiA,IncDE,IncD,DecD,LdDN,Rla,JrE,AddIX_QQ,LdADEi,DecDE,IncE,DecE,LdEN,Rra,JrNZ,LdIX_NN,LdNNi_IX,IncIX,IncXH,DecXH,LdXH_N,Daa,JrZ,AddIX_QQ,LdIX_NNi,DecIX,IncXL,DecXL,LdXL_N,Cpl,JrNC,LdSPNN,LdNNiA,IncSP,IncIXi,DecIXi,LdIXi_NN,Scf,JrC,AddIX_QQ,LdNNiA,DecSP,IncA,DecA,LdAN,Ccf,null,LdB_C,LdB_D,LdB_E,LdQ_XH,LdQ_XL,LdQ_IXi,LdB_A,LdC_B,null,LdC_D,LdC_E,LdQ_XH,LdQ_XL,LdQ_IXi,LdC_A,LdD_B,LdD_C,null,LdD_E,LdQ_XH,LdQ_XL,LdQ_IXi,LdD_A,LdE_B,LdE_C,LdE_D,null,LdQ_XH,LdQ_XL,LdQ_IXi,LdE_A,LdXH_Q,LdXH_Q,LdXH_Q,LdXH_Q,null,LdXH_XL,LdQ_IXi,LdXH_Q,LdXL_Q,LdXL_Q,LdXL_Q,LdXL_Q,LdXL_XH,null,LdQ_IXi,LdXL_Q,LdIXi_Q,LdIXi_Q,LdIXi_Q,LdIXi_Q,LdIXi_Q,LdIXi_Q,Halt,LdIXi_Q,LdA_B,LdA_C,LdA_D,LdA_E,LdQ_XH,LdQ_XL,LdQ_IXi,null,AddA_B,AddA_C,AddA_D,AddA_E,AluA_XH,AluA_XL,AluA_IXi,AddA_A,AdcA_B,AdcA_C,AdcA_D,AdcA_E,AluA_XH,AluA_XL,AluA_IXi,AdcA_A,SubB,SubC,SubD,SubE,AluA_XH,AluA_XL,AluA_IXi,SubA,SbcB,SbcC,SbcD,SbcE,AluA_XH,AluA_XL,AluA_IXi,SbcA,AndB,AndC,AndD,AndE,AluA_XH,AluA_XL,AluA_IXi,AndA,XorB,XorC,XorD,XorE,AluA_XH,AluA_XL,AluA_IXi,XorA,OrB,OrC,OrD,OrE,AluA_XH,AluA_XL,AluA_IXi,OrA,CpB,CpC,CpD,CpE,AluA_XH,AluA_XL,AluA_IXi,CpA,RetNZ,PopBC,JpNZ_NN,JpNN,CallNZ,PushBC,AluAN,Rst00,RetZ,Ret,JpZ_NN,null,CallZ,CallNN,AluAN,Rst08,RetNC,PopDE,JpNC_NN,OutNA,CallNC,PushDE,AluAN,Rst10,RetC,Exx,JpC_NN,InAN,CallC,null,AluAN,Rst18,RetPO,PopIX,JpPO_NN,ExSPiIX,CallPO,PushIX,AluAN,Rst20,RetPE,JpIXi,JpPE_NN,ExDEHL,CallPE,null,AluAN,Rst28,RetP,PopAF,JpP_NN,Di,CallP,PushAF,AluAN,Rst30,RetM,LdSPIX,JpM_NN,Ei,CallM,null,AluAN,Rst38];var indexedBitOperations=[XrlcQ,XrlcQ,XrlcQ,XrlcQ,XrlcQ,XrlcQ,Xrlc,XrlcQ,XrrcQ,XrrcQ,XrrcQ,XrrcQ,XrrcQ,XrrcQ,Xrrc,XrrcQ,XrlQ,XrlQ,XrlQ,XrlQ,XrlQ,XrlQ,Xrl,XrlQ,XrrQ,XrrQ,XrrQ,XrrQ,XrrQ,XrrQ,Xrr,XrrQ,XslaQ,XslaQ,XslaQ,XslaQ,XslaQ,XslaQ,Xsla,XslaQ,XsraQ,XsraQ,XsraQ,XsraQ,XsraQ,XsraQ,Xsra,XsraQ,XsllQ,XsllQ,XsllQ,XsllQ,XsllQ,XsllQ,Xsll,XsllQ,XsrlQ,XsrlQ,XsrlQ,XsrlQ,XsrlQ,XsrlQ,Xsrl,XsrlQ,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,XbitN,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xres,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset,Xset];var aluAlgorithms=[AluADD,AluADC,AluSUB,AluSBC,AluAND,AluXOR,AluOR,AluCP];var incOpFlags;var decOpFlags;var daaResults;var adcFlags;var sbcFlags;var aluLogOpFlags;var rlcFlags;var rolOpResults;var rrcFlags;var rorOpResults;var rlCarry0Flags;var rlCarry1Flags;var rrCarry0Flags;var rrCarry1Flags;var sraFlags;incOpFlags=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){var oldVal=b&0o377;var newVal=(oldVal+(0O57060516-0xbc614d))&0o377;incOpFlags[b]=(newVal&FlagsSetMask_1.FlagsSetMask.R3)|(newVal&FlagsSetMask_1.FlagsSetMask.R5)|((newVal&0o200)!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.S:(0x75bcd15-0O726746425))|(newVal===(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.Z:(0x75bcd15-0O726746425))|((oldVal&0o17)===0o17?FlagsSetMask_1.FlagsSetMask.H:(0x75bcd15-0O726746425))|(oldVal===0o177?FlagsSetMask_1.FlagsSetMask.PV:(0x75bcd15-0O726746425));}decOpFlags=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){var oldVal=b&0o377;var newVal=(oldVal-(0O57060516-0xbc614d))&0o377;decOpFlags[b]=(newVal&FlagsSetMask_1.FlagsSetMask.R3)|(newVal&FlagsSetMask_1.FlagsSetMask.R5)|((newVal&0o200)!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.S:(0x75bcd15-0O726746425))|(newVal===(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.Z:(0x75bcd15-0O726746425))|((oldVal&0o17)===(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.H:(0x75bcd15-0O726746425))|(oldVal===0o200?FlagsSetMask_1.FlagsSetMask.PV:(0x75bcd15-0O726746425))|FlagsSetMask_1.FlagsSetMask.N;}daaResults=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){var hNibble=b>>(0x5E30A78-0O570605164);var lNibble=b&0o17;for(var H=(0x75bcd15-0O726746425);H<=(0O57060516-0xbc614d);H++){for(var N=(0x75bcd15-0O726746425);N<=(0O57060516-0xbc614d);N++){for(var C=(0x75bcd15-0O726746425);C<=(0O57060516-0xbc614d);C++){var diff=(0x75bcd15-0O726746425);var cAfter=(0x75bcd15-0O726746425);if(C===(0x75bcd15-0O726746425)){if(hNibble>=(0x75bcd15-0O726746425)&&hNibble<=0o11&&lNibble>=(0x75bcd15-0O726746425)&&lNibble<=0o11){diff=H===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(1011010-0O3666474);}else if(hNibble>=(0x75bcd15-0O726746425)&&hNibble<=(0O347010110&0x463A71D)&&lNibble>=0o12&&lNibble<=0o17){diff=(1011010-0O3666474);}else if(hNibble>=0o12&&hNibble<=0o17&&lNibble>=(0x75bcd15-0O726746425)&&lNibble<=0o11&&H===(0x75bcd15-0O726746425)){diff=0o140;cAfter=(0O57060516-0xbc614d);}else if(hNibble>=0o11&&hNibble<=0o17&&lNibble>=0o12&&lNibble<=0o17){diff=0o146;cAfter=(0O57060516-0xbc614d);}else if(hNibble>=0o12&&hNibble<=0o17&&lNibble>=(0x75bcd15-0O726746425)&&lNibble<=0o11){if(H===(0O57060516-0xbc614d)){diff=0o146;}cAfter=(0O57060516-0xbc614d);}}else{cAfter=(0O57060516-0xbc614d);if(lNibble>=(0x75bcd15-0O726746425)&&lNibble<=0o11){diff=H===(0x75bcd15-0O726746425)?0o140:0o146;}else if(lNibble>=0o12&&lNibble<=0o17){diff=0o146;}}var hAfter=(0x75bcd15-0O726746425);if(lNibble>=0o12&&lNibble<=0o17&&N===(0x75bcd15-0O726746425)||lNibble>=(0x75bcd15-0O726746425)&&lNibble<=(0O507646144^0x51F4C61)&&N===(0O57060516-0xbc614d)&&H===(0O57060516-0xbc614d)){hAfter=(0O57060516-0xbc614d);}var A=(N===(0x75bcd15-0O726746425)?b+diff:b-diff)&0o377;var aPar=(0x75bcd15-0O726746425);var val=A;for(var i=(0x75bcd15-0O726746425);i<(0O347010110&0x463A71D);i++){aPar+=val&(0O57060516-0xbc614d);val>>=(0O57060516-0xbc614d);}var fAfter=(A&FlagsSetMask_1.FlagsSetMask.R3)|(A&FlagsSetMask_1.FlagsSetMask.R5)|((A&0o200)!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.S:(0x75bcd15-0O726746425))|(A===(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.Z:(0x75bcd15-0O726746425))|(aPar%(15658734^0O73567354)===(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.PV:(0x75bcd15-0O726746425))|(N===(0O57060516-0xbc614d)?FlagsSetMask_1.FlagsSetMask.N:(0x75bcd15-0O726746425))|(hAfter===(0O57060516-0xbc614d)?FlagsSetMask_1.FlagsSetMask.H:(0x75bcd15-0O726746425))|(cAfter===(0O57060516-0xbc614d)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425));var result=(A<<(0O347010110&0x463A71D)|(fAfter&0o377))&0o177777;var fBefore=(H*(0x5E30A78-0O570605164)+N*(15658734^0O73567354)+C)&0o377;var idx=(fBefore<<(0O347010110&0x463A71D))+b;daaResults[idx]=result;}}}}adcFlags=[];for(var C=(0x75bcd15-0O726746425);C<(15658734^0O73567354);C++){for(var X=(0x75bcd15-0O726746425);X<0o400;X++){for(var Y=(0x75bcd15-0O726746425);Y<0o400;Y++){var res=(X+Y+C)&0o177777;var flags=(0x75bcd15-0O726746425);if((res&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}flags|=res&(FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.S);if(res>=0o400){flags|=FlagsSetMask_1.FlagsSetMask.C;}if((((X&0o17)+(Y&0o17)+C)&0o20)!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.H;}var ri=toSbyte(X)+toSbyte(Y)+C;if(ri>=0o200||ri<=-0o201){flags|=FlagsSetMask_1.FlagsSetMask.PV;}adcFlags[C*0o200000+X*0o400+Y]=flags&0o377;}}}sbcFlags=[];for(var C=(0x75bcd15-0O726746425);C<(15658734^0O73567354);C++){for(var X=(0x75bcd15-0O726746425);X<0o400;X++){for(var Y=(0x75bcd15-0O726746425);Y<0o400;Y++){var res=X-Y-C;var flags=res&(FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.S);if((res&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}if((res&0o200000)!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.C;}var ri=toSbyte(X)-toSbyte(Y)-C;if(ri>=0o200||ri<-0o200){flags|=FlagsSetMask_1.FlagsSetMask.PV;}if((((X&0o17)-(res&0o17)-C)&0o20)!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.H;}flags|=FlagsSetMask_1.FlagsSetMask.N;sbcFlags[C*0o200000+X*0o400+Y]=flags&0o377;}}}aluLogOpFlags=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){var fl=b&(FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.S);var p=FlagsSetMask_1.FlagsSetMask.PV;for(var i=0o200;i!==(0x75bcd15-0O726746425);i/=(15658734^0O73567354)){if((b&i)!==(0x75bcd15-0O726746425)){p^=FlagsSetMask_1.FlagsSetMask.PV;}}aluLogOpFlags[b]=(fl|p)&0o377;}aluLogOpFlags[(0x75bcd15-0O726746425)]|=FlagsSetMask_1.FlagsSetMask.Z;rlcFlags=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){var rlcVal=b;rlcVal<<=(0O57060516-0xbc614d);var cf=(rlcVal&0o400)!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425);if(cf!==(0x75bcd15-0O726746425)){rlcVal=(rlcVal|(0O57060516-0xbc614d))&0o377;}var p=FlagsSetMask_1.FlagsSetMask.PV;for(var i=0o200;i!==(0x75bcd15-0O726746425);i/=(15658734^0O73567354)){if((rlcVal&i)!==(0x75bcd15-0O726746425)){p^=FlagsSetMask_1.FlagsSetMask.PV;}}var flags=(rlcVal&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3)|p|cf)&0o377;if(rlcVal===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}rlcFlags[b]=flags;}rrcFlags=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){var rrcVal=b;var cf=(rrcVal&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425);rrcVal>>=(0O57060516-0xbc614d);if(cf!==(0x75bcd15-0O726746425)){rrcVal=(rrcVal|0o200);}var p=FlagsSetMask_1.FlagsSetMask.PV;for(var i=0o200;i!==(0x75bcd15-0O726746425);i/=(15658734^0O73567354)){if((rrcVal&i)!==(0x75bcd15-0O726746425)){p^=FlagsSetMask_1.FlagsSetMask.PV;}}var flags=(rrcVal&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3)|p|cf)&0o377;if(rrcVal===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}rrcFlags[b]=flags;}rlCarry0Flags=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){var rlVal=b;rlVal<<=(0O57060516-0xbc614d);var cf=(rlVal&0o400)!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425);var p=FlagsSetMask_1.FlagsSetMask.PV;for(var i=0o200;i!==(0x75bcd15-0O726746425);i/=(15658734^0O73567354)){if((rlVal&i)!==(0x75bcd15-0O726746425)){p^=FlagsSetMask_1.FlagsSetMask.PV;}}var flags=(rlVal&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3)|p|cf)&0o377;if((rlVal&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}rlCarry0Flags[b]=flags;}rlCarry1Flags=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){var rlVal=b;rlVal<<=(0O57060516-0xbc614d);rlVal++;var cf=(rlVal&0o400)!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425);var p=FlagsSetMask_1.FlagsSetMask.PV;for(var i=0o200;i!==(0x75bcd15-0O726746425);i/=(15658734^0O73567354)){if((rlVal&i)!==(0x75bcd15-0O726746425)){p^=FlagsSetMask_1.FlagsSetMask.PV;}}var flags=(rlVal&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3)|p|cf)&0o377;if((rlVal&0o777)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}rlCarry1Flags[b]=flags;}rrCarry0Flags=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){var rrVal=b;var cf=(rrVal&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425);rrVal>>=(0O57060516-0xbc614d);var p=FlagsSetMask_1.FlagsSetMask.PV;for(var i=0o200;i!==(0x75bcd15-0O726746425);i/=(15658734^0O73567354)){if((rrVal&i)!==(0x75bcd15-0O726746425)){p^=FlagsSetMask_1.FlagsSetMask.PV;}}var flags=(rrVal&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3)|p|cf)&0o377;if(rrVal===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}rrCarry0Flags[b]=flags;}rrCarry1Flags=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){var rrVal=b;var cf=(rrVal&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425);rrVal>>=(0O57060516-0xbc614d);rrVal+=0o200;var p=FlagsSetMask_1.FlagsSetMask.PV;for(var i=0o200;i!==(0x75bcd15-0O726746425);i/=(15658734^0O73567354)){if((rrVal&i)!==(0x75bcd15-0O726746425)){p^=FlagsSetMask_1.FlagsSetMask.PV;}}var flags=(rrVal&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3)|p|cf)&0o377;if(rrVal===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}rrCarry1Flags[b]=flags;}sraFlags=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){var sraVal=b;var cf=(sraVal&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425);sraVal=(sraVal>>(0O57060516-0xbc614d))+(sraVal&0o200);var p=FlagsSetMask_1.FlagsSetMask.PV;for(var i=0o200;i!==(0x75bcd15-0O726746425);i/=(15658734^0O73567354)){if((sraVal&i)!==(0x75bcd15-0O726746425)){p^=FlagsSetMask_1.FlagsSetMask.PV;}}var flags=(sraVal&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3)|p|cf)&0o377;if((sraVal&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}sraFlags[b]=flags;}rolOpResults=[];rorOpResults=[];for(var b=(0x75bcd15-0O726746425);b<0o400;b++){rolOpResults[b]=((b<<(0O57060516-0xbc614d))+(b>>(0x9D8DE4-0O47306735)))&0o377;rorOpResults[b]=((b>>(0O57060516-0xbc614d))+(b<<(0x9D8DE4-0O47306735)))&0o377;}function toSbyte(x){x&=0o377;return x>=0o200?x-0o400:x;}exports.toSbyte=toSbyte;function toSshort(x){x&=0o177777;return x>=0o100000?x-0o200000:x;}exports.toSshort=toSshort;var Z80Cpu=(function(){function Z80Cpu(memoryDevice,portDevice,allowExtendedInstructionSet,tbBlueDevice){if(allowExtendedInstructionSet===void (0x75bcd15-0O726746425)){allowExtendedInstructionSet=false;}this.opCode=(0x75bcd15-0O726746425);this.tacts=(0x75bcd15-0O726746425);this.stateFlags=Z80StateFlags_1.Z80StateFlags.None;this.useGateArrayContention=false;this.iff1=false;this.iff2=false;this.interruptMode=(0x75bcd15-0O726746425);this.isInterruptBlocked=false;this.isInOpExecution=false;this.maskableInterruptModeEntered=false;this.prefixMode=OpPrefixMode_1.OpPrefixMode.None;this.indexMode=OpIndexMode_1.OpIndexMode.None;this._a=0o377;this._f=0o377;this._b=0o377;this._c=0o377;this._de=0o177777;this._hl=0o177777;this.__af_=0o177777;this.__bc_=0o177777;this.__de_=0o177777;this.__hl_=0o177777;this._i=0o377;this._r=0o377;this._pc=0o177777;this._sp=0o177777;this._ix=0o177777;this._iy=0o177777;this._wz=0o177777;this.memoryDevice=memoryDevice?memoryDevice:new NoopMemoryDevice_1.NoopMemoryDevice();this.portDevice=portDevice?portDevice:new NoopPortDevice_1.NoopPortDevice();this.allowExtendedInstructionSet=allowExtendedInstructionSet?false:allowExtendedInstructionSet;this.tbBlueDevice=tbBlueDevice;this.executionFlowStatus=new MemoryStatusArray_1.MemoryStatusArray();this.memoryReadStatus=new MemoryStatusArray_1.MemoryStatusArray();this.memoryWriteStatus=new MemoryStatusArray_1.MemoryStatusArray();this.executeReset();}Object.defineProperty(Z80Cpu.prototype,"key",{get:function(){return "Z80CPUDevice";},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"a",{get:function(){return this._a;},set:function(value){this._a=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"f",{get:function(){return this._f;},set:function(value){this._f=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"af",{get:function(){return (this._a<<(0O347010110&0x463A71D))|this._f;},set:function(value){this._a=(value>>(0O347010110&0x463A71D))&0o377;this._f=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"b",{get:function(){return this._b;},set:function(value){this._b=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"c",{get:function(){return this._c;},set:function(value){this._c=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"bc",{get:function(){return (this._b<<(0O347010110&0x463A71D))|this._c;},set:function(value){this._b=(value>>(0O347010110&0x463A71D))&0o377;this._c=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"d",{get:function(){return (this._de>>(0O347010110&0x463A71D))&0o377;},set:function(value){this._de=((value<<(0O347010110&0x463A71D))&0o177400)|(this._de&0o377);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"e",{get:function(){return this._de&0o377;},set:function(value){this._de=(this._de&0o177400)|(value&0o377);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"de",{get:function(){return this._de;},set:function(value){this._de=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"h",{get:function(){return (this._hl>>(0O347010110&0x463A71D))&0o377;},set:function(value){this._hl=((value<<(0O347010110&0x463A71D))&0o177400)|(this._hl&0o377);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"l",{get:function(){return this._hl&0o377;},set:function(value){this._hl=(this._hl&0o177400)|(value&0o377);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"hl",{get:function(){return this._hl;},set:function(value){this._hl=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"_af_",{get:function(){return this.__af_;},set:function(value){this.__af_=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"_bc_",{get:function(){return this.__bc_;},set:function(value){this.__bc_=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"_de_",{get:function(){return this.__de_;},set:function(value){this.__de_=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"_hl_",{get:function(){return this.__hl_;},set:function(value){this.__hl_=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"i",{get:function(){return this._i;},set:function(value){this._i=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"r",{get:function(){return this._r;},set:function(value){this._r=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"ir",{get:function(){return (this._i<<(0O347010110&0x463A71D))|this._r;},set:function(value){this._i=(value>>(0O347010110&0x463A71D))&0o377;this._r=value&0o377;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"pc",{get:function(){return this._pc;},set:function(value){this._pc=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"sp",{get:function(){return this._sp;},set:function(value){this._sp=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"xh",{get:function(){return (this._ix>>(0O347010110&0x463A71D))&0o377;},set:function(value){this._ix=((value<<(0O347010110&0x463A71D))&0o177400)|(this._ix&0o377);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"xl",{get:function(){return this._ix&0o377;},set:function(value){this._ix=(this._ix&0o177400)|(value&0o377);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"ix",{get:function(){return this._ix;},set:function(value){this._ix=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"yh",{get:function(){return (this._iy>>(0O347010110&0x463A71D))&0o377;},set:function(value){this._iy=((value<<(0O347010110&0x463A71D))&0o177400)|(this._iy&0o377);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"yl",{get:function(){return this._iy&0o377;},set:function(value){this._iy=(this._iy&0o177400)|(value&0o377);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"iy",{get:function(){return this._iy;},set:function(value){this._iy=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"wzh",{get:function(){return (this._wz>>(0O347010110&0x463A71D))&0o377;},set:function(value){this._wz=((value<<(0O347010110&0x463A71D))&0o177400)|(this._wz&0o377);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"wzl",{get:function(){return this._wz&0o377;},set:function(value){this._wz=(this._wz&0o177400)|(value&0o377);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"wz",{get:function(){return this._wz;},set:function(value){this._wz=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"sFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.S)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"zFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.Z)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"r5Flag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.R5)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"hFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.H)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"r3Flag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.R3)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"pvFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.PV)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"nFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.N)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(Z80Cpu.prototype,"cFlag",{get:function(){return (this._f&FlagsSetMask_1.FlagsSetMask.C)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Z80Cpu.prototype.exchangeAfSet=function(){var tmp=this.af;this.af=this._af_;this._af_=tmp;};Z80Cpu.prototype.exchangeRegisterSet=function(){var tmp=this.bc;this.bc=this._bc_;this._bc_=tmp;tmp=this.de;this.de=this._de_;this._de_=tmp;tmp=this.hl;this.hl=this._hl_;this._hl_=tmp;};Z80Cpu.prototype.getReg8=function(index){switch(index){case (0x75bcd15-0O726746425):return this._b;case (0O57060516-0xbc614d):return this._c;case (15658734^0O73567354):return this.d;case (0O334664274-0x37368B9):return this.e;case (0x5E30A78-0O570605164):return this.h;case (0O507646144^0x51F4C61):return this.l;case (0x9D8DE4-0O47306735):return this._a;default:throw new Error(index+" is out of the range when reading an 8-bit register value.");}};Z80Cpu.prototype.setReg8=function(index,value){switch(index){case (0x75bcd15-0O726746425):this.b=value;break;case (0O57060516-0xbc614d):this.c=value;break;case (15658734^0O73567354):this.d=value;break;case (0O334664274-0x37368B9):this.e=value;break;case (0x5E30A78-0O570605164):this.h=value;break;case (0O507646144^0x51F4C61):this.l=value;break;case (0x9D8DE4-0O47306735):this.a=value;break;default:throw new Error(index+" is out of the range when writing an 8-bit register value.");}};Z80Cpu.prototype.getReg16=function(index){switch(index){case (0x75bcd15-0O726746425):return this.bc;case (0O57060516-0xbc614d):return this.de;case (15658734^0O73567354):return this.hl;case (0O334664274-0x37368B9):return this.sp;default:throw new Error(index+" is out of the range when reading a 16-bit register value.");}};Z80Cpu.prototype.setReg16=function(index,value){switch(index){case (0x75bcd15-0O726746425):this.bc=value;break;case (0O57060516-0xbc614d):this.de=value;break;case (15658734^0O73567354):this.hl=value;break;case (0O334664274-0x37368B9):this.sp=value;break;default:throw new Error(index+" is out of the range when writing an 8-bit register value.");}};Z80Cpu.prototype.incPc=function(){this._pc++;this._pc&=0o177777;};Z80Cpu.prototype.reset=function(){this.executeReset();};Z80Cpu.prototype.delay=function(ticks){this.tacts+=ticks;};Z80Cpu.prototype.executeCpuCycle=function(){if(this.stateFlags!==Z80StateFlags_1.Z80StateFlags.None&&this.processCpuSignals()){return;}var opCode=this.readCodeMemory();this.tacts+=(0O334664274-0x37368B9);this.incPc();this.refreshMemory();if(this.prefixMode===OpPrefixMode_1.OpPrefixMode.None){switch(opCode){case 0o335:this.indexMode=OpIndexMode_1.OpIndexMode.IX;this.isInOpExecution=this.isInterruptBlocked=true;return;case 0o375:this.indexMode=OpIndexMode_1.OpIndexMode.IY;this.isInOpExecution=this.isInterruptBlocked=true;return;case 0o313:this.prefixMode=OpPrefixMode_1.OpPrefixMode.Bit;this.isInOpExecution=this.isInterruptBlocked=true;return;case 0o355:this.prefixMode=OpPrefixMode_1.OpPrefixMode.Extended;this.isInOpExecution=this.isInterruptBlocked=true;return;default:this.isInterruptBlocked=false;this.opCode=opCode;this.processStandardOrIndexedOperations();this.prefixMode=OpPrefixMode_1.OpPrefixMode.None;this.indexMode=OpIndexMode_1.OpIndexMode.None;this.isInOpExecution=false;return;}}if(this.prefixMode===OpPrefixMode_1.OpPrefixMode.Bit){this.isInterruptBlocked=false;this.opCode=opCode;this.processCBPrefixedOperations();this.indexMode=OpIndexMode_1.OpIndexMode.None;this.prefixMode=OpPrefixMode_1.OpPrefixMode.None;this.isInOpExecution=false;return;}if(this.prefixMode===OpPrefixMode_1.OpPrefixMode.Extended){this.isInterruptBlocked=false;this.opCode=opCode;this.processEDOperations();this.indexMode=OpIndexMode_1.OpIndexMode.None;this.prefixMode=OpPrefixMode_1.OpPrefixMode.None;this.isInOpExecution=false;}};Z80Cpu.prototype.getCallInstructionLength=function(){var opCode=this.memoryDevice.read(this.pc);if(opCode===0o315){return (0O334664274-0x37368B9);}if((opCode&0o307)===0o304){return (0O334664274-0x37368B9);}if((opCode&0o307)===0o307){return (0O57060516-0xbc614d);}if(opCode===0o166){return (0O57060516-0xbc614d);}if(opCode!==0o355){return (0x75bcd15-0O726746425);}opCode=this.memoryDevice.read((this.pc+(0O57060516-0xbc614d))&0o177777);return ((opCode&0o264)===0o260)?(15658734^0O73567354):(0x75bcd15-0O726746425);};Z80Cpu.prototype.readMemory=function(addr){this.memoryReadStatus.touch(addr);return this.memoryDevice.read(addr);};Z80Cpu.prototype.readCodeMemory=function(){this.executionFlowStatus.touch(this.pc);return this.memoryDevice.read(this.pc);};Z80Cpu.prototype.writeMemory=function(addr,value){this.memoryWriteStatus.touch(addr);this.memoryDevice.write(addr,value);};Z80Cpu.prototype.readPort=function(addr){return this.portDevice.readPort(addr);};Z80Cpu.prototype.writePort=function(addr,data){this.portDevice.writePort(addr,data);};Z80Cpu.prototype.processCpuSignals=function(){if((this.stateFlags&Z80StateFlags_1.Z80StateFlags.Int)!==(0x75bcd15-0O726746425)&&!this.isInterruptBlocked&&this.iff1){this.executeInterrupt();return true;}if((this.stateFlags&Z80StateFlags_1.Z80StateFlags.Halted)!==(0x75bcd15-0O726746425)){this.tacts+=(0O334664274-0x37368B9);this.refreshMemory();return true;}if((this.stateFlags&Z80StateFlags_1.Z80StateFlags.Reset)!==(0x75bcd15-0O726746425)){this.executeReset();return true;}if((this.stateFlags&Z80StateFlags_1.Z80StateFlags.Nmi)!==(0x75bcd15-0O726746425)){this.executeNmi();return true;}return false;};Z80Cpu.prototype.executeInterrupt=function(){if((this.stateFlags&Z80StateFlags_1.Z80StateFlags.Halted)!==(0x75bcd15-0O726746425)){this.incPc();this.stateFlags&=Z80StateFlags_1.Z80StateFlags.InvHalted;}this.iff1=false;this.iff2=false;this.sp--;this.tacts++;this.writeMemory(this.sp,this.pc>>(0O347010110&0x463A71D));this.tacts+=(0O334664274-0x37368B9);this.sp--;this.writeMemory(this.sp,this.pc&0o377);this.tacts+=(0O334664274-0x37368B9);switch(this.interruptMode){case (0x75bcd15-0O726746425):case (0O57060516-0xbc614d):this.wz=0o70;this.tacts+=(0O507646144^0x51F4C61);break;default:this.tacts+=(15658734^0O73567354);var addr=(this.ir&0o177400)|0o377;this.tacts+=(0O507646144^0x51F4C61);var l=this.readMemory(addr);this.tacts+=(0O334664274-0x37368B9);var h=this.readMemory(++addr);this.tacts+=(0O334664274-0x37368B9);this.wz=(h*0o400+l);this.tacts+=(1011010-0O3666474);break;}this.pc=this.wz;};Z80Cpu.prototype.refreshMemory=function(){this.r=((this.r+(0O57060516-0xbc614d))&0o177)|(this.r&0o200);this.tacts++;};Z80Cpu.prototype.executeReset=function(){this.iff1=false;this.iff2=false;this.interruptMode=(0x75bcd15-0O726746425);this.isInterruptBlocked=false;this.stateFlags=Z80StateFlags_1.Z80StateFlags.None;this.prefixMode=OpPrefixMode_1.OpPrefixMode.None;this.indexMode=OpIndexMode_1.OpIndexMode.None;this.pc=(0x75bcd15-0O726746425);this.ir=(0x75bcd15-0O726746425);this.isInOpExecution=false;this.tacts=(0x75bcd15-0O726746425);};Z80Cpu.prototype.executeNmi=function(){if((this.stateFlags&Z80StateFlags_1.Z80StateFlags.Halted)!==(0x75bcd15-0O726746425)){this.incPc();this.stateFlags&=Z80StateFlags_1.Z80StateFlags.InvHalted;}this.iff2=this.iff1;this.iff1=false;this.sp--;this.tacts++;this.writeMemory(this.sp,this.pc>>(0O347010110&0x463A71D));this.tacts+=(0O334664274-0x37368B9);this.sp--;this.writeMemory(this.sp,this.pc&0o377);this.tacts+=(0O334664274-0x37368B9);this.pc=0o146;};Z80Cpu.prototype.setResetSignal=function(){this.isInterruptBlocked=true;this.stateFlags|=Z80StateFlags_1.Z80StateFlags.Reset;};Z80Cpu.prototype.releaseResetSignal=function(){this.stateFlags&=Z80StateFlags_1.Z80StateFlags.InvReset;this.isInterruptBlocked=false;};Z80Cpu.prototype.setTacts=function(tacts){this.tacts=tacts;};Z80Cpu.prototype.setInterruptMode=function(im){this.interruptMode=im;};Z80Cpu.prototype.setIffValues=function(value){this.iff1=this.iff2=value;};Z80Cpu.prototype.blockInterrupt=function(){this.isInterruptBlocked=true;};Z80Cpu.prototype.removeFromHaltedState=function(){if((this.stateFlags&Z80StateFlags_1.Z80StateFlags.Halted)===(0x75bcd15-0O726746425)){return;}this.incPc();this.stateFlags&=Z80StateFlags_1.Z80StateFlags.InvHalted;};Z80Cpu.prototype.getDeviceState=function(){};Z80Cpu.prototype.restoreDeviceState=function(state){};Z80Cpu.prototype.processStandardOrIndexedOperations=function(){var opMethod=this.indexMode===OpIndexMode_1.OpIndexMode.None?_standardOperations[this.opCode]:indexedOperations[this.opCode];if(opMethod!==null){opMethod(this);}};Z80Cpu.prototype.processEDOperations=function(){var opMethod=_extendedOperations[this.opCode];if(opMethod!==null){opMethod(this);}};Z80Cpu.prototype.processCBPrefixedOperations=function(){if(this.indexMode===OpIndexMode_1.OpIndexMode.None){var opMethod_1=_bitOperations[this.opCode];if(opMethod_1!==null){opMethod_1(this);}return;}this.wz=(this.indexMode===OpIndexMode_1.OpIndexMode.IX?this.ix:this.iy)+toSbyte(this.opCode);if(!this.useGateArrayContention){this.readMemory(this.pc-(0O57060516-0xbc614d));}this.tacts++;this.opCode=this.readCodeMemory();this.tacts+=(0O334664274-0x37368B9);this.incPc();var opMethod=indexedBitOperations[this.opCode];if(opMethod!==null){opMethod(this,this.wz);}};Z80Cpu.prototype.getIndexReg=function(){return this.indexMode===OpIndexMode_1.OpIndexMode.IY?this.iy:this.ix;};Z80Cpu.prototype.setIndexReg=function(value){if(this.indexMode===OpIndexMode_1.OpIndexMode.IY){this.iy=value;}else{this.ix=value;}};Z80Cpu.prototype.aluAddHL=function(regHL,regOther){this.f=(this.f&~(FlagsSetMask_1.FlagsSetMask.N|FlagsSetMask_1.FlagsSetMask.C|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.H));this.f|=(((regHL&0o7777)+(regOther&0o7777))>>(0O347010110&0x463A71D))&FlagsSetMask_1.FlagsSetMask.H;var res=((regHL&0o177777)+(regOther&0o177777))&0o37777777777;if((res&0o200000)!==(0x75bcd15-0O726746425)){this.f|=FlagsSetMask_1.FlagsSetMask.C;}this.f|=((res>>(0O347010110&0x463A71D))&0o377)&(FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3);return res&0o177777;};Z80Cpu.prototype.aluIncByte=function(value){this.f=incOpFlags[value]|this.f&FlagsSetMask_1.FlagsSetMask.C;value++;return value;};Z80Cpu.prototype.aluDecByte=function(val){this.f=decOpFlags[val]|this.f&FlagsSetMask_1.FlagsSetMask.C;val--;return val;};return Z80Cpu;}());exports.Z80Cpu=Z80Cpu;function LdBCNN(cpu){cpu.c=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.b=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);}function LdBCiA(cpu){cpu.writeMemory(cpu.bc,cpu.a);cpu.wzh=cpu.a;cpu.tacts+=(0O334664274-0x37368B9);}function IncBC(cpu){cpu.bc++;cpu.tacts+=(15658734^0O73567354);}function IncB(cpu){cpu.f=incOpFlags[cpu.b++]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function DecB(cpu){cpu.f=decOpFlags[cpu.b--]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function LdBN(cpu){cpu.b=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);}function Rlca(cpu){var rlcaVal=cpu.a;rlcaVal<<=(0O57060516-0xbc614d);var cf=((rlcaVal&0o400)!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425))&0o377;if(cf!==(0x75bcd15-0O726746425)){rlcaVal=rlcaVal|(0O57060516-0xbc614d);}cpu.a=rlcaVal;cpu.f=cf|(cpu.f&FlagsSetMask_1.FlagsSetMask.SZPV);}function ExAF(cpu){cpu.exchangeAfSet();}function AddHLBC(cpu){cpu.wz=cpu.hl+(0O57060516-0xbc614d);cpu.hl=cpu.aluAddHL(cpu.hl,cpu.bc);cpu.tacts+=(0x9D8DE4-0O47306735);}function LdABCi(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);cpu.a=cpu.readMemory(cpu.bc);cpu.tacts+=(0O334664274-0x37368B9);}function DecBC(cpu){cpu.bc--;cpu.tacts+=(15658734^0O73567354);}function IncC(cpu){cpu.f=incOpFlags[cpu.c++]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function DecC(cpu){cpu.f=decOpFlags[cpu.c--]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function LdCN(cpu){cpu.c=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);}function Rrca(cpu){var rrcaVal=cpu.a;var cf=((rrcaVal&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425))&0o377;if((rrcaVal&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)){rrcaVal=(rrcaVal>>(0O57060516-0xbc614d))|0o200;}else{rrcaVal>>=(0O57060516-0xbc614d);}cpu.a=rrcaVal;cpu.f=cf|(cpu.f&FlagsSetMask_1.FlagsSetMask.SZPV);}function Djnz(cpu){cpu.tacts++;var e=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if(--cpu.b===(0x75bcd15-0O726746425)){return;}if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;}var oldPc=cpu.pc-(15658734^0O73567354);cpu.wz=cpu.pc=cpu.pc+toSbyte(e);if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"djnz #"+cpu.pc.toString(0o20),cpu.pc,cpu.tacts));}}function LdDENN(cpu){cpu.e=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.d=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);}function LdDEiA(cpu){cpu.writeMemory(cpu.de,cpu.a);cpu.wzh=cpu.a;cpu.tacts+=(0O334664274-0x37368B9);}function IncDE(cpu){cpu.de++;cpu.tacts+=(15658734^0O73567354);}function IncD(cpu){cpu.f=incOpFlags[cpu.d++]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function DecD(cpu){cpu.f=decOpFlags[cpu.d--]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function LdDN(cpu){cpu.d=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);}function Rla(cpu){var rlaVal=cpu.a;var newCF=(rlaVal&0o200)!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425);rlaVal<<=(0O57060516-0xbc614d);if(cpu.cFlag){rlaVal|=(0O57060516-0xbc614d);}cpu.a=rlaVal;cpu.f=newCF|(cpu.f&FlagsSetMask_1.FlagsSetMask.SZPV);}function JrE(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);var e=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz=cpu.pc=cpu.pc+toSbyte(e);cpu.tacts+=(0O507646144^0x51F4C61);if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jr #"+cpu.pc.toString(0o20),cpu.pc,cpu.tacts));}}function AddHLDE(cpu){cpu.wz=cpu.hl+(0O57060516-0xbc614d);cpu.hl=cpu.aluAddHL(cpu.hl,cpu.de);cpu.tacts+=(0x9D8DE4-0O47306735);}function LdADEi(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);cpu.a=cpu.readMemory(cpu.de);cpu.tacts+=(0O334664274-0x37368B9);}function DecDE(cpu){cpu.de--;cpu.tacts+=(15658734^0O73567354);}function IncE(cpu){cpu.f=incOpFlags[cpu.e++]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function DecE(cpu){cpu.f=decOpFlags[cpu.e--]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function LdEN(cpu){cpu.e=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);}function Rra(cpu){var rlcaVal=cpu.a;var newCF=(rlcaVal&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.C:(0x75bcd15-0O726746425);rlcaVal>>=(0O57060516-0xbc614d);if(cpu.cFlag){rlcaVal|=0o200;}cpu.a=rlcaVal;cpu.f=newCF|(cpu.f&FlagsSetMask_1.FlagsSetMask.SZPV);}function JrNZ(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);var e=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.Z)!==(0x75bcd15-0O726746425)){return;}if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;}cpu.wz=cpu.pc=cpu.pc+toSbyte(e);if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jr nz,#"+cpu.pc.toString(0o20),cpu.pc,cpu.tacts));}}function LdHLNN(cpu){cpu.l=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.h=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);}function LdNNiHL(cpu){var l=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();var addr=(cpu.readCodeMemory()<<(0O347010110&0x463A71D))|l;cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz=addr+(0O57060516-0xbc614d);cpu.writeMemory(addr,cpu.l);cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(cpu.wz,cpu.h);cpu.tacts+=(0O334664274-0x37368B9);}function IncHL(cpu){cpu.hl++;cpu.tacts+=(15658734^0O73567354);}function IncH(cpu){cpu.f=incOpFlags[cpu.h++]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function DecH(cpu){cpu.f=decOpFlags[cpu.h--]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function LdHN(cpu){cpu.h=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);}function Daa(cpu){var daaIndex=cpu.a+(((cpu.f&(0O334664274-0x37368B9))+((cpu.f>>(15658734^0O73567354))&(0x5E30A78-0O570605164)))<<(0O347010110&0x463A71D));cpu.af=daaResults[daaIndex];}function JrZ(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);var e=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.Z)===(0x75bcd15-0O726746425)){return;}if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;}cpu.wz=cpu.pc=cpu.pc+toSbyte(e);if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jr z,#"+cpu.pc.toString(0o20),cpu.pc,cpu.tacts));}}function AddHLHL(cpu){cpu.wz=cpu.hl+(0O57060516-0xbc614d);cpu.hl=cpu.aluAddHL(cpu.hl,cpu.hl);cpu.tacts+=(0x9D8DE4-0O47306735);}function LdHLNNi(cpu){var addr=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);addr+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);cpu.wz=addr+(0O57060516-0xbc614d);var val=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);val+=cpu.readMemory(cpu.wz)<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.hl=val;}function DecHL(cpu){cpu.hl--;cpu.tacts+=(15658734^0O73567354);}function IncL(cpu){cpu.f=incOpFlags[cpu.l++]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function DecL(cpu){cpu.f=decOpFlags[cpu.l--]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function LdLN(cpu){cpu.l=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);}function Cpl(cpu){cpu.a^=0o377;cpu.f=(cpu.f&~FlagsSetMask_1.FlagsSetMask.R3R5)|FlagsSetMask_1.FlagsSetMask.NH|FlagsSetMask_1.FlagsSetMask.H|(cpu.a&FlagsSetMask_1.FlagsSetMask.R3R5);}function JrNC(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);var e=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.C)!==(0x75bcd15-0O726746425)){return;}if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;}cpu.wz=cpu.pc=cpu.pc+toSbyte(e);if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jr nc,#"+cpu.pc.toString(0o20),cpu.pc,cpu.tacts));}}function LdSPNN(cpu){var p=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();var s=cpu.readCodeMemory();cpu.incPc();cpu.sp=(s<<(0O347010110&0x463A71D))|p;cpu.tacts+=(0O334664274-0x37368B9);}function LdNNiA(cpu){var l=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);var addr=(cpu.readCodeMemory()<<(0O347010110&0x463A71D))|l;cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);cpu.wz=((addr+(0O57060516-0xbc614d))&0o377)+(cpu.a<<(0O347010110&0x463A71D));cpu.writeMemory(addr,cpu.a);cpu.wzh=cpu.a;cpu.tacts+=(0O334664274-0x37368B9);}function IncSP(cpu){cpu.sp++;cpu.tacts+=(15658734^0O73567354);}function IncHLi(cpu){var memValue=cpu.readMemory(cpu.hl);if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}memValue=cpu.aluIncByte(memValue);cpu.writeMemory(cpu.hl,memValue);cpu.tacts+=(0O334664274-0x37368B9);}function DecHLi(cpu){var memValue=cpu.readMemory(cpu.hl);if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}memValue=cpu.aluDecByte(memValue);cpu.writeMemory(cpu.hl,memValue);cpu.tacts+=(0O334664274-0x37368B9);}function LdHLiN(cpu){var val=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.writeMemory(cpu.hl,val);cpu.tacts+=(0O334664274-0x37368B9);}function Scf(cpu){cpu.f=((cpu.f&(FlagsSetMask_1.FlagsSetMask.SZPV))|(cpu.a&(FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3))|FlagsSetMask_1.FlagsSetMask.C);}function JrC(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);var e=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)){return;}if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;}cpu.wz=cpu.pc=cpu.pc+toSbyte(e);if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jr c,#"+cpu.pc.toString(0o20),cpu.pc,cpu.tacts));}}function AddHLSP(cpu){cpu.wz=cpu.hl+(0O57060516-0xbc614d);cpu.hl=cpu.aluAddHL(cpu.hl,cpu.sp);cpu.tacts+=(0x9D8DE4-0O47306735);}function LdANNi(cpu){var addr=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();addr+=cpu.readCodeMemory()*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz=addr+(0O57060516-0xbc614d);cpu.a=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);}function DecSP(cpu){cpu.sp--;cpu.tacts+=(15658734^0O73567354);}function IncA(cpu){cpu.f=incOpFlags[cpu.a++]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function DecA(cpu){cpu.f=decOpFlags[cpu.a--]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function LdAN(cpu){cpu.a=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);}function Ccf(cpu){cpu.f=(cpu.f&(FlagsSetMask_1.FlagsSetMask.SZPV))|(cpu.a&(FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3))|((cpu.f&FlagsSetMask_1.FlagsSetMask.C)!==(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.H:FlagsSetMask_1.FlagsSetMask.C);}function LdB_C(cpu){cpu.b=cpu.c;}function LdB_D(cpu){cpu.b=cpu.d;}function LdB_E(cpu){cpu.b=cpu.e;}function LdB_H(cpu){cpu.b=cpu.h;}function LdB_L(cpu){cpu.b=cpu.l;}function LdB_HLi(cpu){cpu.b=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);}function LdB_A(cpu){cpu.b=cpu.a;}function LdC_B(cpu){cpu.c=cpu.b;}function LdC_D(cpu){cpu.c=cpu.d;}function LdC_E(cpu){cpu.c=cpu.e;}function LdC_H(cpu){cpu.c=cpu.h;}function LdC_L(cpu){cpu.c=cpu.l;}function LdC_HLi(cpu){cpu.c=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);}function LdC_A(cpu){cpu.c=cpu.a;}function LdD_B(cpu){cpu.d=cpu.b;}function LdD_C(cpu){cpu.d=cpu.c;}function LdD_E(cpu){cpu.d=cpu.e;}function LdD_H(cpu){cpu.d=cpu.h;}function LdD_L(cpu){cpu.d=cpu.l;}function LdD_HLi(cpu){cpu.d=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);}function LdD_A(cpu){cpu.d=cpu.a;}function LdE_B(cpu){cpu.e=cpu.b;}function LdE_C(cpu){cpu.e=cpu.c;}function LdE_D(cpu){cpu.e=cpu.d;}function LdE_H(cpu){cpu.e=cpu.h;}function LdE_L(cpu){cpu.e=cpu.l;}function LdE_HLi(cpu){cpu.e=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);}function LdE_A(cpu){cpu.e=cpu.a;}function LdH_B(cpu){cpu.h=cpu.b;}function LdH_C(cpu){cpu.h=cpu.c;}function LdH_D(cpu){cpu.h=cpu.d;}function LdH_E(cpu){cpu.h=cpu.e;}function LdH_L(cpu){cpu.h=cpu.l;}function LdH_HLi(cpu){cpu.h=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);}function LdH_A(cpu){cpu.h=cpu.a;}function LdL_B(cpu){cpu.l=cpu.b;}function LdL_C(cpu){cpu.l=cpu.c;}function LdL_D(cpu){cpu.l=cpu.d;}function LdL_E(cpu){cpu.l=cpu.e;}function LdL_H(cpu){cpu.l=cpu.h;}function LdL_HLi(cpu){cpu.l=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);}function LdL_A(cpu){cpu.l=cpu.a;}function LdHLi_B(cpu){cpu.writeMemory(cpu.hl,cpu.b);cpu.tacts+=(0O334664274-0x37368B9);}function LdHLi_C(cpu){cpu.writeMemory(cpu.hl,cpu.c);cpu.tacts+=(0O334664274-0x37368B9);}function LdHLi_D(cpu){cpu.writeMemory(cpu.hl,cpu.d);cpu.tacts+=(0O334664274-0x37368B9);}function LdHLi_E(cpu){cpu.writeMemory(cpu.hl,cpu.e);cpu.tacts+=(0O334664274-0x37368B9);}function LdHLi_H(cpu){cpu.writeMemory(cpu.hl,cpu.h);cpu.tacts+=(0O334664274-0x37368B9);}function LdHLi_L(cpu){cpu.writeMemory(cpu.hl,cpu.l);cpu.tacts+=(0O334664274-0x37368B9);}function Halt(cpu){cpu.stateFlags|=Z80StateFlags_1.Z80StateFlags.Halted;cpu.pc--;}function LdHLi_A(cpu){cpu.writeMemory(cpu.hl,cpu.a);cpu.tacts+=(0O334664274-0x37368B9);}function LdA_B(cpu){cpu.a=cpu.b;}function LdA_C(cpu){cpu.a=cpu.c;}function LdA_D(cpu){cpu.a=cpu.d;}function LdA_E(cpu){cpu.a=cpu.e;}function LdA_H(cpu){cpu.a=cpu.h;}function LdA_L(cpu){cpu.a=cpu.l;}function LdA_HLi(cpu){cpu.a=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);}function AddA_B(cpu){var src=cpu.b;cpu.f=adcFlags[cpu.a*0o400+src];cpu.a+=src;}function AddA_C(cpu){var src=cpu.c;cpu.f=adcFlags[cpu.a*0o400+src];cpu.a+=src;}function AddA_D(cpu){var src=cpu.d;cpu.f=adcFlags[cpu.a*0o400+src];cpu.a+=src;}function AddA_E(cpu){var src=cpu.e;cpu.f=adcFlags[cpu.a*0o400+src];cpu.a+=src;}function AddA_H(cpu){var src=cpu.h;cpu.f=adcFlags[cpu.a*0o400+src];cpu.a+=src;}function AddA_L(cpu){var src=cpu.l;cpu.f=adcFlags[cpu.a*0o400+src];cpu.a+=src;}function AddA_HLi(cpu){var src=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);cpu.f=adcFlags[cpu.a*0o400+src];cpu.a+=src;}function AddA_A(cpu){var src=cpu.a;cpu.f=adcFlags[cpu.a*0o400+src];cpu.a+=src;}function AdcA_B(cpu){var src=cpu.b;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=adcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a+=src+carry;}function AdcA_C(cpu){var src=cpu.c;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=adcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a+=src+carry;}function AdcA_D(cpu){var src=cpu.d;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=adcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a+=src+carry;}function AdcA_E(cpu){var src=cpu.e;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=adcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a+=src+carry;}function AdcA_H(cpu){var src=cpu.h;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=adcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a+=src+carry;}function AdcA_L(cpu){var src=cpu.l;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=adcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a+=src+carry;}function AdcA_HLi(cpu){var src=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=adcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a+=src+carry;}function AdcA_A(cpu){var src=cpu.a;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=adcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a+=src+carry;}function SubB(cpu){var src=cpu.b;cpu.f=sbcFlags[cpu.a*0o400+src];cpu.a-=src;}function SubC(cpu){var src=cpu.c;cpu.f=sbcFlags[cpu.a*0o400+src];cpu.a-=src;}function SubD(cpu){var src=cpu.d;cpu.f=sbcFlags[cpu.a*0o400+src];cpu.a-=src;}function SubE(cpu){var src=cpu.e;cpu.f=sbcFlags[cpu.a*0o400+src];cpu.a-=src;}function SubH(cpu){var src=cpu.h;cpu.f=sbcFlags[cpu.a*0o400+src];cpu.a-=src;}function SubL(cpu){var src=cpu.l;cpu.f=sbcFlags[cpu.a*0o400+src];cpu.a-=src;}function SubHLi(cpu){var src=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);cpu.f=sbcFlags[cpu.a*0o400+src];cpu.a-=src;}function SubA(cpu){var src=cpu.a;cpu.f=sbcFlags[cpu.a*0o400+src];cpu.a-=src;}function SbcB(cpu){var src=cpu.b;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=sbcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a-=src+carry;}function SbcC(cpu){var src=cpu.c;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=sbcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a-=src+carry;}function SbcD(cpu){var src=cpu.d;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=sbcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a-=src+carry;}function SbcE(cpu){var src=cpu.e;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=sbcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a-=src+carry;}function SbcH(cpu){var src=cpu.h;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=sbcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a-=src+carry;}function SbcL(cpu){var src=cpu.l;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=sbcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a-=src+carry;}function SbcHLi(cpu){var src=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=sbcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a-=src+carry;}function SbcA(cpu){var src=cpu.a;var carry=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);cpu.f=sbcFlags[carry*0o200000+cpu.a*0o400+src];cpu.a-=src+carry;}function AndB(cpu){var src=cpu.b;cpu.a&=src;cpu.f=aluLogOpFlags[cpu.a]|FlagsSetMask_1.FlagsSetMask.H;}function AndC(cpu){var src=cpu.c;cpu.a&=src;cpu.f=aluLogOpFlags[cpu.a]|FlagsSetMask_1.FlagsSetMask.H;}function AndD(cpu){var src=cpu.d;cpu.a&=src;cpu.f=aluLogOpFlags[cpu.a]|FlagsSetMask_1.FlagsSetMask.H;}function AndE(cpu){var src=cpu.e;cpu.a&=src;cpu.f=aluLogOpFlags[cpu.a]|FlagsSetMask_1.FlagsSetMask.H;}function AndH(cpu){var src=cpu.h;cpu.a&=src;cpu.f=aluLogOpFlags[cpu.a]|FlagsSetMask_1.FlagsSetMask.H;}function AndL(cpu){var src=cpu.l;cpu.a&=src;cpu.f=aluLogOpFlags[cpu.a]|FlagsSetMask_1.FlagsSetMask.H;}function AndHLi(cpu){var src=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);cpu.a&=src;cpu.f=aluLogOpFlags[cpu.a]|FlagsSetMask_1.FlagsSetMask.H;}function AndA(cpu){var src=cpu.a;cpu.a&=src;cpu.f=aluLogOpFlags[cpu.a]|FlagsSetMask_1.FlagsSetMask.H;}function XorB(cpu){var src=cpu.b;cpu.a^=src;cpu.f=aluLogOpFlags[cpu.a];}function XorC(cpu){var src=cpu.c;cpu.a^=src;cpu.f=aluLogOpFlags[cpu.a];}function XorD(cpu){var src=cpu.d;cpu.a^=src;cpu.f=aluLogOpFlags[cpu.a];}function XorE(cpu){var src=cpu.e;cpu.a^=src;cpu.f=aluLogOpFlags[cpu.a];}function XorH(cpu){var src=cpu.h;cpu.a^=src;cpu.f=aluLogOpFlags[cpu.a];}function XorL(cpu){var src=cpu.l;cpu.a^=src;cpu.f=aluLogOpFlags[cpu.a];}function XorHLi(cpu){var src=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);cpu.a^=src;cpu.f=aluLogOpFlags[cpu.a];}function XorA(cpu){var src=cpu.a;cpu.a^=src;cpu.f=aluLogOpFlags[cpu.a];}function OrB(cpu){var src=cpu.b;cpu.a|=src;cpu.f=aluLogOpFlags[cpu.a];}function OrC(cpu){var src=cpu.c;cpu.a|=src;cpu.f=aluLogOpFlags[cpu.a];}function OrD(cpu){var src=cpu.d;cpu.a|=src;cpu.f=aluLogOpFlags[cpu.a];}function OrE(cpu){var src=cpu.e;cpu.a|=src;cpu.f=aluLogOpFlags[cpu.a];}function OrH(cpu){var src=cpu.h;cpu.a|=src;cpu.f=aluLogOpFlags[cpu.a];}function OrL(cpu){var src=cpu.l;cpu.a|=src;cpu.f=aluLogOpFlags[cpu.a];}function OrHLi(cpu){var src=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);cpu.a|=src;cpu.f=aluLogOpFlags[cpu.a];}function OrA(cpu){var src=cpu.a;cpu.a|=src;cpu.f=aluLogOpFlags[cpu.a];}function CpB(cpu){var src=cpu.b;var res=cpu.a*0o400+src;cpu.f=(sbcFlags[res]&FlagsResetMask_1.FlagsResetMask.R3&FlagsResetMask_1.FlagsResetMask.R5)|(res&FlagsSetMask_1.FlagsSetMask.R3R5);}function CpC(cpu){var src=cpu.c;var res=cpu.a*0o400+src;cpu.f=(sbcFlags[res]&FlagsResetMask_1.FlagsResetMask.R3&FlagsResetMask_1.FlagsResetMask.R5)|(res&FlagsSetMask_1.FlagsSetMask.R3R5);}function CpD(cpu){var src=cpu.d;var res=cpu.a*0o400+src;cpu.f=(sbcFlags[res]&FlagsResetMask_1.FlagsResetMask.R3&FlagsResetMask_1.FlagsResetMask.R5)|(res&FlagsSetMask_1.FlagsSetMask.R3R5);}function CpE(cpu){var src=cpu.e;var res=cpu.a*0o400+src;cpu.f=(sbcFlags[res]&FlagsResetMask_1.FlagsResetMask.R3&FlagsResetMask_1.FlagsResetMask.R5)|(res&FlagsSetMask_1.FlagsSetMask.R3R5);}function CpH(cpu){var src=cpu.h;var res=cpu.a*0o400+src;cpu.f=(sbcFlags[res]&FlagsResetMask_1.FlagsResetMask.R3&FlagsResetMask_1.FlagsResetMask.R5)|(res&FlagsSetMask_1.FlagsSetMask.R3R5);}function CpL(cpu){var src=cpu.l;var res=cpu.a*0o400+src;cpu.f=(sbcFlags[res]&FlagsResetMask_1.FlagsResetMask.R3&FlagsResetMask_1.FlagsResetMask.R5)|(res&FlagsSetMask_1.FlagsSetMask.R3R5);}function CpHLi(cpu){var src=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);var res=cpu.a*0o400+src;cpu.f=(sbcFlags[res]&FlagsResetMask_1.FlagsResetMask.R3&FlagsResetMask_1.FlagsResetMask.R5)|(res&FlagsSetMask_1.FlagsSetMask.R3R5);}function CpA(cpu){var src=cpu.a;var res=cpu.a*0o400+src;cpu.f=(sbcFlags[res]&FlagsResetMask_1.FlagsResetMask.R3&FlagsResetMask_1.FlagsResetMask.R5)|(res&FlagsSetMask_1.FlagsSetMask.R3R5);}function RetNZ(cpu){var oldSp=cpu.sp;cpu.tacts++;if((cpu.f&FlagsSetMask_1.FlagsSetMask.Z)!==(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.wz+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'ret nz',cpu.pc,cpu.tacts));}}function PopBC(cpu){var oldSp=cpu.sp;var val=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.bc=(cpu.readMemory(cpu.sp)<<(0O347010110&0x463A71D))|val;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),'pop bc',oldSp,cpu.bc,cpu.tacts));}}function JpNZ_NN(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.Z)!==(0x75bcd15-0O726746425)){return;}cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jp nz,#"+cpu.pc,cpu.pc,cpu.tacts));}}function JpNN(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jp #"+cpu.pc,cpu.pc,cpu.tacts));}}function CallNZ(cpu){cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.Z)!==(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc;if(!cpu.useGateArrayContention){cpu.readMemory(cpu.pc);}cpu.tacts++;cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),"call nz,#"+cpu.pc,cpu.sp,oldPc,cpu.tacts));}}function PushBC(cpu){var val=cpu.bc;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,val>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,val&0o377);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),'push bc',cpu.sp,val,cpu.tacts));}}function AluAN(cpu){var val=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();aluAlgorithms[(cpu.opCode&0o70)>>(0O334664274-0x37368B9)](cpu,val,cpu.cFlag);}function Rst00(cpu){var oldPc=cpu.pc;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.wz=(0x75bcd15-0O726746425);cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(oldPc-(0O57060516-0xbc614d),'rst #00',cpu.sp,oldPc,cpu.tacts));}}function RetZ(cpu){var oldSp=cpu.sp;cpu.tacts++;if((cpu.f&FlagsSetMask_1.FlagsSetMask.Z)===(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.wz+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'ret z',cpu.pc,cpu.tacts));}}function Ret(cpu){var oldSp=cpu.sp;var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.wz+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'ret',cpu.pc,cpu.tacts));}}function JpZ_NN(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.Z)===(0x75bcd15-0O726746425)){return;}cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jp z,#"+cpu.pc,cpu.pc,cpu.tacts));}}function CallZ(cpu){cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.Z)===(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc;if(!cpu.useGateArrayContention){cpu.readMemory(cpu.pc);}cpu.tacts++;cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),"call z,#"+cpu.pc,cpu.sp,oldPc,cpu.tacts));}}function CallNN(cpu){cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if(!cpu.useGateArrayContention){cpu.readMemory(cpu.pc);}cpu.tacts++;var oldPc=cpu.pc;cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc&0o377);cpu.tacts+=(0O334664274-0x37368B9);cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"call #"+cpu.pc,cpu.pc,cpu.tacts));}}function Rst08(cpu){var oldPc=cpu.pc;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.wz=(0O347010110&0x463A71D);cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(oldPc-(0O57060516-0xbc614d),'rst #08',cpu.sp,oldPc,cpu.tacts));}}function RetNC(cpu){var oldSp=cpu.sp;cpu.tacts++;if((cpu.f&FlagsSetMask_1.FlagsSetMask.C)!==(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.wz+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'ret nc',cpu.pc,cpu.tacts));}}function PopDE(cpu){var oldSp=cpu.sp;var val=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.de=(cpu.readMemory(cpu.sp)<<(0O347010110&0x463A71D))|val;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),'pop de',oldSp,cpu.bc,cpu.tacts));}}function JpNC_NN(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.C)!==(0x75bcd15-0O726746425)){return;}cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jp nc,#"+cpu.pc,cpu.pc,cpu.tacts));}}function OutNA(cpu){var port=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);cpu.wz=((port+(0O57060516-0xbc614d))&0o377)+(cpu.a<<(0O347010110&0x463A71D));port+=cpu.a<<(0O347010110&0x463A71D);cpu.writePort(port,cpu.a);}function CallNC(cpu){cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.C)!==(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc;if(!cpu.useGateArrayContention){cpu.readMemory(cpu.pc);}cpu.tacts++;cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),"call nc,#"+cpu.pc,cpu.sp,oldPc,cpu.tacts));}}function PushDE(cpu){var val=cpu.de;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,val>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,val&0o377);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),'push de',cpu.sp,val,cpu.tacts));}}function Rst10(cpu){var oldPc=cpu.pc;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.wz=0o20;cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(oldPc-(0O57060516-0xbc614d),'rst #10',cpu.sp,oldPc,cpu.tacts));}}function RetC(cpu){var oldSp=cpu.sp;cpu.tacts++;if((cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.wz+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'ret nc',cpu.pc,cpu.tacts));}}function Exx(cpu){cpu.exchangeRegisterSet();}function JpC_NN(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)){return;}cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jp c,#"+cpu.pc,cpu.pc,cpu.tacts));}}function InAN(cpu){var port=cpu.readCodeMemory();cpu.incPc();cpu.tacts+=(0O334664274-0x37368B9);port+=cpu.a<<(0O347010110&0x463A71D);cpu.wz=(cpu.a<<(0O347010110&0x463A71D))+port+(0O57060516-0xbc614d);cpu.a=cpu.readPort(port);}function CallC(cpu){cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.C)===(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc;if(!cpu.useGateArrayContention){cpu.readMemory(cpu.pc);}cpu.tacts++;cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),"call c,#"+cpu.pc,cpu.sp,oldPc,cpu.tacts));}}function Rst18(cpu){var oldPc=cpu.pc;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.wz=0o30;cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(oldPc-(0O57060516-0xbc614d),'rst #18',cpu.sp,oldPc,cpu.tacts));}}function RetPO(cpu){var oldSp=cpu.sp;cpu.tacts++;if((cpu.f&FlagsSetMask_1.FlagsSetMask.PV)!==(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.wz+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'ret nc',cpu.pc,cpu.tacts));}}function PopHL(cpu){var oldSp=cpu.sp;var val=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.hl=(cpu.readMemory(cpu.sp)<<(0O347010110&0x463A71D))|val;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),'pop hl',oldSp,cpu.bc,cpu.tacts));}}function JpPO_NN(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.PV)!==(0x75bcd15-0O726746425)){return;}cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jp po,#"+cpu.pc,cpu.pc,cpu.tacts));}}function ExSPiHL(cpu){var tmpSp=cpu.sp;cpu.wz=cpu.readMemory(tmpSp);cpu.tacts+=(0O334664274-0x37368B9);tmpSp++;cpu.wz+=cpu.readMemory(tmpSp)*0o400;if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(tmpSp);cpu.tacts++;}cpu.writeMemory(tmpSp,cpu.h);tmpSp--;cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(tmpSp,cpu.l);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(tmpSp,cpu.l);cpu.tacts++;cpu.writeMemory(tmpSp,cpu.l);cpu.tacts++;}cpu.hl=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),'ex (sp),hl',cpu.sp,cpu.hl,cpu.tacts));}}function CallPO(cpu){cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.PV)!==(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc;if(!cpu.useGateArrayContention){cpu.readMemory(cpu.pc);}cpu.tacts++;cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),"call po,#"+cpu.pc,cpu.sp,oldPc,cpu.tacts));}}function PushHL(cpu){var val=cpu.hl;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,val>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,val&0o377);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),'push hl',cpu.sp,val,cpu.tacts));}}function Rst20(cpu){var oldPc=cpu.pc;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.wz=0o40;cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(oldPc-(0O57060516-0xbc614d),'rst #20',cpu.sp,oldPc,cpu.tacts));}}function RetPE(cpu){var oldSp=cpu.sp;cpu.tacts++;if((cpu.f&FlagsSetMask_1.FlagsSetMask.PV)===(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.wz+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'ret nc',cpu.pc,cpu.tacts));}}function JpHL(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.pc=cpu.hl;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'jp (hl)',cpu.pc,cpu.tacts));}}function JpPE_NN(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.PV)===(0x75bcd15-0O726746425)){return;}cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jp pe,#"+cpu.pc,cpu.pc,cpu.tacts));}}function ExDEHL(cpu){var tmp=cpu.de;cpu.de=cpu.hl;cpu.hl=tmp;}function CallPE(cpu){cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.PV)===(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc;if(!cpu.useGateArrayContention){cpu.readMemory(cpu.pc);}cpu.tacts++;cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),"call pe,#"+cpu.pc,cpu.sp,oldPc,cpu.tacts));}}function Rst28(cpu){var oldPc=cpu.pc;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.wz=0o50;cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(oldPc-(0O57060516-0xbc614d),'rst #28',cpu.sp,oldPc,cpu.tacts));}}function RetP(cpu){var oldSp=cpu.sp;cpu.tacts++;if((cpu.f&FlagsSetMask_1.FlagsSetMask.S)!==(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.wz+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'ret p',cpu.pc,cpu.tacts));}}function PopAF(cpu){var oldSp=cpu.sp;var val=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.af=(cpu.readMemory(cpu.sp)<<(0O347010110&0x463A71D))|val;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),'pop af',oldSp,cpu.bc,cpu.tacts));}}function JpP_NN(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.S)!==(0x75bcd15-0O726746425)){return;}cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jp p,#"+cpu.pc,cpu.pc,cpu.tacts));}}function Di(cpu){cpu.iff2=cpu.iff1=false;}function CallP(cpu){cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.S)!==(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc;if(!cpu.useGateArrayContention){cpu.readMemory(cpu.pc);}cpu.tacts++;cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),"call p,#"+cpu.pc,cpu.sp,oldPc,cpu.tacts));}}function PushAF(cpu){var val=cpu.af;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,val>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,val&0o377);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),'push af',cpu.sp,val,cpu.tacts));}}function Rst30(cpu){var oldPc=cpu.pc;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.wz=0o60;cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(oldPc-(0O57060516-0xbc614d),'rst #30',cpu.sp,oldPc,cpu.tacts));}}function RetM(cpu){var oldSp=cpu.sp;cpu.tacts++;if((cpu.f&FlagsSetMask_1.FlagsSetMask.S)===(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.wz+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'ret m',cpu.pc,cpu.tacts));}}function LdSPHL(cpu){var oldSP=cpu.sp;cpu.sp=cpu.hl;cpu.tacts+=(15658734^0O73567354);if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackPointerManipulationEvent(new StackPointerManipulationEvent_1.StackPointerManipulationEvent(cpu.pc-(0O57060516-0xbc614d),'ld sp,hl',cpu.sp,oldSP,cpu.tacts));}}function JpM_NN(cpu){var oldPc=cpu.pc-(0O57060516-0xbc614d);cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.S)===(0x75bcd15-0O726746425)){return;}cpu.pc=cpu.wz;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,"jp m,#"+cpu.pc,cpu.pc,cpu.tacts));}}function Ei(cpu){cpu.iff2=cpu.iff1=cpu.isInterruptBlocked=true;}function CallM(cpu){cpu.wz=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if((cpu.f&FlagsSetMask_1.FlagsSetMask.S)===(0x75bcd15-0O726746425)){return;}var oldPc=cpu.pc;if(!cpu.useGateArrayContention){cpu.readMemory(cpu.pc);}cpu.tacts++;cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(0O57060516-0xbc614d),"call m,#"+cpu.pc,cpu.sp,oldPc,cpu.tacts));}}function Rst38(cpu){var oldPc=cpu.pc;cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,cpu.pc>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,cpu.pc);cpu.tacts+=(0O334664274-0x37368B9);cpu.wz=0o70;cpu.pc=cpu.wz;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(oldPc-(0O57060516-0xbc614d),'rst #38',cpu.sp,oldPc,cpu.tacts));}}function Swapnib(cpu){if(!cpu.allowExtendedInstructionSet){return;}cpu.a=(cpu.a>>(0x5E30A78-0O570605164))|(cpu.a<<(0x5E30A78-0O570605164));}function MirrA(cpu){if(!cpu.allowExtendedInstructionSet){return;}var newA=(0x75bcd15-0O726746425);var oldA=cpu.a;for(var i=(0x75bcd15-0O726746425);i<(0O347010110&0x463A71D);i++){newA<<=(0O57060516-0xbc614d);newA|=oldA&(0O57060516-0xbc614d);oldA>>=(0O57060516-0xbc614d);}cpu.a=newA;}function MirrDE(cpu){if(!cpu.allowExtendedInstructionSet){return;}var newDE=(0x75bcd15-0O726746425);var oldDE=cpu.de;for(var i=(0x75bcd15-0O726746425);i<0o20;i++){newDE<<=(0O57060516-0xbc614d);newDE|=oldDE&(0O57060516-0xbc614d);oldDE>>=(0O57060516-0xbc614d);}cpu.de=newDE;}function TestN(cpu){if(!cpu.allowExtendedInstructionSet){return;}var value=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();var result=cpu.a&value;cpu.f=aluLogOpFlags[result]|FlagsSetMask_1.FlagsSetMask.H;}function Mul(cpu){if(!cpu.allowExtendedInstructionSet){return;}var mul=cpu.hl*cpu.de;cpu.de=mul;cpu.hl=(mul>>0o20);}function AddHL_A(cpu){if(!cpu.allowExtendedInstructionSet){return;}cpu.hl+=cpu.a;}function AddDE_A(cpu){if(!cpu.allowExtendedInstructionSet){return;}cpu.de+=cpu.a;}function AddBC_A(cpu){if(!cpu.allowExtendedInstructionSet){return;}cpu.bc+=cpu.a;}function AddHLNN(cpu){if(!cpu.allowExtendedInstructionSet){return;}var value=cpu.readCodeMemory();cpu.tacts+=(0x5E30A78-0O570605164);cpu.incPc();value+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0x5E30A78-0O570605164);cpu.incPc();cpu.hl+=value;}function AddDENN(cpu){if(!cpu.allowExtendedInstructionSet){return;}var value=cpu.readCodeMemory();cpu.tacts+=(0x5E30A78-0O570605164);cpu.incPc();value+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0x5E30A78-0O570605164);cpu.incPc();cpu.de+=value;}function AddBCNN(cpu){if(!cpu.allowExtendedInstructionSet){return;}var value=cpu.readCodeMemory();cpu.tacts+=(0x5E30A78-0O570605164);cpu.incPc();value+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0x5E30A78-0O570605164);cpu.incPc();cpu.bc+=value;}function InB_C(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);var pval=cpu.readPort(cpu.bc);cpu.b=pval;cpu.f=aluLogOpFlags[pval]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function OutC_B(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);cpu.writePort(cpu.bc,cpu.b);}function SbcHL_QQ(cpu){cpu.wz=cpu.hl+(0O57060516-0xbc614d);var cfVal=cpu.cFlag?(0O57060516-0xbc614d):(0x75bcd15-0O726746425);var qq=(cpu.opCode&0o60)>>(0x5E30A78-0O570605164);var flags=FlagsSetMask_1.FlagsSetMask.N;flags|=(((cpu.hl&0o7777)-(cpu.getReg16(qq)&0o7777)-cfVal)>>(0O347010110&0x463A71D))&FlagsSetMask_1.FlagsSetMask.H;var sbcVal=(cpu.hl&0o177777)-(cpu.getReg16(qq)&0o177777)-cfVal;if((sbcVal&0o200000)!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.C;}if((sbcVal&0o177777)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}var signedSbc=toSshort(cpu.hl)-toSshort(cpu.getReg16(qq))-cfVal;if(signedSbc<-0o100000||signedSbc>=0o100000){flags|=FlagsSetMask_1.FlagsSetMask.PV;}cpu.hl=toSshort(sbcVal);cpu.f=flags|(cpu.h&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5));cpu.tacts+=(0x9D8DE4-0O47306735);}function LdNNi_QQ(cpu){var l=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();var addr=cpu.readCodeMemory()<<(0O347010110&0x463A71D)|l;cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz=addr+(0O57060516-0xbc614d);var regVal=cpu.getReg16((cpu.opCode&0o60)>>(0x5E30A78-0O570605164));cpu.writeMemory(addr,regVal&0o377);cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(cpu.wz,regVal>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);}function Neg(cpu){var result=-cpu.a;var lNibble=-(cpu.a&0o17)&0o20;var flags=result&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3);flags|=FlagsSetMask_1.FlagsSetMask.N;if((result&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}if(cpu.a!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.C;}if(lNibble!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.H;}if(cpu.a===0o200){flags|=FlagsSetMask_1.FlagsSetMask.PV;}cpu.f=flags;cpu.a=result;}function Retn(cpu){var oldSp=cpu.sp;var oldPc=cpu.pc-(15658734^0O73567354);cpu.iff1=cpu.iff2;var addr=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;addr+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.pc=addr;cpu.wz=addr;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'retn',cpu.pc,cpu.tacts));}}function ImN(cpu){var mode=(cpu.opCode&0o30)>>(0O334664274-0x37368B9);if(mode<(15658734^0O73567354)){mode=(0O57060516-0xbc614d);}mode--;cpu.interruptMode=mode;}function LdXR_A(cpu){if((cpu.opCode&(0O347010110&0x463A71D))===(0x75bcd15-0O726746425)){cpu.i=cpu.a;}else{cpu.r=cpu.a;}cpu.tacts++;}function InC_C(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);var pval=cpu.readPort(cpu.bc);cpu.c=pval;cpu.f=aluLogOpFlags[pval]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function OutC_C(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);cpu.writePort(cpu.bc,cpu.c);}function AdcHL_QQ(cpu){cpu.wz=cpu.hl+(0O57060516-0xbc614d);var cfVal=cpu.cFlag?(0O57060516-0xbc614d):(0x75bcd15-0O726746425);var qq=(cpu.opCode&0o60)>>(0x5E30A78-0O570605164);var flags=((((cpu.hl&0o7777)+(cpu.getReg16(qq)&0o7777)+(cpu.f&FlagsSetMask_1.FlagsSetMask.C))>>(0O347010110&0x463A71D))&FlagsSetMask_1.FlagsSetMask.H)&0o377;var adcVal=(cpu.hl&0o177777)+(cpu.getReg16(qq)&0o177777)+cfVal;if((adcVal&0o200000)!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.C;}if((adcVal&0o177777)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}var signedAdc=toSshort(cpu.hl)+toSshort(cpu.getReg16(qq))+cfVal;if(signedAdc<-0o100000||signedAdc>=0o100000){flags|=FlagsSetMask_1.FlagsSetMask.PV;}cpu.hl=adcVal;cpu.f=flags|(cpu.h&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5));cpu.tacts+=(0x9D8DE4-0O47306735);}function LdQQ_NNi(cpu){var addrl=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();var addr=cpu.readCodeMemory()<<(0O347010110&0x463A71D)|addrl;cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz=addr+(0O57060516-0xbc614d);var l=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);var h=cpu.readMemory(cpu.wz);cpu.tacts+=(0O334664274-0x37368B9);cpu.setReg16((cpu.opCode&0o60)>>(0x5E30A78-0O570605164),h<<(0O347010110&0x463A71D)|l);}function Reti(cpu){var oldSp=cpu.sp;var oldPc=cpu.pc-(15658734^0O73567354);cpu.iff1=cpu.iff2;var addr=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;addr+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.pc=addr;cpu.wz=addr;if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,'reti',cpu.pc,cpu.tacts));}}function InD_C(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);var pval=cpu.readPort(cpu.bc);cpu.d=pval;cpu.f=aluLogOpFlags[pval]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function OutC_D(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);cpu.writePort(cpu.bc,cpu.d);}function LdA_XR(cpu){var source=(cpu.opCode&(0O347010110&0x463A71D))===(0x75bcd15-0O726746425)?cpu.i:cpu.r;cpu.a=source;var flags=cpu.f&FlagsSetMask_1.FlagsSetMask.C|(source&FlagsSetMask_1.FlagsSetMask.R3R5)|(cpu.iff2?FlagsSetMask_1.FlagsSetMask.PV:(0x75bcd15-0O726746425))|(source&0o200)|(source===(0x75bcd15-0O726746425)?FlagsSetMask_1.FlagsSetMask.Z:(0x75bcd15-0O726746425));cpu.f=flags;cpu.tacts++;}function InE_C(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);var pval=cpu.readPort(cpu.bc);cpu.e=pval;cpu.f=aluLogOpFlags[pval]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function OutC_E(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);cpu.writePort(cpu.bc,cpu.e);}function Rrd(cpu){var tmp=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.wz=cpu.hl+(0O57060516-0xbc614d);cpu.writeMemory(cpu.hl,((cpu.a<<(0x5E30A78-0O570605164))|(tmp>>(0x5E30A78-0O570605164)))&0o377);cpu.tacts+=(0O334664274-0x37368B9);cpu.a=(cpu.a&0o360)|(tmp&0o17);cpu.f=aluLogOpFlags[cpu.a]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function InH_C(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);var pval=cpu.readPort(cpu.bc);cpu.h=pval;cpu.f=aluLogOpFlags[pval]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function OutC_H(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);cpu.writePort(cpu.bc,cpu.h);}function Rld(cpu){var tmp=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.wz=cpu.hl+(0O57060516-0xbc614d);cpu.writeMemory(cpu.hl,((cpu.a&0o17)|(tmp<<(0x5E30A78-0O570605164)))&0o377);cpu.tacts+=(0O334664274-0x37368B9);cpu.a=(cpu.a&0o360)|(tmp>>(0x5E30A78-0O570605164));cpu.f=aluLogOpFlags[cpu.a]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function InL_C(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);var pval=cpu.readPort(cpu.bc);cpu.l=pval;cpu.f=aluLogOpFlags[pval]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function OutC_L(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);cpu.writePort(cpu.bc,cpu.l);}function InF_C(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);var pval=cpu.readPort(cpu.bc);cpu.f=aluLogOpFlags[pval]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function OutC_0(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);cpu.writePort(cpu.bc,(0x75bcd15-0O726746425));}function InA_C(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);var pval=cpu.readPort(cpu.bc);cpu.a=pval;cpu.f=aluLogOpFlags[pval]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);}function OutC_A(cpu){cpu.wz=cpu.bc+(0O57060516-0xbc614d);cpu.writePort(cpu.bc,cpu.a);}function LdSP_NNi(cpu){var oldSP=cpu.sp;var addrl=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();var addr=cpu.readCodeMemory()<<(0O347010110&0x463A71D)|addrl;cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz=addr+(0O57060516-0xbc614d);var l=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);var h=cpu.readMemory(cpu.wz);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp=h<<(0O347010110&0x463A71D)|l;if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackPointerManipulationEvent(new StackPointerManipulationEvent_1.StackPointerManipulationEvent(oldSP-(0O57060516-0xbc614d),"ld sp,(#"+addr.toString(0o20)+")",cpu.sp,oldSP,cpu.tacts));}}function PushNN(cpu){if(!cpu.allowExtendedInstructionSet){return;}var value=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();value+=cpu.readCodeMemory()<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.sp--;cpu.writeMemory(cpu.sp,value>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,value);cpu.tacts+=(0O334664274-0x37368B9);}function Outinb(cpu){if(!cpu.allowExtendedInstructionSet){return;}cpu.tacts++;var val=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);cpu.writePort(cpu.bc,val);cpu.hl++;}function Nextreg(cpu){if(!cpu.allowExtendedInstructionSet){return;}var reg=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();var val=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if(cpu.tbBlueDevice===undefined){return;}cpu.tbBlueDevice.setRegisterIndex(reg);cpu.tbBlueDevice.setRegisterValue(val);}function NextregA(cpu){if(!cpu.allowExtendedInstructionSet){return;}var reg=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();if(cpu.tbBlueDevice===undefined){return;}cpu.tbBlueDevice.setRegisterIndex(reg);cpu.tbBlueDevice.setRegisterValue(cpu.a);}function Pixeldn(cpu){if(!cpu.allowExtendedInstructionSet){return;}if((cpu.h&(0x9D8DE4-0O47306735))===(0x9D8DE4-0O47306735)){if(cpu.l<0o340){cpu.l+=0o40;cpu.h&=0o370;}else{cpu.l+=0o40;cpu.h++;}}else{cpu.hl+=0o400;}}function Pixelad(cpu){if(!cpu.allowExtendedInstructionSet){return;}var da=0o40000|(cpu.e>>(0O334664274-0x37368B9))|(cpu.d<<(0O507646144^0x51F4C61));cpu.hl=((da&0o174037)|((da&0o3400)>>(0O334664274-0x37368B9))|((da&0o340)<<(0O334664274-0x37368B9)));}function Setae(cpu){if(!cpu.allowExtendedInstructionSet){return;}cpu.a|=(0O57060516-0xbc614d)<<(cpu.e&(0x9D8DE4-0O47306735));}function Ldi(cpu){var memVal=cpu.readMemory(cpu.hl++);cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(cpu.de,memVal);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(cpu.de,memVal);cpu.tacts++;cpu.writeMemory(cpu.de,memVal);cpu.tacts++;}cpu.de++;memVal+=cpu.a;memVal=((memVal&FlagsSetMask_1.FlagsSetMask.R3)|((memVal<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5))&0o377;cpu.f=(cpu.f&~(FlagsSetMask_1.FlagsSetMask.N|FlagsSetMask_1.FlagsSetMask.H|FlagsSetMask_1.FlagsSetMask.PV|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5))|memVal;if(--cpu.bc!==(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;}}function Cpi(cpu){var memVal=cpu.readMemory(cpu.hl);var compRes=cpu.a-memVal;var r3r5=compRes;var flags=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)|FlagsSetMask_1.FlagsSetMask.N;if((((cpu.a&0o17)-(compRes&0o17))&0o20)!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.H;r3r5=compRes-(0O57060516-0xbc614d);}if((compRes&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}flags|=compRes&FlagsSetMask_1.FlagsSetMask.S;flags|=(r3r5&FlagsSetMask_1.FlagsSetMask.R3)|((r3r5<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.hl++;if(--cpu.bc!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.PV;}cpu.f=flags;cpu.wz++;}function Ini(cpu){cpu.tacts++;cpu.wz=cpu.bc+(0O57060516-0xbc614d);var val=cpu.readPort(cpu.bc);cpu.writeMemory(cpu.hl,val);cpu.tacts+=(0O334664274-0x37368B9);cpu.f=decOpFlags[cpu.b]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);cpu.b--;cpu.hl++;}function Outi(cpu){cpu.tacts++;cpu.f=decOpFlags[cpu.b];cpu.b--;var val=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);cpu.writePort(cpu.bc,val);cpu.hl++;cpu.f&=FlagsResetMask_1.FlagsResetMask.C;if(cpu.l===(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.C;}cpu.wz=cpu.bc+(0O57060516-0xbc614d);}function Ldix(cpu){if(!cpu.allowExtendedInstructionSet){return;}var memVal=cpu.readMemory(cpu.hl++);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.a!==memVal){cpu.writeMemory(cpu.de,memVal);cpu.tacts+=(0O334664274-0x37368B9);}cpu.tacts+=(15658734^0O73567354);cpu.de++;memVal+=cpu.a;memVal=(memVal&FlagsSetMask_1.FlagsSetMask.R3)|((memVal<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5)&0o377;cpu.f=(cpu.f&~(FlagsSetMask_1.FlagsSetMask.N|FlagsSetMask_1.FlagsSetMask.H|FlagsSetMask_1.FlagsSetMask.PV|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5))|memVal;if(--cpu.bc!==(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;}}function Ldd(cpu){var memVal=cpu.readMemory(cpu.hl--);cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(cpu.de,memVal);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(cpu.de,memVal);cpu.tacts++;cpu.writeMemory(cpu.de,memVal);cpu.tacts++;}cpu.de--;memVal+=cpu.a;memVal=((memVal&FlagsSetMask_1.FlagsSetMask.R3)|((memVal<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5))&0o377;cpu.f=(cpu.f&~(FlagsSetMask_1.FlagsSetMask.N|FlagsSetMask_1.FlagsSetMask.H|FlagsSetMask_1.FlagsSetMask.PV|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5))|memVal;if(--cpu.bc!==(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;}}function Cpd(cpu){var memVal=cpu.readMemory(cpu.hl);var compRes=cpu.a-memVal;var r3r5=compRes;var flags=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)|FlagsSetMask_1.FlagsSetMask.N;if((((cpu.a&0o17)-(compRes&0o17))&0o20)!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.H;r3r5=compRes-(0O57060516-0xbc614d);}if((compRes&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}flags|=compRes&FlagsSetMask_1.FlagsSetMask.S;flags|=(r3r5&FlagsSetMask_1.FlagsSetMask.R3)|((r3r5<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.hl--;if(--cpu.bc!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.PV;}cpu.f=flags;cpu.wz--;}function Ind(cpu){cpu.tacts++;cpu.wz=cpu.bc-(0O57060516-0xbc614d);var val=cpu.readPort(cpu.bc);cpu.writeMemory(cpu.hl,val);cpu.tacts+=(0O334664274-0x37368B9);cpu.f=decOpFlags[cpu.b]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);cpu.b--;cpu.hl--;}function Outd(cpu){cpu.tacts++;cpu.f=decOpFlags[cpu.b];cpu.b--;var val=cpu.readMemory(cpu.hl);cpu.tacts+=(0O334664274-0x37368B9);cpu.writePort(cpu.bc,val);cpu.hl--;cpu.f&=FlagsResetMask_1.FlagsResetMask.C;if(cpu.l===0o377){cpu.f|=FlagsSetMask_1.FlagsSetMask.C;}cpu.wz=cpu.bc-(0O57060516-0xbc614d);}function Lddx(cpu){if(!cpu.allowExtendedInstructionSet){return;}var memVal=cpu.readMemory(cpu.hl--);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.a!==memVal){cpu.writeMemory(cpu.de,memVal);cpu.tacts+=(0O334664274-0x37368B9);}cpu.tacts+=(15658734^0O73567354);cpu.de--;memVal+=cpu.a;memVal=(memVal&FlagsSetMask_1.FlagsSetMask.R3)|((memVal<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5);cpu.f=(cpu.f&~(FlagsSetMask_1.FlagsSetMask.N|FlagsSetMask_1.FlagsSetMask.H|FlagsSetMask_1.FlagsSetMask.PV|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5))|memVal;if(--cpu.bc!==(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;}}function Ldir(cpu){var memVal=cpu.readMemory(cpu.hl++);cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(cpu.de,memVal);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(cpu.de,memVal);cpu.tacts++;cpu.writeMemory(cpu.de,memVal);cpu.tacts++;}cpu.de++;memVal+=cpu.a;memVal=((memVal&FlagsSetMask_1.FlagsSetMask.R3)|((memVal<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5))&0o377;cpu.f=(cpu.f&~(FlagsSetMask_1.FlagsSetMask.N|FlagsSetMask_1.FlagsSetMask.H|FlagsSetMask_1.FlagsSetMask.PV|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5))|memVal;if(--cpu.bc===(0x75bcd15-0O726746425)){return;}cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;cpu.pc-=(15658734^0O73567354);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.de-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.de-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.de-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.de-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.de-(0O57060516-0xbc614d));cpu.tacts++;}cpu.wz=cpu.pc+(0O57060516-0xbc614d);}function Cpir(cpu){var memVal=cpu.readMemory(cpu.hl);var compRes=cpu.a-memVal;var r3r5=compRes;var flags=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)|FlagsSetMask_1.FlagsSetMask.N;if((((cpu.a&0o17)-(compRes&0o17))&0o20)!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.H;r3r5=compRes-(0O57060516-0xbc614d);}if((compRes&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}flags|=compRes&FlagsSetMask_1.FlagsSetMask.S;flags|=(r3r5&FlagsSetMask_1.FlagsSetMask.R3)|((r3r5<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.hl++;if(--cpu.bc!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.PV;if((flags&FlagsSetMask_1.FlagsSetMask.Z)===(0x75bcd15-0O726746425)){cpu.pc-=(15658734^0O73567354);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.hl-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl-(0O57060516-0xbc614d));cpu.tacts++;}cpu.wz=cpu.pc+(0O57060516-0xbc614d);}}cpu.f=flags;}function Inir(cpu){cpu.tacts++;cpu.wz=cpu.bc+(0O57060516-0xbc614d);var val=cpu.readPort(cpu.bc);cpu.writeMemory(cpu.hl,val);cpu.tacts+=(0O334664274-0x37368B9);cpu.f=decOpFlags[cpu.b]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);cpu.b--;cpu.hl++;if(cpu.b!==(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;cpu.pc-=(15658734^0O73567354);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.hl-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl-(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl-(0O57060516-0xbc614d));cpu.tacts++;}}else{cpu.f&=FlagsResetMask_1.FlagsResetMask.PV;}}function Otir(cpu){cpu.tacts++;cpu.f=decOpFlags[cpu.b];cpu.b--;var val=cpu.readMemory(cpu.hl++);cpu.tacts+=(0O334664274-0x37368B9);cpu.writePort(cpu.bc,val);if(cpu.b!==(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;cpu.pc-=(15658734^0O73567354);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.bc);cpu.tacts++;cpu.readMemory(cpu.bc);cpu.tacts++;cpu.readMemory(cpu.bc);cpu.tacts++;cpu.readMemory(cpu.bc);cpu.tacts++;cpu.readMemory(cpu.bc);cpu.tacts++;}}else{cpu.f&=FlagsResetMask_1.FlagsResetMask.PV;}cpu.f&=FlagsResetMask_1.FlagsResetMask.C;if(cpu.l===(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.C;}cpu.wz=cpu.bc+(0O57060516-0xbc614d);}function Ldirx(cpu){if(!cpu.allowExtendedInstructionSet){return;}var memVal=cpu.readMemory(cpu.hl++);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.a!==memVal){cpu.writeMemory(cpu.de,memVal);cpu.tacts+=(0O334664274-0x37368B9);}cpu.tacts+=(15658734^0O73567354);cpu.de++;memVal+=cpu.a;memVal=(memVal&FlagsSetMask_1.FlagsSetMask.R3)|((memVal<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5);cpu.f=(cpu.f&~(FlagsSetMask_1.FlagsSetMask.N|FlagsSetMask_1.FlagsSetMask.H|FlagsSetMask_1.FlagsSetMask.PV|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5))|memVal;if(--cpu.bc===(0x75bcd15-0O726746425)){return;}cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;cpu.pc-=(15658734^0O73567354);cpu.tacts+=(0O507646144^0x51F4C61);cpu.wz=cpu.pc+(0O57060516-0xbc614d);}function Lddr(cpu){var memVal=cpu.readMemory(cpu.hl--);cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(cpu.de,memVal);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(cpu.de,memVal);cpu.tacts++;cpu.writeMemory(cpu.de,memVal);cpu.tacts++;}cpu.de--;memVal+=cpu.a;memVal=((memVal&FlagsSetMask_1.FlagsSetMask.R3)|((memVal<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5))&0o377;cpu.f=(cpu.f&~(FlagsSetMask_1.FlagsSetMask.N|FlagsSetMask_1.FlagsSetMask.H|FlagsSetMask_1.FlagsSetMask.PV|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5))|memVal;if(--cpu.bc===(0x75bcd15-0O726746425)){return;}cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;cpu.pc-=(15658734^0O73567354);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.de+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.de+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.de+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.de+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.de+(0O57060516-0xbc614d));cpu.tacts++;}cpu.wz=cpu.pc+(0O57060516-0xbc614d);}function Cpdr(cpu){var memVal=cpu.readMemory(cpu.hl);var compRes=cpu.a-memVal;var r3r5=compRes;var flags=(cpu.f&FlagsSetMask_1.FlagsSetMask.C)|FlagsSetMask_1.FlagsSetMask.N;if((((cpu.a&0o17)-(compRes&0o17))&0o20)!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.H;r3r5=compRes-(0O57060516-0xbc614d);}if((compRes&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}flags|=compRes&FlagsSetMask_1.FlagsSetMask.S;flags|=(r3r5&FlagsSetMask_1.FlagsSetMask.R3)|((r3r5<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.hl--;if(--cpu.bc!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.PV;if((flags&FlagsSetMask_1.FlagsSetMask.Z)===(0x75bcd15-0O726746425)){cpu.pc-=(15658734^0O73567354);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.hl+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl+(0O57060516-0xbc614d));cpu.tacts++;}cpu.wz=cpu.pc+(0O57060516-0xbc614d);}}cpu.f=flags;}function Indr(cpu){cpu.tacts++;cpu.wz=cpu.bc-(0O57060516-0xbc614d);var val=cpu.readPort(cpu.bc);cpu.writeMemory(cpu.hl,val);cpu.tacts+=(0O334664274-0x37368B9);cpu.f=decOpFlags[cpu.b]|(cpu.f&FlagsSetMask_1.FlagsSetMask.C);cpu.b--;cpu.hl--;if(cpu.b!==(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;cpu.pc-=(15658734^0O73567354);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.hl+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl+(0O57060516-0xbc614d));cpu.tacts++;cpu.readMemory(cpu.hl+(0O57060516-0xbc614d));cpu.tacts++;}}else{cpu.f&=FlagsResetMask_1.FlagsResetMask.PV;}}function Otdr(cpu){cpu.tacts++;cpu.f=decOpFlags[cpu.b];cpu.b--;var val=cpu.readMemory(cpu.hl--);cpu.tacts+=(0O334664274-0x37368B9);cpu.writePort(cpu.bc,val);if(cpu.b!==(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;cpu.pc-=(15658734^0O73567354);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.bc);cpu.tacts++;cpu.readMemory(cpu.bc);cpu.tacts++;cpu.readMemory(cpu.bc);cpu.tacts++;cpu.readMemory(cpu.bc);cpu.tacts++;cpu.readMemory(cpu.bc);cpu.tacts++;}}else{cpu.f&=FlagsResetMask_1.FlagsResetMask.PV;}cpu.f&=FlagsResetMask_1.FlagsResetMask.C;if(cpu.l===0o377){cpu.f|=FlagsSetMask_1.FlagsSetMask.C;}cpu.wz=cpu.bc-(0O57060516-0xbc614d);}function Lddrx(cpu){if(!cpu.allowExtendedInstructionSet){return;}var memVal=cpu.readMemory(cpu.hl--);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.a!==memVal){cpu.writeMemory(cpu.de,memVal);cpu.tacts+=(0O334664274-0x37368B9);}cpu.tacts+=(15658734^0O73567354);cpu.de--;memVal+=cpu.a;memVal=(memVal&FlagsSetMask_1.FlagsSetMask.R3)|((memVal<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5);cpu.f=(cpu.f&~(FlagsSetMask_1.FlagsSetMask.N|FlagsSetMask_1.FlagsSetMask.H|FlagsSetMask_1.FlagsSetMask.PV|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5))|memVal;if(--cpu.bc===(0x75bcd15-0O726746425)){return;}cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;cpu.pc-=(15658734^0O73567354);cpu.tacts+=(0O507646144^0x51F4C61);cpu.wz=cpu.pc+(0O57060516-0xbc614d);}function Ldirscale(cpu){if(!cpu.allowExtendedInstructionSet){return;}var memVal=cpu.readMemory(cpu.hl++);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.a!==memVal){cpu.writeMemory(cpu.de,memVal);cpu.tacts+=(0O334664274-0x37368B9);}cpu.tacts+=(15658734^0O73567354);var hl_a=cpu.hl<<(0O347010110&0x463A71D)+(cpu._af_>>(0O347010110&0x463A71D))+cpu._bc_;cpu.hl=hl_a>>(0O347010110&0x463A71D);cpu._af_=((hl_a<<(0O347010110&0x463A71D))&0o17)|(cpu._af_&0o17);cpu.de+=cpu._de_;memVal+=cpu.a;memVal=(memVal&FlagsSetMask_1.FlagsSetMask.R3)|((memVal<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5);cpu.f=(cpu.f&~(FlagsSetMask_1.FlagsSetMask.N|FlagsSetMask_1.FlagsSetMask.H|FlagsSetMask_1.FlagsSetMask.PV|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5))|memVal;if(--cpu.bc===(0x75bcd15-0O726746425)){return;}cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;cpu.pc-=(15658734^0O73567354);cpu.tacts+=(0O507646144^0x51F4C61);cpu.wz=cpu.pc+(0O57060516-0xbc614d);}function Ldpirx(cpu){if(!cpu.allowExtendedInstructionSet){return;}var addr=(cpu.hl&0o3777770)+(cpu.e&(0x9D8DE4-0O47306735));var memVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.a!==memVal){cpu.writeMemory(cpu.de,memVal);cpu.tacts+=(0O334664274-0x37368B9);}cpu.tacts+=(15658734^0O73567354);cpu.de++;memVal+=cpu.a;memVal=(memVal&FlagsSetMask_1.FlagsSetMask.R3)|((memVal<<(0x5E30A78-0O570605164))&FlagsSetMask_1.FlagsSetMask.R5);cpu.f=(cpu.f&~(FlagsSetMask_1.FlagsSetMask.N|FlagsSetMask_1.FlagsSetMask.H|FlagsSetMask_1.FlagsSetMask.PV|FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5))|memVal;if(--cpu.bc!==(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.PV;}}function RlcB(cpu){var rlcVal=cpu.b;cpu.b=rolOpResults[rlcVal];cpu.f=rlcFlags[rlcVal];}function RlcC(cpu){var rlcVal=cpu.c;cpu.c=rolOpResults[rlcVal];cpu.f=rlcFlags[rlcVal];}function RlcD(cpu){var rlcVal=cpu.d;cpu.d=rolOpResults[rlcVal];cpu.f=rlcFlags[rlcVal];}function RlcE(cpu){var rlcVal=cpu.e;cpu.e=rolOpResults[rlcVal];cpu.f=rlcFlags[rlcVal];}function RlcH(cpu){var rlcVal=cpu.h;cpu.h=rolOpResults[rlcVal];cpu.f=rlcFlags[rlcVal];}function RlcL(cpu){var rlcVal=cpu.l;cpu.l=rolOpResults[rlcVal];cpu.f=rlcFlags[rlcVal];}function RlcHLi(cpu){var rlcVal=cpu.readMemory(cpu.hl);cpu.f=rlcFlags[rlcVal];if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.writeMemory(cpu.hl,rolOpResults[rlcVal]);cpu.tacts+=(0O334664274-0x37368B9);}function RlcA(cpu){var rlcVal=cpu.a;cpu.a=rolOpResults[rlcVal];cpu.f=rlcFlags[rlcVal];}function RrcB(cpu){var rrcVal=cpu.b;cpu.b=rorOpResults[rrcVal];cpu.f=rrcFlags[rrcVal];}function RrcC(cpu){var rrcVal=cpu.c;cpu.c=rorOpResults[rrcVal];cpu.f=rrcFlags[rrcVal];}function RrcD(cpu){var rrcVal=cpu.d;cpu.d=rorOpResults[rrcVal];cpu.f=rrcFlags[rrcVal];}function RrcE(cpu){var rrcVal=cpu.e;cpu.e=rorOpResults[rrcVal];cpu.f=rrcFlags[rrcVal];}function RrcH(cpu){var rrcVal=cpu.h;cpu.h=rorOpResults[rrcVal];cpu.f=rrcFlags[rrcVal];}function RrcL(cpu){var rrcVal=cpu.l;cpu.l=rorOpResults[rrcVal];cpu.f=rrcFlags[rrcVal];}function RrcHLi(cpu){var rrcVal=cpu.readMemory(cpu.hl);cpu.f=rrcFlags[rrcVal];if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.writeMemory(cpu.hl,rorOpResults[rrcVal]);cpu.tacts+=(0O334664274-0x37368B9);}function RrcA(cpu){var rrcVal=cpu.a;cpu.a=rorOpResults[rrcVal];cpu.f=rrcFlags[rrcVal];}function RlB(cpu){var rlVal=cpu.b;if(cpu.cFlag){cpu.f=rlCarry1Flags[rlVal];cpu.b=(rlVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}else{cpu.f=rlCarry0Flags[rlVal];cpu.b=rlVal<<(0O57060516-0xbc614d);}}function RlC(cpu){var rlVal=cpu.c;if(cpu.cFlag){cpu.f=rlCarry1Flags[rlVal];cpu.c=(rlVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}else{cpu.f=rlCarry0Flags[rlVal];cpu.c=rlVal<<(0O57060516-0xbc614d);}}function RlD(cpu){var rlVal=cpu.d;if(cpu.cFlag){cpu.f=rlCarry1Flags[rlVal];cpu.d=(rlVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}else{cpu.f=rlCarry0Flags[rlVal];cpu.d=rlVal<<(0O57060516-0xbc614d);}}function RlE(cpu){var rlVal=cpu.e;if(cpu.cFlag){cpu.f=rlCarry1Flags[rlVal];cpu.e=(rlVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}else{cpu.f=rlCarry0Flags[rlVal];cpu.e=rlVal<<(0O57060516-0xbc614d);}}function RlH(cpu){var rlVal=cpu.h;if(cpu.cFlag){cpu.f=rlCarry1Flags[rlVal];cpu.h=(rlVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}else{cpu.f=rlCarry0Flags[rlVal];cpu.h=rlVal<<(0O57060516-0xbc614d);}}function RlL(cpu){var rlVal=cpu.l;if(cpu.cFlag){cpu.f=rlCarry1Flags[rlVal];cpu.l=(rlVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}else{cpu.f=rlCarry0Flags[rlVal];cpu.l=rlVal<<(0O57060516-0xbc614d);}}function RlHLi(cpu){var rlVal=cpu.readMemory(cpu.hl);if(cpu.cFlag){cpu.f=rlCarry1Flags[rlVal];rlVal=(rlVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}else{cpu.f=rlCarry0Flags[rlVal];rlVal=rlVal<<(0O57060516-0xbc614d);}if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.writeMemory(cpu.hl,rlVal);cpu.tacts+=(0O334664274-0x37368B9);}function RlA(cpu){var rlVal=cpu.a;if(cpu.cFlag){cpu.f=rlCarry1Flags[rlVal];cpu.a=(rlVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}else{cpu.f=rlCarry0Flags[rlVal];cpu.a=rlVal<<(0O57060516-0xbc614d);}}function RrB(cpu){var rrVal=cpu.b;if(cpu.cFlag){cpu.f=rrCarry1Flags[rrVal];cpu.b=(rrVal>>(0O57060516-0xbc614d))+0o200;}else{cpu.f=rrCarry0Flags[rrVal];cpu.b=rrVal>>(0O57060516-0xbc614d);}}function RrC(cpu){var rrVal=cpu.c;if(cpu.cFlag){cpu.f=rrCarry1Flags[rrVal];cpu.c=(rrVal>>(0O57060516-0xbc614d))+0o200;}else{cpu.f=rrCarry0Flags[rrVal];cpu.c=rrVal>>(0O57060516-0xbc614d);}}function RrD(cpu){var rrVal=cpu.d;if(cpu.cFlag){cpu.f=rrCarry1Flags[rrVal];cpu.d=(rrVal>>(0O57060516-0xbc614d))+0o200;}else{cpu.f=rrCarry0Flags[rrVal];cpu.d=rrVal>>(0O57060516-0xbc614d);}}function RrE(cpu){var rrVal=cpu.e;if(cpu.cFlag){cpu.f=rrCarry1Flags[rrVal];cpu.e=(rrVal>>(0O57060516-0xbc614d))+0o200;}else{cpu.f=rrCarry0Flags[rrVal];cpu.e=rrVal>>(0O57060516-0xbc614d);}}function RrH(cpu){var rrVal=cpu.h;if(cpu.cFlag){cpu.f=rrCarry1Flags[rrVal];cpu.h=(rrVal>>(0O57060516-0xbc614d))+0o200;}else{cpu.f=rrCarry0Flags[rrVal];cpu.h=rrVal>>(0O57060516-0xbc614d);}}function RrL(cpu){var rrVal=cpu.l;if(cpu.cFlag){cpu.f=rrCarry1Flags[rrVal];cpu.l=(rrVal>>(0O57060516-0xbc614d))+0o200;}else{cpu.f=rrCarry0Flags[rrVal];cpu.l=rrVal>>(0O57060516-0xbc614d);}}function RrHLi(cpu){var rrVal=cpu.readMemory(cpu.hl);if(cpu.cFlag){cpu.f=rrCarry1Flags[rrVal];rrVal=(rrVal>>(0O57060516-0xbc614d))+0o200;}else{cpu.f=rrCarry0Flags[rrVal];rrVal=rrVal>>(0O57060516-0xbc614d);}if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.writeMemory(cpu.hl,rrVal);cpu.tacts+=(0O334664274-0x37368B9);}function RrA(cpu){var rrVal=cpu.a;if(cpu.cFlag){cpu.f=rrCarry1Flags[rrVal];cpu.a=(rrVal>>(0O57060516-0xbc614d))+0o200;}else{cpu.f=rrCarry0Flags[rrVal];cpu.a=rrVal>>(0O57060516-0xbc614d);}}function SlaB(cpu){var slaVal=cpu.b;cpu.f=rlCarry0Flags[slaVal];cpu.b=slaVal<<(0O57060516-0xbc614d);}function SlaC(cpu){var slaVal=cpu.c;cpu.f=rlCarry0Flags[slaVal];cpu.c=slaVal<<(0O57060516-0xbc614d);}function SlaD(cpu){var slaVal=cpu.d;cpu.f=rlCarry0Flags[slaVal];cpu.d=slaVal<<(0O57060516-0xbc614d);}function SlaE(cpu){var slaVal=cpu.e;cpu.f=rlCarry0Flags[slaVal];cpu.e=slaVal<<(0O57060516-0xbc614d);}function SlaH(cpu){var slaVal=cpu.h;cpu.f=rlCarry0Flags[slaVal];cpu.h=slaVal<<(0O57060516-0xbc614d);}function SlaL(cpu){var slaVal=cpu.l;cpu.f=rlCarry0Flags[slaVal];cpu.l=slaVal<<(0O57060516-0xbc614d);}function SlaHLi(cpu){var slaVal=cpu.readMemory(cpu.hl);cpu.f=rlCarry0Flags[slaVal];slaVal<<=(0O57060516-0xbc614d);if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.writeMemory(cpu.hl,slaVal);cpu.tacts+=(0O334664274-0x37368B9);}function SlaA(cpu){var slaVal=cpu.a;cpu.f=rlCarry0Flags[slaVal];cpu.a=slaVal<<(0O57060516-0xbc614d);}function SraB(cpu){var sraVal=cpu.b;cpu.f=sraFlags[sraVal];cpu.b=(sraVal>>(0O57060516-0xbc614d))+(sraVal&0o200);}function SraC(cpu){var sraVal=cpu.c;cpu.f=sraFlags[sraVal];cpu.c=(sraVal>>(0O57060516-0xbc614d))+(sraVal&0o200);}function SraD(cpu){var sraVal=cpu.d;cpu.f=sraFlags[sraVal];cpu.d=(sraVal>>(0O57060516-0xbc614d))+(sraVal&0o200);}function SraE(cpu){var sraVal=cpu.e;cpu.f=sraFlags[sraVal];cpu.e=(sraVal>>(0O57060516-0xbc614d))+(sraVal&0o200);}function SraH(cpu){var sraVal=cpu.h;cpu.f=sraFlags[sraVal];cpu.h=(sraVal>>(0O57060516-0xbc614d))+(sraVal&0o200);}function SraL(cpu){var sraVal=cpu.l;cpu.f=sraFlags[sraVal];cpu.l=(sraVal>>(0O57060516-0xbc614d))+(sraVal&0o200);}function SraHLi(cpu){var sraVal=cpu.readMemory(cpu.hl);cpu.f=sraFlags[sraVal];sraVal=(sraVal>>(0O57060516-0xbc614d))+(sraVal&0o200);if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.writeMemory(cpu.hl,sraVal);cpu.tacts+=(0O334664274-0x37368B9);}function SraA(cpu){var sraVal=cpu.a;cpu.f=sraFlags[sraVal];cpu.a=(sraVal>>(0O57060516-0xbc614d))+(sraVal&0o200);}function SllB(cpu){var sllVal=cpu.b;cpu.f=rlCarry1Flags[sllVal];cpu.b=(sllVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}function SllC(cpu){var sllVal=cpu.c;cpu.f=rlCarry1Flags[sllVal];cpu.c=(sllVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}function SllD(cpu){var sllVal=cpu.d;cpu.f=rlCarry1Flags[sllVal];cpu.d=(sllVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}function SllE(cpu){var sllVal=cpu.e;cpu.f=rlCarry1Flags[sllVal];cpu.e=(sllVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}function SllH(cpu){var sllVal=cpu.h;cpu.f=rlCarry1Flags[sllVal];cpu.h=(sllVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}function SllL(cpu){var sllVal=cpu.l;cpu.f=rlCarry1Flags[sllVal];cpu.l=(sllVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}function SllHLi(cpu){var sllVal=cpu.readMemory(cpu.hl);cpu.f=rlCarry1Flags[sllVal];sllVal<<=(0O57060516-0xbc614d);sllVal++;if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.writeMemory(cpu.hl,sllVal);cpu.tacts+=(0O334664274-0x37368B9);}function SllA(cpu){var sllVal=cpu.a;cpu.f=rlCarry1Flags[sllVal];cpu.a=(sllVal<<(0O57060516-0xbc614d))+(0O57060516-0xbc614d);}function SrlB(cpu){var srlVal=cpu.b;cpu.f=rrCarry0Flags[srlVal];cpu.b=srlVal>>(0O57060516-0xbc614d);}function SrlC(cpu){var srlVal=cpu.c;cpu.f=rrCarry0Flags[srlVal];cpu.c=srlVal>>(0O57060516-0xbc614d);}function SrlD(cpu){var srlVal=cpu.d;cpu.f=rrCarry0Flags[srlVal];cpu.d=srlVal>>(0O57060516-0xbc614d);}function SrlE(cpu){var srlVal=cpu.e;cpu.f=rrCarry0Flags[srlVal];cpu.e=srlVal>>(0O57060516-0xbc614d);}function SrlH(cpu){var srlVal=cpu.h;cpu.f=rrCarry0Flags[srlVal];cpu.h=srlVal>>(0O57060516-0xbc614d);}function SrlL(cpu){var srlVal=cpu.l;cpu.f=rrCarry0Flags[srlVal];cpu.l=srlVal>>(0O57060516-0xbc614d);}function SrlHLi(cpu){var srlVal=cpu.readMemory(cpu.hl);cpu.f=rlCarry0Flags[srlVal];srlVal>>=(0O57060516-0xbc614d);if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.writeMemory(cpu.hl,srlVal);cpu.tacts+=(0O334664274-0x37368B9);}function SrlA(cpu){var srlVal=cpu.a;cpu.f=rrCarry0Flags[srlVal];cpu.a=srlVal>>(0O57060516-0xbc614d);}function BitN_Q(cpu){var q=cpu.opCode&(0x9D8DE4-0O47306735);var n=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);var srcVal=cpu.getReg8(q);var testVal=srcVal&((0O57060516-0xbc614d)<<n);var flags=FlagsSetMask_1.FlagsSetMask.H|(cpu.f&FlagsSetMask_1.FlagsSetMask.C)|(srcVal&(FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5));if(testVal===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z|FlagsSetMask_1.FlagsSetMask.PV;}if(n===(0x9D8DE4-0O47306735)&&testVal!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.S;}cpu.f=flags;}function BinN_HLi(cpu){var srcVal=cpu.readMemory(cpu.hl);var n=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);var testVal=srcVal&((0O57060516-0xbc614d)<<n);var flags=FlagsSetMask_1.FlagsSetMask.H|(cpu.f&FlagsSetMask_1.FlagsSetMask.C)|(srcVal&(FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5));if(testVal===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z|FlagsSetMask_1.FlagsSetMask.PV;}if(n===(0x9D8DE4-0O47306735)&&testVal!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.S;}flags=(flags&(FlagsResetMask_1.FlagsResetMask.R3|FlagsResetMask_1.FlagsResetMask.R5)|(cpu.wzh&(FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5)));cpu.f=flags;if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}}function ResN_Q(cpu){var q=cpu.opCode&(0x9D8DE4-0O47306735);var n=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);cpu.setReg8(q,cpu.getReg8(q)&~((0O57060516-0xbc614d)<<n));}function ResN_HLi(cpu){var memVal=cpu.readMemory(cpu.hl);var n=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);memVal&=~((0O57060516-0xbc614d)<<n);if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.writeMemory(cpu.hl,memVal);cpu.tacts+=(0O334664274-0x37368B9);}function SetN_Q(cpu){var q=cpu.opCode&(0x9D8DE4-0O47306735);var n=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);cpu.setReg8(q,cpu.getReg8(q)|((0O57060516-0xbc614d)<<n));}function SetN_HLi(cpu){var memVal=cpu.readMemory(cpu.hl);var n=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);memVal|=(0O57060516-0xbc614d)<<n;if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(cpu.hl);cpu.tacts++;}cpu.writeMemory(cpu.hl,memVal);cpu.tacts+=(0O334664274-0x37368B9);}function AddIX_QQ(cpu){var ixVal=cpu.getIndexReg();cpu.wz=ixVal+(0O57060516-0xbc614d);var qq=(cpu.opCode&0o60)>>(0x5E30A78-0O570605164);var qqVal=qq===(15658734^0O73567354)?ixVal:cpu.getReg16(qq);cpu.tacts+=(0x5E30A78-0O570605164);var result=qqVal+ixVal;cpu.f=cpu.f&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.Z|FlagsSetMask_1.FlagsSetMask.PV);cpu.f|=(((result>>(0O347010110&0x463A71D))&0o377)&(FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3));cpu.f|=(((ixVal&0o7777)+(qqVal&0o7777))>>(0O347010110&0x463A71D))&FlagsSetMask_1.FlagsSetMask.H;if((result&0o200000)!==(0x75bcd15-0O726746425)){cpu.f|=FlagsSetMask_1.FlagsSetMask.C;}cpu.setIndexReg(result);cpu.tacts+=(0O334664274-0x37368B9);}function LdIX_NN(cpu){var l=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();var nn=cpu.readCodeMemory()<<(0O347010110&0x463A71D)|l;cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.setIndexReg(nn);}function LdNNi_IX(cpu){var ixVal=cpu.getIndexReg();var l=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();var addr=cpu.readCodeMemory()<<(0O347010110&0x463A71D)|l;cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz=addr+(0O57060516-0xbc614d);cpu.writeMemory(addr,ixVal&0o377);cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(cpu.wz,(ixVal>>(0O347010110&0x463A71D))&0o377);cpu.tacts+=(0O334664274-0x37368B9);}function IncIX(cpu){cpu.setIndexReg(cpu.getIndexReg()+(0O57060516-0xbc614d));cpu.tacts+=(15658734^0O73567354);}function IncXH(cpu){var ixVal=cpu.getIndexReg();var hVal=cpu.aluIncByte(ixVal>>(0O347010110&0x463A71D));cpu.setIndexReg(hVal<<(0O347010110&0x463A71D)|(ixVal&0o377));}function LdXH_N(cpu){var val=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.setIndexReg(val<<(0O347010110&0x463A71D)|(cpu.getIndexReg()&0o377));}function LdIX_NNi(cpu){var l=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();var addr=cpu.readCodeMemory()<<(0O347010110&0x463A71D)|l;cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.wz=addr+(0O57060516-0xbc614d);var val=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);val+=cpu.readMemory(cpu.wz)<<(0O347010110&0x463A71D);cpu.tacts+=(0O334664274-0x37368B9);cpu.setIndexReg(val);}function DecIX(cpu){cpu.setIndexReg(cpu.getIndexReg()-(0O57060516-0xbc614d));cpu.tacts+=(15658734^0O73567354);}function DecXH(cpu){var ixVal=cpu.getIndexReg();var hVal=cpu.aluDecByte(ixVal>>(0O347010110&0x463A71D));cpu.setIndexReg(hVal<<(0O347010110&0x463A71D)|(ixVal&0o377));}function IncXL(cpu){var ixVal=cpu.getIndexReg();var lVal=cpu.aluIncByte(ixVal);cpu.setIndexReg(ixVal&0o177400|lVal);}function DecXL(cpu){var ixVal=cpu.getIndexReg();var lVal=cpu.aluDecByte(ixVal);cpu.setIndexReg(ixVal&0o177400|lVal);}function LdXL_N(cpu){var val=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();cpu.setIndexReg(cpu.getIndexReg()&0o177400|val);}function IncIXi(cpu){var ixVal=cpu.getIndexReg();var offset=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;}cpu.incPc();var addr=ixVal+toSbyte(offset);var memVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);memVal=cpu.aluIncByte(memVal);cpu.tacts++;cpu.writeMemory(addr,memVal);cpu.tacts+=(0O334664274-0x37368B9);}function DecIXi(cpu){var ixVal=cpu.getIndexReg();var offset=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;}cpu.incPc();var addr=ixVal+toSbyte(offset);var memVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);memVal=cpu.aluDecByte(memVal);cpu.tacts++;cpu.writeMemory(addr,memVal);cpu.tacts+=(0O334664274-0x37368B9);}function LdIXi_NN(cpu){var ixVal=cpu.getIndexReg();var offset=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);cpu.incPc();var val=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(15658734^0O73567354);}else{cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;}cpu.incPc();var addr=ixVal+toSbyte(offset);cpu.writeMemory(addr,val);cpu.tacts+=(0O334664274-0x37368B9);}function LdQ_XH(cpu){var q=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);var ixVal=cpu.getIndexReg();cpu.setReg8(q,ixVal>>(0O347010110&0x463A71D));}function LdQ_XL(cpu){var q=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);var ixVal=cpu.getIndexReg();cpu.setReg8(q,ixVal&0o377);}function LdQ_IXi(cpu){var q=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);var ixVal=cpu.getIndexReg();var offset=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;}cpu.incPc();var addr=ixVal+toSbyte(offset);cpu.setReg8(q,cpu.readMemory(addr));cpu.tacts+=(0O334664274-0x37368B9);}function LdXH_Q(cpu){var q=cpu.opCode&(0x9D8DE4-0O47306735);var ixVal=cpu.getIndexReg();cpu.setIndexReg(cpu.getReg8(q)<<(0O347010110&0x463A71D)|ixVal&0o377);}function LdXH_XL(cpu){var ixVal=cpu.getIndexReg();cpu.setIndexReg((ixVal&0o377)<<(0O347010110&0x463A71D)|ixVal&0o377);}function LdXL_Q(cpu){var q=cpu.opCode&(0x9D8DE4-0O47306735);var ixVal=cpu.getIndexReg();cpu.setIndexReg(ixVal&0o177400|cpu.getReg8(q));}function LdIXi_Q(cpu){var q=cpu.opCode&(0x9D8DE4-0O47306735);var ixVal=cpu.getIndexReg();var offset=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;}cpu.incPc();var addr=ixVal+toSbyte(offset);cpu.writeMemory(addr,cpu.getReg8(q));cpu.tacts+=(0O334664274-0x37368B9);}function LdXL_XH(cpu){var ixVal=cpu.getIndexReg();cpu.setIndexReg(ixVal&0o177400|(ixVal>>(0O347010110&0x463A71D)));}function AluA_XH(cpu){var ix=cpu.getIndexReg();var op=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);aluAlgorithms[op](cpu,ix>>(0O347010110&0x463A71D),cpu.cFlag);}function AluA_XL(cpu){var ix=cpu.getIndexReg();var op=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);aluAlgorithms[op](cpu,ix&0o377,cpu.cFlag);}function AluA_IXi(cpu){var ixVal=cpu.getIndexReg();var offset=cpu.readCodeMemory();cpu.tacts+=(0O334664274-0x37368B9);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;cpu.readMemory(cpu.pc);cpu.tacts++;}cpu.incPc();var addr=ixVal+toSbyte(offset);var op=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);aluAlgorithms[op](cpu,cpu.readMemory(addr),cpu.cFlag);cpu.tacts+=(0O334664274-0x37368B9);}function ExSPiIX(cpu){var spOld=cpu.sp;var ix=cpu.getIndexReg();var l=cpu.readMemory(spOld);cpu.tacts+=(0O334664274-0x37368B9);var h=cpu.readMemory(++spOld);if(cpu.useGateArrayContention){cpu.tacts+=(0x5E30A78-0O570605164);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(spOld);cpu.tacts++;}cpu.writeMemory(spOld,ix>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.writeMemory(--spOld,ix&0o377);if(cpu.useGateArrayContention){cpu.tacts+=(0O507646144^0x51F4C61);}else{cpu.tacts+=(0O334664274-0x37368B9);cpu.readMemory(spOld);cpu.tacts++;cpu.readMemory(spOld);cpu.tacts++;}cpu.wz=h<<(0O347010110&0x463A71D)|l;cpu.setIndexReg(cpu.wz);if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(15658734^0O73567354),cpu.indexMode===OpIndexMode_1.OpIndexMode.IX?'ex (sp),ix':'ex (sp),iy',cpu.sp,cpu.wz,cpu.tacts));}}function PushIX(cpu){var ix=cpu.getIndexReg();cpu.sp--;cpu.tacts++;cpu.writeMemory(cpu.sp,ix>>(0O347010110&0x463A71D));cpu.tacts+=(0O334664274-0x37368B9);cpu.sp--;cpu.writeMemory(cpu.sp,ix&0o377);cpu.tacts+=(0O334664274-0x37368B9);if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(15658734^0O73567354),cpu.indexMode===OpIndexMode_1.OpIndexMode.IX?'push ix':'push iy',cpu.sp,ix,cpu.tacts));}}function PopIX(cpu){var oldSp=cpu.sp;var val=cpu.readMemory(cpu.sp);cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;val+=cpu.readMemory(cpu.sp)*0o400;cpu.tacts+=(0O334664274-0x37368B9);cpu.sp++;cpu.setIndexReg(val);if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(15658734^0O73567354),cpu.indexMode===OpIndexMode_1.OpIndexMode.IX?'pop ix':'pop iy',cpu.sp,cpu.getIndexReg(),cpu.tacts));}}function JpIXi(cpu){var oldPc=cpu.pc-(15658734^0O73567354);cpu.pc=cpu.getIndexReg();if(cpu.branchDebugSupport!==undefined){cpu.branchDebugSupport.recordBranchEvent(new BranchEvent_1.BranchEvent(oldPc,cpu.indexMode===OpIndexMode_1.OpIndexMode.IX?"jp (ix)":"jp (iy)",cpu.pc,cpu.tacts));}}function LdSPIX(cpu){var oldSP=cpu.sp;cpu.sp=cpu.getIndexReg();cpu.tacts+=(15658734^0O73567354);if(cpu.stackDebugSupport!==undefined){cpu.stackDebugSupport.recordStackContentManipulationEvent(new StackContentManipulationEvent_1.StackContentManipulationEvent(cpu.pc-(15658734^0O73567354),cpu.indexMode===OpIndexMode_1.OpIndexMode.IX?'ld sp,ix':'ld sp,iy',oldSP,cpu.sp,cpu.tacts));}}function XrlcQ(cpu,addr){var q=cpu.opCode&(0x9D8DE4-0O47306735);var rlcVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=rlcFlags[rlcVal];rlcVal<<=(0O57060516-0xbc614d);if((rlcVal&0o400)!==(0x75bcd15-0O726746425)){rlcVal=(rlcVal|(0O57060516-0xbc614d))&0o377;}cpu.writeMemory(addr,rlcVal);cpu.setReg8(q,rlcVal);cpu.tacts+=(0O334664274-0x37368B9);}function Xrlc(cpu,addr){var rlcVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=rlcFlags[rlcVal];rlcVal<<=(0O57060516-0xbc614d);if((rlcVal&0o400)!==(0x75bcd15-0O726746425)){rlcVal=(rlcVal|(0O57060516-0xbc614d))&0o377;}cpu.writeMemory(addr,rlcVal);cpu.tacts+=(0O334664274-0x37368B9);}function XrrcQ(cpu,addr){var q=cpu.opCode&(0x9D8DE4-0O47306735);var rrcVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=rlcFlags[rrcVal];rrcVal=(rrcVal&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)?(rrcVal>>(0O57060516-0xbc614d))|0o200:rrcVal>>(0O57060516-0xbc614d);cpu.writeMemory(addr,rrcVal);cpu.setReg8(q,rrcVal);cpu.tacts+=(0O334664274-0x37368B9);}function Xrrc(cpu,addr){var rrcVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=rlcFlags[rrcVal];rrcVal=(rrcVal&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)?(rrcVal>>(0O57060516-0xbc614d))|0o200:rrcVal>>(0O57060516-0xbc614d);cpu.writeMemory(addr,rrcVal);cpu.tacts+=(0O334664274-0x37368B9);}function XrlQ(cpu,addr){var q=cpu.opCode&(0x9D8DE4-0O47306735);var rlVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;if(cpu.cFlag){cpu.f=rlCarry1Flags[rlVal];rlVal<<=(0O57060516-0xbc614d);rlVal++;}else{cpu.f=rlCarry0Flags[rlVal];rlVal<<=(0O57060516-0xbc614d);}cpu.writeMemory(addr,rlVal);cpu.setReg8(q,rlVal);cpu.tacts+=(0O334664274-0x37368B9);}function Xrl(cpu,addr){var rlVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;if(cpu.cFlag){cpu.f=rlCarry1Flags[rlVal];rlVal<<=(0O57060516-0xbc614d);rlVal++;}else{cpu.f=rlCarry0Flags[rlVal];rlVal<<=(0O57060516-0xbc614d);}cpu.writeMemory(addr,rlVal);cpu.tacts+=(0O334664274-0x37368B9);}function XrrQ(cpu,addr){var q=cpu.opCode&(0x9D8DE4-0O47306735);var rrVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;if(cpu.cFlag){cpu.f=rrCarry1Flags[rrVal];rrVal>>=(0O57060516-0xbc614d);rrVal+=0o200;}else{cpu.f=rrCarry0Flags[rrVal];rrVal>>=(0O57060516-0xbc614d);}cpu.writeMemory(addr,rrVal);cpu.setReg8(q,rrVal);cpu.tacts+=(0O334664274-0x37368B9);}function Xrr(cpu,addr){var rrVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;if(cpu.cFlag){cpu.f=rrCarry1Flags[rrVal];rrVal>>=(0O57060516-0xbc614d);rrVal+=0o200;}else{cpu.f=rrCarry0Flags[rrVal];rrVal>>=(0O57060516-0xbc614d);}cpu.writeMemory(addr,rrVal);cpu.tacts+=(0O334664274-0x37368B9);}function XslaQ(cpu,addr){var q=cpu.opCode&(0x9D8DE4-0O47306735);var slaVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=rlCarry0Flags[slaVal];slaVal<<=(0O57060516-0xbc614d);cpu.writeMemory(addr,slaVal);cpu.setReg8(q,slaVal);cpu.tacts+=(0O334664274-0x37368B9);}function Xsla(cpu,addr){var slaVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=rlCarry0Flags[slaVal];slaVal<<=(0O57060516-0xbc614d);cpu.writeMemory(addr,slaVal);cpu.tacts+=(0O334664274-0x37368B9);}function XsraQ(cpu,addr){var q=cpu.opCode&(0x9D8DE4-0O47306735);var sraVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=sraFlags[sraVal];sraVal=(sraVal>>(0O57060516-0xbc614d))+(sraVal&0o200);cpu.writeMemory(addr,sraVal);cpu.setReg8(q,sraVal);cpu.tacts+=(0O334664274-0x37368B9);}function Xsra(cpu,addr){var sraVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=sraFlags[sraVal];sraVal=(sraVal>>(0O57060516-0xbc614d))+(sraVal&0o200);cpu.writeMemory(addr,sraVal);cpu.tacts+=(0O334664274-0x37368B9);}function XsllQ(cpu,addr){var q=cpu.opCode&(0x9D8DE4-0O47306735);var sllVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=rlCarry1Flags[sllVal];sllVal<<=(0O57060516-0xbc614d);sllVal++;cpu.writeMemory(addr,sllVal);cpu.setReg8(q,sllVal);cpu.tacts+=(0O334664274-0x37368B9);}function Xsll(cpu,addr){var sllVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=rlCarry1Flags[sllVal];sllVal<<=(0O57060516-0xbc614d);sllVal++;cpu.writeMemory(addr,sllVal);cpu.tacts+=(0O334664274-0x37368B9);}function XsrlQ(cpu,addr){var q=cpu.opCode&(0x9D8DE4-0O47306735);var srlVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=rrCarry0Flags[srlVal];srlVal>>=(0O57060516-0xbc614d);cpu.writeMemory(addr,srlVal);cpu.setReg8(q,srlVal);cpu.tacts+=(0O334664274-0x37368B9);}function Xsrl(cpu,addr){var srlVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.f=rrCarry0Flags[srlVal];srlVal>>=(0O57060516-0xbc614d);cpu.writeMemory(addr,srlVal);cpu.tacts+=(0O334664274-0x37368B9);}function XbitN(cpu,addr){var n=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);var srcVal=cpu.readMemory(addr);cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;var testVal=srcVal&((0O57060516-0xbc614d)<<n);var flags=FlagsSetMask_1.FlagsSetMask.H|(cpu.f&FlagsSetMask_1.FlagsSetMask.C)|(srcVal&(FlagsSetMask_1.FlagsSetMask.R3|FlagsSetMask_1.FlagsSetMask.R5));if(testVal===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z|FlagsSetMask_1.FlagsSetMask.PV;}if(n===(0x9D8DE4-0O47306735)&&testVal!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.S;}cpu.f=flags;}function Xres(cpu,addr){var srcVal=cpu.readMemory(addr);var n=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);var q=cpu.opCode&(0x9D8DE4-0O47306735);srcVal&=~((0O57060516-0xbc614d)<<n);if(q!==(1011010-0O3666474)){cpu.setReg8(q,srcVal);}cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.writeMemory(addr,srcVal);cpu.tacts+=(0O334664274-0x37368B9);}function Xset(cpu,addr){var srcVal=cpu.readMemory(addr);var n=(cpu.opCode&0o70)>>(0O334664274-0x37368B9);var q=cpu.opCode&(0x9D8DE4-0O47306735);srcVal|=(0O57060516-0xbc614d)<<n;if(q!==(1011010-0O3666474)){cpu.setReg8(q,srcVal);}cpu.tacts+=(0O334664274-0x37368B9);if(!cpu.useGateArrayContention){cpu.readMemory(addr);}cpu.tacts++;cpu.writeMemory(addr,srcVal);cpu.tacts+=(0O334664274-0x37368B9);}function AluADD(cpu,right,cf){AluADC(cpu,right,false);}function AluADC(cpu,right,cf){var c=cf?(0O57060516-0xbc614d):(0x75bcd15-0O726746425);var result=cpu.a+right+c;var signed=toSbyte(cpu.a)+toSbyte(right)+c;var lNibble=((cpu.a&0o17)+(right&0o17)+c)&0o20;var flags=(result&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3))&0o377;if((result&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}if(result>=0o400){flags|=FlagsSetMask_1.FlagsSetMask.C;}if(lNibble!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.H;}if(signed>=0o200||signed<=-0o201){flags|=FlagsSetMask_1.FlagsSetMask.PV;}cpu.f=flags;cpu.a=result;}function AluSUB(cpu,right,cf){AluSBC(cpu,right,false);}function AluSBC(cpu,right,cf){var c=cf?(0O57060516-0xbc614d):(0x75bcd15-0O726746425);var result=cpu.a-right-c;var signed=toSbyte(cpu.a)-toSbyte(right)-c;var lNibble=((cpu.a&0o17)-(right&0o17)-c)&0o20;var flags=(result&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3))&0o17;flags|=FlagsSetMask_1.FlagsSetMask.N;if((result&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}if((result&0o200000)!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.C;}if(lNibble!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.H;}if(signed>=0o200||signed<=-0o201){flags|=FlagsSetMask_1.FlagsSetMask.PV;}cpu.f=flags;cpu.a=result;}function AluAND(cpu,right,cf){cpu.a&=right;cpu.f=aluLogOpFlags[cpu.a]|FlagsSetMask_1.FlagsSetMask.H;}function AluXOR(cpu,right,cf){cpu.a^=right;cpu.f=aluLogOpFlags[cpu.a];}function AluOR(cpu,right,cf){cpu.a|=right;cpu.f=aluLogOpFlags[cpu.a];}function AluCP(cpu,right,cf){var result=cpu.a-right;var signed=toSbyte(cpu.a)-toSbyte(right);var lNibble=((cpu.a&0o17)-(right&0o17))&0o20;var flags=(result&(FlagsSetMask_1.FlagsSetMask.S|FlagsSetMask_1.FlagsSetMask.R5|FlagsSetMask_1.FlagsSetMask.R3))&0o377;flags|=FlagsSetMask_1.FlagsSetMask.N;if((result&0o377)===(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.Z;}if((result&0o200000)!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.C;}if(lNibble!==(0x75bcd15-0O726746425)){flags|=FlagsSetMask_1.FlagsSetMask.H;}if(signed>=0o200||signed<=-0o201){flags|=FlagsSetMask_1.FlagsSetMask.PV;}cpu.f=flags;}},{"../devices/memory/NoopMemoryDevice":56,"../devices/ports/NoopPortDevice":60,"./BranchEvent":14,"./FlagsResetMask":17,"./FlagsSetMask":18,"./MemoryStatusArray":19,"./OpIndexMode":21,"./OpPrefixMode":22,"./StackContentManipulationEvent":24,"./StackPointerManipulationEvent":25,"./Z80StateFlags":27}],27:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var Z80StateFlags;(function(Z80StateFlags){Z80StateFlags[Z80StateFlags["None"]=(0x75bcd15-0O726746425)]="None";Z80StateFlags[Z80StateFlags["Int"]=(0O57060516-0xbc614d)]="Int";Z80StateFlags[Z80StateFlags["Nmi"]=(15658734^0O73567354)]="Nmi";Z80StateFlags[Z80StateFlags["Reset"]=(0x5E30A78-0O570605164)]="Reset";Z80StateFlags[Z80StateFlags["Halted"]=(0O347010110&0x463A71D)]="Halted";Z80StateFlags[Z80StateFlags["InvInt"]=0o376]="InvInt";Z80StateFlags[Z80StateFlags["InvNmi"]=0o375]="InvNmi";Z80StateFlags[Z80StateFlags["InvReset"]=0o373]="InvReset";Z80StateFlags[Z80StateFlags["InvHalted"]=0o367]="InvHalted";})(Z80StateFlags=exports.Z80StateFlags||(exports.Z80StateFlags={}));},{}],28:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var DeviceInfoBase=(function(){function DeviceInfoBase(provider,configurationData,device){this.device=device;this.configurationData=configurationData;this.provider=provider;}return DeviceInfoBase;}());exports.DeviceInfoBase=DeviceInfoBase;},{}],29:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.DT_CPU="CpuDevice";exports.DT_BEEPER="BeeperDevice";exports.DT_INTERRUPT="InterruptDevice";exports.DT_KEYBOARD="KeyboardDevice";exports.DT_MEMORY="MemoryDevice";exports.DT_PORT="PortDevice";exports.DT_ROM="RomDevice";exports.DT_SCREEN="ScreenDevice";exports.DT_SOUND="SoundDevice";exports.DT_TAPE="TapeDevice";exports.DT_TBBLUE="TBBLUEDevice";exports.DT_NEXTFS="NEXTFSDevice";exports.DT_DIVIDE="DivIdeDevice";exports.DT_FLOPPY="FloppyDevice";exports.PT_DEBUGINFO="DebugInfoProvider";exports.PT_ROM="RomProvider";exports.PT_KEYBOARD="KeyboardProvider";exports.PT_TAPE="TapeProvider";},{}],30:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var NoopSpectrumVm_1=require("../machine/NoopSpectrumVm");var VmComponentProviderBase=(function(){function VmComponentProviderBase(){this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();}VmComponentProviderBase.prototype.reset=function(){};VmComponentProviderBase.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;};return VmComponentProviderBase;}());exports.VmComponentProviderBase=VmComponentProviderBase;},{"../machine/NoopSpectrumVm":159}],31:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var BeeperDeviceType_1=require("./BeeperDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var LiteEvent_1=require("../../utils/LiteEvent");var BeeperDevice=(function(_super){__extends(BeeperDevice,_super);function BeeperDevice(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this._firstTacts=(0x75bcd15-0O726746425);_this._accSamples=(0x75bcd15-0O726746425);_this._frameBegins=(0x75bcd15-0O726746425);_this._frameTacts=(0x75bcd15-0O726746425);_this._sampleRate=(0x75bcd15-0O726746425);_this._tactsPerSample=(0x75bcd15-0O726746425);_this._samplesPerFrame=(0x75bcd15-0O726746425);_this._useTapeMode=false;_this._frameCompleted=new LiteEvent_1.LiteEvent();_this.audioSamples=[];_this.nextSampleIndex=(0x75bcd15-0O726746425);_this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();_this.lastEarBit=true;_this.lastSampleTact=(0x75bcd15-0O726746425);_this.frameCount=(0x75bcd15-0O726746425);_this.overflow=(0x75bcd15-0O726746425);return _this;}Object.defineProperty(BeeperDevice.prototype,"samplesPerFrame",{get:function(){return this._samplesPerFrame;},enumerable:true,configurable:true});Object.defineProperty(BeeperDevice.prototype,"tactsPerSample",{get:function(){return this._tactsPerSample;},enumerable:true,configurable:true});BeeperDevice.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;this._frameTacts=hostVm.frameTacts;this.overrideSampleRate(0o56700);};BeeperDevice.prototype.reset=function(){this._firstTacts=this._frameBegins=this.hostVm.cpu.tacts;this._accSamples=(0x75bcd15-0O726746425);this.lastEarBit=false;this.frameCount=(0x75bcd15-0O726746425);this.overflow=(0x75bcd15-0O726746425);this._useTapeMode=false;this.initializeSampling();};Object.defineProperty(BeeperDevice.prototype,"sampleRate",{get:function(){return this._sampleRate;},enumerable:true,configurable:true});BeeperDevice.prototype.overrideSampleRate=function(sampleRate){this._sampleRate=sampleRate;this._samplesPerFrame=this.hostVm.screenConfiguration.screenRenderingFrameTactCount*sampleRate/this.hostVm.baseClockFrequency/this.hostVm.clockMultiplier;this._tactsPerSample=Math.ceil(this.hostVm.screenConfiguration.screenRenderingFrameTactCount/this._samplesPerFrame);this.reset();};BeeperDevice.prototype.getDeviceState=function(){return undefined;};BeeperDevice.prototype.restoreDeviceState=function(state){};BeeperDevice.prototype.onNewFrame=function(){this.frameCount++;this.initializeSampling();if(this.overflow!==(0x75bcd15-0O726746425)){this.createSamples(this._frameBegins+this.overflow);}this.overflow=(0x75bcd15-0O726746425);};BeeperDevice.prototype.onFrameCompleted=function(){if(this.lastSampleTact<this._frameBegins+this._frameTacts){this.createSamples(this._frameBegins+this._frameTacts);}if(this.hostVm.cpu.tacts>this._frameBegins+this._frameTacts){this.overflow=this.hostVm.cpu.tacts-this._frameBegins-this._frameTacts;}this._frameBegins+=this._frameTacts;};Object.defineProperty(BeeperDevice.prototype,"frameCompleted",{get:function(){return this._frameCompleted;},enumerable:true,configurable:true});BeeperDevice.prototype.processEarBitValue=function(fromTape,earBit){if(!fromTape&&this._useTapeMode){return;}if(earBit===this.lastEarBit){return;}this.createSamples(this.hostVm.cpu.tacts);this.lastEarBit=earBit;};BeeperDevice.prototype.setTapeOverride=function(useTape){this._useTapeMode=useTape;};BeeperDevice.prototype.initializeSampling=function(){var nextSamplesCount=this._firstTacts+(this.frameCount+(0O57060516-0xbc614d))*this._samplesPerFrame;this.lastSampleTact=this._frameBegins%this._tactsPerSample===(0x75bcd15-0O726746425)?this._frameBegins:this._frameBegins+this._tactsPerSample-(this._frameBegins+this._tactsPerSample)%this._tactsPerSample;var samplesInFrame=Math.floor(nextSamplesCount-this._accSamples);this._accSamples+=samplesInFrame;this.audioSamples=[];for(var i=(0x75bcd15-0O726746425);i<samplesInFrame;i++){this.audioSamples[i]=(0x75bcd15-0O726746425);}this.nextSampleIndex=(0x75bcd15-0O726746425);};BeeperDevice.prototype.createSamples=function(cpuTacts){var nextSampleOffset=this.lastSampleTact;if(cpuTacts>this._frameBegins+this._frameTacts){cpuTacts=this._frameBegins+this._frameTacts;}while(nextSampleOffset<=cpuTacts){this.audioSamples[this.nextSampleIndex++]=this.lastEarBit?(0O57060516-0xbc614d):(0x75bcd15-0O726746425);nextSampleOffset+=this._tactsPerSample;}if(this.nextSampleIndex<this.audioSamples.length){var lastSample=this.audioSamples[this.nextSampleIndex-(0O57060516-0xbc614d)];for(var i=this.nextSampleIndex;i<this.audioSamples.length;i++){this.audioSamples[i]=lastSample;}}this.lastSampleTact=nextSampleOffset;};return BeeperDevice;}(BeeperDeviceType_1.BeeperDeviceType));exports.BeeperDevice=BeeperDevice;},{"../../machine/NoopSpectrumVm":159,"../../utils/LiteEvent":173,"./BeeperDeviceType":33}],32:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceInfoBase_1=require("../DeviceInfoBase");var BeeperDevice_1=require("./BeeperDevice");var BeeperDeviceInfo=(function(_super){__extends(BeeperDeviceInfo,_super);function BeeperDeviceInfo(){return _super.call(this,undefined,undefined,new BeeperDevice_1.BeeperDevice())||this;}return BeeperDeviceInfo;}(DeviceInfoBase_1.DeviceInfoBase));exports.BeeperDeviceInfo=BeeperDeviceInfo;},{"../DeviceInfoBase":28,"./BeeperDevice":31}],33:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceTypeBase_1=require("../../abstraction/DeviceTypeBase");var DeviceTypes_1=require("../DeviceTypes");var BeeperDeviceType=(function(_super){__extends(BeeperDeviceType,_super);function BeeperDeviceType(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(BeeperDeviceType.prototype,"key",{get:function(){return DeviceTypes_1.DT_BEEPER;},enumerable:true,configurable:true});return BeeperDeviceType;}(DeviceTypeBase_1.DeviceTypeBase));exports.BeeperDeviceType=BeeperDeviceType;},{"../../abstraction/DeviceTypeBase":13,"../DeviceTypes":29}],34:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var BeeperDeviceType_1=require("./BeeperDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var LiteEvent_1=require("../../utils/LiteEvent");var NoopBeeperDevice=(function(_super){__extends(NoopBeeperDevice,_super);function NoopBeeperDevice(spectrum){var _this=_super.call(this)||this;_this.sampleRate=(0x75bcd15-0O726746425);_this.frameCount=(0x75bcd15-0O726746425);_this.overflow=(0x75bcd15-0O726746425);_this.frameCompleted=new LiteEvent_1.LiteEvent();_this.audioSamples=[];_this.samplesPerFrame=(0x75bcd15-0O726746425);_this.tactsPerSample=(0x75bcd15-0O726746425);_this.nextSampleIndex=(0x75bcd15-0O726746425);_this.lastEarBit=false;_this.lastSampleTact=(0x75bcd15-0O726746425);_this.hostVm=spectrum?spectrum:new NoopSpectrumVm_1.NoopSpectrumVm();return _this;}NoopBeeperDevice.prototype.reset=function(){};NoopBeeperDevice.prototype.overrideSampleRate=function(sampleRate){};NoopBeeperDevice.prototype.getDeviceState=function(){};NoopBeeperDevice.prototype.restoreDeviceState=function(state){};NoopBeeperDevice.prototype.onAttachedToVm=function(hostVm){};NoopBeeperDevice.prototype.onNewFrame=function(){};NoopBeeperDevice.prototype.onFrameCompleted=function(){};NoopBeeperDevice.prototype.processEarBitValue=function(fromTape,earBit){};NoopBeeperDevice.prototype.setTapeOverride=function(useTape){};return NoopBeeperDevice;}(BeeperDeviceType_1.BeeperDeviceType));exports.NoopBeeperDevice=NoopBeeperDevice;},{"../../machine/NoopSpectrumVm":159,"../../utils/LiteEvent":173,"./BeeperDeviceType":33}],35:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _frequency=0o7346545000;var HrClock=(function(){function HrClock(){}HrClock.prototype.getFrequency=function(){return _frequency;};HrClock.prototype.getCounter=function(){var time=performance.now();return time*0o3641100;};return HrClock;}());exports.HrClock=HrClock;},{}],36:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var FloppyConfigurationData=(function(){function FloppyConfigurationData(){this.floppyPresent=false;this.driveBPresent=false;}FloppyConfigurationData.prototype.clone=function(){var fc=new FloppyConfigurationData();fc.floppyPresent=this.floppyPresent;fc.driveBPresent=this.driveBPresent;return fc;};return FloppyConfigurationData;}());exports.FloppyConfigurationData=FloppyConfigurationData;},{}],37:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var Z80StateFlags_1=require("../../cpu/Z80StateFlags");var InterruptDeviceType_1=require("./InterruptDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var NoopZ80Cpu_1=require("../../cpu/NoopZ80Cpu");var LiteEvent_1=require("../../utils/LiteEvent");var LONGEST_OP_TACTS=0o27;var InterruptDevice=(function(_super){__extends(InterruptDevice,_super);function InterruptDevice(interruptTact){var _this=_super.call(this)||this;_this._cpu=new NoopZ80Cpu_1.NoopZ80Cpu();_this._frameCompleted=new LiteEvent_1.LiteEvent();_this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();_this.interruptRaised=false;_this.interruptRevoked=false;_this.frameCount=(0x75bcd15-0O726746425);_this.overflow=(0x75bcd15-0O726746425);_this.interruptTact=interruptTact;return _this;}InterruptDevice.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;this._cpu=hostVm.cpu;this.reset();};InterruptDevice.prototype.reset=function(){this.interruptRaised=false;this.interruptRevoked=false;};InterruptDevice.prototype.getDeviceState=function(){return undefined;};InterruptDevice.prototype.restoreDeviceState=function(state){};InterruptDevice.prototype.checkForInterrupt=function(currentTact){if(this.interruptRevoked){return;}if(currentTact<this.interruptTact){return;}if(currentTact>this.interruptTact+LONGEST_OP_TACTS){this.interruptRevoked=true;this._cpu.stateFlags&=Z80StateFlags_1.Z80StateFlags.InvInt;return;}if(this.interruptRaised){return;}if(this._cpu.isInterruptBlocked){return;}this.interruptRaised=true;this._cpu.stateFlags|=Z80StateFlags_1.Z80StateFlags.Int;this.frameCount++;};InterruptDevice.prototype.onNewFrame=function(){this.interruptRaised=false;this.interruptRevoked=false;};InterruptDevice.prototype.onFrameCompleted=function(){};Object.defineProperty(InterruptDevice.prototype,"frameCompleted",{get:function(){return this._frameCompleted;},enumerable:true,configurable:true});return InterruptDevice;}(InterruptDeviceType_1.InterruptDeviceType));exports.InterruptDevice=InterruptDevice;},{"../../cpu/NoopZ80Cpu":20,"../../cpu/Z80StateFlags":27,"../../machine/NoopSpectrumVm":159,"../../utils/LiteEvent":173,"./InterruptDeviceType":38}],38:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceTypeBase_1=require("../../abstraction/DeviceTypeBase");var DeviceTypes_1=require("../DeviceTypes");var InterruptDeviceType=(function(_super){__extends(InterruptDeviceType,_super);function InterruptDeviceType(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(InterruptDeviceType.prototype,"key",{get:function(){return DeviceTypes_1.DT_INTERRUPT;},enumerable:true,configurable:true});return InterruptDeviceType;}(DeviceTypeBase_1.DeviceTypeBase));exports.InterruptDeviceType=InterruptDeviceType;},{"../../abstraction/DeviceTypeBase":13,"../DeviceTypes":29}],39:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var InterruptDeviceType_1=require("./InterruptDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var LiteEvent_1=require("../../utils/LiteEvent");var NoopInterruptDevice=(function(_super){__extends(NoopInterruptDevice,_super);function NoopInterruptDevice(spectrum){var _this=_super.call(this)||this;_this.frameCount=(0x75bcd15-0O726746425);_this.overflow=(0x75bcd15-0O726746425);_this.frameCompleted=new LiteEvent_1.LiteEvent();_this.interruptTact=(0x75bcd15-0O726746425);_this.interruptRaised=false;_this.interruptRevoked=false;_this.hostVm=spectrum?spectrum:new NoopSpectrumVm_1.NoopSpectrumVm();return _this;}NoopInterruptDevice.prototype.reset=function(){};NoopInterruptDevice.prototype.getDeviceState=function(){};NoopInterruptDevice.prototype.restoreDeviceState=function(state){};NoopInterruptDevice.prototype.onAttachedToVm=function(hostVm){};NoopInterruptDevice.prototype.onNewFrame=function(){};NoopInterruptDevice.prototype.onFrameCompleted=function(){};NoopInterruptDevice.prototype.checkForInterrupt=function(currentTact){};return NoopInterruptDevice;}(InterruptDeviceType_1.InterruptDeviceType));exports.NoopInterruptDevice=NoopInterruptDevice;},{"../../machine/NoopSpectrumVm":159,"../../utils/LiteEvent":173,"./InterruptDeviceType":38}],40:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var EmulatedKeyStroke=(function(){function EmulatedKeyStroke(startTact,endTact,primaryCode,secondaryCode){this.startTact=startTact;this.endTact=endTact;this.primaryCode=primaryCode;this.secondaryCode=secondaryCode;}return EmulatedKeyStroke;}());exports.EmulatedKeyStroke=EmulatedKeyStroke;},{}],41:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var KeyCode;(function(KeyCode){KeyCode[KeyCode["Break"]=(0O334664274-0x37368B9)]="Break";KeyCode[KeyCode["Backspace"]=(0O347010110&0x463A71D)]="Backspace";KeyCode[KeyCode["Tab"]=0o11]="Tab";KeyCode[KeyCode["NumEqual"]=0o14]="NumEqual";KeyCode[KeyCode["Enter"]=0o15]="Enter";KeyCode[KeyCode["Shift"]=0o20]="Shift";KeyCode[KeyCode["Ctrl"]=0o21]="Ctrl";KeyCode[KeyCode["Alt"]=0o22]="Alt";KeyCode[KeyCode["Pause"]=0o23]="Pause";KeyCode[KeyCode["CapsLock"]=0o24]="CapsLock";KeyCode[KeyCode["Esc"]=0o33]="Esc";KeyCode[KeyCode["Space"]=0o40]="Space";KeyCode[KeyCode["PageUp"]=0o41]="PageUp";KeyCode[KeyCode["PageDown"]=0o42]="PageDown";KeyCode[KeyCode["End"]=0o43]="End";KeyCode[KeyCode["Home"]=0o44]="Home";KeyCode[KeyCode["ArrowLeft"]=0o45]="ArrowLeft";KeyCode[KeyCode["ArrowUp"]=0o46]="ArrowUp";KeyCode[KeyCode["ArrowRight"]=0o47]="ArrowRight";KeyCode[KeyCode["ArrowDown"]=0o50]="ArrowDown";KeyCode[KeyCode["Insert"]=0o55]="Insert";KeyCode[KeyCode["Delete"]=0o56]="Delete";KeyCode[KeyCode["D0"]=0o60]="D0";KeyCode[KeyCode["D1"]=0o61]="D1";KeyCode[KeyCode["D2"]=0o62]="D2";KeyCode[KeyCode["D3"]=0o63]="D3";KeyCode[KeyCode["D4"]=0o64]="D4";KeyCode[KeyCode["D5"]=0o65]="D5";KeyCode[KeyCode["D6"]=0o66]="D6";KeyCode[KeyCode["D7"]=0o67]="D7";KeyCode[KeyCode["D8"]=0o70]="D8";KeyCode[KeyCode["D9"]=0o71]="D9";KeyCode[KeyCode["A"]=0o101]="A";KeyCode[KeyCode["B"]=0o102]="B";KeyCode[KeyCode["C"]=0o103]="C";KeyCode[KeyCode["D"]=0o104]="D";KeyCode[KeyCode["E"]=0o105]="E";KeyCode[KeyCode["F"]=0o106]="F";KeyCode[KeyCode["G"]=0o107]="G";KeyCode[KeyCode["H"]=0o110]="H";KeyCode[KeyCode["I"]=0o111]="I";KeyCode[KeyCode["J"]=0o112]="J";KeyCode[KeyCode["K"]=0o113]="K";KeyCode[KeyCode["L"]=0o114]="L";KeyCode[KeyCode["M"]=0o115]="M";KeyCode[KeyCode["N"]=0o116]="N";KeyCode[KeyCode["O"]=0o117]="O";KeyCode[KeyCode["P"]=0o120]="P";KeyCode[KeyCode["Q"]=0o121]="Q";KeyCode[KeyCode["R"]=0o122]="R";KeyCode[KeyCode["S"]=0o123]="S";KeyCode[KeyCode["T"]=0o124]="T";KeyCode[KeyCode["U"]=0o125]="U";KeyCode[KeyCode["V"]=0o126]="V";KeyCode[KeyCode["W"]=0o127]="W";KeyCode[KeyCode["X"]=0o130]="X";KeyCode[KeyCode["Y"]=0o131]="Y";KeyCode[KeyCode["Z"]=0o132]="Z";KeyCode[KeyCode["OSLeft"]=0o133]="OSLeft";KeyCode[KeyCode["OSRight"]=0o134]="OSRight";KeyCode[KeyCode["ContextMenu"]=0o135]="ContextMenu";KeyCode[KeyCode["N0"]=0o140]="N0";KeyCode[KeyCode["N1"]=0o141]="N1";KeyCode[KeyCode["N2"]=0o142]="N2";KeyCode[KeyCode["N3"]=0o143]="N3";KeyCode[KeyCode["N4"]=0o144]="N4";KeyCode[KeyCode["N5"]=0o145]="N5";KeyCode[KeyCode["N6"]=0o146]="N6";KeyCode[KeyCode["N7"]=0o147]="N7";KeyCode[KeyCode["N8"]=0o150]="N8";KeyCode[KeyCode["N9"]=0o151]="N9";KeyCode[KeyCode["NumMul"]=0o152]="NumMul";KeyCode[KeyCode["NumAdd"]=0o153]="NumAdd";KeyCode[KeyCode["NumSubtr"]=0o155]="NumSubtr";KeyCode[KeyCode["NumDec"]=0o156]="NumDec";KeyCode[KeyCode["NumDiv"]=0o157]="NumDiv";KeyCode[KeyCode["NumLock"]=0o220]="NumLock";KeyCode[KeyCode["Semicolon"]=0o272]="Semicolon";KeyCode[KeyCode["Equal"]=0o273]="Equal";KeyCode[KeyCode["Comma"]=0o274]="Comma";KeyCode[KeyCode["Minus"]=0o275]="Minus";KeyCode[KeyCode["Period"]=0o276]="Period";KeyCode[KeyCode["Backquote"]=0o300]="Backquote";KeyCode[KeyCode["NumComma"]=0o302]="NumComma";KeyCode[KeyCode["BracketLeft"]=0o333]="BracketLeft";KeyCode[KeyCode["Backslash"]=0o334]="Backslash";KeyCode[KeyCode["BracketRight"]=0o335]="BracketRight";KeyCode[KeyCode["Quote"]=0o336]="Quote";})(KeyCode=exports.KeyCode||(exports.KeyCode={}));},{}],42:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var KeyCode_1=require("./KeyCode");var SpectrumKeyCode_1=require("./SpectrumKeyCode");var KeyMapping=(function(){function KeyMapping(key,zxPrimary,zxSecondary){this.key=key;this.zxPrimary=zxPrimary;this.zxSecondary=zxSecondary;}return KeyMapping;}());exports.KeyMapping=KeyMapping;var _spKeys=new Map();_spKeys.set("N0",SpectrumKeyCode_1.SpectrumKeyCode.N0);_spKeys.set("N1",SpectrumKeyCode_1.SpectrumKeyCode.N1);_spKeys.set("N2",SpectrumKeyCode_1.SpectrumKeyCode.N2);_spKeys.set("N3",SpectrumKeyCode_1.SpectrumKeyCode.N3);_spKeys.set("N4",SpectrumKeyCode_1.SpectrumKeyCode.N4);_spKeys.set("N5",SpectrumKeyCode_1.SpectrumKeyCode.N5);_spKeys.set("N6",SpectrumKeyCode_1.SpectrumKeyCode.N6);_spKeys.set("N7",SpectrumKeyCode_1.SpectrumKeyCode.N7);_spKeys.set("N8",SpectrumKeyCode_1.SpectrumKeyCode.N8);_spKeys.set("N9",SpectrumKeyCode_1.SpectrumKeyCode.N9);_spKeys.set("Q",SpectrumKeyCode_1.SpectrumKeyCode.Q);_spKeys.set("W",SpectrumKeyCode_1.SpectrumKeyCode.W);_spKeys.set("E",SpectrumKeyCode_1.SpectrumKeyCode.E);_spKeys.set("R",SpectrumKeyCode_1.SpectrumKeyCode.R);_spKeys.set("T",SpectrumKeyCode_1.SpectrumKeyCode.T);_spKeys.set("Y",SpectrumKeyCode_1.SpectrumKeyCode.Y);_spKeys.set("U",SpectrumKeyCode_1.SpectrumKeyCode.U);_spKeys.set("I",SpectrumKeyCode_1.SpectrumKeyCode.I);_spKeys.set("O",SpectrumKeyCode_1.SpectrumKeyCode.O);_spKeys.set("P",SpectrumKeyCode_1.SpectrumKeyCode.P);_spKeys.set("A",SpectrumKeyCode_1.SpectrumKeyCode.A);_spKeys.set("S",SpectrumKeyCode_1.SpectrumKeyCode.S);_spKeys.set("D",SpectrumKeyCode_1.SpectrumKeyCode.D);_spKeys.set("F",SpectrumKeyCode_1.SpectrumKeyCode.F);_spKeys.set("G",SpectrumKeyCode_1.SpectrumKeyCode.G);_spKeys.set("H",SpectrumKeyCode_1.SpectrumKeyCode.H);_spKeys.set("J",SpectrumKeyCode_1.SpectrumKeyCode.J);_spKeys.set("K",SpectrumKeyCode_1.SpectrumKeyCode.K);_spKeys.set("L",SpectrumKeyCode_1.SpectrumKeyCode.L);_spKeys.set("Enter",SpectrumKeyCode_1.SpectrumKeyCode.Enter);_spKeys.set("CShift",SpectrumKeyCode_1.SpectrumKeyCode.CShift);_spKeys.set("Z",SpectrumKeyCode_1.SpectrumKeyCode.Z);_spKeys.set("X",SpectrumKeyCode_1.SpectrumKeyCode.X);_spKeys.set("C",SpectrumKeyCode_1.SpectrumKeyCode.C);_spKeys.set("V",SpectrumKeyCode_1.SpectrumKeyCode.V);_spKeys.set("B",SpectrumKeyCode_1.SpectrumKeyCode.B);_spKeys.set("N",SpectrumKeyCode_1.SpectrumKeyCode.N);_spKeys.set("M",SpectrumKeyCode_1.SpectrumKeyCode.M);_spKeys.set("SShift",SpectrumKeyCode_1.SpectrumKeyCode.SShift);_spKeys.set("Space",SpectrumKeyCode_1.SpectrumKeyCode.Space);exports.SpectrumKeyNames=_spKeys;var _pcKeys=new Map();_pcKeys.set("Break",KeyCode_1.KeyCode.Break);_pcKeys.set("Backspace",KeyCode_1.KeyCode.Backspace);_pcKeys.set("Tab",KeyCode_1.KeyCode.Tab);_pcKeys.set("NumEqual",KeyCode_1.KeyCode.NumEqual);_pcKeys.set("Enter",KeyCode_1.KeyCode.Enter);_pcKeys.set("Shift",KeyCode_1.KeyCode.Shift);_pcKeys.set("Ctrl",KeyCode_1.KeyCode.Ctrl);_pcKeys.set("Alt",KeyCode_1.KeyCode.Alt);_pcKeys.set("Pause",KeyCode_1.KeyCode.Pause);_pcKeys.set("CapsLock",KeyCode_1.KeyCode.CapsLock);_pcKeys.set("Esc",KeyCode_1.KeyCode.Esc);_pcKeys.set("Space",KeyCode_1.KeyCode.Space);_pcKeys.set("PageUp",KeyCode_1.KeyCode.PageUp);_pcKeys.set("PageDown",KeyCode_1.KeyCode.PageDown);_pcKeys.set("End",KeyCode_1.KeyCode.End);_pcKeys.set("Home",KeyCode_1.KeyCode.Home);_pcKeys.set("ArrowLeft",KeyCode_1.KeyCode.ArrowLeft);_pcKeys.set("ArrowUp",KeyCode_1.KeyCode.ArrowUp);_pcKeys.set("ArrowRight",KeyCode_1.KeyCode.ArrowRight);_pcKeys.set("ArrowDown",KeyCode_1.KeyCode.ArrowDown);_pcKeys.set("Insert",KeyCode_1.KeyCode.Insert);_pcKeys.set("Delete",KeyCode_1.KeyCode.Delete);_pcKeys.set("D0",KeyCode_1.KeyCode.D0);_pcKeys.set("D1",KeyCode_1.KeyCode.D1);_pcKeys.set("D2",KeyCode_1.KeyCode.D2);_pcKeys.set("D3",KeyCode_1.KeyCode.D3);_pcKeys.set("D4",KeyCode_1.KeyCode.D4);_pcKeys.set("D5",KeyCode_1.KeyCode.D5);_pcKeys.set("D6",KeyCode_1.KeyCode.D6);_pcKeys.set("D7",KeyCode_1.KeyCode.D7);_pcKeys.set("D8",KeyCode_1.KeyCode.D8);_pcKeys.set("D9",KeyCode_1.KeyCode.D9);_pcKeys.set("A",KeyCode_1.KeyCode.A);_pcKeys.set("B",KeyCode_1.KeyCode.B);_pcKeys.set("C",KeyCode_1.KeyCode.C);_pcKeys.set("D",KeyCode_1.KeyCode.D);_pcKeys.set("E",KeyCode_1.KeyCode.E);_pcKeys.set("F",KeyCode_1.KeyCode.F);_pcKeys.set("G",KeyCode_1.KeyCode.G);_pcKeys.set("H",KeyCode_1.KeyCode.H);_pcKeys.set("I",KeyCode_1.KeyCode.I);_pcKeys.set("J",KeyCode_1.KeyCode.J);_pcKeys.set("K",KeyCode_1.KeyCode.K);_pcKeys.set("L",KeyCode_1.KeyCode.L);_pcKeys.set("M",KeyCode_1.KeyCode.M);_pcKeys.set("N",KeyCode_1.KeyCode.N);_pcKeys.set("O",KeyCode_1.KeyCode.O);_pcKeys.set("P",KeyCode_1.KeyCode.P);_pcKeys.set("Q",KeyCode_1.KeyCode.Q);_pcKeys.set("R",KeyCode_1.KeyCode.R);_pcKeys.set("S",KeyCode_1.KeyCode.S);_pcKeys.set("T",KeyCode_1.KeyCode.T);_pcKeys.set("U",KeyCode_1.KeyCode.U);_pcKeys.set("V",KeyCode_1.KeyCode.V);_pcKeys.set("W",KeyCode_1.KeyCode.W);_pcKeys.set("X",KeyCode_1.KeyCode.X);_pcKeys.set("Y",KeyCode_1.KeyCode.Y);_pcKeys.set("Z",KeyCode_1.KeyCode.Z);_pcKeys.set("OSLeft",KeyCode_1.KeyCode.OSLeft);_pcKeys.set("OSRight",KeyCode_1.KeyCode.OSRight);_pcKeys.set("ContextMenu",KeyCode_1.KeyCode.ContextMenu);_pcKeys.set("N0",KeyCode_1.KeyCode.N0);_pcKeys.set("N1",KeyCode_1.KeyCode.N1);_pcKeys.set("N2",KeyCode_1.KeyCode.N2);_pcKeys.set("N3",KeyCode_1.KeyCode.N3);_pcKeys.set("N4",KeyCode_1.KeyCode.N4);_pcKeys.set("N5",KeyCode_1.KeyCode.N5);_pcKeys.set("N6",KeyCode_1.KeyCode.N6);_pcKeys.set("N7",KeyCode_1.KeyCode.N7);_pcKeys.set("N8",KeyCode_1.KeyCode.N8);_pcKeys.set("N9",KeyCode_1.KeyCode.N9);_pcKeys.set("NumMul",KeyCode_1.KeyCode.NumMul);_pcKeys.set("NumAdd",KeyCode_1.KeyCode.NumAdd);_pcKeys.set("NumSubtr",KeyCode_1.KeyCode.NumSubtr);_pcKeys.set("NumDec",KeyCode_1.KeyCode.NumDec);_pcKeys.set("NumDiv",KeyCode_1.KeyCode.NumDiv);_pcKeys.set("NumLock",KeyCode_1.KeyCode.NumLock);_pcKeys.set("Semicolon",KeyCode_1.KeyCode.Semicolon);_pcKeys.set("Equal",KeyCode_1.KeyCode.Equal);_pcKeys.set("Comma",KeyCode_1.KeyCode.Comma);_pcKeys.set("Minus",KeyCode_1.KeyCode.Minus);_pcKeys.set("Period",KeyCode_1.KeyCode.Period);_pcKeys.set("Backquote",KeyCode_1.KeyCode.Backquote);_pcKeys.set("NumComma",KeyCode_1.KeyCode.NumComma);_pcKeys.set("BracketLeft",KeyCode_1.KeyCode.BracketLeft);_pcKeys.set("Backslash",KeyCode_1.KeyCode.Backslash);_pcKeys.set("BracketRight",KeyCode_1.KeyCode.BracketRight);_pcKeys.set("Quote",KeyCode_1.KeyCode.Quote);exports.PcKeyNames=_pcKeys;var hunKeyMapping=[new KeyMapping(KeyCode_1.KeyCode.D1,SpectrumKeyCode_1.SpectrumKeyCode.N1),new KeyMapping(KeyCode_1.KeyCode.D2,SpectrumKeyCode_1.SpectrumKeyCode.N2),new KeyMapping(KeyCode_1.KeyCode.D3,SpectrumKeyCode_1.SpectrumKeyCode.N3),new KeyMapping(KeyCode_1.KeyCode.D4,SpectrumKeyCode_1.SpectrumKeyCode.N4),new KeyMapping(KeyCode_1.KeyCode.D5,SpectrumKeyCode_1.SpectrumKeyCode.N5),new KeyMapping(KeyCode_1.KeyCode.D6,SpectrumKeyCode_1.SpectrumKeyCode.N6),new KeyMapping(KeyCode_1.KeyCode.D7,SpectrumKeyCode_1.SpectrumKeyCode.N7),new KeyMapping(KeyCode_1.KeyCode.D8,SpectrumKeyCode_1.SpectrumKeyCode.N8),new KeyMapping(KeyCode_1.KeyCode.D9,SpectrumKeyCode_1.SpectrumKeyCode.N9),new KeyMapping(KeyCode_1.KeyCode.D0,SpectrumKeyCode_1.SpectrumKeyCode.N0),new KeyMapping(KeyCode_1.KeyCode.N1,SpectrumKeyCode_1.SpectrumKeyCode.N1),new KeyMapping(KeyCode_1.KeyCode.N2,SpectrumKeyCode_1.SpectrumKeyCode.N2),new KeyMapping(KeyCode_1.KeyCode.N3,SpectrumKeyCode_1.SpectrumKeyCode.N3),new KeyMapping(KeyCode_1.KeyCode.N4,SpectrumKeyCode_1.SpectrumKeyCode.N4),new KeyMapping(KeyCode_1.KeyCode.N5,SpectrumKeyCode_1.SpectrumKeyCode.N5),new KeyMapping(KeyCode_1.KeyCode.N6,SpectrumKeyCode_1.SpectrumKeyCode.N6),new KeyMapping(KeyCode_1.KeyCode.N7,SpectrumKeyCode_1.SpectrumKeyCode.N7),new KeyMapping(KeyCode_1.KeyCode.N8,SpectrumKeyCode_1.SpectrumKeyCode.N8),new KeyMapping(KeyCode_1.KeyCode.N9,SpectrumKeyCode_1.SpectrumKeyCode.N9),new KeyMapping(KeyCode_1.KeyCode.N0,SpectrumKeyCode_1.SpectrumKeyCode.N0),new KeyMapping(KeyCode_1.KeyCode.Q,SpectrumKeyCode_1.SpectrumKeyCode.Q),new KeyMapping(KeyCode_1.KeyCode.W,SpectrumKeyCode_1.SpectrumKeyCode.W),new KeyMapping(KeyCode_1.KeyCode.E,SpectrumKeyCode_1.SpectrumKeyCode.E),new KeyMapping(KeyCode_1.KeyCode.R,SpectrumKeyCode_1.SpectrumKeyCode.R),new KeyMapping(KeyCode_1.KeyCode.T,SpectrumKeyCode_1.SpectrumKeyCode.T),new KeyMapping(KeyCode_1.KeyCode.Y,SpectrumKeyCode_1.SpectrumKeyCode.Y),new KeyMapping(KeyCode_1.KeyCode.U,SpectrumKeyCode_1.SpectrumKeyCode.U),new KeyMapping(KeyCode_1.KeyCode.I,SpectrumKeyCode_1.SpectrumKeyCode.I),new KeyMapping(KeyCode_1.KeyCode.O,SpectrumKeyCode_1.SpectrumKeyCode.O),new KeyMapping(KeyCode_1.KeyCode.P,SpectrumKeyCode_1.SpectrumKeyCode.P),new KeyMapping(KeyCode_1.KeyCode.A,SpectrumKeyCode_1.SpectrumKeyCode.A),new KeyMapping(KeyCode_1.KeyCode.S,SpectrumKeyCode_1.SpectrumKeyCode.S),new KeyMapping(KeyCode_1.KeyCode.D,SpectrumKeyCode_1.SpectrumKeyCode.D),new KeyMapping(KeyCode_1.KeyCode.F,SpectrumKeyCode_1.SpectrumKeyCode.F),new KeyMapping(KeyCode_1.KeyCode.G,SpectrumKeyCode_1.SpectrumKeyCode.G),new KeyMapping(KeyCode_1.KeyCode.H,SpectrumKeyCode_1.SpectrumKeyCode.H),new KeyMapping(KeyCode_1.KeyCode.J,SpectrumKeyCode_1.SpectrumKeyCode.J),new KeyMapping(KeyCode_1.KeyCode.K,SpectrumKeyCode_1.SpectrumKeyCode.K),new KeyMapping(KeyCode_1.KeyCode.L,SpectrumKeyCode_1.SpectrumKeyCode.L),new KeyMapping(KeyCode_1.KeyCode.Enter,SpectrumKeyCode_1.SpectrumKeyCode.Enter),new KeyMapping(KeyCode_1.KeyCode.Shift,SpectrumKeyCode_1.SpectrumKeyCode.CShift),new KeyMapping(KeyCode_1.KeyCode.Z,SpectrumKeyCode_1.SpectrumKeyCode.Z),new KeyMapping(KeyCode_1.KeyCode.X,SpectrumKeyCode_1.SpectrumKeyCode.X),new KeyMapping(KeyCode_1.KeyCode.C,SpectrumKeyCode_1.SpectrumKeyCode.C),new KeyMapping(KeyCode_1.KeyCode.V,SpectrumKeyCode_1.SpectrumKeyCode.V),new KeyMapping(KeyCode_1.KeyCode.B,SpectrumKeyCode_1.SpectrumKeyCode.B),new KeyMapping(KeyCode_1.KeyCode.N,SpectrumKeyCode_1.SpectrumKeyCode.N),new KeyMapping(KeyCode_1.KeyCode.M,SpectrumKeyCode_1.SpectrumKeyCode.M),new KeyMapping(KeyCode_1.KeyCode.Space,SpectrumKeyCode_1.SpectrumKeyCode.Space),new KeyMapping(KeyCode_1.KeyCode.Alt,SpectrumKeyCode_1.SpectrumKeyCode.SShift),new KeyMapping(KeyCode_1.KeyCode.Comma,SpectrumKeyCode_1.SpectrumKeyCode.SShift,SpectrumKeyCode_1.SpectrumKeyCode.N),new KeyMapping(KeyCode_1.KeyCode.NumDec,SpectrumKeyCode_1.SpectrumKeyCode.SShift,SpectrumKeyCode_1.SpectrumKeyCode.M),new KeyMapping(KeyCode_1.KeyCode.Period,SpectrumKeyCode_1.SpectrumKeyCode.SShift,SpectrumKeyCode_1.SpectrumKeyCode.M),new KeyMapping(KeyCode_1.KeyCode.NumDiv,SpectrumKeyCode_1.SpectrumKeyCode.SShift,SpectrumKeyCode_1.SpectrumKeyCode.V),new KeyMapping(KeyCode_1.KeyCode.NumMul,SpectrumKeyCode_1.SpectrumKeyCode.SShift,SpectrumKeyCode_1.SpectrumKeyCode.B),new KeyMapping(KeyCode_1.KeyCode.NumAdd,SpectrumKeyCode_1.SpectrumKeyCode.SShift,SpectrumKeyCode_1.SpectrumKeyCode.K),new KeyMapping(KeyCode_1.KeyCode.NumSubtr,SpectrumKeyCode_1.SpectrumKeyCode.SShift,SpectrumKeyCode_1.SpectrumKeyCode.J),new KeyMapping(KeyCode_1.KeyCode.Backspace,SpectrumKeyCode_1.SpectrumKeyCode.CShift,SpectrumKeyCode_1.SpectrumKeyCode.N0),new KeyMapping(KeyCode_1.KeyCode.ArrowLeft,SpectrumKeyCode_1.SpectrumKeyCode.CShift,SpectrumKeyCode_1.SpectrumKeyCode.N5),new KeyMapping(KeyCode_1.KeyCode.ArrowDown,SpectrumKeyCode_1.SpectrumKeyCode.CShift,SpectrumKeyCode_1.SpectrumKeyCode.N6),new KeyMapping(KeyCode_1.KeyCode.ArrowUp,SpectrumKeyCode_1.SpectrumKeyCode.CShift,SpectrumKeyCode_1.SpectrumKeyCode.N7),new KeyMapping(KeyCode_1.KeyCode.ArrowRight,SpectrumKeyCode_1.SpectrumKeyCode.CShift,SpectrumKeyCode_1.SpectrumKeyCode.N8),new KeyMapping(KeyCode_1.KeyCode.Home,SpectrumKeyCode_1.SpectrumKeyCode.CShift,SpectrumKeyCode_1.SpectrumKeyCode.N1)];exports.DefaultKeyMapping=hunKeyMapping;},{"./KeyCode":41,"./SpectrumKeyCode":49}],43:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var KeyboardDeviceType_1=require("./KeyboardDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var NoopKeyboardProvider_1=require("./NoopKeyboardProvider");var DeviceTypes_1=require("../DeviceTypes");var LiteEvent_1=require("../../utils/LiteEvent");var KeyboardDevice=(function(_super){__extends(KeyboardDevice,_super);function KeyboardDevice(){var _this=_super.call(this)||this;_this._keyboardProvider=new NoopKeyboardProvider_1.NoopKeyboardProvider();_this._frameCompleted=new LiteEvent_1.LiteEvent();_this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();_this.frameCount=(0x75bcd15-0O726746425);_this.overflow=(0x75bcd15-0O726746425);_this._lineStatus=[];for(var i=(0x75bcd15-0O726746425);i<(0O347010110&0x463A71D);i++){_this._lineStatus[i]=(0x75bcd15-0O726746425);}return _this;}KeyboardDevice.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;var keyboardInfo=this.hostVm.getDeviceInfo(DeviceTypes_1.DT_KEYBOARD);if(keyboardInfo&&keyboardInfo.provider){this._keyboardProvider=keyboardInfo.provider;}this._keyboardProvider.setKeyStatusHandler(function(device,key,status){device.setStatus(key,status);});};KeyboardDevice.prototype.onNewFrame=function(){this.frameCount++;};KeyboardDevice.prototype.onFrameCompleted=function(){this.hostVm.keyboardProvider.emulateKeyStroke();};Object.defineProperty(KeyboardDevice.prototype,"frameCompleted",{get:function(){return this._frameCompleted;},enumerable:true,configurable:true});KeyboardDevice.prototype.setStatus=function(key,isDown){var lineIndex=Math.floor(key/(0O507646144^0x51F4C61));var lineMask=(0O57060516-0xbc614d)<<(key%(0O507646144^0x51F4C61));this._lineStatus[lineIndex]=isDown?(this._lineStatus[lineIndex]|lineMask)&0o377:(this._lineStatus[lineIndex]&~lineMask)&0o377;};KeyboardDevice.prototype.getStatus=function(key){var lineIndex=Math.floor(key/(0O507646144^0x51F4C61));var lineMask=(0O57060516-0xbc614d)<<(key%(0O507646144^0x51F4C61));return (this._lineStatus[lineIndex]&lineMask)!==(0x75bcd15-0O726746425);};KeyboardDevice.prototype.getLineStatus=function(lines){var status=(0x75bcd15-0O726746425);lines=(~lines)&0o377;var lineIndex=(0x75bcd15-0O726746425);while(lines>(0x75bcd15-0O726746425)){if((lines&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)){status|=this._lineStatus[lineIndex];}lineIndex++;lines>>=(0O57060516-0xbc614d);}return ~status&0o377;};KeyboardDevice.prototype.reset=function(){for(var i=(0x75bcd15-0O726746425);i<this._lineStatus.length;i++){this._lineStatus[i]=(0x75bcd15-0O726746425);}};KeyboardDevice.prototype.getDeviceState=function(){return undefined;};KeyboardDevice.prototype.restoreDeviceState=function(state){};return KeyboardDevice;}(KeyboardDeviceType_1.KeyboardDeviceType));exports.KeyboardDevice=KeyboardDevice;},{"../../machine/NoopSpectrumVm":159,"../../utils/LiteEvent":173,"../DeviceTypes":29,"./KeyboardDeviceType":45,"./NoopKeyboardProvider":48}],44:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceInfoBase_1=require("../DeviceInfoBase");var KeyboardDeviceInfo=(function(_super){__extends(KeyboardDeviceInfo,_super);function KeyboardDeviceInfo(provider,device){return _super.call(this,provider,undefined,device)||this;}return KeyboardDeviceInfo;}(DeviceInfoBase_1.DeviceInfoBase));exports.KeyboardDeviceInfo=KeyboardDeviceInfo;},{"../DeviceInfoBase":28}],45:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceTypeBase_1=require("../../abstraction/DeviceTypeBase");var DeviceTypes_1=require("../DeviceTypes");var KeyboardDeviceType=(function(_super){__extends(KeyboardDeviceType,_super);function KeyboardDeviceType(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(KeyboardDeviceType.prototype,"key",{get:function(){return DeviceTypes_1.DT_KEYBOARD;},enumerable:true,configurable:true});return KeyboardDeviceType;}(DeviceTypeBase_1.DeviceTypeBase));exports.KeyboardDeviceType=KeyboardDeviceType;},{"../../abstraction/DeviceTypeBase":13,"../DeviceTypes":29}],46:[function(require,module,exports){"use strict";var __values=(this&&this.__values)||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=(0x75bcd15-0O726746425);if(m)return m.call(o);return {next:function(){if(o&&i>=o.length)o=void (0x75bcd15-0O726746425);return {value:o&&o[i++],done:!o};}};};Object.defineProperty(exports,"__esModule",{value:true});var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var KeyMapping_1=require("./KeyMapping");var util_1=require("util");var SpectNetConfig_1=require("../../../config/SpectNetConfig");var KeyboardProvider=(function(){function KeyboardProvider(){this._emulatedKeyStrokes=[];this._mappings=new Map();this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();this.allowPhysicalKeys=true;}KeyboardProvider.prototype.reset=function(){this._emulatedKeyStrokes=[];};KeyboardProvider.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;this._mappings.clear();this._resetKeyMappings();};KeyboardProvider.prototype.setKeyStatusHandler=function(statusHandler){this._statusHandler=statusHandler;};KeyboardProvider.prototype.keydown=function(keyInfo){this._handleKey(keyInfo,true);};KeyboardProvider.prototype.keyup=function(keyInfo){this._handleKey(keyInfo,false);};KeyboardProvider.prototype.emulateKeyStroke=function(){var spectrumVm=this.hostVm;if(!spectrumVm||!this._statusHandler){return false;}var currentTact=spectrumVm.cpu.tacts;if(this._emulatedKeyStrokes.length===(0x75bcd15-0O726746425)){return false;}var keyStroke=this._emulatedKeyStrokes[(0x75bcd15-0O726746425)];if(keyStroke.startTact>currentTact){return false;}if(keyStroke.endTact<currentTact){this._statusHandler(this.hostVm.keyboardDevice,keyStroke.primaryCode,false);if(keyStroke.secondaryCode){this._statusHandler(this.hostVm.keyboardDevice,keyStroke.secondaryCode,false);}this._emulatedKeyStrokes.pop();return true;}this._statusHandler(this.hostVm.keyboardDevice,keyStroke.primaryCode,true);if(keyStroke.secondaryCode){this._statusHandler(this.hostVm.keyboardDevice,keyStroke.secondaryCode,true);}return true;};KeyboardProvider.prototype.queueKeyPress=function(keypress){if(this._emulatedKeyStrokes.length===(0x75bcd15-0O726746425)){this._emulatedKeyStrokes.unshift(keypress);return;}var last=this._emulatedKeyStrokes[(0x75bcd15-0O726746425)];if(last.primaryCode===keypress.primaryCode&&last.secondaryCode===keypress.secondaryCode){if(keypress.startTact>=last.startTact&&keypress.startTact<=last.endTact){last.endTact=keypress.endTact;return;}}this._emulatedKeyStrokes.unshift(keypress);};KeyboardProvider.prototype.setMappings=function(){var e_1,_a;try{var config=SpectNetConfig_1.defaultSpectNetConfig;if(!config.keymappings){return;}var mappings=new Map();try{for(var DefaultKeyMapping_1=__values(KeyMapping_1.DefaultKeyMapping),DefaultKeyMapping_1_1=DefaultKeyMapping_1.next();!DefaultKeyMapping_1_1.done;DefaultKeyMapping_1_1=DefaultKeyMapping_1.next()){var defMapping=DefaultKeyMapping_1_1.value;mappings.set(defMapping.key,defMapping);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(DefaultKeyMapping_1_1&&!DefaultKeyMapping_1_1.done&&(_a=DefaultKeyMapping_1.return))_a.call(DefaultKeyMapping_1);}finally{if(e_1)throw e_1.error;}}for(var keyIndex in config.keymappings){var pcKey=KeyMapping_1.PcKeyNames.get(keyIndex);if(!pcKey){continue;}var primary=void (0x75bcd15-0O726746425);var secondary=void (0x75bcd15-0O726746425);var mapping=config.keymappings[keyIndex];if(typeof mapping==="string"){primary=mapping;}else{if(mapping.length>(0x75bcd15-0O726746425)){primary=mapping[(0x75bcd15-0O726746425)];}if(mapping.length>(0O57060516-0xbc614d)){secondary=mapping[(0O57060516-0xbc614d)];}}if(!primary){continue;}var primaryKey=KeyMapping_1.SpectrumKeyNames.get(primary);if(util_1.isUndefined(primaryKey)){continue;}var secondaryKey=secondary?KeyMapping_1.SpectrumKeyNames.get(secondary):undefined;mappings.set(pcKey,new KeyMapping_1.KeyMapping(pcKey,primaryKey,secondaryKey));}this._mappings=mappings;}catch(_b){this._resetKeyMappings();}};KeyboardProvider.prototype._resetKeyMappings=function(){var e_2,_a;try{for(var DefaultKeyMapping_2=__values(KeyMapping_1.DefaultKeyMapping),DefaultKeyMapping_2_1=DefaultKeyMapping_2.next();!DefaultKeyMapping_2_1.done;DefaultKeyMapping_2_1=DefaultKeyMapping_2.next()){var mapping=DefaultKeyMapping_2_1.value;this._mappings.set(mapping.key,mapping);}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(DefaultKeyMapping_2_1&&!DefaultKeyMapping_2_1.done&&(_a=DefaultKeyMapping_2.return))_a.call(DefaultKeyMapping_2);}finally{if(e_2)throw e_2.error;}}};KeyboardProvider.prototype._handleKey=function(keyInfo,state){if(!this.allowPhysicalKeys||!this._statusHandler){return;}var mapping=this._mappings.get(keyInfo.keyCode||(0x75bcd15-0O726746425));if(mapping){this._statusHandler(this.hostVm.keyboardDevice,mapping.zxPrimary,state);if(mapping.zxSecondary){this._statusHandler(this.hostVm.keyboardDevice,mapping.zxSecondary,state);}}};return KeyboardProvider;}());exports.KeyboardProvider=KeyboardProvider;},{"../../../config/SpectNetConfig":1,"../../machine/NoopSpectrumVm":159,"./KeyMapping":42,"util":181}],47:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var KeyboardDeviceType_1=require("./KeyboardDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var LiteEvent_1=require("../../utils/LiteEvent");var NoopKeyboardDevice=(function(_super){__extends(NoopKeyboardDevice,_super);function NoopKeyboardDevice(spectrum){var _this=_super.call(this)||this;_this.frameCount=(0x75bcd15-0O726746425);_this.overflow=(0x75bcd15-0O726746425);_this.frameCompleted=new LiteEvent_1.LiteEvent();_this.hostVm=spectrum?spectrum:new NoopSpectrumVm_1.NoopSpectrumVm();return _this;}NoopKeyboardDevice.prototype.reset=function(){};NoopKeyboardDevice.prototype.getDeviceState=function(){};NoopKeyboardDevice.prototype.restoreDeviceState=function(state){};NoopKeyboardDevice.prototype.onAttachedToVm=function(hostVm){};NoopKeyboardDevice.prototype.onNewFrame=function(){};NoopKeyboardDevice.prototype.onFrameCompleted=function(){};NoopKeyboardDevice.prototype.setStatus=function(key,isDown){};NoopKeyboardDevice.prototype.getStatus=function(key){return false;};NoopKeyboardDevice.prototype.getLineStatus=function(lines){return 0o377;};return NoopKeyboardDevice;}(KeyboardDeviceType_1.KeyboardDeviceType));exports.NoopKeyboardDevice=NoopKeyboardDevice;},{"../../machine/NoopSpectrumVm":159,"../../utils/LiteEvent":173,"./KeyboardDeviceType":45}],48:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var NoopKeyboardProvider=(function(){function NoopKeyboardProvider(spectrum){this.allowPhysicalKeys=false;this.hostVm=spectrum?spectrum:new NoopSpectrumVm_1.NoopSpectrumVm();}NoopKeyboardProvider.prototype.reset=function(){};NoopKeyboardProvider.prototype.onAttachedToVm=function(hostVm){};NoopKeyboardProvider.prototype.setKeyStatusHandler=function(statusHandler){};NoopKeyboardProvider.prototype.keydown=function(keyInfo){};NoopKeyboardProvider.prototype.keyup=function(keyInfo){};NoopKeyboardProvider.prototype.emulateKeyStroke=function(){return false;};NoopKeyboardProvider.prototype.queueKeyPress=function(keypress){};NoopKeyboardProvider.prototype.setMappings=function(){};return NoopKeyboardProvider;}());exports.NoopKeyboardProvider=NoopKeyboardProvider;},{"../../machine/NoopSpectrumVm":159}],49:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var SpectrumKeyCode;(function(SpectrumKeyCode){SpectrumKeyCode[SpectrumKeyCode["CShift"]=(0x75bcd15-0O726746425)]="CShift";SpectrumKeyCode[SpectrumKeyCode["Z"]=(0O57060516-0xbc614d)]="Z";SpectrumKeyCode[SpectrumKeyCode["X"]=(15658734^0O73567354)]="X";SpectrumKeyCode[SpectrumKeyCode["C"]=(0O334664274-0x37368B9)]="C";SpectrumKeyCode[SpectrumKeyCode["V"]=(0x5E30A78-0O570605164)]="V";SpectrumKeyCode[SpectrumKeyCode["A"]=(0O507646144^0x51F4C61)]="A";SpectrumKeyCode[SpectrumKeyCode["S"]=(1011010-0O3666474)]="S";SpectrumKeyCode[SpectrumKeyCode["D"]=(0x9D8DE4-0O47306735)]="D";SpectrumKeyCode[SpectrumKeyCode["F"]=(0O347010110&0x463A71D)]="F";SpectrumKeyCode[SpectrumKeyCode["G"]=0o11]="G";SpectrumKeyCode[SpectrumKeyCode["Q"]=0o12]="Q";SpectrumKeyCode[SpectrumKeyCode["W"]=0o13]="W";SpectrumKeyCode[SpectrumKeyCode["E"]=0o14]="E";SpectrumKeyCode[SpectrumKeyCode["R"]=0o15]="R";SpectrumKeyCode[SpectrumKeyCode["T"]=0o16]="T";SpectrumKeyCode[SpectrumKeyCode["N1"]=0o17]="N1";SpectrumKeyCode[SpectrumKeyCode["N2"]=0o20]="N2";SpectrumKeyCode[SpectrumKeyCode["N3"]=0o21]="N3";SpectrumKeyCode[SpectrumKeyCode["N4"]=0o22]="N4";SpectrumKeyCode[SpectrumKeyCode["N5"]=0o23]="N5";SpectrumKeyCode[SpectrumKeyCode["N0"]=0o24]="N0";SpectrumKeyCode[SpectrumKeyCode["N9"]=0o25]="N9";SpectrumKeyCode[SpectrumKeyCode["N8"]=0o26]="N8";SpectrumKeyCode[SpectrumKeyCode["N7"]=0o27]="N7";SpectrumKeyCode[SpectrumKeyCode["N6"]=0o30]="N6";SpectrumKeyCode[SpectrumKeyCode["P"]=0o31]="P";SpectrumKeyCode[SpectrumKeyCode["O"]=0o32]="O";SpectrumKeyCode[SpectrumKeyCode["I"]=0o33]="I";SpectrumKeyCode[SpectrumKeyCode["U"]=0o34]="U";SpectrumKeyCode[SpectrumKeyCode["Y"]=0o35]="Y";SpectrumKeyCode[SpectrumKeyCode["Enter"]=0o36]="Enter";SpectrumKeyCode[SpectrumKeyCode["L"]=0o37]="L";SpectrumKeyCode[SpectrumKeyCode["K"]=0o40]="K";SpectrumKeyCode[SpectrumKeyCode["J"]=0o41]="J";SpectrumKeyCode[SpectrumKeyCode["H"]=0o42]="H";SpectrumKeyCode[SpectrumKeyCode["Space"]=0o43]="Space";SpectrumKeyCode[SpectrumKeyCode["SShift"]=0o44]="SShift";SpectrumKeyCode[SpectrumKeyCode["M"]=0o45]="M";SpectrumKeyCode[SpectrumKeyCode["N"]=0o46]="N";SpectrumKeyCode[SpectrumKeyCode["B"]=0o47]="B";})(SpectrumKeyCode=exports.SpectrumKeyCode||(exports.SpectrumKeyCode={}));},{}],50:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var ContendedMemoryDeviceBase_1=require("./ContendedMemoryDeviceBase");var BankedMemoryDeviceBase=(function(_super){__extends(BankedMemoryDeviceBase,_super);function BankedMemoryDeviceBase(defaultRomCount,defaultRamBankCount){if(defaultRomCount===void (0x75bcd15-0O726746425)){defaultRomCount=(15658734^0O73567354);}if(defaultRamBankCount===void (0x75bcd15-0O726746425)){defaultRamBankCount=(0O347010110&0x463A71D);}var _this=_super.call(this)||this;_this._roms=[];_this._ramBanks=[];_this.romCount=(0x75bcd15-0O726746425);_this.ramBankCount=(0x75bcd15-0O726746425);_this.selectedRomIndex=(0x75bcd15-0O726746425);_this._defaultRomCount=defaultRomCount;_this._defaultRamBankCount=defaultRamBankCount;return _this;}Object.defineProperty(BankedMemoryDeviceBase.prototype,"roms",{get:function(){return this._roms;},enumerable:true,configurable:true});Object.defineProperty(BankedMemoryDeviceBase.prototype,"ramBanks",{get:function(){return this._ramBanks;},enumerable:true,configurable:true});Object.defineProperty(BankedMemoryDeviceBase.prototype,"currentRom",{get:function(){return this._roms[this.selectedRomIndex];},enumerable:true,configurable:true});BankedMemoryDeviceBase.prototype.reset=function(){for(var i=(0x75bcd15-0O726746425);i<0o40000;i++){for(var j=(0x75bcd15-0O726746425);j<this.ramBankCount;j++){this._ramBanks[j][i]=0o377;}}this.selectedRomIndex=(0x75bcd15-0O726746425);};BankedMemoryDeviceBase.prototype.onAttachedToVm=function(hostVm){_super.prototype.onAttachedToVm.call(this,hostVm);this.romCount=hostVm.romConfiguration&&hostVm.romConfiguration.numberOfRoms?hostVm.romConfiguration.numberOfRoms:this._defaultRomCount;this.ramBankCount=hostVm.memoryConfiguration&&hostVm.memoryConfiguration.ramBanks?hostVm.memoryConfiguration.ramBanks:this._defaultRamBankCount;this._roms=[];for(var i=(0x75bcd15-0O726746425);i<this.romCount;i++){this._roms[i]=new Uint8Array(0o40000);}this._ramBanks=[];for(var i=(0x75bcd15-0O726746425);i<this.ramBankCount;i++){this._ramBanks[i]=new Uint8Array(0o40000);}this.selectedRomIndex=(0x75bcd15-0O726746425);};BankedMemoryDeviceBase.prototype.cloneMemory=function(){var clone=new Uint8Array(0o200000);for(var i=(0x75bcd15-0O726746425);i<=(0O334664274-0x37368B9);i++){var cloneAddr=i*0o40000;var addrInfo=this.getAddressLocation(cloneAddr);if(addrInfo.isInRom){for(var j=(0x75bcd15-0O726746425);j<0o40000;j++){clone[cloneAddr+j]=this._roms[addrInfo.index][j];}}else{for(var j=(0x75bcd15-0O726746425);j<0o40000;j++){clone[cloneAddr+j]=this._ramBanks[addrInfo.index][j];}}}return clone;};BankedMemoryDeviceBase.prototype.copyRom=function(buffer){for(var i=(0x75bcd15-0O726746425);i<0o40000;i++){this._roms[this.selectedRomIndex][i]=buffer[i];}};BankedMemoryDeviceBase.prototype.selectRom=function(romIndex){if(romIndex<(0x75bcd15-0O726746425)){romIndex=(0x75bcd15-0O726746425);}if(romIndex>=this.romCount){romIndex=this.romCount-(0O57060516-0xbc614d);}this.selectedRomIndex=romIndex;};BankedMemoryDeviceBase.prototype.getSelectedRomIndex=function(){return this.selectedRomIndex;};BankedMemoryDeviceBase.prototype.getRomBuffer=function(romIndex){if(romIndex<(0x75bcd15-0O726746425)){romIndex=(0x75bcd15-0O726746425);}if(romIndex>=this.romCount){romIndex=this.romCount-(0O57060516-0xbc614d);}return this.roms[romIndex];};BankedMemoryDeviceBase.prototype.getRamBank=function(bankIndex,bank16Mode){if(bank16Mode===void (0x75bcd15-0O726746425)){bank16Mode=true;}if(bankIndex<(0x75bcd15-0O726746425)){bankIndex=(0x75bcd15-0O726746425);}if(bankIndex>=this.ramBankCount){bankIndex=this.ramBankCount-(0O57060516-0xbc614d);}return this.ramBanks[bankIndex];};return BankedMemoryDeviceBase;}(ContendedMemoryDeviceBase_1.ContendedMemoryDeviceBase));exports.BankedMemoryDeviceBase=BankedMemoryDeviceBase;},{"./ContendedMemoryDeviceBase":51}],51:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var MemoryDeviceType_1=require("./MemoryDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var NoopZ80Cpu_1=require("../../cpu/NoopZ80Cpu");var ContendedMemoryDeviceBase=(function(_super){__extends(ContendedMemoryDeviceBase,_super);function ContendedMemoryDeviceBase(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.cpu=new NoopZ80Cpu_1.NoopZ80Cpu();_this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();_this.usesShadowScreen=false;return _this;}ContendedMemoryDeviceBase.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;this.cpu=hostVm.cpu;this.screenDevice=hostVm?hostVm.screenDevice:undefined;};ContendedMemoryDeviceBase.prototype.contentionWait=function(addr){if((addr&0o140000)===0o40000){this.applyDelay();}};ContendedMemoryDeviceBase.prototype.applyDelay=function(){if(!this.screenDevice){return;}var delay=this.screenDevice.getContentionValue(this.hostVm.currentFrameTact);this.cpu.delay(delay);this.hostVm.contentionAccumulated+=delay;};Object.defineProperty(ContendedMemoryDeviceBase.prototype,"isInAllRamMode",{get:function(){return false;},enumerable:true,configurable:true});Object.defineProperty(ContendedMemoryDeviceBase.prototype,"isIn8KMode",{get:function(){return false;},enumerable:true,configurable:true});return ContendedMemoryDeviceBase;}(MemoryDeviceType_1.MemoryDeviceType));exports.ContendedMemoryDeviceBase=ContendedMemoryDeviceBase;},{"../../cpu/NoopZ80Cpu":20,"../../machine/NoopSpectrumVm":159,"./MemoryDeviceType":55}],52:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var MemoryContentionType_1=require("./MemoryContentionType");var MemoryConfigurationData=(function(){function MemoryConfigurationData(){this.supportsBanking=false;this.ramBanks=(0x75bcd15-0O726746425);this.contentionType=MemoryContentionType_1.MemoryContentionType.Ula;this.nextMemorySize=(0x75bcd15-0O726746425);}MemoryConfigurationData.prototype.clone=function(){var mc=new MemoryConfigurationData();mc.supportsBanking=this.supportsBanking;mc.ramBanks=this.ramBanks;mc.contentionType=this.contentionType;return mc;};return MemoryConfigurationData;}());exports.MemoryConfigurationData=MemoryConfigurationData;},{"./MemoryContentionType":53}],53:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var MemoryContentionType;(function(MemoryContentionType){MemoryContentionType[MemoryContentionType["None"]=(0x75bcd15-0O726746425)]="None";MemoryContentionType[MemoryContentionType["Ula"]=(0O57060516-0xbc614d)]="Ula";MemoryContentionType[MemoryContentionType["GateArray"]=(15658734^0O73567354)]="GateArray";MemoryContentionType[MemoryContentionType["Next"]=(0O334664274-0x37368B9)]="Next";})(MemoryContentionType=exports.MemoryContentionType||(exports.MemoryContentionType={}));},{}],54:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceInfoBase_1=require("../DeviceInfoBase");var MemoryDeviceInfo=(function(_super){__extends(MemoryDeviceInfo,_super);function MemoryDeviceInfo(configurationData,device){return _super.call(this,undefined,configurationData,device)||this;}return MemoryDeviceInfo;}(DeviceInfoBase_1.DeviceInfoBase));exports.MemoryDeviceInfo=MemoryDeviceInfo;},{"../DeviceInfoBase":28}],55:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceTypeBase_1=require("../../abstraction/DeviceTypeBase");var DeviceTypes_1=require("../DeviceTypes");var MemoryDeviceType=(function(_super){__extends(MemoryDeviceType,_super);function MemoryDeviceType(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(MemoryDeviceType.prototype,"key",{get:function(){return DeviceTypes_1.DT_MEMORY;},enumerable:true,configurable:true});return MemoryDeviceType;}(DeviceTypeBase_1.DeviceTypeBase));exports.MemoryDeviceType=MemoryDeviceType;},{"../../abstraction/DeviceTypeBase":13,"../DeviceTypes":29}],56:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var MemoryDeviceType_1=require("./MemoryDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var NoopMemoryDevice=(function(_super){__extends(NoopMemoryDevice,_super);function NoopMemoryDevice(spectrum){var _this=_super.call(this)||this;_this.usesShadowScreen=false;_this.isInAllRamMode=false;_this.isIn8KMode=false;_this.hostVm=spectrum?spectrum:new NoopSpectrumVm_1.NoopSpectrumVm();return _this;}NoopMemoryDevice.prototype.reset=function(){};NoopMemoryDevice.prototype.getDeviceState=function(){};NoopMemoryDevice.prototype.restoreDeviceState=function(state){};NoopMemoryDevice.prototype.onAttachedToVm=function(hostVm){};NoopMemoryDevice.prototype.read=function(addr,supressContention){return (0x75bcd15-0O726746425);};NoopMemoryDevice.prototype.write=function(addr,value,supressContention){};NoopMemoryDevice.prototype.contentionWait=function(addr){};NoopMemoryDevice.prototype.cloneMemory=function(){return new Uint8Array((0x75bcd15-0O726746425));};NoopMemoryDevice.prototype.copyRom=function(buffer){};NoopMemoryDevice.prototype.selectRom=function(romIndex){};NoopMemoryDevice.prototype.getSelectedRomIndex=function(){return (0x75bcd15-0O726746425);};NoopMemoryDevice.prototype.pageIn=function(slot,bank,bank16Mode){};NoopMemoryDevice.prototype.getSelectedBankIndex=function(slot,bank16Mode){return (0x75bcd15-0O726746425);};NoopMemoryDevice.prototype.getRomBuffer=function(romIndex){return new Uint8Array((0x75bcd15-0O726746425));};NoopMemoryDevice.prototype.getRamBank=function(bankIndex,bank16Mode){return new Uint8Array((0x75bcd15-0O726746425));};NoopMemoryDevice.prototype.getAddressLocation=function(addr){return {isInRom:false,index:0,address:0};};NoopMemoryDevice.prototype.isRamBankPagedIn=function(index){return {isPagedIn:false,baseAddress:0};};return NoopMemoryDevice;}(MemoryDeviceType_1.MemoryDeviceType));exports.NoopMemoryDevice=NoopMemoryDevice;},{"../../machine/NoopSpectrumVm":159,"./MemoryDeviceType":55}],57:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var BankedMemoryDeviceBase_1=require("./BankedMemoryDeviceBase");var Spectrum128MemoryDevice=(function(_super){__extends(Spectrum128MemoryDevice,_super);function Spectrum128MemoryDevice(){var _this=_super.call(this,(15658734^0O73567354),(0O347010110&0x463A71D))||this;_this._currentSlot3Bank=(0x75bcd15-0O726746425);return _this;}Spectrum128MemoryDevice.prototype.reset=function(){_super.prototype.reset.call(this);this._currentSlot3Bank=(0x75bcd15-0O726746425);};Spectrum128MemoryDevice.prototype.getDeviceState=function(){return undefined;};Spectrum128MemoryDevice.prototype.restoreDeviceState=function(state){};Spectrum128MemoryDevice.prototype.onAttachedToVm=function(hostVm){_super.prototype.onAttachedToVm.call(this,hostVm);this._currentSlot3Bank=(0x75bcd15-0O726746425);};Spectrum128MemoryDevice.prototype.read=function(addr,supressContention){var memIndex=addr&0o37777;var memValue;switch(addr&0o140000){case (0x75bcd15-0O726746425):return this._roms[this.selectedRomIndex][memIndex];case 0o40000:memValue=this.ramBanks[(0O507646144^0x51F4C61)][memIndex];if(supressContention||this.screenDevice===null){return memValue;}this.applyDelay();return memValue;case 0o100000:return this.ramBanks[(15658734^0O73567354)][memIndex];default:memValue=this.ramBanks[this._currentSlot3Bank][memIndex];if((this._currentSlot3Bank&(0O57060516-0xbc614d))===(0x75bcd15-0O726746425)){return memValue;}this.applyDelay();return memValue;}};Spectrum128MemoryDevice.prototype.write=function(addr,value,supressContention){var memIndex=addr&0o37777;switch(addr&0o140000){case (0x75bcd15-0O726746425):return;case 0o40000:if(!supressContention){this.applyDelay();}this.ramBanks[(0O507646144^0x51F4C61)][memIndex]=value;break;case 0o100000:this.ramBanks[(15658734^0O73567354)][memIndex]=value;break;default:if((this._currentSlot3Bank&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)){if(!supressContention){this.applyDelay();}}this.ramBanks[this._currentSlot3Bank][memIndex]=value;break;}};Spectrum128MemoryDevice.prototype.pageIn=function(slot,bank,bank16Mode){if(slot!==(0O334664274-0x37368B9)){return;}this._currentSlot3Bank=bank&(0x9D8DE4-0O47306735);};Spectrum128MemoryDevice.prototype.getSelectedBankIndex=function(slot,bank16Mode){switch(slot&(0O334664274-0x37368B9)){case (0x75bcd15-0O726746425):return (0x75bcd15-0O726746425);case (0O57060516-0xbc614d):return (0O507646144^0x51F4C61);case (15658734^0O73567354):return (15658734^0O73567354);default:return this._currentSlot3Bank;}};Spectrum128MemoryDevice.prototype.getAddressLocation=function(addr){var bankAddr=addr&0o37777;switch(addr&0o140000){case (0x75bcd15-0O726746425):return {isInRom:true,index:this.selectedRomIndex,address:addr};case 0o40000:return {isInRom:false,index:5,address:bankAddr};case 0o100000:return {isInRom:false,index:2,address:bankAddr};default:return {isInRom:false,index:this._currentSlot3Bank,address:bankAddr};}};Spectrum128MemoryDevice.prototype.isRamBankPagedIn=function(index){if(index===(15658734^0O73567354)){return {isPagedIn:true,baseAddress:0x8000};}if(index===(0O507646144^0x51F4C61)){return {isPagedIn:true,baseAddress:0x4000};}if(index===this._currentSlot3Bank){return {isPagedIn:true,baseAddress:0xC000};}return {isPagedIn:false,baseAddress:0x0000};};return Spectrum128MemoryDevice;}(BankedMemoryDeviceBase_1.BankedMemoryDeviceBase));exports.Spectrum128MemoryDevice=Spectrum128MemoryDevice;},{"./BankedMemoryDeviceBase":50}],58:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var ContendedMemoryDeviceBase_1=require("./ContendedMemoryDeviceBase");var Spectrum48MemoryDevice=(function(_super){__extends(Spectrum48MemoryDevice,_super);function Spectrum48MemoryDevice(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this._memory=new Uint8Array((0x75bcd15-0O726746425));_this.usesShadowScreen=false;return _this;}Spectrum48MemoryDevice.prototype.reset=function(){for(var i=(0x75bcd15-0O726746425);i<this._memory.length;i++){this.write(i&0o177777,0o377,true);}};Spectrum48MemoryDevice.prototype.getDeviceState=function(){return undefined;};Spectrum48MemoryDevice.prototype.restoreDeviceState=function(state){};Spectrum48MemoryDevice.prototype.onAttachedToVm=function(hostVm){_super.prototype.onAttachedToVm.call(this,hostVm);this._memory=new Uint8Array(0o200000);for(var i=(0x75bcd15-0O726746425);i<this._memory.length;i++){this._memory[i]=(0x75bcd15-0O726746425);}};Spectrum48MemoryDevice.prototype.read=function(addr,supressContention){if(supressContention===void (0x75bcd15-0O726746425)){supressContention=false;}var value=this._memory[addr]&0o377;if(supressContention){return value;}this.contentionWait(addr);return value;};Spectrum48MemoryDevice.prototype.write=function(addr,value,supressContention){if(supressContention===void (0x75bcd15-0O726746425)){supressContention=false;}switch(addr&0o140000){case (0x75bcd15-0O726746425):return;case 0o40000:if(!supressContention){this.applyDelay();}break;}this._memory[addr]=value;};Spectrum48MemoryDevice.prototype.cloneMemory=function(){return new Uint8Array(this._memory);};Spectrum48MemoryDevice.prototype.copyRom=function(buffer){for(var i=(0x75bcd15-0O726746425);i<buffer.length;i++){this._memory[i]=buffer[i];}};Spectrum48MemoryDevice.prototype.selectRom=function(romIndex){};Spectrum48MemoryDevice.prototype.getSelectedRomIndex=function(){return (0x75bcd15-0O726746425);};Spectrum48MemoryDevice.prototype.pageIn=function(slot,bank,bank16Mode){};Spectrum48MemoryDevice.prototype.getSelectedBankIndex=function(slot,bank16Mode){return (0x75bcd15-0O726746425);};Object.defineProperty(Spectrum48MemoryDevice.prototype,"isInAllRamMode",{get:function(){return false;},enumerable:true,configurable:true});Object.defineProperty(Spectrum48MemoryDevice.prototype,"isIn8KMode",{get:function(){return false;},enumerable:true,configurable:true});Spectrum48MemoryDevice.prototype.getRomBuffer=function(romIndex){var rom=new Uint8Array(0o40000);for(var i=(0x75bcd15-0O726746425);i<0o40000;i++){rom[i]=this._memory[i];}return rom;};Spectrum48MemoryDevice.prototype.getRamBank=function(bankIndex,bank16Mode){var ram=new Uint8Array(0o40000);for(var i=(0x75bcd15-0O726746425);i<0o140000;i++){ram[i]=this._memory[i+0o40000];}return ram;};Spectrum48MemoryDevice.prototype.getAddressLocation=function(addr){return addr<0o40000?{isInRom:true,index:0,address:addr}:{isInRom:false,index:0,address:(addr-0o40000)&0o177777};};Spectrum48MemoryDevice.prototype.isRamBankPagedIn=function(index){return {isPagedIn:false,baseAddress:0x4000};};return Spectrum48MemoryDevice;}(ContendedMemoryDeviceBase_1.ContendedMemoryDeviceBase));exports.Spectrum48MemoryDevice=Spectrum48MemoryDevice;},{"./ContendedMemoryDeviceBase":51}],59:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();var __values=(this&&this.__values)||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=(0x75bcd15-0O726746425);if(m)return m.call(o);return {next:function(){if(o&&i>=o.length)o=void (0x75bcd15-0O726746425);return {value:o&&o[i++],done:!o};}};};Object.defineProperty(exports,"__esModule",{value:true});var PortDeviceType_1=require("./PortDeviceType");var NoopZ80Cpu_1=require("../../cpu/NoopZ80Cpu");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var GenericPortDeviceBase=(function(_super){__extends(GenericPortDeviceBase,_super);function GenericPortDeviceBase(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.cpu=new NoopZ80Cpu_1.NoopZ80Cpu();_this.handlers=[];_this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();return _this;}GenericPortDeviceBase.prototype.onAttachedToVm=function(hostVm){var e_1,_a;this.hostVm=hostVm;this.cpu=hostVm.cpu;this.screenDevice=hostVm.screenDevice;try{for(var _b=__values(this.handlers),_c=_b.next();!_c.done;_c=_b.next()){var handler=_c.value;handler.onAttachedToVm(hostVm);handler.reset();}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_1)throw e_1.error;}}};GenericPortDeviceBase.prototype.readPort=function(addr){var e_2,_a;this.contentionWait(addr);try{for(var _b=__values(this.handlers),_c=_b.next();!_c.done;_c=_b.next()){var handler=_c.value;if(!handler.canRead||(addr&handler.portMask)!==handler.port){continue;}var readResult=handler.handleRead(addr);if(readResult.handled){return readResult.readValue;}}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_2)throw e_2.error;}}return this.unhandledRead(addr);};GenericPortDeviceBase.prototype.writePort=function(addr,data){var e_3,_a;this.contentionWait(addr);var handled=false;try{for(var _b=__values(this.handlers),_c=_b.next();!_c.done;_c=_b.next()){var handler=_c.value;if(handler.canWrite&&(addr&handler.portMask)===handler.port){handler.handleWrite(addr,data);handled=true;}}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_3)throw e_3.error;}}};GenericPortDeviceBase.prototype.contentionWait=function(addr){if(!this.screenDevice){return;}var lowBit=(addr&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425);if((addr&0o140000)===0o40000||(addr&0o140000)===0o140000&&this.isContendedBankPagedIn()){if(lowBit){this.cpu.delay(this.screenDevice.getContentionValue(this.hostVm.currentFrameTact));this.cpu.delay((0O57060516-0xbc614d));this.cpu.delay(this.screenDevice.getContentionValue(this.hostVm.currentFrameTact));this.cpu.delay((0O57060516-0xbc614d));this.cpu.delay(this.screenDevice.getContentionValue(this.hostVm.currentFrameTact));this.cpu.delay((0O57060516-0xbc614d));this.cpu.delay(this.screenDevice.getContentionValue(this.hostVm.currentFrameTact));this.cpu.delay((0O57060516-0xbc614d));}else{this.cpu.delay(this.screenDevice.getContentionValue(this.hostVm.currentFrameTact));this.cpu.delay((0O57060516-0xbc614d));this.cpu.delay(this.screenDevice.getContentionValue(this.hostVm.currentFrameTact));this.cpu.delay((0O334664274-0x37368B9));}}else{if(lowBit){this.cpu.delay((0x5E30A78-0O570605164));}else{this.cpu.delay((0O57060516-0xbc614d));this.cpu.delay(this.screenDevice.getContentionValue(this.hostVm.currentFrameTact));this.cpu.delay((0O334664274-0x37368B9));}}};GenericPortDeviceBase.prototype.isContendedBankPagedIn=function(){return false;};GenericPortDeviceBase.prototype.unhandledRead=function(addr){return 0o377;};GenericPortDeviceBase.prototype.reset=function(){var e_4,_a;try{for(var _b=__values(this.handlers),_c=_b.next();!_c.done;_c=_b.next()){var handler=_c.value;handler.reset();}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_4)throw e_4.error;}}};GenericPortDeviceBase.prototype.getDeviceState=function(){return undefined;};GenericPortDeviceBase.prototype.restoreDeviceState=function(state){};return GenericPortDeviceBase;}(PortDeviceType_1.PortDeviceType));exports.GenericPortDeviceBase=GenericPortDeviceBase;},{"../../cpu/NoopZ80Cpu":20,"../../machine/NoopSpectrumVm":159,"./PortDeviceType":62}],60:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var PortDeviceType_1=require("./PortDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var NoopPortDevice=(function(_super){__extends(NoopPortDevice,_super);function NoopPortDevice(spectrum){var _this=_super.call(this)||this;_this.hostVm=spectrum?spectrum:new NoopSpectrumVm_1.NoopSpectrumVm();return _this;}NoopPortDevice.prototype.reset=function(){};NoopPortDevice.prototype.getDeviceState=function(){};NoopPortDevice.prototype.restoreDeviceState=function(state){};NoopPortDevice.prototype.onAttachedToVm=function(hostVm){};NoopPortDevice.prototype.readPort=function(addr){return (0x75bcd15-0O726746425);};NoopPortDevice.prototype.writePort=function(addr,data){};NoopPortDevice.prototype.contentionWait=function(addr){};return NoopPortDevice;}(PortDeviceType_1.PortDeviceType));exports.NoopPortDevice=NoopPortDevice;},{"../../machine/NoopSpectrumVm":159,"./PortDeviceType":62}],61:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceInfoBase_1=require("../DeviceInfoBase");var PortDeviceInfo=(function(_super){__extends(PortDeviceInfo,_super);function PortDeviceInfo(device){return _super.call(this,undefined,undefined,device)||this;}return PortDeviceInfo;}(DeviceInfoBase_1.DeviceInfoBase));exports.PortDeviceInfo=PortDeviceInfo;},{"../DeviceInfoBase":28}],62:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceTypeBase_1=require("../../abstraction/DeviceTypeBase");var DeviceTypes_1=require("../DeviceTypes");var PortDeviceType=(function(_super){__extends(PortDeviceType,_super);function PortDeviceType(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(PortDeviceType.prototype,"key",{get:function(){return DeviceTypes_1.DT_PORT;},enumerable:true,configurable:true});return PortDeviceType;}(DeviceTypeBase_1.DeviceTypeBase));exports.PortDeviceType=PortDeviceType;},{"../../abstraction/DeviceTypeBase":13,"../DeviceTypes":29}],63:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var PortHandlerBase=(function(){function PortHandlerBase(parent,mask,port,canRead,canWrite){if(canRead===void (0x75bcd15-0O726746425)){canRead=true;}if(canWrite===void (0x75bcd15-0O726746425)){canWrite=true;}this.parentDevice=parent;this.portMask=mask;this.port=port;this.canRead=canRead;this.canWrite=canWrite;}PortHandlerBase.prototype.reset=function(){};PortHandlerBase.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;};PortHandlerBase.prototype.handleRead=function(addr){return {handled:false,readValue:0xFF};};PortHandlerBase.prototype.handleWrite=function(addr,writeValue){};return PortHandlerBase;}());exports.PortHandlerBase=PortHandlerBase;},{}],64:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var PortHandlerBase_1=require("./PortHandlerBase");var PORTMASK=0o140002;var PORT=0o140000;var SoundRegisterIndexPortHandler=(function(_super){__extends(SoundRegisterIndexPortHandler,_super);function SoundRegisterIndexPortHandler(parent){return _super.call(this,parent,PORTMASK,PORT,false)||this;}SoundRegisterIndexPortHandler.prototype.onAttachedToVm=function(hostVm){_super.prototype.onAttachedToVm.call(this,hostVm);this._soundDevice=hostVm.soundDevice;};SoundRegisterIndexPortHandler.prototype.handleWrite=function(addr,writeValue){if(this._soundDevice){this._soundDevice.setRegisterIndex(writeValue);}};return SoundRegisterIndexPortHandler;}(PortHandlerBase_1.PortHandlerBase));exports.SoundRegisterIndexPortHandler=SoundRegisterIndexPortHandler;},{"./PortHandlerBase":63}],65:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var PortHandlerBase_1=require("./PortHandlerBase");var PORTMASK=0o140002;var PORT=0o100000;var SoundRegisterValuePortHandler=(function(_super){__extends(SoundRegisterValuePortHandler,_super);function SoundRegisterValuePortHandler(parent){return _super.call(this,parent,PORTMASK,PORT,false)||this;}SoundRegisterValuePortHandler.prototype.onAttachedToVm=function(hostVm){_super.prototype.onAttachedToVm.call(this,hostVm);this._soundDevice=hostVm.soundDevice;};SoundRegisterValuePortHandler.prototype.handleRead=function(addr){if(this._soundDevice){return {handled:true,readValue:this._soundDevice.getRegisterValue()};}else{return {handled:false,readValue:0xFF};}};SoundRegisterValuePortHandler.prototype.handleWrite=function(addr,writeValue){if(this._soundDevice){this._soundDevice.setRegisterValue(writeValue);}};return SoundRegisterValuePortHandler;}(PortHandlerBase_1.PortHandlerBase));exports.SoundRegisterValuePortHandler=SoundRegisterValuePortHandler;},{"./PortHandlerBase":63}],66:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var PortHandlerBase_1=require("./PortHandlerBase");var NoopMemoryDevice_1=require("../memory/NoopMemoryDevice");var PORTMASK=0o140002;var PORT=0o40000;var Spectrum128MemoryPagePortHandler=(function(_super){__extends(Spectrum128MemoryPagePortHandler,_super);function Spectrum128MemoryPagePortHandler(parent){var _this=_super.call(this,parent,PORTMASK,PORT,false)||this;_this._memoryDevice=new NoopMemoryDevice_1.NoopMemoryDevice();_this.pagingEnabled=true;return _this;}Spectrum128MemoryPagePortHandler.prototype.onAttachedToVm=function(hostVm){_super.prototype.onAttachedToVm.call(this,hostVm);this._memoryDevice=hostVm.memoryDevice;};Spectrum128MemoryPagePortHandler.prototype.reset=function(){_super.prototype.reset.call(this);this.pagingEnabled=true;};Spectrum128MemoryPagePortHandler.prototype.handleWrite=function(addr,writeValue){if(!this.pagingEnabled){return;}this._memoryDevice.pageIn((0O334664274-0x37368B9),writeValue&(0x9D8DE4-0O47306735));this._memoryDevice.usesShadowScreen=((writeValue>>(0O334664274-0x37368B9))&(0O57060516-0xbc614d))===(0O57060516-0xbc614d);this._memoryDevice.selectRom((writeValue>>(0x5E30A78-0O570605164))&(0O57060516-0xbc614d));this.pagingEnabled=(writeValue&0o40)===(0x75bcd15-0O726746425);};return Spectrum128MemoryPagePortHandler;}(PortHandlerBase_1.PortHandlerBase));exports.Spectrum128MemoryPagePortHandler=Spectrum128MemoryPagePortHandler;},{"../memory/NoopMemoryDevice":56,"./PortHandlerBase":63}],67:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var UlaGenericPortDeviceBase_1=require("./UlaGenericPortDeviceBase");var Spectrum128MemoryPagePortHandler_1=require("./Spectrum128MemoryPagePortHandler");var Spectrum48PortHandler_1=require("./Spectrum48PortHandler");var SoundRegisterIndexPortHandler_1=require("./SoundRegisterIndexPortHandler");var SoundRegisterValuePortHandler_1=require("./SoundRegisterValuePortHandler");var Spectrum128PortDevice=(function(_super){__extends(Spectrum128PortDevice,_super);function Spectrum128PortDevice(){var _this=_super.call(this)||this;_this.pagingEnabled=true;_this.handlers.push(new Spectrum48PortHandler_1.Spectrum48PortHandler(_this));_this._memoryHandler=new Spectrum128MemoryPagePortHandler_1.Spectrum128MemoryPagePortHandler(_this);_this.handlers.push(_this._memoryHandler);_this.handlers.push(new SoundRegisterIndexPortHandler_1.SoundRegisterIndexPortHandler(_this));_this.handlers.push(new SoundRegisterValuePortHandler_1.SoundRegisterValuePortHandler(_this));return _this;}return Spectrum128PortDevice;}(UlaGenericPortDeviceBase_1.UlaGenericPortDeviceBase));exports.Spectrum128PortDevice=Spectrum128PortDevice;},{"./SoundRegisterIndexPortHandler":64,"./SoundRegisterValuePortHandler":65,"./Spectrum128MemoryPagePortHandler":66,"./Spectrum48PortHandler":69,"./UlaGenericPortDeviceBase":70}],68:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var UlaGenericPortDeviceBase_1=require("./UlaGenericPortDeviceBase");var Spectrum48PortHandler_1=require("./Spectrum48PortHandler");var Spectrum48PortDevice=(function(_super){__extends(Spectrum48PortDevice,_super);function Spectrum48PortDevice(){var _this=_super.call(this)||this;var handler=new Spectrum48PortHandler_1.Spectrum48PortHandler(_this);_this.handlers.push(handler);return _this;}return Spectrum48PortDevice;}(UlaGenericPortDeviceBase_1.UlaGenericPortDeviceBase));exports.Spectrum48PortDevice=Spectrum48PortDevice;},{"./Spectrum48PortHandler":69,"./UlaGenericPortDeviceBase":70}],69:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var PortHandlerBase_1=require("./PortHandlerBase");var PORTMASK=(0O57060516-0xbc614d);var PORT=(0x75bcd15-0O726746425);var Spectrum48PortHandler=(function(_super){__extends(Spectrum48PortHandler,_super);function Spectrum48PortHandler(parent){var _this=_super.call(this,parent,PORTMASK,PORT)||this;_this._isUla3=false;_this._bit3LastValue=false;_this._bit4LastValue=false;_this._bit4ChangedFrom0=(0x75bcd15-0O726746425);_this._bit4ChangedFrom1=(0x75bcd15-0O726746425);return _this;}Spectrum48PortHandler.prototype.onAttachedToVm=function(hostVm){_super.prototype.onAttachedToVm.call(this,hostVm);this._isUla3=hostVm.ulaIssue==="3";this._cpu=hostVm.cpu;this._screenDevice=hostVm.screenDevice;this._beeperDevice=hostVm.beeperDevice;this._keyboardDevice=hostVm.keyboardDevice;this._tapeDevice=hostVm.tapeDevice;this._bit3LastValue=true;this._bit4LastValue=true;this._bit4ChangedFrom0=(0x75bcd15-0O726746425);this._bit4ChangedFrom1=(0x75bcd15-0O726746425);};Spectrum48PortHandler.prototype.handleRead=function(addr){var readValue=this._keyboardDevice?this._keyboardDevice.getLineStatus((addr>>(0O347010110&0x463A71D))&0o377):0o377;if(this._tapeDevice&&this._tapeDevice.isInLoadMode){var earBit=this._tapeDevice&&this._cpu?this._tapeDevice.getEarBit(this._cpu.tacts):true;if(!earBit){readValue=(readValue&0o277)&0o377;}}else{var bit4Sensed=this._bit4LastValue;if(!bit4Sensed){var chargeTime=this._bit4ChangedFrom1-this._bit4ChangedFrom0;if(chargeTime>(0x75bcd15-0O726746425)){var delay=Math.min(chargeTime*(0x5E30A78-0O570605164),0o5360);bit4Sensed=(this._cpu?this._cpu.tacts:(0x75bcd15-0O726746425))-this._bit4ChangedFrom1<delay;}}var bit6Value=(this._bit3LastValue||bit4Sensed)?0o100:(0x75bcd15-0O726746425);if(this._bit3LastValue&&!bit4Sensed&&this._isUla3){bit6Value=(0x75bcd15-0O726746425);}readValue=((readValue&0o277)|bit6Value)&0o377;}return {handled:true,readValue:readValue};};Spectrum48PortHandler.prototype.handleWrite=function(addr,writeValue){if(this._screenDevice){this._screenDevice.borderColor=writeValue&(0x9D8DE4-0O47306735);}if(this._beeperDevice){this._beeperDevice.processEarBitValue(false,(writeValue&0o20)!==(0x75bcd15-0O726746425));}if(this._tapeDevice){this._tapeDevice.processMicBit((writeValue&(0O347010110&0x463A71D))!==(0x75bcd15-0O726746425));}this._bit3LastValue=(writeValue&(0O347010110&0x463A71D))!==(0x75bcd15-0O726746425);var curBit4=(writeValue&0o20)!==(0x75bcd15-0O726746425);if(!this._bit4LastValue&&curBit4){this._bit4ChangedFrom0=this._cpu?this._cpu.tacts:(0x75bcd15-0O726746425);this._bit4LastValue=true;}else if(this._bit4LastValue&&!curBit4){this._bit4ChangedFrom1=this._cpu?this._cpu.tacts:(0x75bcd15-0O726746425);this._bit4LastValue=false;}};return Spectrum48PortHandler;}(PortHandlerBase_1.PortHandlerBase));exports.Spectrum48PortHandler=Spectrum48PortHandler;},{"./PortHandlerBase":63}],70:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var GenericPortDeviceBase_1=require("./GenericPortDeviceBase");var ScreenRenderingPhase_1=require("../screen/ScreenRenderingPhase");var UlaGenericPortDeviceBase=(function(_super){__extends(UlaGenericPortDeviceBase,_super);function UlaGenericPortDeviceBase(){return _super!==null&&_super.apply(this,arguments)||this;}UlaGenericPortDeviceBase.prototype.onAttachedToVm=function(hostVm){_super.prototype.onAttachedToVm.call(this,hostVm);this.memoryDevice=hostVm.memoryDevice;};UlaGenericPortDeviceBase.prototype.unhandledRead=function(addr){if(!this.hostVm||!this.screenDevice||!this.memoryDevice){return 0o377;}var tact=this.hostVm.currentFrameTact%this.screenDevice.renderingTactTable.length;var rt=this.screenDevice.renderingTactTable[tact];var memAddr=(0x75bcd15-0O726746425);switch(rt.phase){case ScreenRenderingPhase_1.ScreenRenderingPhase.BorderFetchPixel:case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1FetchB2:case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2FetchB1:memAddr=rt.pixelByteToFetchAddress;break;case ScreenRenderingPhase_1.ScreenRenderingPhase.BorderFetchPixelAttr:case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1FetchA2:case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2FetchA1:memAddr=rt.attributeToFetchAddress;break;}if(memAddr===(0x75bcd15-0O726746425)){return 0o377;}return this.memoryDevice.read(memAddr,true);};return UlaGenericPortDeviceBase;}(GenericPortDeviceBase_1.GenericPortDeviceBase));exports.UlaGenericPortDeviceBase=UlaGenericPortDeviceBase;},{"../screen/ScreenRenderingPhase":92,"./GenericPortDeviceBase":59}],71:[function(require,module,exports){"use strict";var __values=(this&&this.__values)||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=(0x75bcd15-0O726746425);if(m)return m.call(o);return {next:function(){if(o&&i>=o.length)o=void (0x75bcd15-0O726746425);return {value:o&&o[i++],done:!o};}};};Object.defineProperty(exports,"__esModule",{value:true});var fs=require("fs");var MemoryMap_1=require("./MemoryMap");var DisassemblyAnnotationData_1=require("./DisassemblyAnnotationData");var MemorySection_1=require("./MemorySection");var MemorySectionData_1=require("./MemorySectionData");exports.MAX_LABEL_LENGTH=0o20;var labelRegex=/^[_a-zA-Z][_a-zA-Z0-9]{0,15}$/;var DisassemblyAnnotation=(function(){function DisassemblyAnnotation(){this.labels=new Map();this.comments=new Map();this.prefixComments=new Map();this.literals=new Map();this.literalValues=new Map();this.literalReplacements=new Map();this.memoryMap=new MemoryMap_1.MemoryMap();this.disassemblyFlags=(0x75bcd15-0O726746425);}DisassemblyAnnotation.prototype.setDisassemblyFlag=function(flag){this.disassemblyFlags=flag;};DisassemblyAnnotation.prototype.setLabel=function(address,label){var e_1,_a;if(!label||!/\S/.test(label)){return this.labels.delete(address);}if(label.length>exports.MAX_LABEL_LENGTH){label=label.substring((0x75bcd15-0O726746425),exports.MAX_LABEL_LENGTH);}if(!labelRegex.test(label)){return false;}try{for(var _b=__values(this.labels.entries()),_c=_b.next();!_c.done;_c=_b.next()){var lab=_c.value;if(lab[(0O57060516-0xbc614d)].toLowerCase()===label.toLowerCase()&&lab[(0x75bcd15-0O726746425)]!==address){return false;}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_1)throw e_1.error;}}this.labels.set(address,label);return true;};DisassemblyAnnotation.prototype.setComment=function(address,comment){if(!comment||!/\S/.test(comment)){return this.comments.delete(address);}this.comments.set(address,comment);return true;};DisassemblyAnnotation.prototype.setPrefixComment=function(address,comment){if(!comment||!/\S/.test(comment)){return this.prefixComments.delete(address);}this.prefixComments.set(address,comment);return true;};DisassemblyAnnotation.prototype.addLiteral=function(key,name){if(!/\S/.test(name)){return false;}var names=this.literals.get(key);if(!names){names=[];}var addr=this.literalValues.get(name);if(addr&&addr!==key){return false;}if(names.find(function(n){return n.toLowerCase()===name.toLowerCase();})){return false;}names.push(name);this.literalValues.set(name,key);this.literals.set(key,names);return true;};DisassemblyAnnotation.prototype.removeLiteral=function(key,name){if(!/\S/.test(name)){return false;}var names=this.literals.get(key);if(!names){names=[];}var index=names.findIndex(function(n){return n.toLowerCase()===name.toLowerCase();});if(index<(0x75bcd15-0O726746425)){return false;}names.splice(index,(0O57060516-0xbc614d));if(names.length>(0x75bcd15-0O726746425)){this.literals.set(key,names);}else{this.literals.delete(key);}return true;};DisassemblyAnnotation.prototype.setLiteralReplacement=function(address,literalName){if(!literalName||!/\S/.test(literalName)){return this.literalReplacements.delete(address);}this.literalReplacements.set(address,literalName);return true;};DisassemblyAnnotation.prototype.applyLiteral=function(address,symbol,literalName){if(!literalName||!/\S/.test(literalName)){this.literalReplacements.delete(address);return undefined;}var literal;if(literalName==="#"){var values=this.literals.get(symbol);if(!values){var labelName=this.labels.get(symbol);if(!labelName){return "There is no symbol associated with #"+symbol+" yet.";}literalName=labelName;literal=symbol;}else{literalName=values.sort()[(0x75bcd15-0O726746425)];literal=this.getLiteralValue(literalName);}}else{literal=this.getLiteralValue(literalName);}if(literal){if(literal!==symbol){return "'"+literalName+"' cannot be assigned to #"+symbol+", as it already has a value of #"+literal;}}else{this.addLiteral(symbol,literalName);}this.literalReplacements.set(address,literalName);return undefined;};DisassemblyAnnotation.prototype.getLiteralValue=function(literalName){return this.literalValues.get(literalName);};DisassemblyAnnotation.prototype.merge=function(other){var e_2,_a,e_3,_b,e_4,_c,e_5,_d,e_6,_e,e_7,_f,e_8,_g;if(!other){throw new Error("No annotation to merge");}if(other===this){return;}try{for(var _h=__values(other.labels),_j=_h.next();!_j.done;_j=_h.next()){var label=_j.value;this.labels.set(label[(0x75bcd15-0O726746425)],label[(0O57060516-0xbc614d)]);}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_j&&!_j.done&&(_a=_h.return))_a.call(_h);}finally{if(e_2)throw e_2.error;}}try{for(var _k=__values(other.comments),_l=_k.next();!_l.done;_l=_k.next()){var comment=_l.value;this.comments.set(comment[(0x75bcd15-0O726746425)],comment[(0O57060516-0xbc614d)]);}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(_l&&!_l.done&&(_b=_k.return))_b.call(_k);}finally{if(e_3)throw e_3.error;}}try{for(var _m=__values(other.prefixComments),_o=_m.next();!_o.done;_o=_m.next()){var prefixComment=_o.value;this.prefixComments.set(prefixComment[(0x75bcd15-0O726746425)],prefixComment[(0O57060516-0xbc614d)]);}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(_o&&!_o.done&&(_c=_m.return))_c.call(_m);}finally{if(e_4)throw e_4.error;}}try{for(var _p=__values(other.literals),_q=_p.next();!_q.done;_q=_p.next()){var literal=_q.value;var oldSet=this.literals.get(literal[(0x75bcd15-0O726746425)]);if(oldSet){var newSet=literal[(0O57060516-0xbc614d)].splice((0x75bcd15-0O726746425));try{for(var oldSet_1=__values(oldSet),oldSet_1_1=oldSet_1.next();!oldSet_1_1.done;oldSet_1_1=oldSet_1.next()){var oldVal=oldSet_1_1.value;newSet.push(oldVal);}}catch(e_6_1){e_6={error:e_6_1};}finally{try{if(oldSet_1_1&&!oldSet_1_1.done&&(_e=oldSet_1.return))_e.call(oldSet_1);}finally{if(e_6)throw e_6.error;}}newSet=newSet.filter(function(value,index,self){return self.indexOf(value)===index;});this.literals.set(literal[(0x75bcd15-0O726746425)],newSet);}else{this.literals.set(literal[(0x75bcd15-0O726746425)],literal[(0O57060516-0xbc614d)]);}}}catch(e_5_1){e_5={error:e_5_1};}finally{try{if(_q&&!_q.done&&(_d=_p.return))_d.call(_p);}finally{if(e_5)throw e_5.error;}}try{for(var _r=__values(other.literalReplacements),_s=_r.next();!_s.done;_s=_r.next()){var replacement=_s.value;this.literalReplacements.set(replacement[(0x75bcd15-0O726746425)],replacement[(0O57060516-0xbc614d)]);}}catch(e_7_1){e_7={error:e_7_1};}finally{try{if(_s&&!_s.done&&(_f=_r.return))_f.call(_r);}finally{if(e_7)throw e_7.error;}}try{for(var _t=__values(other.memoryMap.sections),_u=_t.next();!_u.done;_u=_t.next()){var section=_u.value;this.memoryMap.add(section);}}catch(e_8_1){e_8={error:e_8_1};}finally{try{if(_u&&!_u.done&&(_g=_t.return))_g.call(_t);}finally{if(e_8)throw e_8.error;}}};DisassemblyAnnotation.prototype.toDisassemblyDecorationData=function(){var e_9,_a,e_10,_b,e_11,_c,e_12,_d,e_13,_e,e_14,_f;var dd=new DisassemblyAnnotationData_1.DisassemblyAnnotationData();dd.labels={};try{for(var _g=__values(this.labels),_h=_g.next();!_h.done;_h=_g.next()){var item=_h.value;dd.labels[item[(0x75bcd15-0O726746425)]]=item[(0O57060516-0xbc614d)];}}catch(e_9_1){e_9={error:e_9_1};}finally{try{if(_h&&!_h.done&&(_a=_g.return))_a.call(_g);}finally{if(e_9)throw e_9.error;}}dd.comments={};try{for(var _j=__values(this.comments),_k=_j.next();!_k.done;_k=_j.next()){var item=_k.value;dd.comments[item[(0x75bcd15-0O726746425)]]=item[(0O57060516-0xbc614d)];}}catch(e_10_1){e_10={error:e_10_1};}finally{try{if(_k&&!_k.done&&(_b=_j.return))_b.call(_j);}finally{if(e_10)throw e_10.error;}}dd.prefixComments={};try{for(var _l=__values(this.prefixComments),_m=_l.next();!_m.done;_m=_l.next()){var item=_m.value;dd.prefixComments[item[(0x75bcd15-0O726746425)]]=item[(0O57060516-0xbc614d)];}}catch(e_11_1){e_11={error:e_11_1};}finally{try{if(_m&&!_m.done&&(_c=_l.return))_c.call(_l);}finally{if(e_11)throw e_11.error;}}dd.literals={};try{for(var _o=__values(this.literals),_p=_o.next();!_p.done;_p=_o.next()){var item=_p.value;dd.literals[item[(0x75bcd15-0O726746425)]]=item[(0O57060516-0xbc614d)];}}catch(e_12_1){e_12={error:e_12_1};}finally{try{if(_p&&!_p.done&&(_d=_o.return))_d.call(_o);}finally{if(e_12)throw e_12.error;}}dd.literalReplacements={};try{for(var _q=__values(this.literalReplacements),_r=_q.next();!_r.done;_r=_q.next()){var item=_r.value;dd.literalReplacements[item[(0x75bcd15-0O726746425)]]=item[(0O57060516-0xbc614d)];}}catch(e_13_1){e_13={error:e_13_1};}finally{try{if(_r&&!_r.done&&(_e=_q.return))_e.call(_q);}finally{if(e_13)throw e_13.error;}}dd.memorySections=[];try{for(var _s=__values(this.memoryMap.sections),_t=_s.next();!_t.done;_t=_s.next()){var section=_t.value;dd.memorySections.push(new MemorySectionData_1.MemorySectionData(section.startAddress,section.endAddress,section.sectionType));}}catch(e_14_1){e_14={error:e_14_1};}finally{try{if(_t&&!_t.done&&(_f=_s.return))_f.call(_s);}finally{if(e_14)throw e_14.error;}}dd.disassemblyFlags=this.disassemblyFlags;return dd;};DisassemblyAnnotation.prototype.serialize=function(){return JSON.stringify(this.toDisassemblyDecorationData());};DisassemblyAnnotation.prototype.saveToFile=function(){if(this.resourceName){var contents=this.serialize();fs.writeFileSync(this.resourceName,contents,"utf8");}};DisassemblyAnnotation.deserialize=function(json){var e_15,_a,e_16,_b,e_17,_c;var data;try{data=JSON.parse(json);}catch(err){console.log(err);return undefined;}var annotation=new DisassemblyAnnotation();if(data){annotation.labels=new Map();for(var addr in data.labels){annotation.labels.set(parseInt(addr),data.labels[addr]);}annotation.comments=new Map();for(var addr in data.comments){annotation.comments.set(parseInt(addr),data.comments[addr]);}annotation.prefixComments=new Map();for(var addr in data.prefixComments){annotation.prefixComments.set(parseInt(addr),data.prefixComments[addr]);}annotation.literals=new Map();for(var addr in data.literals){annotation.literals.set(parseInt(addr),data.literals[addr]);}annotation.literalReplacements=new Map();for(var addr in data.literalReplacements){annotation.literalReplacements.set(parseInt(addr),data.literalReplacements[addr]);}annotation.disassemblyFlags=data.disassemblyFlags||(0x75bcd15-0O726746425);try{for(var _d=__values(data.memorySections),_e=_d.next();!_e.done;_e=_d.next()){var section=_e.value;annotation.memoryMap.sections.push(new MemorySection_1.MemorySection(section.startAddress,section.endAddress,section.sectionType));}}catch(e_15_1){e_15={error:e_15_1};}finally{try{if(_e&&!_e.done&&(_a=_d.return))_a.call(_d);}finally{if(e_15)throw e_15.error;}}try{for(var _f=__values(annotation.literals),_g=_f.next();!_g.done;_g=_f.next()){var literal=_g.value;try{for(var _h=__values(literal[(0O57060516-0xbc614d)]),_j=_h.next();!_j.done;_j=_h.next()){var item=_j.value;annotation.literalValues.set(item,literal[(0x75bcd15-0O726746425)]);}}catch(e_17_1){e_17={error:e_17_1};}finally{try{if(_j&&!_j.done&&(_c=_h.return))_c.call(_h);}finally{if(e_17)throw e_17.error;}}}}catch(e_16_1){e_16={error:e_16_1};}finally{try{if(_g&&!_g.done&&(_b=_f.return))_b.call(_f);}finally{if(e_16)throw e_16.error;}}}return annotation;};return DisassemblyAnnotation;}());exports.DisassemblyAnnotation=DisassemblyAnnotation;},{"./DisassemblyAnnotationData":72,"./MemoryMap":73,"./MemorySection":74,"./MemorySectionData":75,"fs":175}],72:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var DisassemblyAnnotationData=(function(){function DisassemblyAnnotationData(){this.memorySections=[];this.disassemblyFlags=(0x75bcd15-0O726746425);}return DisassemblyAnnotationData;}());exports.DisassemblyAnnotationData=DisassemblyAnnotationData;},{}],73:[function(require,module,exports){"use strict";var __values=(this&&this.__values)||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=(0x75bcd15-0O726746425);if(m)return m.call(o);return {next:function(){if(o&&i>=o.length)o=void (0x75bcd15-0O726746425);return {value:o&&o[i++],done:!o};}};};Object.defineProperty(exports,"__esModule",{value:true});var MemorySection_1=require("./MemorySection");var MemorySectionType_1=require("./MemorySectionType");var MemoryMap=(function(){function MemoryMap(){this.sections=[];}Object.defineProperty(MemoryMap.prototype,"count",{get:function(){return this.sections.length;},enumerable:true,configurable:true});MemoryMap.prototype.add=function(item){var overlapFound;do{overlapFound=false;for(var i_1=(0x75bcd15-0O726746425);i_1<this.sections.length;i_1++){var oldSection=this.sections[i_1];if(item.overlaps(oldSection)){overlapFound=true;var oldStart=oldSection.startAddress;var oldEndEx=oldSection.endAddress;var newStart=item.startAddress;var newEndEx=item.endAddress;if(oldStart<newStart){oldSection.endAddress=newStart-(0O57060516-0xbc614d);if(oldEndEx>newEndEx){var newSection=new MemorySection_1.MemorySection(newEndEx+(0O57060516-0xbc614d),oldEndEx);this.sections.splice(i_1+(0O57060516-0xbc614d),(0x75bcd15-0O726746425),newSection);}break;}if(oldStart>=newStart){if(oldEndEx<=newEndEx){this.sections.splice(i_1,(0O57060516-0xbc614d));}else{oldSection.startAddress=newEndEx+(0O57060516-0xbc614d);}break;}}}}while(overlapFound);var insertPos=this.sections.length;for(var i=(0x75bcd15-0O726746425);i<this.sections.length;i++){if(this.sections[i].startAddress>item.startAddress){insertPos=i;break;}}this.sections.splice(insertPos,(0x75bcd15-0O726746425),item);};MemoryMap.prototype.merge=function(map,offset){var e_1,_a;if(offset===void (0x75bcd15-0O726746425)){offset=(0x75bcd15-0O726746425);}if(!map){return;}try{for(var _b=__values(map.sections),_c=_b.next();!_c.done;_c=_b.next()){var section=_c.value;this.add(new MemorySection_1.MemorySection(section.startAddress+offset,section.endAddress+offset,section.sectionType));}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_1)throw e_1.error;}}};MemoryMap.prototype.normalize=function(){var changed=true;while(changed){changed=false;for(var i=(0O57060516-0xbc614d);i<this.count;i++){var prevSection=this.sections[i-(0O57060516-0xbc614d)];var currentSection=this.sections[i];if(prevSection.endAddress!==currentSection.startAddress-(0O57060516-0xbc614d)||prevSection.sectionType!==MemorySectionType_1.MemorySectionType.Disassemble||currentSection.sectionType!==MemorySectionType_1.MemorySectionType.Disassemble){continue;}prevSection.endAddress=currentSection.endAddress;this.sections.splice(i,(0O57060516-0xbc614d));changed=true;}}};return MemoryMap;}());exports.MemoryMap=MemoryMap;},{"./MemorySection":74,"./MemorySectionType":76}],74:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var MemorySectionType_1=require("./MemorySectionType");var MemorySection=(function(){function MemorySection(startAddress,endAddress,sectionType){if(sectionType===void (0x75bcd15-0O726746425)){sectionType=MemorySectionType_1.MemorySectionType.Disassemble;}this._start=(0x75bcd15-0O726746425);this._end=(0x75bcd15-0O726746425);this._type=MemorySectionType_1.MemorySectionType.Disassemble;if(endAddress>=startAddress){this.startAddress=startAddress;this.endAddress=endAddress;}else{this.startAddress=endAddress;this.endAddress=startAddress;}this.sectionType=sectionType;}Object.defineProperty(MemorySection.prototype,"startAddress",{get:function(){return this._start;},set:function(value){this._start=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(MemorySection.prototype,"endAddress",{get:function(){return this._end;},set:function(value){this._end=value&0o177777;},enumerable:true,configurable:true});Object.defineProperty(MemorySection.prototype,"sectionType",{get:function(){return this._type;},set:function(value){this._type=value;},enumerable:true,configurable:true});Object.defineProperty(MemorySection.prototype,"lenght",{get:function(){return (this.endAddress-this.startAddress+(0O57060516-0xbc614d))&0o177777;},enumerable:true,configurable:true});MemorySection.prototype.overlaps=function(other){return other._start>=this._start&&other._start<=this._end||other._end>=this._start&&other._end<=this._end||this._start>=other._start&&this._start<=other._end||this._end>=other._start&&this._end<=other._end;};MemorySection.prototype.sameSection=function(other){return this._start===other._start&&this._end===other._end;};MemorySection.prototype.intersect=function(other){var intStart=-(0O57060516-0xbc614d);var intEnd=-(0O57060516-0xbc614d);if(other._start>=this._start&&other._start<=this._end){intStart=other._start;}if(other._end>=this._start&&other._end<=this._end){intEnd=other._end;}if(this._start>=other._start&&this._start<=other._end){intStart=this._start;}if(this._end>=other._start&&this._end<=other._end){intEnd=this._end;}return intStart<(0x75bcd15-0O726746425)||intEnd<(0x75bcd15-0O726746425)?undefined:new MemorySection(intStart,intEnd);};MemorySection.prototype.equals=function(other){return this._start===other._start&&this._end===other._end&&this._type===other._type;};return MemorySection;}());exports.MemorySection=MemorySection;},{"./MemorySectionType":76}],75:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var MemorySectionData=(function(){function MemorySectionData(startAddress,endAddress,sectionType){this.startAddress=startAddress;this.endAddress=endAddress;this.sectionType=sectionType;}return MemorySectionData;}());exports.MemorySectionData=MemorySectionData;},{}],76:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var MemorySectionType;(function(MemorySectionType){MemorySectionType[MemorySectionType["Skip"]=(0x75bcd15-0O726746425)]="Skip";MemorySectionType[MemorySectionType["Disassemble"]=(0O57060516-0xbc614d)]="Disassemble";MemorySectionType[MemorySectionType["ByteArray"]=(15658734^0O73567354)]="ByteArray";MemorySectionType[MemorySectionType["WordArray"]=(0O334664274-0x37368B9)]="WordArray";MemorySectionType[MemorySectionType["Rst28Calculator"]=(0x5E30A78-0O570605164)]="Rst28Calculator";})(MemorySectionType=exports.MemorySectionType||(exports.MemorySectionType={}));},{}],77:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var RomDeviceType_1=require("./RomDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var NoopRomDevice=(function(_super){__extends(NoopRomDevice,_super);function NoopRomDevice(spectrum){var _this=_super.call(this)||this;_this.hostVm=spectrum?spectrum:new NoopSpectrumVm_1.NoopSpectrumVm();return _this;}NoopRomDevice.prototype.reset=function(){};NoopRomDevice.prototype.getDeviceState=function(){};NoopRomDevice.prototype.restoreDeviceState=function(state){};NoopRomDevice.prototype.onAttachedToVm=function(hostVm){};NoopRomDevice.prototype.getRomBytes=function(romIndex){return new Uint8Array((0x75bcd15-0O726746425));};NoopRomDevice.prototype.getKnownAddress=function(key,romIndex){return undefined;};NoopRomDevice.prototype.getProperty=function(key,romIndex){return {found:false,value:undefined};};return NoopRomDevice;}(RomDeviceType_1.RomDeviceType));exports.NoopRomDevice=NoopRomDevice;},{"../../machine/NoopSpectrumVm":159,"./RomDeviceType":81}],78:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var NoopRomProvider=(function(){function NoopRomProvider(spectrum){this.hostVm=spectrum?spectrum:new NoopSpectrumVm_1.NoopSpectrumVm();}NoopRomProvider.prototype.reset=function(){};NoopRomProvider.prototype.onAttachedToVm=function(hostVm){};NoopRomProvider.prototype.loadRomBytes=function(romName,page){return new Uint8Array((0x75bcd15-0O726746425));};NoopRomProvider.prototype.loadRomAnnotations=function(romName,page){return "";};return NoopRomProvider;}());exports.NoopRomProvider=NoopRomProvider;},{"../../machine/NoopSpectrumVm":159}],79:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var RomConfigurationData=(function(){function RomConfigurationData(){this.numberOfRoms=(0x75bcd15-0O726746425);this.romName="";this.spectrum48RomIndex=(0x75bcd15-0O726746425);}RomConfigurationData.prototype.clone=function(){var rd=new RomConfigurationData();rd.numberOfRoms=this.numberOfRoms;rd.romName=this.romName;rd.spectrum48RomIndex=this.spectrum48RomIndex;return rd;};return RomConfigurationData;}());exports.RomConfigurationData=RomConfigurationData;},{}],80:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceInfoBase_1=require("../DeviceInfoBase");var RomDeviceInfo=(function(_super){__extends(RomDeviceInfo,_super);function RomDeviceInfo(provider,configurationData,device){return _super.call(this,provider,configurationData,device)||this;}return RomDeviceInfo;}(DeviceInfoBase_1.DeviceInfoBase));exports.RomDeviceInfo=RomDeviceInfo;},{"../DeviceInfoBase":28}],81:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceTypeBase_1=require("../../abstraction/DeviceTypeBase");var DeviceTypes_1=require("../DeviceTypes");var RomDeviceType=(function(_super){__extends(RomDeviceType,_super);function RomDeviceType(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(RomDeviceType.prototype,"key",{get:function(){return DeviceTypes_1.DT_ROM;},enumerable:true,configurable:true});return RomDeviceType;}(DeviceTypeBase_1.DeviceTypeBase));exports.RomDeviceType=RomDeviceType;},{"../../abstraction/DeviceTypeBase":13,"../DeviceTypes":29}],82:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();var __values=(this&&this.__values)||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=(0x75bcd15-0O726746425);if(m)return m.call(o);return {next:function(){if(o&&i>=o.length)o=void (0x75bcd15-0O726746425);return {value:o&&o[i++],done:!o};}};};Object.defineProperty(exports,"__esModule",{value:true});var RomDeviceType_1=require("./RomDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var RomConfigurationData_1=require("./RomConfigurationData");var NoopRomProvider_1=require("./NoopRomProvider");var DeviceTypes_1=require("../DeviceTypes");var DisassemblyAnnotation_1=require("./DisassemblyAnnotation");exports.LOAD_BYTES_INVALID_HEADER_ADDRESS="$LoadBytesInvalidHeaderAddress";exports.MAIN_EXEC_ADDRESS="$MainExecAddress";exports.LOAD_BYTES_RESUME_ADDRESS="$LoadBytesResumeAddress";exports.LOAD_BYTES_ROUTINE_ADDRESS="$LoadBytesRoutineAddress";exports.SAVE_BYTES_ROUTINE_ADDRESS="$SaveBytesRoutineAddress";exports.TOKEN_TABLE_ADDRESS="$TokenTableAddress";exports.TOKEN_COUNT="$TokenCount";exports.TOKEN_TABLE_KEY="TokenTable";exports.TOKEN_OFFSET="$TokenOffset";var SpectrumRomDevice=(function(_super){__extends(SpectrumRomDevice,_super);function SpectrumRomDevice(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this._romProvider=new NoopRomProvider_1.NoopRomProvider();_this._romConfiguration=new RomConfigurationData_1.RomConfigurationData();_this._knownAddresses=new Map();_this._properties=new Map();_this._romBytes=[];_this._romAnnotations=[];_this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();return _this;}SpectrumRomDevice.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;var romInfo=hostVm.getDeviceInfo(DeviceTypes_1.DT_ROM);if(romInfo){this._romProvider=romInfo.provider;this._romConfiguration=romInfo.configurationData;}var roms=this._romConfiguration.numberOfRoms;if(roms>0o20){roms=0o20;}this._romBytes=[];this._romAnnotations=[];if(roms===(0O57060516-0xbc614d)){this._romBytes[(0x75bcd15-0O726746425)]=this._romProvider.loadRomBytes(this._romConfiguration.romName,-(0O57060516-0xbc614d));var annData=DisassemblyAnnotation_1.DisassemblyAnnotation.deserialize(this._romProvider.loadRomAnnotations(this._romConfiguration.romName,-(0O57060516-0xbc614d)));if(annData){this._romAnnotations[(0x75bcd15-0O726746425)]=annData;}}else{for(var i=(0x75bcd15-0O726746425);i<roms;i++){this._romBytes[i]=this._romProvider.loadRomBytes(this._romConfiguration.romName,i);var annData=DisassemblyAnnotation_1.DisassemblyAnnotation.deserialize(this._romProvider.loadRomAnnotations(this._romConfiguration.romName,i));if(annData){this._romAnnotations[i]=annData;}}}this.processRoms(this._romBytes,this._romAnnotations);};SpectrumRomDevice.prototype.processRoms=function(romBytes,romAnnotations){this._knownAddresses.clear();this._properties.clear();this.processSpectrum48Props(romBytes,romAnnotations);};SpectrumRomDevice.prototype.getLiteralValue=function(annotation,key){var e_1,_a;try{for(var _b=__values(annotation.literals),_c=_b.next();!_c.done;_c=_b.next()){var literal=_c.value;if(literal[(0O57060516-0xbc614d)].indexOf(key)>=(0x75bcd15-0O726746425)){return literal[(0x75bcd15-0O726746425)];}}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_1)throw e_1.error;}}return undefined;};SpectrumRomDevice.prototype.processSpectrum48Props=function(romBytes,romAnnotations){var romPage=this._romConfiguration.spectrum48RomIndex;var annotations=romAnnotations[romPage];var known=this._knownAddresses;var addr=this.getLiteralValue(annotations,exports.LOAD_BYTES_INVALID_HEADER_ADDRESS);if(addr){known.set(exports.LOAD_BYTES_INVALID_HEADER_ADDRESS+"|"+romPage,addr);}addr=this.getLiteralValue(annotations,exports.MAIN_EXEC_ADDRESS);if(addr){known.set(exports.MAIN_EXEC_ADDRESS+"|"+romPage,addr);}addr=this.getLiteralValue(annotations,exports.LOAD_BYTES_RESUME_ADDRESS);if(addr){known.set(exports.LOAD_BYTES_RESUME_ADDRESS+"|"+romPage,addr);}addr=this.getLiteralValue(annotations,exports.LOAD_BYTES_ROUTINE_ADDRESS);if(addr){known.set(exports.LOAD_BYTES_ROUTINE_ADDRESS+"|"+romPage,addr);}addr=this.getLiteralValue(annotations,exports.SAVE_BYTES_ROUTINE_ADDRESS);if(addr){known.set(exports.SAVE_BYTES_ROUTINE_ADDRESS+"|"+romPage,addr);}var tokenTableAddress=this.getLiteralValue(annotations,exports.TOKEN_TABLE_ADDRESS);if(tokenTableAddress){known.set(exports.TOKEN_TABLE_ADDRESS+"|"+romPage,tokenTableAddress);}var tokenCount=this.getLiteralValue(annotations,exports.TOKEN_TABLE_ADDRESS);if(tokenCount){known.set(exports.TOKEN_TABLE_ADDRESS+"|"+romPage,tokenCount);}var tokenOffset=this.getLiteralValue(annotations,exports.TOKEN_OFFSET);if(tokenOffset){known.set(exports.TOKEN_OFFSET+"|"+romPage,tokenOffset);}var rom=romBytes[romPage];var tokenTable=[];this._properties.set(exports.TOKEN_TABLE_ADDRESS+"|"+romPage,tokenTable);var tokenPtr=tokenTableAddress;if(!tokenPtr||!tokenCount){return;}tokenPtr++;var token="";while(tokenCount>(0x75bcd15-0O726746425)){var nextChar=rom[tokenPtr++];if((nextChar&0o200)>(0x75bcd15-0O726746425)){token+=String.fromCharCode(nextChar&0o177);tokenTable.push(token);tokenCount--;token="";}else{token+=String.fromCharCode(nextChar);}}};SpectrumRomDevice.prototype.reset=function(){};SpectrumRomDevice.prototype.getDeviceState=function(){};SpectrumRomDevice.prototype.restoreDeviceState=function(state){};SpectrumRomDevice.prototype.getRomBytes=function(romIndex){return this._romBytes[romIndex];};SpectrumRomDevice.prototype.getKnownAddress=function(key,romIndex){return this._knownAddresses.get(key+"|"+romIndex);};SpectrumRomDevice.prototype.getProperty=function(key,romIndex){var storedValue=this._properties.get(key+"|"+romIndex);return storedValue?{found:true,value:storedValue}:{found:false,value:undefined};};return SpectrumRomDevice;}(RomDeviceType_1.RomDeviceType));exports.SpectrumRomDevice=SpectrumRomDevice;},{"../../machine/NoopSpectrumVm":159,"../DeviceTypes":29,"./DisassemblyAnnotation":71,"./NoopRomProvider":78,"./RomConfigurationData":79,"./RomDeviceType":81}],83:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var ZxSpectrum48Rom_1=require("./ZxSpectrum48Rom");var SpectrumRomProvider=(function(){function SpectrumRomProvider(){this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();}SpectrumRomProvider.prototype.reset=function(){};SpectrumRomProvider.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;};SpectrumRomProvider.prototype.loadRomBytes=function(romName,page){return new Uint8Array(ZxSpectrum48Rom_1.zxSpectum48Rom);};SpectrumRomProvider.prototype.loadRomAnnotations=function(romName,page){return JSON.stringify(ZxSpectrum48Rom_1.zxSpectrum48DisAnn);};return SpectrumRomProvider;}());exports.SpectrumRomProvider=SpectrumRomProvider;},{"../../machine/NoopSpectrumVm":159,"./ZxSpectrum48Rom":84}],84:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.zxSpectum48Rom=[0o363,0o257,0o21,0o377,0o377,0o303,0o313,0o21,0o52,0o135,0o134,0o42,0o137,0o134,0o30,0o103,0o303,0o362,0o25,0o377,0o377,0o377,0o377,0o377,0o52,0o135,0o134,0o176,0o315,0o175,(0x75bcd15-0O726746425),0o320,0o315,0o164,(0x75bcd15-0O726746425),0o30,0o367,0o377,0o377,0o377,0o303,0o133,0o63,0o377,0o377,0o377,0o377,0o377,0o305,0o52,0o141,0o134,0o345,0o303,0o236,0o26,0o365,0o345,0o52,0o170,0o134,0o43,0o42,0o170,0o134,0o174,0o265,0o40,(0O334664274-0x37368B9),0o375,0o64,0o100,0o305,0o325,0o315,0o277,(15658734^0O73567354),0o321,0o301,0o341,0o361,0o373,0o311,0o341,0o156,0o375,0o165,(0x75bcd15-0O726746425),0o355,0o173,0o75,0o134,0o303,0o305,0o26,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o365,0o345,0o52,0o260,0o134,0o174,0o265,0o40,(0O57060516-0xbc614d),0o351,0o341,0o361,0o355,0o105,0o52,0o135,0o134,0o43,0o42,0o135,0o134,0o176,0o311,0o376,0o41,0o320,0o376,0o15,0o310,0o376,0o20,0o330,0o376,0o30,0o77,0o330,0o43,0o376,0o26,0o70,(0O57060516-0xbc614d),0o43,0o67,0o42,0o135,0o134,0o311,0o277,0o122,0o116,0o304,0o111,0o116,0o113,0o105,0o131,0o244,0o120,0o311,0o106,0o316,0o120,0o117,0o111,0o116,0o324,0o123,0o103,0o122,0o105,0o105,0o116,0o244,0o101,0o124,0o124,0o322,0o101,0o324,0o124,0o101,0o302,0o126,0o101,0o114,0o244,0o103,0o117,0o104,0o305,0o126,0o101,0o314,0o114,0o105,0o316,0o123,0o111,0o316,0o103,0o117,0o323,0o124,0o101,0o316,0o101,0o123,0o316,0o101,0o103,0o323,0o101,0o124,0o316,0o114,0o316,0o105,0o130,0o320,0o111,0o116,0o324,0o123,0o121,0o322,0o123,0o107,0o316,0o101,0o102,0o323,0o120,0o105,0o105,0o313,0o111,0o316,0o125,0o123,0o322,0o123,0o124,0o122,0o244,0o103,0o110,0o122,0o244,0o116,0o117,0o324,0o102,0o111,0o316,0o117,0o322,0o101,0o116,0o304,0o74,0o275,0o76,0o275,0o74,0o276,0o114,0o111,0o116,0o305,0o124,0o110,0o105,0o316,0o124,0o317,0o123,0o124,0o105,0o320,0o104,0o105,0o106,0o40,0o106,0o316,0o103,0o101,0o324,0o106,0o117,0o122,0o115,0o101,0o324,0o115,0o117,0o126,0o305,0o105,0o122,0o101,0o123,0o305,0o117,0o120,0o105,0o116,0o40,0o243,0o103,0o114,0o117,0o123,0o105,0o40,0o243,0o115,0o105,0o122,0o107,0o305,0o126,0o105,0o122,0o111,0o106,0o331,0o102,0o105,0o105,0o320,0o103,0o111,0o122,0o103,0o114,0o305,0o111,0o116,0o313,0o120,0o101,0o120,0o105,0o322,0o106,0o114,0o101,0o123,0o310,0o102,0o122,0o111,0o107,0o110,0o324,0o111,0o116,0o126,0o105,0o122,0o123,0o305,0o117,0o126,0o105,0o322,0o117,0o125,0o324,0o114,0o120,0o122,0o111,0o116,0o324,0o114,0o114,0o111,0o123,0o324,0o123,0o124,0o117,0o320,0o122,0o105,0o101,0o304,0o104,0o101,0o124,0o301,0o122,0o105,0o123,0o124,0o117,0o122,0o305,0o116,0o105,0o327,0o102,0o117,0o122,0o104,0o105,0o322,0o103,0o117,0o116,0o124,0o111,0o116,0o125,0o305,0o104,0o111,0o315,0o122,0o105,0o315,0o106,0o117,0o322,0o107,0o117,0o40,0o124,0o317,0o107,0o117,0o40,0o123,0o125,0o302,0o111,0o116,0o120,0o125,0o324,0o114,0o117,0o101,0o304,0o114,0o111,0o123,0o324,0o114,0o105,0o324,0o120,0o101,0o125,0o123,0o305,0o116,0o105,0o130,0o324,0o120,0o117,0o113,0o305,0o120,0o122,0o111,0o116,0o324,0o120,0o114,0o117,0o324,0o122,0o125,0o316,0o123,0o101,0o126,0o305,0o122,0o101,0o116,0o104,0o117,0o115,0o111,0o132,0o305,0o111,0o306,0o103,0o114,0o323,0o104,0o122,0o101,0o327,0o103,0o114,0o105,0o101,0o322,0o122,0o105,0o124,0o125,0o122,0o316,0o103,0o117,0o120,0o331,0o102,0o110,0o131,0o66,0o65,0o124,0o107,0o126,0o116,0o112,0o125,0o67,0o64,0o122,0o106,0o103,0o115,0o113,0o111,0o70,0o63,0o105,0o104,0o130,0o16,0o114,0o117,0o71,0o62,0o127,0o123,0o132,0o40,0o15,0o120,0o60,0o61,0o121,0o101,0o343,0o304,0o340,0o344,0o264,0o274,0o275,0o273,0o257,0o260,0o261,0o300,0o247,0o246,0o276,0o255,0o262,0o272,0o345,0o245,0o302,0o341,0o263,0o271,0o301,0o270,0o176,0o334,0o332,0o134,0o267,0o173,0o175,0o330,0o277,0o256,0o252,0o253,0o335,0o336,0o337,0o177,0o265,0o326,0o174,0o325,0o135,0o333,0o266,0o331,0o133,0o327,0o14,(0x9D8DE4-0O47306735),(1011010-0O3666474),(0x5E30A78-0O570605164),(0O507646144^0x51F4C61),(0O347010110&0x463A71D),0o12,0o13,0o11,0o17,0o342,0o52,0o77,0o315,0o310,0o314,0o313,0o136,0o254,0o55,0o53,0o75,0o56,0o54,0o73,0o42,0o307,0o74,0o303,0o76,0o305,0o57,0o311,0o140,0o306,0o72,0o320,0o316,0o250,0o312,0o323,0o324,0o321,0o322,0o251,0o317,0o56,0o57,0o21,0o377,0o377,(0O57060516-0xbc614d),0o376,0o376,0o355,0o170,0o57,0o346,0o37,0o50,0o16,0o147,0o175,0o24,0o300,0o326,(0O347010110&0x463A71D),0o313,0o74,0o60,0o372,0o123,0o137,0o40,0o364,0o55,0o313,(0x75bcd15-0O726746425),0o70,0o346,0o172,0o74,0o310,0o376,0o50,0o310,0o376,0o31,0o310,0o173,0o132,0o127,0o376,0o30,0o311,0o315,0o216,(15658734^0O73567354),0o300,0o41,(0x75bcd15-0O726746425),0o134,0o313,0o176,0o40,(0x9D8DE4-0O47306735),0o43,0o65,0o53,0o40,(15658734^0O73567354),0o66,0o377,0o175,0o41,(0x5E30A78-0O570605164),0o134,0o275,0o40,0o356,0o315,0o36,(0O334664274-0x37368B9),0o320,0o41,(0x75bcd15-0O726746425),0o134,0o276,0o50,0o56,0o353,0o41,(0x5E30A78-0O570605164),0o134,0o276,0o50,0o47,0o313,0o176,0o40,(0x5E30A78-0O570605164),0o353,0o313,0o176,0o310,0o137,0o167,0o43,0o66,(0O507646144^0x51F4C61),0o43,0o72,0o11,0o134,0o167,0o43,0o375,0o116,(0x9D8DE4-0O47306735),0o375,0o126,(0O57060516-0xbc614d),0o345,0o315,0o63,(0O334664274-0x37368B9),0o341,0o167,0o62,(0O347010110&0x463A71D),0o134,0o375,0o313,(0O57060516-0xbc614d),0o356,0o311,0o43,0o66,(0O507646144^0x51F4C61),0o43,0o65,0o300,0o72,0o12,0o134,0o167,0o43,0o176,0o30,0o352,0o102,0o26,(0x75bcd15-0O726746425),0o173,0o376,0o47,0o320,0o376,0o30,0o40,(0O334664274-0x37368B9),0o313,0o170,0o300,0o41,(0O507646144^0x51F4C61),(15658734^0O73567354),0o31,0o176,0o67,0o311,0o173,0o376,0o72,0o70,0o57,0o15,0o372,0o117,(0O334664274-0x37368B9),0o50,(0O334664274-0x37368B9),0o306,0o117,0o311,0o41,0o353,(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o50,(0O334664274-0x37368B9),0o41,(0O507646144^0x51F4C61),(15658734^0O73567354),0o26,(0x75bcd15-0O726746425),0o31,0o176,0o311,0o41,0o51,(15658734^0O73567354),0o313,0o100,0o50,0o364,0o313,0o132,0o50,0o12,0o375,0o313,0o60,0o136,0o300,(0x5E30A78-0O570605164),0o300,0o306,0o40,0o311,0o306,0o245,0o311,0o376,0o60,0o330,0o15,0o372,0o235,(0O334664274-0x37368B9),0o40,0o31,0o41,0o124,(15658734^0O73567354),0o313,0o150,0o50,0o323,0o376,0o70,0o60,(0x9D8DE4-0O47306735),0o326,0o40,(0x5E30A78-0O570605164),0o310,0o306,(0O347010110&0x463A71D),0o311,0o326,0o66,(0x5E30A78-0O570605164),0o310,0o306,0o376,0o311,0o41,0o60,(15658734^0O73567354),0o376,0o71,0o50,0o272,0o376,0o60,0o50,0o266,0o346,(0x9D8DE4-0O47306735),0o306,0o200,(0x5E30A78-0O570605164),0o310,0o356,0o17,0o311,(0x5E30A78-0O570605164),0o310,0o313,0o150,0o41,0o60,(15658734^0O73567354),0o40,0o244,0o326,0o20,0o376,0o42,0o50,(1011010-0O3666474),0o376,0o40,0o300,0o76,0o137,0o311,0o76,0o100,0o311,0o363,0o175,0o313,0o75,0o313,0o75,0o57,0o346,(0O334664274-0x37368B9),0o117,(1011010-0O3666474),(0x75bcd15-0O726746425),0o335,0o41,0o321,(0O334664274-0x37368B9),0o335,0o11,0o72,0o110,0o134,0o346,0o70,0o17,0o17,0o17,0o366,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o14,0o15,0o40,0o375,0o16,0o77,(0O507646144^0x51F4C61),0o302,0o326,(0O334664274-0x37368B9),0o356,0o20,0o323,0o376,0o104,0o117,0o313,0o147,0o40,0o11,0o172,0o263,0o50,0o11,0o171,0o115,0o33,0o335,0o351,0o115,0o14,0o335,0o351,0o373,0o311,0o357,0o61,0o47,0o300,(0O334664274-0x37368B9),0o64,0o354,0o154,0o230,0o37,0o365,(0x5E30A78-0O570605164),0o241,0o17,0o70,0o41,0o222,0o134,0o176,0o247,0o40,0o136,0o43,0o116,0o43,0o106,0o170,0o27,0o237,0o271,0o40,0o124,0o43,0o276,0o40,0o120,0o170,0o306,0o74,0o362,0o45,(0x5E30A78-0O570605164),0o342,0o154,(0x5E30A78-0O570605164),(1011010-0O3666474),0o372,(0x5E30A78-0O570605164),0o326,0o14,0o60,0o373,0o306,0o14,0o305,0o41,0o156,(0x5E30A78-0O570605164),0o315,(1011010-0O3666474),0o64,0o315,0o264,0o63,0o357,(0x5E30A78-0O570605164),0o70,0o361,0o206,0o167,0o357,0o300,(15658734^0O73567354),0o61,0o70,0o315,0o224,0o36,0o376,0o13,0o60,0o42,0o357,0o340,(0x5E30A78-0O570605164),0o340,0o64,0o200,0o103,0o125,0o237,0o200,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),0o64,0o65,0o161,(0O334664274-0x37368B9),0o70,0o315,0o231,0o36,0o305,0o315,0o231,0o36,0o341,0o120,0o131,0o172,0o263,0o310,0o33,0o303,0o265,(0O334664274-0x37368B9),0o317,0o12,0o211,(15658734^0O73567354),0o320,0o22,0o206,0o211,0o12,0o227,0o140,0o165,0o211,0o22,0o325,0o27,0o37,0o211,0o33,0o220,0o101,(15658734^0O73567354),0o211,0o44,0o320,0o123,0o312,0o211,0o56,0o235,0o66,0o261,0o211,0o70,0o377,0o111,0o76,0o211,0o103,0o377,0o152,0o163,0o211,0o117,0o247,(0x75bcd15-0O726746425),0o124,0o211,0o134,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o211,0o151,0o24,0o366,0o44,0o211,0o166,0o361,0o20,(0O507646144^0x51F4C61),0o315,0o373,0o44,0o72,0o73,0o134,0o207,0o372,0o212,0o34,0o341,0o320,0o345,0o315,0o361,0o53,0o142,0o153,0o15,0o370,0o11,0o313,0o376,0o311,0o41,0o77,(0O507646144^0x51F4C61),0o345,0o41,0o200,0o37,0o313,0o177,0o50,(0O334664274-0x37368B9),0o41,0o230,0o14,(0O347010110&0x463A71D),0o23,0o335,0o53,0o363,0o76,(15658734^0O73567354),0o107,0o20,0o376,0o323,0o376,0o356,0o17,(1011010-0O3666474),0o244,0o55,0o40,0o365,(0O507646144^0x51F4C61),0o45,0o362,0o330,(0x5E30A78-0O570605164),(1011010-0O3666474),0o57,0o20,0o376,0o323,0o376,0o76,0o15,(1011010-0O3666474),0o67,0o20,0o376,0o323,0o376,(0O57060516-0xbc614d),0o16,0o73,(0O347010110&0x463A71D),0o157,0o303,(0x9D8DE4-0O47306735),(0O507646144^0x51F4C61),0o172,0o263,0o50,0o14,0o335,0o156,(0x75bcd15-0O726746425),0o174,0o255,0o147,0o76,(0O57060516-0xbc614d),0o67,0o303,0o45,(0O507646144^0x51F4C61),0o154,0o30,0o364,0o171,0o313,0o170,0o20,0o376,0o60,(0x5E30A78-0O570605164),(1011010-0O3666474),0o102,0o20,0o376,0o323,0o376,(1011010-0O3666474),0o76,0o40,0o357,(0O507646144^0x51F4C61),0o257,0o74,0o313,0o25,0o302,0o24,(0O507646144^0x51F4C61),0o33,0o335,0o43,(1011010-0O3666474),0o61,0o76,0o177,0o333,0o376,0o37,0o320,0o172,0o74,0o302,0o376,(0x5E30A78-0O570605164),(1011010-0O3666474),0o73,0o20,0o376,0o311,0o365,0o72,0o110,0o134,0o346,0o70,0o17,0o17,0o17,0o323,0o376,0o76,0o177,0o333,0o376,0o37,0o373,0o70,(15658734^0O73567354),0o317,0o14,0o361,0o311,0o24,(0O347010110&0x463A71D),0o25,0o363,0o76,0o17,0o323,0o376,0o41,0o77,(0O507646144^0x51F4C61),0o345,0o333,0o376,0o37,0o346,0o40,0o366,(15658734^0O73567354),0o117,0o277,0o300,0o315,0o347,(0O507646144^0x51F4C61),0o60,0o372,0o41,0o25,(0x5E30A78-0O570605164),0o20,0o376,0o53,0o174,0o265,0o40,0o371,0o315,0o343,(0O507646144^0x51F4C61),0o60,0o353,(1011010-0O3666474),0o234,0o315,0o343,(0O507646144^0x51F4C61),0o60,0o344,0o76,0o306,0o270,0o60,0o340,0o44,0o40,0o361,(1011010-0O3666474),0o311,0o315,0o347,(0O507646144^0x51F4C61),0o60,0o325,0o170,0o376,0o324,0o60,0o364,0o315,0o347,(0O507646144^0x51F4C61),0o320,0o171,0o356,(0O334664274-0x37368B9),0o117,0o46,(0x75bcd15-0O726746425),(1011010-0O3666474),0o260,0o30,0o37,(0O347010110&0x463A71D),0o40,(0x9D8DE4-0O47306735),0o60,0o17,0o335,0o165,(0x75bcd15-0O726746425),0o30,0o17,0o313,0o21,0o255,0o300,0o171,0o37,0o117,0o23,0o30,(0x9D8DE4-0O47306735),0o335,0o176,(0x75bcd15-0O726746425),0o255,0o300,0o335,0o43,0o33,(0O347010110&0x463A71D),(1011010-0O3666474),0o262,0o56,(0O57060516-0xbc614d),0o315,0o343,(0O507646144^0x51F4C61),0o320,0o76,0o313,0o270,0o313,0o25,(1011010-0O3666474),0o260,0o322,0o312,(0O507646144^0x51F4C61),0o174,0o255,0o147,0o172,0o263,0o40,0o312,0o174,0o376,(0O57060516-0xbc614d),0o311,0o315,0o347,(0O507646144^0x51F4C61),0o320,0o76,0o26,0o75,0o40,0o375,0o247,(0x5E30A78-0O570605164),0o310,0o76,0o177,0o333,0o376,0o37,0o320,0o251,0o346,0o40,0o50,0o363,0o171,0o57,0o117,0o346,(0x9D8DE4-0O47306735),0o366,(0O347010110&0x463A71D),0o323,0o376,0o67,0o311,0o361,0o72,0o164,0o134,0o326,0o340,0o62,0o164,0o134,0o315,0o214,0o34,0o315,0o60,0o45,0o50,0o74,(0O57060516-0xbc614d),0o21,(0x75bcd15-0O726746425),0o72,0o164,0o134,0o247,0o50,(15658734^0O73567354),0o16,0o42,0o367,0o325,0o335,0o341,(1011010-0O3666474),0o13,0o76,0o40,0o22,0o23,0o20,0o374,0o335,0o66,(0O57060516-0xbc614d),0o377,0o315,0o361,0o53,0o41,0o366,0o377,0o13,0o11,(0O334664274-0x37368B9),0o60,0o17,0o72,0o164,0o134,0o247,0o40,(15658734^0O73567354),0o317,0o16,0o170,0o261,0o50,0o12,(0O57060516-0xbc614d),0o12,(0x75bcd15-0O726746425),0o335,0o345,0o341,0o43,0o353,0o355,0o260,0o337,0o376,0o344,0o40,0o111,0o72,0o164,0o134,0o376,(0O334664274-0x37368B9),0o312,0o212,0o34,0o347,0o315,0o262,0o50,0o313,0o371,0o60,0o13,0o41,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o72,0o164,0o134,0o75,0o50,0o25,0o317,(0O57060516-0xbc614d),0o302,0o212,0o34,0o315,0o60,0o45,0o50,0o30,0o43,0o176,0o335,0o167,0o13,0o43,0o176,0o335,0o167,0o14,0o43,0o335,0o161,0o16,0o76,(0O57060516-0xbc614d),0o313,0o161,0o50,(0O57060516-0xbc614d),0o74,0o335,0o167,(0x75bcd15-0O726746425),0o353,0o347,0o376,0o51,0o40,0o332,0o347,0o315,0o356,0o33,0o353,0o303,0o132,(0x9D8DE4-0O47306735),0o376,0o252,0o40,0o37,0o72,0o164,0o134,0o376,(0O334664274-0x37368B9),0o312,0o212,0o34,0o347,0o315,0o356,0o33,0o335,0o66,0o13,(0x75bcd15-0O726746425),0o335,0o66,0o14,0o33,0o41,(0x75bcd15-0O726746425),0o100,0o335,0o165,0o15,0o335,0o164,0o16,0o30,0o115,0o376,0o257,0o40,0o117,0o72,0o164,0o134,0o376,(0O334664274-0x37368B9),0o312,0o212,0o34,0o347,0o315,0o110,0o40,0o40,0o14,0o72,0o164,0o134,0o247,0o312,0o212,0o34,0o315,0o346,0o34,0o30,0o17,0o315,0o202,0o34,0o337,0o376,0o54,0o50,0o14,0o72,0o164,0o134,0o247,0o312,0o212,0o34,0o315,0o346,0o34,0o30,(0x5E30A78-0O570605164),0o347,0o315,0o202,0o34,0o315,0o356,0o33,0o315,0o231,0o36,0o335,0o161,0o13,0o335,0o160,0o14,0o315,0o231,0o36,0o335,0o161,0o15,0o335,0o160,0o16,0o140,0o151,0o335,0o66,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o30,0o104,0o376,0o312,0o50,0o11,0o315,0o356,0o33,0o335,0o66,0o16,0o200,0o30,0o27,0o72,0o164,0o134,0o247,0o302,0o212,0o34,0o347,0o315,0o202,0o34,0o315,0o356,0o33,0o315,0o231,0o36,0o335,0o161,0o15,0o335,0o160,0o16,0o335,0o66,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o131,0o134,0o355,0o133,0o123,0o134,0o67,0o355,0o122,0o335,0o165,0o13,0o335,0o164,0o14,0o52,0o113,0o134,0o355,0o122,0o335,0o165,0o17,0o335,0o164,0o20,0o353,0o72,0o164,0o134,0o247,0o312,0o160,0o11,0o345,(0O57060516-0xbc614d),0o21,(0x75bcd15-0O726746425),0o335,0o11,0o335,0o345,0o21,0o21,(0x75bcd15-0O726746425),0o257,0o67,0o315,0o126,(0O507646144^0x51F4C61),0o335,0o341,0o60,0o362,0o76,0o376,0o315,(0O57060516-0xbc614d),0o26,0o375,0o66,0o122,(0O334664274-0x37368B9),0o16,0o200,0o335,0o176,(0x75bcd15-0O726746425),0o335,0o276,0o357,0o40,(15658734^0O73567354),0o16,0o366,0o376,(0x5E30A78-0O570605164),0o60,0o331,0o21,0o300,0o11,0o305,0o315,0o12,0o14,0o301,0o335,0o345,0o321,0o41,0o360,0o377,0o31,(1011010-0O3666474),0o12,0o176,0o74,0o40,(0O334664274-0x37368B9),0o171,0o200,0o117,0o23,0o32,0o276,0o43,0o40,(0O57060516-0xbc614d),0o14,0o327,0o20,0o366,0o313,0o171,0o40,0o263,0o76,0o15,0o327,0o341,0o335,0o176,(0x75bcd15-0O726746425),0o376,(0O334664274-0x37368B9),0o50,0o14,0o72,0o164,0o134,0o75,0o312,(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o376,(15658734^0O73567354),0o312,0o266,(0O347010110&0x463A71D),0o345,0o335,0o156,0o372,0o335,0o146,0o373,0o335,0o136,0o13,0o335,0o126,0o14,0o174,0o265,0o50,0o15,0o355,0o122,0o70,0o46,0o50,(0x9D8DE4-0O47306735),0o335,0o176,(0x75bcd15-0O726746425),0o376,(0O334664274-0x37368B9),0o40,0o35,0o341,0o174,0o265,0o40,(1011010-0O3666474),0o335,0o156,0o15,0o335,0o146,0o16,0o345,0o335,0o341,0o72,0o164,0o134,0o376,(15658734^0O73567354),0o67,0o40,(0O57060516-0xbc614d),0o247,0o76,0o377,0o315,0o126,(0O507646144^0x51F4C61),0o330,0o317,0o32,0o335,0o136,0o13,0o335,0o126,0o14,0o345,0o174,0o265,0o40,(1011010-0O3666474),0o23,0o23,0o23,0o353,0o30,0o14,0o335,0o156,0o372,0o335,0o146,0o373,0o353,0o67,0o355,0o122,0o70,0o11,0o21,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o31,0o104,0o115,0o315,(0O507646144^0x51F4C61),0o37,0o341,0o335,0o176,(0x75bcd15-0O726746425),0o247,0o50,0o76,0o174,0o265,0o50,0o23,0o53,0o106,0o53,0o116,0o53,(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o335,0o42,0o137,0o134,0o315,0o350,0o31,0o335,0o52,0o137,0o134,0o52,0o131,0o134,0o53,0o335,0o116,0o13,0o335,0o106,0o14,0o305,(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o335,0o176,0o375,0o365,0o315,0o125,0o26,0o43,0o361,0o167,0o321,0o43,0o163,0o43,0o162,0o43,0o345,0o335,0o341,0o67,0o76,0o377,0o303,(15658734^0O73567354),(0O347010110&0x463A71D),0o353,0o52,0o131,0o134,0o53,0o335,0o42,0o137,0o134,0o335,0o116,0o13,0o335,0o106,0o14,0o305,0o315,0o345,0o31,0o301,0o345,0o305,0o315,0o125,0o26,0o335,0o52,0o137,0o134,0o43,0o335,0o116,0o17,0o335,0o106,0o20,0o11,0o42,0o113,0o134,0o335,0o146,0o16,0o174,0o346,0o300,0o40,0o12,0o335,0o156,0o15,0o42,0o102,0o134,0o375,0o66,0o12,(0x75bcd15-0O726746425),0o321,0o335,0o341,0o67,0o76,0o377,0o303,(15658734^0O73567354),(0O347010110&0x463A71D),0o335,0o116,0o13,0o335,0o106,0o14,0o305,(0O334664274-0x37368B9),0o367,0o66,0o200,0o353,0o321,0o345,0o345,0o335,0o341,0o67,0o76,0o377,0o315,(15658734^0O73567354),(0O347010110&0x463A71D),0o341,0o355,0o133,0o123,0o134,0o176,0o346,0o300,0o40,0o31,0o32,0o23,0o276,0o43,0o40,(15658734^0O73567354),0o32,0o276,0o33,0o53,0o60,(0O347010110&0x463A71D),0o345,0o353,0o315,0o270,0o31,0o341,0o30,0o354,0o315,0o54,0o11,0o30,0o342,0o176,0o117,0o376,0o200,0o310,0o345,0o52,0o113,0o134,0o176,0o376,0o200,0o50,0o45,0o271,0o50,(0O347010110&0x463A71D),0o305,0o315,0o270,0o31,0o301,0o353,0o30,0o360,0o346,0o340,0o376,0o240,0o40,0o22,0o321,0o325,0o345,0o43,0o23,0o32,0o276,0o40,(1011010-0O3666474),0o27,0o60,0o367,0o341,0o30,(0O334664274-0x37368B9),0o341,0o30,0o340,0o76,0o377,0o321,0o353,0o74,0o67,0o315,0o54,0o11,0o30,0o304,0o40,0o20,(0O347010110&0x463A71D),0o42,0o137,0o134,0o353,0o315,0o270,0o31,0o315,0o350,0o31,0o353,0o52,0o137,0o134,(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o325,0o315,0o270,0o31,0o42,0o137,0o134,0o52,0o123,0o134,0o343,0o305,(0O347010110&0x463A71D),0o70,(0x9D8DE4-0O47306735),0o53,0o315,0o125,0o26,0o43,0o30,(0O334664274-0x37368B9),0o315,0o125,0o26,0o43,0o301,0o321,0o355,0o123,0o123,0o134,0o355,0o133,0o137,0o134,0o305,0o325,0o353,0o355,0o260,0o341,0o301,0o325,0o315,0o350,0o31,0o321,0o311,0o345,0o76,0o375,0o315,(0O57060516-0xbc614d),0o26,0o257,0o21,0o241,0o11,0o315,0o12,0o14,0o375,0o313,(15658734^0O73567354),0o356,0o315,0o324,0o25,0o335,0o345,0o21,0o21,(0x75bcd15-0O726746425),0o257,0o315,0o302,(0x5E30A78-0O570605164),0o335,0o341,(1011010-0O3666474),0o62,0o166,0o20,0o375,0o335,0o136,0o13,0o335,0o126,0o14,0o76,0o377,0o335,0o341,0o303,0o302,(0x5E30A78-0O570605164),0o200,0o123,0o164,0o141,0o162,0o164,0o40,0o164,0o141,0o160,0o145,0o54,0o40,0o164,0o150,0o145,0o156,0o40,0o160,0o162,0o145,0o163,0o163,0o40,0o141,0o156,0o171,0o40,0o153,0o145,0o171,0o256,0o15,0o120,0o162,0o157,0o147,0o162,0o141,0o155,0o72,0o240,0o15,0o116,0o165,0o155,0o142,0o145,0o162,0o40,0o141,0o162,0o162,0o141,0o171,0o72,0o240,0o15,0o103,0o150,0o141,0o162,0o141,0o143,0o164,0o145,0o162,0o40,0o141,0o162,0o162,0o141,0o171,0o72,0o240,0o15,0o102,0o171,0o164,0o145,0o163,0o72,0o240,0o315,(0O334664274-0x37368B9),0o13,0o376,0o40,0o322,0o331,0o12,0o376,(1011010-0O3666474),0o70,0o151,0o376,0o30,0o60,0o145,0o41,0o13,0o12,0o137,0o26,(0x75bcd15-0O726746425),0o31,0o136,0o31,0o345,0o303,(0O334664274-0x37368B9),0o13,0o116,0o127,0o20,0o51,0o124,0o123,0o122,0o67,0o120,0o117,0o137,0o136,0o135,0o134,0o133,0o132,0o124,0o123,0o14,0o76,0o42,0o271,0o40,0o21,0o375,0o313,(0O57060516-0xbc614d),0o116,0o40,0o11,(0x5E30A78-0O570605164),0o16,(15658734^0O73567354),0o76,0o30,0o270,0o40,(0O334664274-0x37368B9),(0O507646144^0x51F4C61),0o16,0o41,0o303,0o331,0o15,0o72,0o221,0o134,0o365,0o375,0o66,0o127,(0O57060516-0xbc614d),0o76,0o40,0o315,0o145,0o13,0o361,0o62,0o221,0o134,0o311,0o375,0o313,(0O57060516-0xbc614d),0o116,0o302,0o315,0o16,0o16,0o41,0o315,0o125,0o14,(0O507646144^0x51F4C61),0o303,0o331,0o15,0o315,(0O334664274-0x37368B9),0o13,0o171,0o75,0o75,0o346,0o20,0o30,0o132,0o76,0o77,0o30,0o154,0o21,0o207,0o12,0o62,0o17,0o134,0o30,0o13,0o21,0o155,0o12,0o30,(0O334664274-0x37368B9),0o21,0o207,0o12,0o62,0o16,0o134,0o52,0o121,0o134,0o163,0o43,0o162,0o311,0o21,0o364,0o11,0o315,0o200,0o12,0o52,0o16,0o134,0o127,0o175,0o376,0o26,0o332,0o21,0o42,0o40,0o51,0o104,0o112,0o76,0o37,0o221,0o70,0o14,0o306,(15658734^0O73567354),0o117,0o375,0o313,(0O57060516-0xbc614d),0o116,0o40,0o26,0o76,0o26,0o220,0o332,0o237,0o36,0o74,0o107,(0x5E30A78-0O570605164),0o375,0o313,(15658734^0O73567354),0o106,0o302,0o125,0o14,0o375,0o276,0o61,0o332,0o206,0o14,0o303,0o331,0o15,0o174,0o315,(0O334664274-0x37368B9),0o13,0o201,0o75,0o346,0o37,0o310,0o127,0o375,0o313,(0O57060516-0xbc614d),0o306,0o76,0o40,0o315,0o73,0o14,0o25,0o40,0o370,0o311,0o315,0o44,0o13,0o375,0o313,(0O57060516-0xbc614d),0o116,0o40,0o32,0o375,0o313,(15658734^0O73567354),0o106,0o40,(0O347010110&0x463A71D),0o355,0o103,0o210,0o134,0o42,0o204,0o134,0o311,0o355,0o103,0o212,0o134,0o355,0o103,0o202,0o134,0o42,0o206,0o134,0o311,0o375,0o161,0o105,0o42,0o200,0o134,0o311,0o375,0o313,(0O57060516-0xbc614d),0o116,0o40,0o24,0o355,0o113,0o210,0o134,0o52,0o204,0o134,0o375,0o313,(15658734^0O73567354),0o106,0o310,0o355,0o113,0o212,0o134,0o52,0o206,0o134,0o311,0o375,0o116,0o105,0o52,0o200,0o134,0o311,0o376,0o200,0o70,0o75,0o376,0o220,0o60,0o46,0o107,0o315,0o70,0o13,0o315,(0O334664274-0x37368B9),0o13,0o21,0o222,0o134,0o30,0o107,0o41,0o222,0o134,0o315,0o76,0o13,0o313,0o30,0o237,0o346,0o17,0o117,0o313,0o30,0o237,0o346,0o360,0o261,0o16,(0x5E30A78-0O570605164),0o167,0o43,0o15,0o40,0o373,0o311,0o326,0o245,0o60,0o11,0o306,0o25,0o305,0o355,0o113,0o173,0o134,0o30,0o13,0o315,0o20,0o14,0o303,(0O334664274-0x37368B9),0o13,0o305,0o355,0o113,0o66,0o134,0o353,0o41,0o73,0o134,0o313,0o206,0o376,0o40,0o40,(15658734^0O73567354),0o313,0o306,0o46,(0x75bcd15-0O726746425),0o157,0o51,0o51,0o51,0o11,0o301,0o353,0o171,0o75,0o76,0o41,0o40,0o16,(0O507646144^0x51F4C61),0o117,0o375,0o313,(0O57060516-0xbc614d),0o116,0o50,(1011010-0O3666474),0o325,0o315,0o315,0o16,0o321,0o171,0o271,0o325,0o314,0o125,0o14,0o321,0o305,0o345,0o72,0o221,0o134,(1011010-0O3666474),0o377,0o37,0o70,(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o37,0o37,0o237,0o117,0o76,(0O347010110&0x463A71D),0o247,0o375,0o313,(0O57060516-0xbc614d),0o116,0o50,(0O507646144^0x51F4C61),0o375,0o313,0o60,0o316,0o67,0o353,(0O347010110&0x463A71D),0o32,0o240,0o256,0o251,0o22,(0O347010110&0x463A71D),0o70,0o23,0o24,0o43,0o75,0o40,0o362,0o353,0o45,0o375,0o313,(0O57060516-0xbc614d),0o116,0o314,0o333,0o13,0o341,0o301,0o15,0o43,0o311,(0O347010110&0x463A71D),0o76,0o40,0o203,0o137,(0O347010110&0x463A71D),0o30,0o346,0o174,0o17,0o17,0o17,0o346,(0O334664274-0x37368B9),0o366,0o130,0o147,0o355,0o133,0o217,0o134,0o176,0o253,0o242,0o253,0o375,0o313,0o127,0o166,0o50,(0O347010110&0x463A71D),0o346,0o307,0o313,0o127,0o40,(15658734^0O73567354),0o356,0o70,0o375,0o313,0o127,0o146,0o50,(0O347010110&0x463A71D),0o346,0o370,0o313,0o157,0o40,(15658734^0O73567354),0o356,(0x9D8DE4-0O47306735),0o167,0o311,0o345,0o46,(0x75bcd15-0O726746425),0o343,0o30,(0x5E30A78-0O570605164),0o21,0o225,(0x75bcd15-0O726746425),0o365,0o315,0o101,0o14,0o70,0o11,0o76,0o40,0o375,0o313,(0O57060516-0xbc614d),0o106,0o314,0o73,0o14,0o32,0o346,0o177,0o315,0o73,0o14,0o32,0o23,0o207,0o60,0o365,0o321,0o376,0o110,0o50,(0O334664274-0x37368B9),0o376,0o202,0o330,0o172,0o376,(0O334664274-0x37368B9),0o330,0o76,0o40,0o325,0o331,0o327,0o331,0o321,0o311,0o365,0o353,0o74,0o313,0o176,0o43,0o50,0o373,0o75,0o40,0o370,0o353,0o361,0o376,0o40,0o330,0o32,0o326,0o101,0o311,0o375,0o313,(0O57060516-0xbc614d),0o116,0o300,0o21,0o331,0o15,0o325,0o170,0o375,0o313,(15658734^0O73567354),0o106,0o302,(15658734^0O73567354),0o15,0o375,0o276,0o61,0o70,0o33,0o300,0o375,0o313,(15658734^0O73567354),0o146,0o50,0o26,0o375,0o136,0o55,0o35,0o50,0o132,0o76,(0x75bcd15-0O726746425),0o315,(0O57060516-0xbc614d),0o26,0o355,0o173,0o77,0o134,0o375,0o313,(15658734^0O73567354),0o246,0o311,0o317,(0x5E30A78-0O570605164),0o375,0o65,0o122,0o40,0o105,0o76,0o30,0o220,0o62,0o214,0o134,0o52,0o217,0o134,0o345,0o72,0o221,0o134,0o365,0o76,0o375,0o315,(0O57060516-0xbc614d),0o26,0o257,0o21,0o370,0o14,0o315,0o12,0o14,0o375,0o313,(15658734^0O73567354),0o356,0o41,0o73,0o134,0o313,0o336,0o313,0o256,0o331,0o315,0o324,0o25,0o331,0o376,0o40,0o50,0o105,0o376,0o342,0o50,0o101,0o366,0o40,0o376,0o156,0o50,0o73,0o76,0o376,0o315,(0O57060516-0xbc614d),0o26,0o361,0o62,0o221,0o134,0o341,0o42,0o217,0o134,0o315,0o376,0o15,0o375,0o106,0o61,(0x5E30A78-0O570605164),0o16,0o41,0o305,0o315,0o233,0o16,0o174,0o17,0o17,0o17,0o346,(0O334664274-0x37368B9),0o366,0o130,0o147,0o21,0o340,0o132,0o32,0o116,(1011010-0O3666474),0o40,0o353,0o22,0o161,0o23,0o43,0o20,0o372,0o301,0o311,0o200,0o163,0o143,0o162,0o157,0o154,0o154,0o277,0o317,0o14,0o376,(15658734^0O73567354),0o70,0o200,0o375,0o206,0o61,0o326,0o31,0o320,0o355,0o104,0o305,0o107,0o52,0o217,0o134,0o345,0o52,0o221,0o134,0o345,0o315,0o115,0o15,0o170,0o365,0o41,0o153,0o134,0o106,0o170,0o74,0o167,0o41,0o211,0o134,0o276,0o70,(0O334664274-0x37368B9),0o64,(1011010-0O3666474),0o30,0o315,(0x75bcd15-0O726746425),0o16,0o361,0o75,0o40,0o350,0o341,0o375,0o165,0o127,0o341,0o42,0o217,0o134,0o355,0o113,0o210,0o134,0o375,0o313,(15658734^0O73567354),0o206,0o315,0o331,0o15,0o375,0o313,(15658734^0O73567354),0o306,0o301,0o311,0o257,0o52,0o215,0o134,0o375,0o313,(15658734^0O73567354),0o106,0o50,(0x5E30A78-0O570605164),0o147,0o375,0o156,0o16,0o42,0o217,0o134,0o41,0o221,0o134,0o40,(15658734^0O73567354),0o176,0o17,0o256,0o346,0o125,0o256,0o167,0o311,0o315,0o257,0o15,0o41,0o74,0o134,0o313,0o256,0o313,0o306,0o315,0o115,0o15,0o375,0o106,0o61,0o315,0o104,0o16,0o41,0o300,0o132,0o72,0o215,0o134,(0O507646144^0x51F4C61),0o30,(0x9D8DE4-0O47306735),0o16,0o40,0o53,0o167,0o15,0o40,0o373,0o20,0o367,0o375,0o66,0o61,(15658734^0O73567354),0o76,0o375,0o315,(0O57060516-0xbc614d),0o26,0o52,0o121,0o134,0o21,0o364,0o11,0o247,0o163,0o43,0o162,0o43,0o21,0o250,0o20,0o77,0o70,0o366,(0O57060516-0xbc614d),0o41,0o27,0o30,0o52,0o41,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o42,0o175,0o134,0o375,0o313,0o60,0o206,0o315,0o224,0o15,0o76,0o376,0o315,(0O57060516-0xbc614d),0o26,0o315,0o115,0o15,(1011010-0O3666474),0o30,0o315,0o104,0o16,0o52,0o121,0o134,0o21,0o364,0o11,0o163,0o43,0o162,0o375,0o66,0o122,(0O57060516-0xbc614d),(0O57060516-0xbc614d),0o41,0o30,0o41,(0x75bcd15-0O726746425),0o133,0o375,0o313,(0O57060516-0xbc614d),0o116,0o40,0o22,0o170,0o375,0o313,(15658734^0O73567354),0o106,0o50,(0O507646144^0x51F4C61),0o375,0o206,0o61,0o326,0o30,0o305,0o107,0o315,0o233,0o16,0o301,0o76,0o41,0o221,0o137,0o26,(0x75bcd15-0O726746425),0o31,0o303,0o334,0o12,(1011010-0O3666474),0o27,0o315,0o233,0o16,0o16,(0O347010110&0x463A71D),0o305,0o345,0o170,0o346,(0x9D8DE4-0O47306735),0o170,0o40,0o14,0o353,0o41,0o340,0o370,0o31,0o353,(0O57060516-0xbc614d),0o40,(0x75bcd15-0O726746425),0o75,0o355,0o260,0o353,0o41,0o340,0o377,0o31,0o353,0o107,0o346,(0x9D8DE4-0O47306735),0o17,0o17,0o17,0o117,0o170,(1011010-0O3666474),(0x75bcd15-0O726746425),0o355,0o260,(1011010-0O3666474),(0x9D8DE4-0O47306735),0o11,0o346,0o370,0o40,0o333,0o341,0o44,0o301,0o15,0o40,0o315,0o315,0o210,0o16,0o41,0o340,0o377,0o31,0o353,0o355,0o260,(1011010-0O3666474),(0O57060516-0xbc614d),0o305,0o315,0o233,0o16,0o16,(0O347010110&0x463A71D),0o305,0o345,0o170,0o346,(0x9D8DE4-0O47306735),0o17,0o17,0o17,0o117,0o170,(1011010-0O3666474),(0x75bcd15-0O726746425),0o15,0o124,0o135,0o66,(0x75bcd15-0O726746425),0o23,0o355,0o260,0o21,(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),0o31,0o75,0o346,0o370,0o107,0o40,0o345,0o341,0o44,0o301,0o15,0o40,0o334,0o315,0o210,0o16,0o142,0o153,0o23,0o72,0o215,0o134,0o375,0o313,(15658734^0O73567354),0o106,0o50,(0O334664274-0x37368B9),0o72,0o110,0o134,0o167,0o13,0o355,0o260,0o301,0o16,0o41,0o311,0o174,0o17,0o17,0o17,0o75,0o366,0o120,0o147,0o353,0o141,0o150,0o51,0o51,0o51,0o51,0o51,0o104,0o115,0o311,0o76,0o30,0o220,0o127,0o17,0o17,0o17,0o346,0o340,0o157,0o172,0o346,0o30,0o366,0o100,0o147,0o311,0o363,(1011010-0O3666474),0o260,0o41,(0x75bcd15-0O726746425),0o100,0o345,0o305,0o315,0o364,0o16,0o301,0o341,0o44,0o174,0o346,(0x9D8DE4-0O47306735),0o40,0o12,0o175,0o306,0o40,0o157,0o77,0o237,0o346,0o370,0o204,0o147,0o20,0o347,0o30,0o15,0o363,0o41,(0x75bcd15-0O726746425),0o133,(1011010-0O3666474),(0O347010110&0x463A71D),0o305,0o315,0o364,0o16,0o301,0o20,0o371,0o76,(0x5E30A78-0O570605164),0o323,0o373,0o373,0o41,(0x75bcd15-0O726746425),0o133,0o375,0o165,0o106,0o257,0o107,0o167,0o43,0o20,0o374,0o375,0o313,0o60,0o216,0o16,0o41,0o303,0o331,0o15,0o170,0o376,(0O334664274-0x37368B9),0o237,0o346,(15658734^0O73567354),0o323,0o373,0o127,0o315,0o124,0o37,0o70,0o12,0o76,(0x5E30A78-0O570605164),0o323,0o373,0o373,0o315,0o337,0o16,0o317,0o14,0o333,0o373,0o207,0o370,0o60,0o353,0o16,0o40,0o136,0o43,(1011010-0O3666474),(0O347010110&0x463A71D),0o313,0o22,0o313,0o23,0o313,0o32,0o333,0o373,0o37,0o60,0o373,0o172,0o323,0o373,0o20,0o360,0o15,0o40,0o351,0o311,0o52,0o75,0o134,0o345,0o41,0o177,0o20,0o345,0o355,0o163,0o75,0o134,0o315,0o324,0o25,0o365,0o26,(0x75bcd15-0O726746425),0o375,0o136,0o377,0o41,0o310,(0x75bcd15-0O726746425),0o315,0o265,(0O334664274-0x37368B9),0o361,0o41,0o70,0o17,0o345,0o376,0o30,0o60,0o61,0o376,(0x9D8DE4-0O47306735),0o70,0o55,0o376,0o20,0o70,0o72,(0O57060516-0xbc614d),(15658734^0O73567354),(0x75bcd15-0O726746425),0o127,0o376,0o26,0o70,0o14,(0O334664274-0x37368B9),0o375,0o313,0o67,0o176,0o312,0o36,0o20,0o315,0o324,0o25,0o137,0o315,0o324,0o25,0o325,0o52,0o133,0o134,0o375,0o313,(0x9D8DE4-0O47306735),0o206,0o315,0o125,0o26,0o301,0o43,0o160,0o43,0o161,0o30,0o12,0o375,0o313,(0x9D8DE4-0O47306735),0o206,0o52,0o133,0o134,0o315,0o122,0o26,0o22,0o23,0o355,0o123,0o133,0o134,0o311,0o137,0o26,(0x75bcd15-0O726746425),0o41,0o231,0o17,0o31,0o136,0o31,0o345,0o52,0o133,0o134,0o311,0o11,0o146,0o152,0o120,0o265,0o160,0o176,0o317,0o324,0o52,0o111,0o134,0o375,0o313,0o67,0o156,0o302,0o227,0o20,0o315,0o156,0o31,0o315,0o225,0o26,0o172,0o263,0o312,0o227,0o20,0o345,0o43,0o116,0o43,0o106,0o41,0o12,(0x75bcd15-0O726746425),0o11,0o104,0o115,0o315,(0O507646144^0x51F4C61),0o37,0o315,0o227,0o20,0o52,0o121,0o134,0o343,0o345,0o76,0o377,0o315,(0O57060516-0xbc614d),0o26,0o341,0o53,0o375,0o65,0o17,0o315,0o125,0o30,0o375,0o64,0o17,0o52,0o131,0o134,0o43,0o43,0o43,0o43,0o42,0o133,0o134,0o341,0o315,0o25,0o26,0o311,0o375,0o313,0o67,0o156,0o40,(0O347010110&0x463A71D),0o41,0o111,0o134,0o315,0o17,0o31,0o30,0o155,0o375,0o66,(0x75bcd15-0O726746425),0o20,0o30,0o35,0o315,0o61,0o20,0o30,(0O507646144^0x51F4C61),0o176,0o376,0o15,0o310,0o43,0o42,0o133,0o134,0o311,0o315,0o61,0o20,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o303,0o350,0o31,0o315,0o324,0o25,0o315,0o324,0o25,0o341,0o341,0o341,0o42,0o75,0o134,0o375,0o313,(0x75bcd15-0O726746425),0o176,0o300,0o371,0o311,0o67,0o315,0o225,0o21,0o355,0o122,0o31,0o43,0o301,0o330,0o305,0o104,0o115,0o142,0o153,0o43,0o32,0o346,0o360,0o376,0o20,0o40,0o11,0o43,0o32,0o326,0o27,0o316,(0x75bcd15-0O726746425),0o40,(0O57060516-0xbc614d),0o43,0o247,0o355,0o102,0o11,0o353,0o70,0o346,0o311,0o375,0o313,0o67,0o156,0o300,0o52,0o111,0o134,0o315,0o156,0o31,0o353,0o315,0o225,0o26,0o41,0o112,0o134,0o315,0o34,0o31,0o315,0o225,0o27,0o76,(0x75bcd15-0O726746425),0o303,(0O57060516-0xbc614d),0o26,0o375,0o313,0o67,0o176,0o50,0o250,0o303,0o201,0o17,0o375,0o313,0o60,0o146,0o50,0o241,0o375,0o66,(0x75bcd15-0O726746425),0o377,0o26,(0x75bcd15-0O726746425),0o375,0o136,0o376,0o41,0o220,0o32,0o315,0o265,(0O334664274-0x37368B9),0o303,0o60,0o17,0o345,0o315,0o220,0o21,0o53,0o315,0o345,0o31,0o42,0o133,0o134,0o375,0o66,(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),0o341,0o311,0o375,0o313,(15658734^0O73567354),0o136,0o304,0o35,0o21,0o247,0o375,0o313,(0O57060516-0xbc614d),0o156,0o310,0o72,(0O347010110&0x463A71D),0o134,0o375,0o313,(0O57060516-0xbc614d),0o256,0o365,0o375,0o313,(15658734^0O73567354),0o156,0o304,0o156,0o15,0o361,0o376,0o40,0o60,0o122,0o376,0o20,0o60,0o55,0o376,(1011010-0O3666474),0o60,0o12,0o107,0o346,(0O57060516-0xbc614d),0o117,0o170,0o37,0o306,0o22,0o30,0o52,0o40,0o11,0o41,0o152,0o134,0o76,(0O347010110&0x463A71D),0o256,0o167,0o30,0o16,0o376,0o16,0o330,0o326,0o15,0o41,0o101,0o134,0o276,0o167,0o40,(15658734^0O73567354),0o66,(0x75bcd15-0O726746425),0o375,0o313,(15658734^0O73567354),0o336,0o277,0o311,0o107,0o346,(0x9D8DE4-0O47306735),0o117,0o76,0o20,0o313,0o130,0o40,(0O57060516-0xbc614d),0o74,0o375,0o161,0o323,0o21,0o15,0o21,0o30,(1011010-0O3666474),0o72,0o15,0o134,0o21,0o250,0o20,0o52,0o117,0o134,0o43,0o43,0o163,0o43,0o162,0o67,0o311,0o315,0o115,0o15,0o375,0o313,(15658734^0O73567354),0o236,0o375,0o313,(15658734^0O73567354),0o256,0o52,0o212,0o134,0o345,0o52,0o75,0o134,0o345,0o41,0o147,0o21,0o345,0o355,0o163,0o75,0o134,0o52,0o202,0o134,0o345,0o67,0o315,0o225,0o21,0o353,0o315,0o175,0o30,0o353,0o315,0o341,0o30,0o52,0o212,0o134,0o343,0o353,0o315,0o115,0o15,0o72,0o213,0o134,0o222,0o70,0o46,0o40,(1011010-0O3666474),0o173,0o375,0o226,0o120,0o60,0o36,0o76,0o40,0o325,0o315,0o364,0o11,0o321,0o30,0o351,0o26,(0x75bcd15-0O726746425),0o375,0o136,0o376,0o41,0o220,0o32,0o315,0o265,(0O334664274-0x37368B9),0o375,0o66,(0x75bcd15-0O726746425),0o377,0o355,0o133,0o212,0o134,0o30,(15658734^0O73567354),0o321,0o341,0o341,0o42,0o75,0o134,0o301,0o325,0o315,0o331,0o15,0o341,0o42,0o202,0o134,0o375,0o66,0o46,(0x75bcd15-0O726746425),0o311,0o52,0o141,0o134,0o53,0o247,0o355,0o133,0o131,0o134,0o375,0o313,0o67,0o156,0o310,0o355,0o133,0o141,0o134,0o330,0o52,0o143,0o134,0o311,0o176,0o376,0o16,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o314,0o350,0o31,0o176,0o43,0o376,0o15,0o40,0o361,0o311,0o363,0o76,0o377,0o355,0o133,0o262,0o134,0o331,0o355,0o113,0o264,0o134,0o355,0o133,0o70,0o134,0o52,0o173,0o134,0o331,0o107,0o76,(0x9D8DE4-0O47306735),0o323,0o376,0o76,0o77,0o355,0o107,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o142,0o153,0o66,(15658734^0O73567354),0o53,0o274,0o40,0o372,0o247,0o355,0o122,0o31,0o43,0o60,(1011010-0O3666474),0o65,0o50,(0O334664274-0x37368B9),0o65,0o50,0o363,0o53,0o331,0o355,0o103,0o264,0o134,0o355,0o123,0o70,0o134,0o42,0o173,0o134,0o331,(0x5E30A78-0O570605164),0o50,0o31,0o42,0o264,0o134,0o21,0o257,0o76,(0O57060516-0xbc614d),0o250,(0x75bcd15-0O726746425),0o353,0o355,0o270,0o353,0o43,0o42,0o173,0o134,0o53,(0O57060516-0xbc614d),0o100,(0x75bcd15-0O726746425),0o355,0o103,0o70,0o134,0o42,0o262,0o134,0o41,(0x75bcd15-0O726746425),0o74,0o42,0o66,0o134,0o52,0o262,0o134,0o66,0o76,0o53,0o371,0o53,0o53,0o42,0o75,0o134,0o355,0o126,0o375,0o41,0o72,0o134,0o373,0o41,0o266,0o134,0o42,0o117,0o134,0o21,0o257,0o25,(0O57060516-0xbc614d),0o25,(0x75bcd15-0O726746425),0o353,0o355,0o260,0o353,0o53,0o42,0o127,0o134,0o43,0o42,0o123,0o134,0o42,0o113,0o134,0o66,0o200,0o43,0o42,0o131,0o134,0o66,0o15,0o43,0o66,0o200,0o43,0o42,0o141,0o134,0o42,0o143,0o134,0o42,0o145,0o134,0o76,0o70,0o62,0o215,0o134,0o62,0o217,0o134,0o62,0o110,0o134,0o41,0o43,(0O507646144^0x51F4C61),0o42,0o11,0o134,0o375,0o65,0o306,0o375,0o65,0o312,0o41,0o306,0o25,0o21,0o20,0o134,(0O57060516-0xbc614d),0o16,(0x75bcd15-0O726746425),0o355,0o260,0o375,0o313,(0O57060516-0xbc614d),0o316,0o315,0o337,0o16,0o375,0o66,0o61,(15658734^0O73567354),0o315,0o153,0o15,0o257,0o21,0o70,0o25,0o315,0o12,0o14,0o375,0o313,(15658734^0O73567354),0o356,0o30,(0x9D8DE4-0O47306735),0o375,0o66,0o61,(15658734^0O73567354),0o315,0o225,0o27,0o315,0o260,0o26,0o76,(0x75bcd15-0O726746425),0o315,(0O57060516-0xbc614d),0o26,0o315,0o54,0o17,0o315,0o27,0o33,0o375,0o313,(0x75bcd15-0O726746425),0o176,0o40,0o22,0o375,0o313,0o60,0o146,0o50,0o100,0o52,0o131,0o134,0o315,0o247,0o21,0o375,0o66,(0x75bcd15-0O726746425),0o377,0o30,0o335,0o52,0o131,0o134,0o42,0o135,0o134,0o315,0o373,0o31,0o170,0o261,0o302,0o135,0o25,0o337,0o376,0o15,0o50,0o300,0o375,0o313,0o60,0o106,0o304,0o257,0o15,0o315,0o156,0o15,0o76,0o31,0o375,0o226,0o117,0o62,0o214,0o134,0o375,0o313,(0O57060516-0xbc614d),0o376,0o375,0o66,(0x75bcd15-0O726746425),0o377,0o375,0o66,0o12,(0O57060516-0xbc614d),0o315,0o212,0o33,0o166,0o375,0o313,(0O57060516-0xbc614d),0o256,0o375,0o313,0o60,0o116,0o304,0o315,0o16,0o72,0o72,0o134,0o74,0o365,0o41,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o375,0o164,0o67,0o375,0o164,0o46,0o42,0o13,0o134,0o41,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o42,0o26,0o134,0o315,0o260,0o26,0o375,0o313,0o67,0o256,0o315,0o156,0o15,0o375,0o313,(15658734^0O73567354),0o356,0o361,0o107,0o376,0o12,0o70,(15658734^0O73567354),0o306,(0x9D8DE4-0O47306735),0o315,0o357,0o25,0o76,0o40,0o327,0o170,0o21,0o221,0o23,0o315,0o12,0o14,0o257,0o21,0o66,0o25,0o315,0o12,0o14,0o355,0o113,0o105,0o134,0o315,0o33,0o32,0o76,0o72,0o327,0o375,0o116,0o15,(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o33,0o32,0o315,0o227,0o20,0o72,0o72,0o134,0o74,0o50,0o33,0o376,0o11,0o50,(0x5E30A78-0O570605164),0o376,0o25,0o40,(0O334664274-0x37368B9),0o375,0o64,0o15,(0O57060516-0xbc614d),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o21,0o160,0o134,0o41,0o104,0o134,0o313,0o176,0o50,(0O57060516-0xbc614d),0o11,0o355,0o270,0o375,0o66,0o12,0o377,0o375,0o313,(0O57060516-0xbc614d),0o236,0o303,0o254,0o22,0o200,0o117,0o313,0o116,0o105,0o130,0o124,0o40,0o167,0o151,0o164,0o150,0o157,0o165,0o164,0o40,0o106,0o117,0o322,0o126,0o141,0o162,0o151,0o141,0o142,0o154,0o145,0o40,0o156,0o157,0o164,0o40,0o146,0o157,0o165,0o156,0o344,0o123,0o165,0o142,0o163,0o143,0o162,0o151,0o160,0o164,0o40,0o167,0o162,0o157,0o156,0o347,0o117,0o165,0o164,0o40,0o157,0o146,0o40,0o155,0o145,0o155,0o157,0o162,0o371,0o117,0o165,0o164,0o40,0o157,0o146,0o40,0o163,0o143,0o162,0o145,0o145,0o356,0o116,0o165,0o155,0o142,0o145,0o162,0o40,0o164,0o157,0o157,0o40,0o142,0o151,0o347,0o122,0o105,0o124,0o125,0o122,0o116,0o40,0o167,0o151,0o164,0o150,0o157,0o165,0o164,0o40,0o107,0o117,0o123,0o125,0o302,0o105,0o156,0o144,0o40,0o157,0o146,0o40,0o146,0o151,0o154,0o345,0o123,0o124,0o117,0o120,0o40,0o163,0o164,0o141,0o164,0o145,0o155,0o145,0o156,0o364,0o111,0o156,0o166,0o141,0o154,0o151,0o144,0o40,0o141,0o162,0o147,0o165,0o155,0o145,0o156,0o364,0o111,0o156,0o164,0o145,0o147,0o145,0o162,0o40,0o157,0o165,0o164,0o40,0o157,0o146,0o40,0o162,0o141,0o156,0o147,0o345,0o116,0o157,0o156,0o163,0o145,0o156,0o163,0o145,0o40,0o151,0o156,0o40,0o102,0o101,0o123,0o111,0o303,0o102,0o122,0o105,0o101,0o113,0o40,0o55,0o40,0o103,0o117,0o116,0o124,0o40,0o162,0o145,0o160,0o145,0o141,0o164,0o363,0o117,0o165,0o164,0o40,0o157,0o146,0o40,0o104,0o101,0o124,0o301,0o111,0o156,0o166,0o141,0o154,0o151,0o144,0o40,0o146,0o151,0o154,0o145,0o40,0o156,0o141,0o155,0o345,0o116,0o157,0o40,0o162,0o157,0o157,0o155,0o40,0o146,0o157,0o162,0o40,0o154,0o151,0o156,0o345,0o123,0o124,0o117,0o120,0o40,0o151,0o156,0o40,0o111,0o116,0o120,0o125,0o324,0o106,0o117,0o122,0o40,0o167,0o151,0o164,0o150,0o157,0o165,0o164,0o40,0o116,0o105,0o130,0o324,0o111,0o156,0o166,0o141,0o154,0o151,0o144,0o40,0o111,0o57,0o117,0o40,0o144,0o145,0o166,0o151,0o143,0o345,0o111,0o156,0o166,0o141,0o154,0o151,0o144,0o40,0o143,0o157,0o154,0o157,0o165,0o362,0o102,0o122,0o105,0o101,0o113,0o40,0o151,0o156,0o164,0o157,0o40,0o160,0o162,0o157,0o147,0o162,0o141,0o355,0o122,0o101,0o115,0o124,0o117,0o120,0o40,0o156,0o157,0o40,0o147,0o157,0o157,0o344,0o123,0o164,0o141,0o164,0o145,0o155,0o145,0o156,0o164,0o40,0o154,0o157,0o163,0o364,0o111,0o156,0o166,0o141,0o154,0o151,0o144,0o40,0o163,0o164,0o162,0o145,0o141,0o355,0o106,0o116,0o40,0o167,0o151,0o164,0o150,0o157,0o165,0o164,0o40,0o104,0o105,0o306,0o120,0o141,0o162,0o141,0o155,0o145,0o164,0o145,0o162,0o40,0o145,0o162,0o162,0o157,0o362,0o124,0o141,0o160,0o145,0o40,0o154,0o157,0o141,0o144,0o151,0o156,0o147,0o40,0o145,0o162,0o162,0o157,0o362,0o54,0o240,0o177,0o40,0o61,0o71,0o70,0o62,0o40,0o123,0o151,0o156,0o143,0o154,0o141,0o151,0o162,0o40,0o122,0o145,0o163,0o145,0o141,0o162,0o143,0o150,0o40,0o114,0o164,0o344,0o76,0o20,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o303,0o23,0o23,0o355,0o103,0o111,0o134,0o52,0o135,0o134,0o353,0o41,0o125,0o25,0o345,0o52,0o141,0o134,0o67,0o355,0o122,0o345,0o140,0o151,0o315,0o156,0o31,0o40,(1011010-0O3666474),0o315,0o270,0o31,0o315,0o350,0o31,0o301,0o171,0o75,0o260,0o50,0o50,0o305,(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o53,0o355,0o133,0o123,0o134,0o325,0o315,0o125,0o26,0o341,0o42,0o123,0o134,0o301,0o305,0o23,0o52,0o141,0o134,0o53,0o53,0o355,0o270,0o52,0o111,0o134,0o353,0o301,0o160,0o53,0o161,0o53,0o163,0o53,0o162,0o361,0o303,0o242,0o22,0o364,0o11,0o250,0o20,0o113,0o364,0o11,0o304,0o25,0o123,0o201,0o17,0o304,0o25,0o122,0o364,0o11,0o304,0o25,0o120,0o200,0o317,0o22,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),0o13,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),0o375,0o313,(15658734^0O73567354),0o156,0o40,(0x5E30A78-0O570605164),0o375,0o313,(15658734^0O73567354),0o336,0o315,0o346,0o25,0o330,0o50,0o372,0o317,(0x9D8DE4-0O47306735),0o331,0o345,0o52,0o121,0o134,0o43,0o43,0o30,(0O347010110&0x463A71D),0o36,0o60,0o203,0o331,0o345,0o52,0o121,0o134,0o136,0o43,0o126,0o353,0o315,0o54,0o26,0o341,0o331,0o311,0o207,0o306,0o26,0o157,0o46,0o134,0o136,0o43,0o126,0o172,0o263,0o40,(15658734^0O73567354),0o317,0o27,0o33,0o52,0o117,0o134,0o31,0o42,0o121,0o134,0o375,0o313,0o60,0o246,0o43,0o43,0o43,0o43,0o116,0o41,0o55,0o26,0o315,0o334,0o26,0o320,0o26,(0x75bcd15-0O726746425),0o136,0o31,0o351,0o113,(1011010-0O3666474),0o123,0o22,0o120,0o33,(0x75bcd15-0O726746425),0o375,0o313,(15658734^0O73567354),0o306,0o375,0o313,(0O57060516-0xbc614d),0o256,0o375,0o313,0o60,0o346,0o30,(0x5E30A78-0O570605164),0o375,0o313,(15658734^0O73567354),0o206,0o375,0o313,(0O57060516-0xbc614d),0o216,0o303,0o115,0o15,0o375,0o313,(0O57060516-0xbc614d),0o316,0o311,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o345,0o315,(0O507646144^0x51F4C61),0o37,0o341,0o315,0o144,0o26,0o52,0o145,0o134,0o353,0o355,0o270,0o311,0o365,0o345,0o41,0o113,0o134,0o76,0o16,0o136,0o43,0o126,0o343,0o247,0o355,0o122,0o31,0o343,0o60,0o11,0o325,0o353,0o11,0o353,0o162,0o53,0o163,0o43,0o321,0o43,0o75,0o40,0o350,0o353,0o321,0o361,0o247,0o355,0o122,0o104,0o115,(0O334664274-0x37368B9),0o31,0o353,0o311,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o353,0o21,0o217,0o26,0o176,0o346,0o300,0o40,0o367,0o126,0o43,0o136,0o311,0o52,0o143,0o134,0o53,0o315,0o125,0o26,0o43,0o43,0o301,0o355,0o103,0o141,0o134,0o301,0o353,0o43,0o311,0o52,0o131,0o134,0o66,0o15,0o42,0o133,0o134,0o43,0o66,0o200,0o43,0o42,0o141,0o134,0o52,0o141,0o134,0o42,0o143,0o134,0o52,0o143,0o134,0o42,0o145,0o134,0o345,0o41,0o222,0o134,0o42,0o150,0o134,0o341,0o311,0o355,0o133,0o131,0o134,0o303,0o345,0o31,0o43,0o176,0o247,0o310,0o271,0o43,0o40,0o370,0o67,0o311,0o315,0o36,0o27,0o315,(0O57060516-0xbc614d),0o27,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o21,0o342,0o243,0o353,0o31,0o70,(0x9D8DE4-0O47306735),(0O57060516-0xbc614d),0o324,0o25,0o11,0o116,0o43,0o106,0o353,0o161,0o43,0o160,0o311,0o345,0o52,0o117,0o134,0o11,0o43,0o43,0o43,0o116,0o353,0o41,0o26,0o27,0o315,0o334,0o26,0o116,(1011010-0O3666474),(0x75bcd15-0O726746425),0o11,0o351,0o113,(0O507646144^0x51F4C61),0o123,(0O334664274-0x37368B9),0o120,(0O57060516-0xbc614d),0o341,0o311,0o315,0o224,0o36,0o376,0o20,0o70,(15658734^0O73567354),0o317,0o27,0o306,(0O334664274-0x37368B9),(0x9D8DE4-0O47306735),0o41,0o20,0o134,0o117,(1011010-0O3666474),(0x75bcd15-0O726746425),0o11,0o116,0o43,0o106,0o53,0o311,0o357,(0O57060516-0xbc614d),0o70,0o315,0o36,0o27,0o170,0o261,0o50,0o26,0o353,0o52,0o117,0o134,0o11,0o43,0o43,0o43,0o176,0o353,0o376,0o113,0o50,(0O347010110&0x463A71D),0o376,0o123,0o50,(0x5E30A78-0O570605164),0o376,0o120,0o40,0o317,0o315,0o135,0o27,0o163,0o43,0o162,0o311,0o345,0o315,0o361,0o53,0o170,0o261,0o40,(15658734^0O73567354),0o317,0o16,0o305,0o32,0o346,0o337,0o117,0o41,0o172,0o27,0o315,0o334,0o26,0o60,0o361,0o116,(1011010-0O3666474),(0x75bcd15-0O726746425),0o11,0o301,0o351,0o113,(1011010-0O3666474),0o123,(0O347010110&0x463A71D),0o120,0o12,(0x75bcd15-0O726746425),0o36,(0O57060516-0xbc614d),0o30,(1011010-0O3666474),0o36,(1011010-0O3666474),0o30,(15658734^0O73567354),0o36,0o20,0o13,0o170,0o261,0o40,0o325,0o127,0o341,0o311,0o30,0o220,0o355,0o163,0o77,0o134,0o375,0o66,(15658734^0O73567354),0o20,0o315,0o257,0o15,0o375,0o313,(15658734^0O73567354),0o306,0o375,0o106,0o61,0o315,0o104,0o16,0o375,0o313,(15658734^0O73567354),0o206,0o375,0o313,0o60,0o306,0o52,0o111,0o134,0o355,0o133,0o154,0o134,0o247,0o355,0o122,0o31,0o70,0o42,0o325,0o315,0o156,0o31,0o21,0o300,(15658734^0O73567354),0o353,0o355,0o122,0o343,0o315,0o156,0o31,0o301,0o305,0o315,0o270,0o31,0o301,0o11,0o70,0o16,0o353,0o126,0o43,0o136,0o53,0o355,0o123,0o154,0o134,0o30,0o355,0o42,0o154,0o134,0o52,0o154,0o134,0o315,0o156,0o31,0o50,(0O57060516-0xbc614d),0o353,0o315,0o63,0o30,0o375,0o313,(15658734^0O73567354),0o246,0o311,0o76,(0O334664274-0x37368B9),0o30,(15658734^0O73567354),0o76,(15658734^0O73567354),0o375,0o66,(15658734^0O73567354),(0x75bcd15-0O726746425),0o315,0o60,0o45,0o304,(0O57060516-0xbc614d),0o26,0o337,0o315,0o160,0o40,0o70,0o24,0o337,0o376,0o73,0o50,(0x5E30A78-0O570605164),0o376,0o54,0o40,(1011010-0O3666474),0o347,0o315,0o202,0o34,0o30,(0O347010110&0x463A71D),0o315,0o346,0o34,0o30,(0O334664274-0x37368B9),0o315,0o336,0o34,0o315,0o356,0o33,0o315,0o231,0o36,0o170,0o346,0o77,0o147,0o151,0o42,0o111,0o134,0o315,0o156,0o31,0o36,(0O57060516-0xbc614d),0o315,0o125,0o30,0o327,0o375,0o313,(15658734^0O73567354),0o146,0o50,0o366,0o72,0o153,0o134,0o375,0o226,0o117,0o40,0o356,0o253,0o310,0o345,0o325,0o41,0o154,0o134,0o315,0o17,0o31,0o321,0o341,0o30,0o340,0o355,0o113,0o111,0o134,0o315,0o200,0o31,0o26,0o76,0o50,(0O507646144^0x51F4C61),0o21,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o313,0o23,0o375,0o163,0o55,0o176,0o376,0o100,0o301,0o320,0o305,0o315,0o50,0o32,0o43,0o43,0o43,0o375,0o313,(0O57060516-0xbc614d),0o206,0o172,0o247,0o50,(0O507646144^0x51F4C61),0o327,0o375,0o313,(0O57060516-0xbc614d),0o306,0o325,0o353,0o375,0o313,0o60,0o226,0o41,0o73,0o134,0o313,0o226,0o375,0o313,0o67,0o156,0o50,(15658734^0O73567354),0o313,0o326,0o52,0o137,0o134,0o247,0o355,0o122,0o40,(0O507646144^0x51F4C61),0o76,0o77,0o315,0o301,0o30,0o315,0o341,0o30,0o353,0o176,0o315,0o266,0o30,0o43,0o376,0o15,0o50,(1011010-0O3666474),0o353,0o315,0o67,0o31,0o30,0o340,0o321,0o311,0o376,0o16,0o300,0o43,0o43,0o43,0o43,0o43,0o43,0o176,0o311,0o331,0o52,0o217,0o134,0o345,0o313,0o274,0o313,0o375,0o42,0o217,0o134,0o41,0o221,0o134,0o126,0o325,0o66,(0x75bcd15-0O726746425),0o315,0o364,0o11,0o341,0o375,0o164,0o127,0o341,0o42,0o217,0o134,0o331,0o311,0o52,0o133,0o134,0o247,0o355,0o122,0o300,0o72,0o101,0o134,0o313,(0x9D8DE4-0O47306735),0o50,(0x5E30A78-0O570605164),0o306,0o103,0o30,0o26,0o41,0o73,0o134,0o313,0o236,0o76,0o113,0o313,0o126,0o50,0o13,0o313,0o336,0o74,0o375,0o313,0o60,0o136,0o50,(15658734^0O73567354),0o76,0o103,0o325,0o315,0o301,0o30,0o321,0o311,0o136,0o43,0o126,0o345,0o353,0o43,0o315,0o156,0o31,0o315,0o225,0o26,0o341,0o375,0o313,0o67,0o156,0o300,0o162,0o53,0o163,0o311,0o173,0o247,0o370,0o30,0o15,0o257,0o11,0o74,0o70,0o374,0o355,0o102,0o75,0o50,0o361,0o303,0o357,0o25,0o315,0o33,0o55,0o60,0o60,0o376,0o41,0o70,0o54,0o375,0o313,(0O57060516-0xbc614d),0o226,0o376,0o313,0o50,0o44,0o376,0o72,0o40,0o16,0o375,0o313,0o67,0o156,0o40,0o26,0o375,0o313,0o60,0o126,0o50,0o24,0o30,0o16,0o376,0o42,0o40,0o12,0o365,0o72,0o152,0o134,0o356,(0x5E30A78-0O570605164),0o62,0o152,0o134,0o361,0o375,0o313,(0O57060516-0xbc614d),0o326,0o327,0o311,0o345,0o52,0o123,0o134,0o124,0o135,0o301,0o315,0o200,0o31,0o320,0o305,0o315,0o270,0o31,0o353,0o30,0o364,0o176,0o270,0o300,0o43,0o176,0o53,0o271,0o311,0o43,0o43,0o43,0o42,0o135,0o134,0o16,(0x75bcd15-0O726746425),0o25,0o310,0o347,0o273,0o40,(0x5E30A78-0O570605164),0o247,0o311,0o43,0o176,0o315,0o266,0o30,0o42,0o135,0o134,0o376,0o42,0o40,(0O57060516-0xbc614d),0o15,0o376,0o72,0o50,(0x5E30A78-0O570605164),0o376,0o313,0o40,(0x5E30A78-0O570605164),0o313,0o101,0o50,0o337,0o376,0o15,0o40,0o343,0o25,0o67,0o311,0o345,0o176,0o376,0o100,0o70,0o27,0o313,0o157,0o50,0o24,0o207,0o372,0o307,0o31,0o77,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o60,(15658734^0O73567354),0o16,0o22,0o27,0o43,0o176,0o60,0o373,0o30,(1011010-0O3666474),0o43,0o43,0o116,0o43,0o106,0o43,0o11,0o321,0o247,0o355,0o122,0o104,0o115,0o31,0o353,0o311,0o315,0o335,0o31,0o305,0o170,0o57,0o107,0o171,0o57,0o117,(0O334664274-0x37368B9),0o315,0o144,0o26,0o353,0o341,0o31,0o325,0o355,0o260,0o341,0o311,0o52,0o131,0o134,0o53,0o42,0o135,0o134,0o347,0o41,0o222,0o134,0o42,0o145,0o134,0o315,0o73,0o55,0o315,0o242,0o55,0o70,(0x5E30A78-0O570605164),0o41,0o360,0o330,0o11,0o332,0o212,0o34,0o303,0o305,0o26,0o325,0o345,0o257,0o313,0o170,0o40,0o40,0o140,0o151,0o36,0o377,0o30,(0O347010110&0x463A71D),0o325,0o126,0o43,0o136,0o345,0o353,0o36,0o40,(0O57060516-0xbc614d),0o30,0o374,0o315,0o52,0o31,(0O57060516-0xbc614d),0o234,0o377,0o315,0o52,0o31,0o16,0o366,0o315,0o52,0o31,0o175,0o315,0o357,0o25,0o341,0o321,0o311,0o261,0o313,0o274,0o277,0o304,0o257,0o264,0o223,0o221,0o222,0o225,0o230,0o230,0o230,0o230,0o230,0o230,0o230,0o177,0o201,0o56,0o154,0o156,0o160,0o110,0o224,0o126,0o77,0o101,0o53,0o27,0o37,0o67,0o167,0o104,0o17,0o131,0o53,0o103,0o55,0o121,0o72,0o155,0o102,0o15,0o111,0o134,0o104,0o25,0o135,(0O57060516-0xbc614d),0o75,(15658734^0O73567354),(1011010-0O3666474),(0x75bcd15-0O726746425),0o147,0o36,(1011010-0O3666474),0o313,(0O507646144^0x51F4C61),0o360,0o34,(1011010-0O3666474),(0x75bcd15-0O726746425),0o355,0o36,(0x75bcd15-0O726746425),0o356,0o34,(0x75bcd15-0O726746425),0o43,0o37,(0x5E30A78-0O570605164),0o75,(1011010-0O3666474),0o314,(1011010-0O3666474),(0O507646144^0x51F4C61),(0O334664274-0x37368B9),0o35,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o253,0o35,(0O507646144^0x51F4C61),0o315,0o37,(0O507646144^0x51F4C61),0o211,0o40,(0O507646144^0x51F4C61),(15658734^0O73567354),0o54,(0O507646144^0x51F4C61),0o262,0o33,(0x75bcd15-0O726746425),0o267,0o21,(0O334664274-0x37368B9),0o241,0o36,(0O507646144^0x51F4C61),0o371,0o27,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o200,0o36,(0O334664274-0x37368B9),0o117,0o36,(0x75bcd15-0O726746425),0o137,0o36,(0O334664274-0x37368B9),0o254,0o36,(0x75bcd15-0O726746425),0o153,0o15,0o11,(0x75bcd15-0O726746425),0o334,0o42,(1011010-0O3666474),(0x75bcd15-0O726746425),0o72,0o37,(0O507646144^0x51F4C61),0o355,0o35,(0O507646144^0x51F4C61),0o47,0o36,(0O334664274-0x37368B9),0o102,0o36,0o11,(0O507646144^0x51F4C61),0o202,0o43,(0x75bcd15-0O726746425),0o254,0o16,(0O507646144^0x51F4C61),0o311,0o37,(0O507646144^0x51F4C61),0o365,0o27,0o13,0o13,0o13,0o13,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o370,(0O334664274-0x37368B9),0o11,(0O507646144^0x51F4C61),0o40,0o43,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o172,0o36,(1011010-0O3666474),(0x75bcd15-0O726746425),0o224,0o42,(0O507646144^0x51F4C61),0o140,0o37,(1011010-0O3666474),0o54,0o12,(0x75bcd15-0O726746425),0o66,0o27,(1011010-0O3666474),(0x75bcd15-0O726746425),0o345,0o26,0o12,(0x75bcd15-0O726746425),0o223,0o27,0o12,0o54,0o12,(0x75bcd15-0O726746425),0o223,0o27,0o12,(0x75bcd15-0O726746425),0o223,0o27,(0x75bcd15-0O726746425),0o223,0o27,0o375,0o313,(0O57060516-0xbc614d),0o276,0o315,0o373,0o31,0o257,0o62,0o107,0o134,0o75,0o62,0o72,0o134,0o30,(0O57060516-0xbc614d),0o347,0o315,0o277,0o26,0o375,0o64,0o15,0o372,0o212,0o34,0o337,(1011010-0O3666474),(0x75bcd15-0O726746425),0o376,0o15,0o50,0o172,0o376,0o72,0o50,0o353,0o41,0o166,0o33,0o345,0o117,0o347,0o171,0o326,0o316,0o332,0o212,0o34,0o117,0o41,0o110,0o32,0o11,0o116,0o11,0o30,(0O334664274-0x37368B9),0o52,0o164,0o134,0o176,0o43,0o42,0o164,0o134,(0O57060516-0xbc614d),0o122,0o33,0o305,0o117,0o376,0o40,0o60,0o14,0o41,(0O57060516-0xbc614d),0o34,(1011010-0O3666474),(0x75bcd15-0O726746425),0o11,0o116,0o11,0o345,0o337,(0O507646144^0x51F4C61),0o311,0o337,0o271,0o302,0o212,0o34,0o347,0o311,0o315,0o124,0o37,0o70,(15658734^0O73567354),0o317,0o24,0o375,0o313,0o12,0o176,0o40,0o161,0o52,0o102,0o134,0o313,0o174,0o50,0o24,0o41,0o376,0o377,0o42,0o105,0o134,0o52,0o141,0o134,0o53,0o355,0o133,0o131,0o134,0o33,0o72,0o104,0o134,0o30,0o63,0o315,0o156,0o31,0o72,0o104,0o134,0o50,0o31,0o247,0o40,0o103,0o107,0o176,0o346,0o300,0o170,0o50,0o17,0o317,0o377,0o301,0o315,0o60,0o45,0o310,0o52,0o125,0o134,0o76,0o300,0o246,0o300,0o257,0o376,(0O57060516-0xbc614d),0o316,(0x75bcd15-0O726746425),0o126,0o43,0o136,0o355,0o123,0o105,0o134,0o43,0o136,0o43,0o126,0o353,0o31,0o43,0o42,0o125,0o134,0o353,0o42,0o135,0o134,0o127,0o36,(0x75bcd15-0O726746425),0o375,0o66,0o12,0o377,0o25,0o375,0o162,0o15,0o312,0o50,0o33,0o24,0o315,0o213,0o31,0o50,(0O347010110&0x463A71D),0o317,0o26,0o315,0o60,0o45,0o300,0o301,0o301,0o337,0o376,0o15,0o50,0o272,0o376,0o72,0o312,0o50,0o33,0o303,0o212,0o34,0o17,0o35,0o113,0o11,0o147,0o13,0o173,0o216,0o161,0o264,0o201,0o317,0o315,0o336,0o34,0o277,0o301,0o314,0o356,0o33,0o353,0o52,0o164,0o134,0o116,0o43,0o106,0o353,0o305,0o311,0o315,0o262,0o50,0o375,0o66,0o67,(0x75bcd15-0O726746425),0o60,(0O347010110&0x463A71D),0o375,0o313,0o67,0o316,0o40,0o30,0o317,(0O57060516-0xbc614d),0o314,0o226,0o51,0o375,0o313,(0O57060516-0xbc614d),0o166,0o40,0o15,0o257,0o315,0o60,0o45,0o304,0o361,0o53,0o41,0o161,0o134,0o266,0o167,0o353,0o355,0o103,0o162,0o134,0o42,0o115,0o134,0o311,0o301,0o315,0o126,0o34,0o315,0o356,0o33,0o311,0o72,0o73,0o134,0o365,0o315,0o373,0o44,0o361,0o375,0o126,(0O57060516-0xbc614d),0o252,0o346,0o100,0o40,0o44,0o313,0o172,0o302,0o377,0o52,0o311,0o315,0o262,0o50,0o365,0o171,0o366,0o237,0o74,0o40,0o24,0o361,0o30,0o251,0o347,0o315,0o202,0o34,0o376,0o54,0o40,0o11,0o347,0o315,0o373,0o44,0o375,0o313,(0O57060516-0xbc614d),0o166,0o300,0o317,0o13,0o315,0o373,0o44,0o375,0o313,(0O57060516-0xbc614d),0o166,0o310,0o30,0o364,0o375,0o313,(0O57060516-0xbc614d),0o176,0o375,0o313,(15658734^0O73567354),0o206,0o304,0o115,0o15,0o361,0o72,0o164,0o134,0o326,0o23,0o315,0o374,0o41,0o315,0o356,0o33,0o52,0o217,0o134,0o42,0o215,0o134,0o41,0o221,0o134,0o176,(0x9D8DE4-0O47306735),0o256,0o346,0o252,0o256,0o167,0o311,0o315,0o60,0o45,0o50,0o23,0o375,0o313,(15658734^0O73567354),0o206,0o315,0o115,0o15,0o41,0o220,0o134,0o176,0o366,0o370,0o167,0o375,0o313,0o127,0o266,0o337,0o315,0o342,0o41,0o30,0o237,0o303,(0O507646144^0x51F4C61),(1011010-0O3666474),0o376,0o15,0o50,(0x5E30A78-0O570605164),0o376,0o72,0o40,0o234,0o315,0o60,0o45,0o310,0o357,0o240,0o70,0o311,0o317,(0O347010110&0x463A71D),0o301,0o315,0o60,0o45,0o50,0o12,0o357,(15658734^0O73567354),0o70,0o353,0o315,0o351,0o64,0o332,0o263,0o33,0o303,0o51,0o33,0o376,0o315,0o40,0o11,0o347,0o315,0o202,0o34,0o315,0o356,0o33,0o30,(1011010-0O3666474),0o315,0o356,0o33,0o357,0o241,0o70,0o357,0o300,(15658734^0O73567354),(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o70,0o315,0o377,0o52,0o42,0o150,0o134,0o53,0o176,0o313,0o376,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o11,(0x9D8DE4-0O47306735),0o70,(1011010-0O3666474),0o16,0o15,0o315,0o125,0o26,0o43,0o345,0o357,(15658734^0O73567354),(15658734^0O73567354),0o70,0o341,0o353,0o16,0o12,0o355,0o260,0o52,0o105,0o134,0o353,0o163,0o43,0o162,0o375,0o126,0o15,0o24,0o43,0o162,0o315,0o332,0o35,0o320,0o375,0o106,0o70,0o52,0o105,0o134,0o42,0o102,0o134,0o72,0o107,0o134,0o355,0o104,0o127,0o52,0o135,0o134,0o36,0o363,0o305,0o355,0o113,0o125,0o134,0o315,0o206,0o35,0o355,0o103,0o125,0o134,0o301,0o70,0o21,0o347,0o366,0o40,0o270,0o50,(0O334664274-0x37368B9),0o347,0o30,0o350,0o347,0o76,(0O57060516-0xbc614d),0o222,0o62,0o104,0o134,0o311,0o317,0o21,0o176,0o376,0o72,0o50,0o30,0o43,0o176,0o346,0o300,0o67,0o300,0o106,0o43,0o116,0o355,0o103,0o102,0o134,0o43,0o116,0o43,0o106,0o345,0o11,0o104,0o115,0o341,0o26,(0x75bcd15-0O726746425),0o305,0o315,0o213,0o31,0o301,0o320,0o30,0o340,0o375,0o313,0o67,0o116,0o302,0o56,0o34,0o52,0o115,0o134,0o313,0o176,0o50,0o37,0o43,0o42,0o150,0o134,0o357,0o340,0o342,0o17,0o300,(15658734^0O73567354),0o70,0o315,0o332,0o35,0o330,0o52,0o150,0o134,0o21,0o17,(0x75bcd15-0O726746425),0o31,0o136,0o43,0o126,0o43,0o146,0o353,0o303,0o163,0o36,0o317,(0x75bcd15-0O726746425),0o357,0o341,0o340,0o342,0o66,(0x75bcd15-0O726746425),(15658734^0O73567354),(0O57060516-0xbc614d),(0O334664274-0x37368B9),0o67,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o70,0o247,0o311,0o70,0o67,0o311,0o347,0o315,0o37,0o34,0o315,0o60,0o45,0o50,0o51,0o337,0o42,0o137,0o134,0o52,0o127,0o134,0o176,0o376,0o54,0o50,0o11,0o36,0o344,0o315,0o206,0o35,0o60,(15658734^0O73567354),0o317,0o15,0o315,0o167,(0x75bcd15-0O726746425),0o315,0o126,0o34,0o337,0o42,0o127,0o134,0o52,0o137,0o134,0o375,0o66,0o46,(0x75bcd15-0O726746425),0o315,0o170,(0x75bcd15-0O726746425),0o337,0o376,0o54,0o50,0o311,0o315,0o356,0o33,0o311,0o315,0o60,0o45,0o40,0o13,0o315,0o373,0o44,0o376,0o54,0o304,0o356,0o33,0o347,0o30,0o365,0o76,0o344,0o107,0o355,0o271,0o21,(0x75bcd15-0O726746425),(15658734^0O73567354),0o303,0o213,0o31,0o315,0o231,0o36,0o140,0o151,0o315,0o156,0o31,0o53,0o42,0o127,0o134,0o311,0o315,0o231,0o36,0o170,0o261,0o40,(0x5E30A78-0O570605164),0o355,0o113,0o170,0o134,0o355,0o103,0o166,0o134,0o311,0o52,0o156,0o134,0o375,0o126,0o66,0o30,0o14,0o315,0o231,0o36,0o140,0o151,0o26,(0x75bcd15-0O726746425),0o174,0o376,0o360,0o60,0o54,0o42,0o102,0o134,0o375,0o162,0o12,0o311,0o315,0o205,0o36,0o355,0o171,0o311,0o315,0o205,0o36,(15658734^0O73567354),0o311,0o315,0o325,0o55,0o70,0o25,0o50,(15658734^0O73567354),0o355,0o104,0o365,0o315,0o231,0o36,0o361,0o311,0o315,0o325,0o55,0o30,(0O334664274-0x37368B9),0o315,0o242,0o55,0o70,(0O57060516-0xbc614d),0o310,0o317,0o12,0o315,0o147,0o36,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o315,0o105,0o36,0o30,(0O334664274-0x37368B9),0o315,0o231,0o36,0o170,0o261,0o40,(0x5E30A78-0O570605164),0o355,0o113,0o262,0o134,0o305,0o355,0o133,0o113,0o134,0o52,0o131,0o134,0o53,0o315,0o345,0o31,0o315,0o153,0o15,0o52,0o145,0o134,0o21,0o62,(0x75bcd15-0O726746425),0o31,0o321,0o355,0o122,0o60,(0O347010110&0x463A71D),0o52,0o264,0o134,0o247,0o355,0o122,0o60,(15658734^0O73567354),0o317,0o25,0o353,0o42,0o262,0o134,0o321,0o301,0o66,0o76,0o53,0o371,0o305,0o355,0o163,0o75,0o134,0o353,0o351,0o321,0o375,0o146,0o15,0o44,0o343,0o63,0o355,0o113,0o105,0o134,0o305,0o345,0o355,0o163,0o75,0o134,0o325,0o315,0o147,0o36,(0O57060516-0xbc614d),0o24,(0x75bcd15-0O726746425),0o52,0o145,0o134,0o11,0o70,0o12,0o353,0o41,0o120,(0x75bcd15-0O726746425),0o31,0o70,(0O334664274-0x37368B9),0o355,0o162,0o330,0o56,(0O334664274-0x37368B9),0o303,0o125,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o315,(0O507646144^0x51F4C61),0o37,0o104,0o115,0o311,0o301,0o341,0o321,0o172,0o376,0o76,0o50,0o13,0o73,0o343,0o353,0o355,0o163,0o75,0o134,0o305,0o303,0o163,0o36,0o325,0o345,0o317,(1011010-0O3666474),0o315,0o231,0o36,0o166,0o13,0o170,0o261,0o50,0o14,0o170,0o241,0o74,0o40,(0O57060516-0xbc614d),(0O334664274-0x37368B9),0o375,0o313,(0O57060516-0xbc614d),0o156,0o50,0o356,0o375,0o313,(0O57060516-0xbc614d),0o256,0o311,0o76,0o177,0o333,0o376,0o37,0o330,0o76,0o376,0o333,0o376,0o37,0o311,0o315,0o60,0o45,0o50,(0O507646144^0x51F4C61),0o76,0o316,0o303,0o71,0o36,0o375,0o313,(0O57060516-0xbc614d),0o366,0o315,0o215,0o54,0o60,0o26,0o347,0o376,0o44,0o40,(0O507646144^0x51F4C61),0o375,0o313,(0O57060516-0xbc614d),0o266,0o347,0o376,0o50,0o40,0o74,0o347,0o376,0o51,0o50,0o40,0o315,0o215,0o54,0o322,0o212,0o34,0o353,0o347,0o376,0o44,0o40,(15658734^0O73567354),0o353,0o347,0o353,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o125,0o26,0o43,0o43,0o66,0o16,0o376,0o54,0o40,(0O334664274-0x37368B9),0o347,0o30,0o340,0o376,0o51,0o40,0o23,0o347,0o376,0o75,0o40,0o16,0o347,0o72,0o73,0o134,0o365,0o315,0o373,0o44,0o361,0o375,0o256,(0O57060516-0xbc614d),0o346,0o100,0o302,0o212,0o34,0o315,0o356,0o33,0o315,0o60,0o45,0o341,0o310,0o351,0o76,(0O334664274-0x37368B9),0o30,(15658734^0O73567354),0o76,(15658734^0O73567354),0o315,0o60,0o45,0o304,(0O57060516-0xbc614d),0o26,0o315,0o115,0o15,0o315,0o337,0o37,0o315,0o356,0o33,0o311,0o337,0o315,0o105,0o40,0o50,0o15,0o315,0o116,0o40,0o50,0o373,0o315,0o374,0o37,0o315,0o116,0o40,0o50,0o363,0o376,0o51,0o310,0o315,0o303,0o37,0o76,0o15,0o327,0o311,0o337,0o376,0o254,0o40,0o15,0o315,0o171,0o34,0o315,0o303,0o37,0o315,(0x9D8DE4-0O47306735),0o43,0o76,0o26,0o30,0o20,0o376,0o255,0o40,0o22,0o347,0o315,0o202,0o34,0o315,0o303,0o37,0o315,0o231,0o36,0o76,0o27,0o327,0o171,0o327,0o170,0o327,0o311,0o315,0o362,0o41,0o320,0o315,0o160,0o40,0o320,0o315,0o373,0o44,0o315,0o303,0o37,0o375,0o313,(0O57060516-0xbc614d),0o166,0o314,0o361,0o53,0o302,0o343,0o55,0o170,0o261,0o13,0o310,0o32,0o23,0o327,0o30,0o367,0o376,0o51,0o310,0o376,0o15,0o310,0o376,0o72,0o311,0o337,0o376,0o73,0o50,0o24,0o376,0o54,0o40,0o12,0o315,0o60,0o45,0o50,0o13,0o76,(1011010-0O3666474),0o327,0o30,(1011010-0O3666474),0o376,0o47,0o300,0o315,0o365,0o37,0o347,0o315,0o105,0o40,0o40,(0O57060516-0xbc614d),0o301,0o277,0o311,0o376,0o43,0o67,0o300,0o347,0o315,0o202,0o34,0o247,0o315,0o303,0o37,0o315,0o224,0o36,0o376,0o20,0o322,0o16,0o26,0o315,(0O57060516-0xbc614d),0o26,0o247,0o311,0o315,0o60,0o45,0o50,(0O347010110&0x463A71D),0o76,(0O57060516-0xbc614d),0o315,(0O57060516-0xbc614d),0o26,0o315,0o156,0o15,0o375,0o66,(15658734^0O73567354),(0O57060516-0xbc614d),0o315,0o301,0o40,0o315,0o356,0o33,0o355,0o113,0o210,0o134,0o72,0o153,0o134,0o270,0o70,(0O334664274-0x37368B9),0o16,0o41,0o107,0o355,0o103,0o210,0o134,0o76,0o31,0o220,0o62,0o214,0o134,0o375,0o313,(15658734^0O73567354),0o206,0o315,0o331,0o15,0o303,0o156,0o15,0o315,0o116,0o40,0o50,0o373,0o376,0o50,0o40,0o16,0o347,0o315,0o337,0o37,0o337,0o376,0o51,0o302,0o212,0o34,0o347,0o303,0o262,0o41,0o376,0o312,0o40,0o21,0o347,0o315,0o37,0o34,0o375,0o313,0o67,0o376,0o375,0o313,(0O57060516-0xbc614d),0o166,0o302,0o212,0o34,0o30,0o15,0o315,0o215,0o54,0o322,0o257,0o41,0o315,0o37,0o34,0o375,0o313,0o67,0o276,0o315,0o60,0o45,0o312,0o262,0o41,0o315,0o277,0o26,0o41,0o161,0o134,0o313,0o266,0o313,0o356,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o313,0o176,0o40,0o13,0o72,0o73,0o134,0o346,0o100,0o40,(15658734^0O73567354),0o16,(0O334664274-0x37368B9),0o266,0o167,0o367,0o66,0o15,0o171,0o17,0o17,0o60,(0O507646144^0x51F4C61),0o76,0o42,0o22,0o53,0o167,0o42,0o133,0o134,0o375,0o313,0o67,0o176,0o40,0o54,0o52,0o135,0o134,0o345,0o52,0o75,0o134,0o345,0o41,0o72,0o41,0o345,0o375,0o313,0o60,0o146,0o50,(0x5E30A78-0O570605164),0o355,0o163,0o75,0o134,0o52,0o141,0o134,0o315,0o247,0o21,0o375,0o66,(0x75bcd15-0O726746425),0o377,0o315,0o54,0o17,0o375,0o313,(0O57060516-0xbc614d),0o276,0o315,0o271,0o41,0o30,(0O334664274-0x37368B9),0o315,0o54,0o17,0o375,0o66,0o42,(0x75bcd15-0O726746425),0o315,0o326,0o41,0o40,0o12,0o315,0o35,0o21,0o355,0o113,0o202,0o134,0o315,0o331,0o15,0o41,0o161,0o134,0o313,0o256,0o313,0o176,0o313,0o276,0o40,0o34,0o341,0o341,0o42,0o75,0o134,0o341,0o42,0o137,0o134,0o375,0o313,(0O57060516-0xbc614d),0o376,0o315,0o271,0o41,0o52,0o137,0o134,0o375,0o66,0o46,(0x75bcd15-0O726746425),0o42,0o135,0o134,0o30,0o27,0o52,0o143,0o134,0o355,0o133,0o141,0o134,0o67,0o355,0o122,0o104,0o115,0o315,0o262,0o52,0o315,0o377,0o52,0o30,(0O334664274-0x37368B9),0o315,0o374,0o37,0o315,0o116,0o40,0o312,0o301,0o40,0o311,0o52,0o141,0o134,0o42,0o135,0o134,0o337,0o376,0o342,0o50,0o14,0o72,0o161,0o134,0o315,0o131,0o34,0o337,0o376,0o15,0o310,0o317,0o13,0o315,0o60,0o45,0o310,0o317,0o20,0o52,0o121,0o134,0o43,0o43,0o43,0o43,0o176,0o376,0o113,0o311,0o347,0o315,0o362,0o41,0o330,0o337,0o376,0o54,0o50,0o366,0o376,0o73,0o50,0o362,0o303,0o212,0o34,0o376,0o331,0o330,0o376,0o337,0o77,0o330,0o365,0o347,0o361,0o326,0o311,0o365,0o315,0o202,0o34,0o361,0o247,0o315,0o303,0o37,0o365,0o315,0o224,0o36,0o127,0o361,0o327,0o172,0o327,0o311,0o326,0o21,0o316,(0x75bcd15-0O726746425),0o50,0o35,0o326,(15658734^0O73567354),0o316,(0x75bcd15-0O726746425),0o50,0o126,0o376,(0O57060516-0xbc614d),0o172,(1011010-0O3666474),(0O57060516-0xbc614d),0o40,(0x5E30A78-0O570605164),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(1011010-0O3666474),(0x5E30A78-0O570605164),0o117,0o172,0o376,(15658734^0O73567354),0o60,0o26,0o171,0o41,0o221,0o134,0o30,0o70,0o172,(1011010-0O3666474),(0x9D8DE4-0O47306735),0o70,(0O507646144^0x51F4C61),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(1011010-0O3666474),0o70,0o117,0o172,0o376,0o12,0o70,(15658734^0O73567354),0o317,0o23,0o41,0o217,0o134,0o376,(0O347010110&0x463A71D),0o70,0o13,0o176,0o50,(0x9D8DE4-0O47306735),0o260,0o57,0o346,0o44,0o50,(0O57060516-0xbc614d),0o170,0o117,0o171,0o315,0o154,0o42,0o76,(0x9D8DE4-0O47306735),0o272,0o237,0o315,0o154,0o42,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o346,0o120,0o107,0o76,(0O347010110&0x463A71D),0o272,0o237,0o256,0o240,0o256,0o167,0o43,0o170,0o311,0o237,0o172,0o17,(1011010-0O3666474),0o200,0o40,(0O334664274-0x37368B9),0o17,(1011010-0O3666474),0o100,0o117,0o172,0o376,(0O347010110&0x463A71D),0o50,(0x5E30A78-0O570605164),0o376,(15658734^0O73567354),0o60,0o275,0o171,0o41,0o217,0o134,0o315,0o154,0o42,0o171,0o17,0o17,0o17,0o30,0o330,0o315,0o224,0o36,0o376,(0O347010110&0x463A71D),0o60,0o251,0o323,0o376,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o313,0o157,0o40,(15658734^0O73567354),0o356,(0x9D8DE4-0O47306735),0o62,0o110,0o134,0o311,0o76,0o257,0o220,0o332,0o371,0o44,0o107,0o247,0o37,0o67,0o37,0o247,0o37,0o250,0o346,0o370,0o250,0o147,0o171,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o250,0o346,0o307,0o250,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o157,0o171,0o346,(0x9D8DE4-0O47306735),0o311,0o315,(0x9D8DE4-0O47306735),0o43,0o315,0o252,0o42,0o107,(0x5E30A78-0O570605164),0o176,(0x9D8DE4-0O47306735),0o20,0o375,0o346,(0O57060516-0xbc614d),0o303,0o50,0o55,0o315,(0x9D8DE4-0O47306735),0o43,0o315,0o345,0o42,0o303,0o115,0o15,0o355,0o103,0o175,0o134,0o315,0o252,0o42,0o107,(0x5E30A78-0O570605164),0o76,0o376,0o17,0o20,0o375,0o107,0o176,0o375,0o116,0o127,0o313,0o101,0o40,(0O57060516-0xbc614d),0o240,0o313,0o121,0o40,(15658734^0O73567354),0o250,0o57,0o167,0o303,0o333,0o13,0o315,0o24,0o43,0o107,0o305,0o315,0o24,0o43,0o131,0o301,0o121,0o117,0o311,0o315,0o325,0o55,0o332,0o371,0o44,0o16,(0O57060516-0xbc614d),0o310,0o16,0o377,0o311,0o337,0o376,0o54,0o302,0o212,0o34,0o347,0o315,0o202,0o34,0o315,0o356,0o33,0o357,0o52,0o75,0o70,0o176,0o376,0o201,0o60,(0O507646144^0x51F4C61),0o357,(15658734^0O73567354),0o70,0o30,0o241,0o357,0o243,0o70,0o66,0o203,0o357,0o305,(15658734^0O73567354),0o70,0o315,0o175,0o44,0o305,0o357,0o61,0o341,(0x5E30A78-0O570605164),0o70,0o176,0o376,0o200,0o60,(0O347010110&0x463A71D),0o357,(15658734^0O73567354),(15658734^0O73567354),0o70,0o301,0o303,0o334,0o42,0o357,0o302,(0O57060516-0xbc614d),0o300,(15658734^0O73567354),(0O334664274-0x37368B9),(0O57060516-0xbc614d),0o340,0o17,0o300,(0O57060516-0xbc614d),0o61,0o340,(0O57060516-0xbc614d),0o61,0o340,0o240,0o301,(15658734^0O73567354),0o70,0o375,0o64,0o142,0o315,0o224,0o36,0o157,0o345,0o315,0o224,0o36,0o341,0o147,0o42,0o175,0o134,0o301,0o303,0o40,0o44,0o337,0o376,0o54,0o50,(1011010-0O3666474),0o315,0o356,0o33,0o303,0o167,0o44,0o347,0o315,0o202,0o34,0o315,0o356,0o33,0o357,0o305,0o242,(0x5E30A78-0O570605164),0o37,0o61,0o60,0o60,(0x75bcd15-0O726746425),(1011010-0O3666474),(15658734^0O73567354),0o70,0o303,0o167,0o44,0o300,(15658734^0O73567354),0o301,(15658734^0O73567354),0o61,0o52,0o341,(0O57060516-0xbc614d),0o341,0o52,0o17,0o340,(0O507646144^0x51F4C61),0o52,0o340,(0O57060516-0xbc614d),0o75,0o70,0o176,0o376,0o201,0o60,(0x9D8DE4-0O47306735),0o357,(15658734^0O73567354),(15658734^0O73567354),0o70,0o303,0o167,0o44,0o315,0o175,0o44,0o305,0o357,(15658734^0O73567354),0o341,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),0o301,(15658734^0O73567354),(0O57060516-0xbc614d),0o61,0o341,(0x5E30A78-0O570605164),0o302,(15658734^0O73567354),(0O57060516-0xbc614d),0o61,0o341,(0x5E30A78-0O570605164),0o342,0o345,0o340,(0O334664274-0x37368B9),0o242,(0x5E30A78-0O570605164),0o61,0o37,0o305,(15658734^0O73567354),0o40,0o300,(15658734^0O73567354),0o302,(15658734^0O73567354),0o301,0o345,(0x5E30A78-0O570605164),0o340,0o342,(0x5E30A78-0O570605164),0o17,0o341,(0O57060516-0xbc614d),0o301,(15658734^0O73567354),0o340,(0x5E30A78-0O570605164),0o342,0o345,(0x5E30A78-0O570605164),(0O334664274-0x37368B9),0o302,0o52,0o341,0o52,0o17,(15658734^0O73567354),0o70,0o32,0o376,0o201,0o301,0o332,0o167,0o44,0o305,0o357,(0O57060516-0xbc614d),0o70,0o72,0o175,0o134,0o315,0o50,0o55,0o357,0o300,0o17,(0O57060516-0xbc614d),0o70,0o72,0o176,0o134,0o315,0o50,0o55,0o357,0o305,0o17,0o340,0o345,0o70,0o301,(0O507646144^0x51F4C61),0o50,0o74,0o30,0o24,0o357,0o341,0o61,0o343,(0x5E30A78-0O570605164),0o342,0o344,(0x5E30A78-0O570605164),(0O334664274-0x37368B9),0o301,(15658734^0O73567354),0o344,(0x5E30A78-0O570605164),0o342,0o343,(0x5E30A78-0O570605164),0o17,0o302,(15658734^0O73567354),0o70,0o305,0o357,0o300,(15658734^0O73567354),0o341,0o17,0o61,0o70,0o72,0o175,0o134,0o315,0o50,0o55,0o357,(0O334664274-0x37368B9),0o340,0o342,0o17,0o300,(0O57060516-0xbc614d),0o340,0o70,0o72,0o176,0o134,0o315,0o50,0o55,0o357,(0O334664274-0x37368B9),0o70,0o315,0o267,0o44,0o301,0o20,0o306,0o357,(15658734^0O73567354),(15658734^0O73567354),(0O57060516-0xbc614d),0o70,0o72,0o175,0o134,0o315,0o50,0o55,0o357,(0O334664274-0x37368B9),(0O57060516-0xbc614d),0o70,0o72,0o176,0o134,0o315,0o50,0o55,0o357,(0O334664274-0x37368B9),0o70,0o315,0o267,0o44,0o303,0o115,0o15,0o357,0o61,0o50,0o64,0o62,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0O507646144^0x51F4C61),0o345,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),0o52,0o70,0o315,0o325,0o55,0o70,(1011010-0O3666474),0o346,0o374,0o306,(0x5E30A78-0O570605164),0o60,(15658734^0O73567354),0o76,0o374,0o365,0o315,0o50,0o55,0o357,0o345,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),0o61,0o37,0o304,(15658734^0O73567354),0o61,0o242,(0x5E30A78-0O570605164),0o37,0o301,(0O57060516-0xbc614d),0o300,(15658734^0O73567354),0o61,(0x5E30A78-0O570605164),0o61,0o17,0o241,(0O334664274-0x37368B9),0o33,0o303,(15658734^0O73567354),0o70,0o301,0o311,0o315,(0x9D8DE4-0O47306735),0o43,0o171,0o270,0o60,(1011010-0O3666474),0o151,0o325,0o257,0o137,0o30,(0x9D8DE4-0O47306735),0o261,0o310,0o150,0o101,0o325,0o26,(0x75bcd15-0O726746425),0o140,0o170,0o37,0o205,0o70,(0O334664274-0x37368B9),0o274,0o70,(0x9D8DE4-0O47306735),0o224,0o117,0o331,0o301,0o305,0o30,(0x5E30A78-0O570605164),0o117,0o325,0o331,0o301,0o52,0o175,0o134,0o170,0o204,0o107,0o171,0o74,0o205,0o70,0o15,0o50,0o15,0o75,0o117,0o315,0o345,0o42,0o331,0o171,0o20,0o331,0o321,0o311,0o50,0o363,0o317,0o12,0o337,(1011010-0O3666474),(0x75bcd15-0O726746425),0o305,0o117,0o41,0o226,0o45,0o315,0o334,0o26,0o171,0o322,0o204,0o46,(1011010-0O3666474),(0x75bcd15-0O726746425),0o116,0o11,0o351,0o315,0o164,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o376,0o15,0o312,0o212,0o34,0o376,0o42,0o40,0o363,0o315,0o164,(0x75bcd15-0O726746425),0o376,0o42,0o311,0o347,0o376,0o50,0o40,(1011010-0O3666474),0o315,0o171,0o34,0o337,0o376,0o51,0o302,0o212,0o34,0o375,0o313,(0O57060516-0xbc614d),0o176,0o311,0o315,(0x9D8DE4-0O47306735),0o43,0o52,0o66,0o134,0o21,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o31,0o171,0o17,0o17,0o17,0o346,0o340,0o250,0o137,0o171,0o346,0o30,0o356,0o100,0o127,(1011010-0O3666474),0o140,0o305,0o325,0o345,0o32,0o256,0o50,(0x5E30A78-0O570605164),0o74,0o40,0o32,0o75,0o117,(1011010-0O3666474),(0x9D8DE4-0O47306735),0o24,0o43,0o32,0o256,0o251,0o40,0o17,0o20,0o367,0o301,0o301,0o301,0o76,0o200,0o220,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o367,0o22,0o30,0o12,0o341,0o21,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o31,0o321,0o301,0o20,0o323,0o110,0o303,0o262,0o52,0o315,(0x9D8DE4-0O47306735),0o43,0o171,0o17,0o17,0o17,0o117,0o346,0o340,0o250,0o157,0o171,0o346,(0O334664274-0x37368B9),0o356,0o130,0o147,0o176,0o303,0o50,0o55,0o42,0o34,0o50,0o117,0o56,0o362,0o53,0o22,0o250,0o126,0o245,0o127,0o247,0o204,0o246,0o217,0o304,0o346,0o252,0o277,0o253,0o307,0o251,0o316,(0x75bcd15-0O726746425),0o347,0o303,0o377,0o44,0o337,0o43,0o345,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o315,0o17,0o45,0o40,0o33,0o315,0o17,0o45,0o50,0o373,0o315,0o60,0o45,0o50,0o21,0o367,0o341,0o325,0o176,0o43,0o22,0o23,0o376,0o42,0o40,0o370,0o176,0o43,0o376,0o42,0o50,0o362,0o13,0o321,0o41,0o73,0o134,0o313,0o266,0o313,0o176,0o304,0o262,0o52,0o303,0o22,0o47,0o347,0o315,0o373,0o44,0o376,0o51,0o302,0o212,0o34,0o347,0o303,0o22,0o47,0o303,0o275,0o47,0o315,0o60,0o45,0o50,0o50,0o355,0o113,0o166,0o134,0o315,0o53,0o55,0o357,0o241,0o17,0o64,0o67,0o26,(0x5E30A78-0O570605164),0o64,0o200,0o101,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,0o62,(15658734^0O73567354),0o241,(0O334664274-0x37368B9),0o61,0o70,0o315,0o242,0o55,0o355,0o103,0o166,0o134,0o176,0o247,0o50,(0O334664274-0x37368B9),0o326,0o20,0o167,0o30,0o11,0o315,0o60,0o45,0o50,(0x5E30A78-0O570605164),0o357,0o243,0o70,0o64,0o347,0o303,0o303,0o46,(0O57060516-0xbc614d),0o132,0o20,0o347,0o376,0o43,0o312,0o15,0o47,0o41,0o73,0o134,0o313,0o266,0o313,0o176,0o50,0o37,0o315,0o216,(15658734^0O73567354),0o16,(0x75bcd15-0O726746425),0o40,0o23,0o315,0o36,(0O334664274-0x37368B9),0o60,0o16,0o25,0o137,0o315,0o63,(0O334664274-0x37368B9),0o365,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o367,0o361,0o22,0o16,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o262,0o52,0o303,0o22,0o47,0o315,0o42,0o45,0o304,0o65,0o45,0o347,0o303,0o333,0o45,0o315,0o42,0o45,0o304,0o200,0o45,0o347,0o30,0o110,0o315,0o42,0o45,0o304,0o313,0o42,0o347,0o30,0o77,0o315,0o210,0o54,0o60,0o126,0o376,0o101,0o60,0o74,0o315,0o60,0o45,0o40,0o43,0o315,0o233,0o54,0o337,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o125,0o26,0o43,0o66,0o16,0o43,0o353,0o52,0o145,0o134,0o16,(0O507646144^0x51F4C61),0o247,0o355,0o102,0o42,0o145,0o134,0o355,0o260,0o353,0o53,0o315,0o167,(0x75bcd15-0O726746425),0o30,0o16,0o337,0o43,0o176,0o376,0o16,0o40,0o372,0o43,0o315,0o264,0o63,0o42,0o135,0o134,0o375,0o313,(0O57060516-0xbc614d),0o366,0o30,0o24,0o315,0o262,0o50,0o332,0o56,0o34,0o314,0o226,0o51,0o72,0o73,0o134,0o376,0o300,0o70,(0x5E30A78-0O570605164),0o43,0o315,0o264,0o63,0o30,0o63,(0O57060516-0xbc614d),0o333,0o11,0o376,0o55,0o50,0o47,(0O57060516-0xbc614d),0o30,0o20,0o376,0o256,0o50,0o40,0o326,0o257,0o332,0o212,0o34,(0O57060516-0xbc614d),0o360,(0x5E30A78-0O570605164),0o376,0o24,0o50,0o24,0o322,0o212,0o34,(1011010-0O3666474),0o20,0o306,0o334,0o117,0o376,0o337,0o60,(15658734^0O73567354),0o313,0o261,0o376,0o356,0o70,(15658734^0O73567354),0o313,0o271,0o305,0o347,0o303,0o377,0o44,0o337,0o376,0o50,0o40,0o14,0o375,0o313,(0O57060516-0xbc614d),0o166,0o40,0o27,0o315,0o122,0o52,0o347,0o30,0o360,(1011010-0O3666474),(0x75bcd15-0O726746425),0o117,0o41,0o225,0o47,0o315,0o334,0o26,0o60,(1011010-0O3666474),0o116,0o41,0o355,0o46,0o11,0o106,0o321,0o172,0o270,0o70,0o72,0o247,0o312,0o30,(0x75bcd15-0O726746425),0o305,0o41,0o73,0o134,0o173,0o376,0o355,0o40,(1011010-0O3666474),0o313,0o166,0o40,(15658734^0O73567354),0o36,0o231,0o325,0o315,0o60,0o45,0o50,0o11,0o173,0o346,0o77,0o107,0o357,0o73,0o70,0o30,0o11,0o173,0o375,0o256,(0O57060516-0xbc614d),0o346,0o100,0o302,0o212,0o34,0o321,0o41,0o73,0o134,0o313,0o366,0o313,0o173,0o40,(15658734^0O73567354),0o313,0o266,0o301,0o30,0o301,0o325,0o171,0o375,0o313,(0O57060516-0xbc614d),0o166,0o40,0o25,0o346,0o77,0o306,(0O347010110&0x463A71D),0o117,0o376,0o20,0o40,(0x5E30A78-0O570605164),0o313,0o361,0o30,(0O347010110&0x463A71D),0o70,0o327,0o376,0o27,0o50,(15658734^0O73567354),0o313,0o371,0o305,0o347,0o303,0o377,0o44,0o53,0o317,0o55,0o303,0o52,0o304,0o57,0o305,0o136,0o306,0o75,0o316,0o76,0o314,0o74,0o315,0o307,0o311,0o310,0o312,0o311,0o313,0o305,0o307,0o306,0o310,(0x75bcd15-0O726746425),(1011010-0O3666474),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o12,(15658734^0O73567354),(0O334664274-0x37368B9),(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),(1011010-0O3666474),0o315,0o60,0o45,0o40,0o65,0o347,0o315,0o215,0o54,0o322,0o212,0o34,0o347,0o376,0o44,0o365,0o40,(0O57060516-0xbc614d),0o347,0o376,0o50,0o40,0o22,0o347,0o376,0o51,0o50,0o20,0o315,0o373,0o44,0o337,0o376,0o54,0o40,(0O334664274-0x37368B9),0o347,0o30,0o365,0o376,0o51,0o302,0o212,0o34,0o347,0o41,0o73,0o134,0o313,0o266,0o361,0o50,(15658734^0O73567354),0o313,0o366,0o303,0o22,0o47,0o347,0o346,0o337,0o107,0o347,0o326,0o44,0o117,0o40,(0O57060516-0xbc614d),0o347,0o347,0o345,0o52,0o123,0o134,0o53,0o21,0o316,(0x75bcd15-0O726746425),0o305,0o315,0o206,0o35,0o301,0o60,(15658734^0O73567354),0o317,0o30,0o345,0o315,0o253,0o50,0o346,0o337,0o270,0o40,(0O347010110&0x463A71D),0o315,0o253,0o50,0o326,0o44,0o271,0o50,0o14,0o341,0o53,0o21,(0x75bcd15-0O726746425),(15658734^0O73567354),0o305,0o315,0o213,0o31,0o301,0o30,0o327,0o247,0o314,0o253,0o50,0o321,0o321,0o355,0o123,0o135,0o134,0o315,0o253,0o50,0o345,0o376,0o51,0o50,0o102,0o43,0o176,0o376,0o16,0o26,0o100,0o50,(0x9D8DE4-0O47306735),0o53,0o315,0o253,0o50,0o43,0o26,(0x75bcd15-0O726746425),0o43,0o345,0o325,0o315,0o373,0o44,0o361,0o375,0o256,(0O57060516-0xbc614d),0o346,0o100,0o40,0o53,0o341,0o353,0o52,0o145,0o134,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o355,0o102,0o42,0o145,0o134,0o355,0o260,0o353,0o53,0o315,0o253,0o50,0o376,0o51,0o50,0o15,0o345,0o337,0o376,0o54,0o40,0o15,0o347,0o341,0o315,0o253,0o50,0o30,0o276,0o345,0o337,0o376,0o51,0o50,(15658734^0O73567354),0o317,0o31,0o321,0o353,0o42,0o135,0o134,0o52,0o13,0o134,0o343,0o42,0o13,0o134,0o325,0o347,0o347,0o315,0o373,0o44,0o341,0o42,0o135,0o134,0o341,0o42,0o13,0o134,0o347,0o303,0o22,0o47,0o43,0o176,0o376,0o41,0o70,0o372,0o311,0o375,0o313,(0O57060516-0xbc614d),0o366,0o337,0o315,0o215,0o54,0o322,0o212,0o34,0o345,0o346,0o37,0o117,0o347,0o345,0o376,0o50,0o50,0o50,0o313,0o361,0o376,0o44,0o50,0o21,0o313,0o351,0o315,0o210,0o54,0o60,0o17,0o315,0o210,0o54,0o60,0o26,0o313,0o261,0o347,0o30,0o366,0o347,0o375,0o313,(0O57060516-0xbc614d),0o266,0o72,0o14,0o134,0o247,0o50,(1011010-0O3666474),0o315,0o60,0o45,0o302,0o121,0o51,0o101,0o315,0o60,0o45,0o40,(0O347010110&0x463A71D),0o171,0o346,0o340,0o313,0o377,0o117,0o30,0o67,0o52,0o113,0o134,0o176,0o346,0o177,0o50,0o55,0o271,0o40,0o42,0o27,0o207,0o362,0o77,0o51,0o70,0o60,0o321,0o325,0o345,0o43,0o32,0o23,0o376,0o40,0o50,0o372,0o366,0o40,0o276,0o50,0o364,0o366,0o200,0o276,0o40,(1011010-0O3666474),0o32,0o315,0o210,0o54,0o60,0o25,0o341,0o305,0o315,0o270,0o31,0o353,0o301,0o30,0o316,0o313,0o370,0o321,0o337,0o376,0o50,0o50,0o11,0o313,0o350,0o30,0o15,0o321,0o321,0o321,0o345,0o337,0o315,0o210,0o54,0o60,(0O334664274-0x37368B9),0o347,0o30,0o370,0o341,0o313,0o20,0o313,0o160,0o311,0o52,0o13,0o134,0o176,0o376,0o51,0o312,0o357,0o50,0o176,0o366,0o140,0o107,0o43,0o176,0o376,0o16,0o50,(0x9D8DE4-0O47306735),0o53,0o315,0o253,0o50,0o43,0o313,0o250,0o170,0o271,0o50,0o22,0o43,0o43,0o43,0o43,0o43,0o315,0o253,0o50,0o376,0o51,0o312,0o357,0o50,0o315,0o253,0o50,0o30,0o331,0o313,0o151,0o40,0o14,0o43,0o355,0o133,0o145,0o134,0o315,0o300,0o63,0o353,0o42,0o145,0o134,0o321,0o321,0o257,0o74,0o311,0o257,0o107,0o313,0o171,0o40,0o113,0o313,0o176,0o40,0o16,0o74,0o43,0o116,0o43,0o106,0o43,0o353,0o315,0o262,0o52,0o337,0o303,0o111,0o52,0o43,0o43,0o43,0o106,0o313,0o161,0o50,0o12,(0O507646144^0x51F4C61),0o50,0o350,0o353,0o337,0o376,0o50,0o40,0o141,0o353,0o353,0o30,0o44,0o345,0o337,0o341,0o376,0o54,0o50,0o40,0o313,0o171,0o50,0o122,0o313,0o161,0o40,(1011010-0O3666474),0o376,0o51,0o40,0o74,0o347,0o311,0o376,0o51,0o50,0o154,0o376,0o314,0o40,0o62,0o337,0o53,0o42,0o135,0o134,0o30,0o136,0o41,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o345,0o347,0o341,0o171,0o376,0o300,0o40,0o11,0o337,0o376,0o51,0o50,0o121,0o376,0o314,0o50,0o345,0o305,0o345,0o315,0o356,0o52,0o343,0o353,0o315,0o314,0o52,0o70,0o31,0o13,0o315,0o364,0o52,0o11,0o321,0o301,0o20,0o263,0o313,0o171,0o40,0o146,0o345,0o313,0o161,0o40,0o23,0o102,0o113,0o337,0o376,0o51,0o50,(15658734^0O73567354),0o317,(15658734^0O73567354),0o347,0o341,0o21,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o315,0o364,0o52,0o11,0o311,0o315,0o356,0o52,0o343,0o315,0o364,0o52,0o301,0o11,0o43,0o102,0o113,0o353,0o315,0o261,0o52,0o337,0o376,0o51,0o50,(0x9D8DE4-0O47306735),0o376,0o54,0o40,0o333,0o315,0o122,0o52,0o347,0o376,0o50,0o50,0o370,0o375,0o313,(0O57060516-0xbc614d),0o266,0o311,0o315,0o60,0o45,0o304,0o361,0o53,0o347,0o376,0o51,0o50,0o120,0o325,0o257,0o365,0o305,0o21,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o337,0o341,0o376,0o314,0o50,0o27,0o361,0o315,0o315,0o52,0o365,0o120,0o131,0o345,0o337,0o341,0o376,0o314,0o50,0o11,0o376,0o51,0o302,0o212,0o34,0o142,0o153,0o30,0o23,0o345,0o347,0o341,0o376,0o51,0o50,0o14,0o361,0o315,0o315,0o52,0o365,0o337,0o140,0o151,0o376,0o51,0o40,0o346,0o361,0o343,0o31,0o53,0o343,0o247,0o355,0o122,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o70,(0x9D8DE4-0O47306735),0o43,0o247,0o372,0o40,0o52,0o104,0o115,0o321,0o375,0o313,(0O57060516-0xbc614d),0o266,0o315,0o60,0o45,0o310,0o257,0o375,0o313,(0O57060516-0xbc614d),0o266,0o305,0o315,0o251,0o63,0o301,0o52,0o145,0o134,0o167,0o43,0o163,0o43,0o162,0o43,0o161,0o43,0o160,0o43,0o42,0o145,0o134,0o311,0o257,0o325,0o345,0o365,0o315,0o202,0o34,0o361,0o315,0o60,0o45,0o50,0o22,0o365,0o315,0o231,0o36,0o321,0o170,0o261,0o67,0o50,(0O507646144^0x51F4C61),0o341,0o345,0o247,0o355,0o102,0o172,0o336,(0x75bcd15-0O726746425),0o341,0o321,0o311,0o353,0o43,0o136,0o43,0o126,0o311,0o315,0o60,0o45,0o310,0o315,0o251,0o60,0o332,0o25,0o37,0o311,0o52,0o115,0o134,0o375,0o313,0o67,0o116,0o50,0o136,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o43,0o176,0o376,0o40,0o50,0o372,0o60,0o13,0o376,0o20,0o70,0o21,0o376,0o26,0o60,0o15,0o43,0o30,0o355,0o315,0o210,0o54,0o70,0o347,0o376,0o44,0o312,0o300,0o53,0o171,0o52,0o131,0o134,0o53,0o315,0o125,0o26,0o43,0o43,0o353,0o325,0o52,0o115,0o134,0o33,0o326,(1011010-0O3666474),0o107,0o50,0o21,0o43,0o176,0o376,0o41,0o70,0o372,0o366,0o40,0o23,0o22,0o20,0o364,0o366,0o200,0o22,0o76,0o300,0o52,0o115,0o134,0o256,0o366,0o40,0o341,0o315,0o352,0o53,0o345,0o357,(15658734^0O73567354),0o70,0o341,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o247,0o355,0o102,0o30,0o100,0o375,0o313,(0O57060516-0xbc614d),0o166,0o50,(1011010-0O3666474),0o21,(1011010-0O3666474),(0x75bcd15-0O726746425),0o31,0o30,0o347,0o52,0o115,0o134,0o355,0o113,0o162,0o134,0o375,0o313,0o67,0o106,0o40,0o60,0o170,0o261,0o310,0o345,0o367,0o325,0o305,0o124,0o135,0o43,0o66,0o40,0o355,0o270,0o345,0o315,0o361,0o53,0o341,0o343,0o247,0o355,0o102,0o11,0o60,(15658734^0O73567354),0o104,0o115,0o343,0o353,0o170,0o261,0o50,(15658734^0O73567354),0o355,0o260,0o301,0o321,0o341,0o353,0o170,0o261,0o310,0o325,0o355,0o260,0o341,0o311,0o53,0o53,0o53,0o176,0o345,0o305,0o315,0o306,0o53,0o301,0o341,(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o303,0o350,0o31,0o76,0o337,0o52,0o115,0o134,0o246,0o365,0o315,0o361,0o53,0o353,0o11,0o305,0o53,0o42,0o115,0o134,(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o52,0o131,0o134,0o53,0o315,0o125,0o26,0o52,0o115,0o134,0o301,0o305,(0O334664274-0x37368B9),0o355,0o270,0o353,0o43,0o301,0o160,0o53,0o161,0o361,0o53,0o167,0o52,0o131,0o134,0o53,0o311,0o52,0o145,0o134,0o53,0o106,0o53,0o116,0o53,0o126,0o53,0o136,0o53,0o176,0o42,0o145,0o134,0o311,0o315,0o262,0o50,0o302,0o212,0o34,0o315,0o60,0o45,0o40,(0O347010110&0x463A71D),0o313,0o261,0o315,0o226,0o51,0o315,0o356,0o33,0o70,(0O347010110&0x463A71D),0o305,0o315,0o270,0o31,0o315,0o350,0o31,0o301,0o313,0o371,(1011010-0O3666474),(0x75bcd15-0O726746425),0o305,0o41,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o313,0o161,0o40,(15658734^0O73567354),0o56,(0O507646144^0x51F4C61),0o353,0o347,0o46,0o377,0o315,0o314,0o52,0o332,0o40,0o52,0o341,0o305,0o44,0o345,0o140,0o151,0o315,0o364,0o52,0o353,0o337,0o376,0o54,0o50,0o350,0o376,0o51,0o40,0o273,0o347,0o301,0o171,0o150,0o46,(0x75bcd15-0O726746425),0o43,0o43,0o51,0o31,0o332,0o25,0o37,0o325,0o305,0o345,0o104,0o115,0o52,0o131,0o134,0o53,0o315,0o125,0o26,0o43,0o167,0o301,0o13,0o13,0o13,0o43,0o161,0o43,0o160,0o301,0o170,0o43,0o167,0o142,0o153,0o33,0o66,(0x75bcd15-0O726746425),0o313,0o161,0o50,(15658734^0O73567354),0o66,0o40,0o301,0o355,0o270,0o301,0o160,0o53,0o161,0o53,0o75,0o40,0o370,0o311,0o315,0o33,0o55,0o77,0o330,0o376,0o101,0o77,0o320,0o376,0o133,0o330,0o376,0o141,0o77,0o320,0o376,0o173,0o311,0o376,0o304,0o40,0o31,0o21,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o347,0o326,0o61,0o316,(0x75bcd15-0O726746425),0o40,0o12,0o353,0o77,0o355,0o152,0o332,0o255,0o61,0o353,0o30,0o357,0o102,0o113,0o303,0o53,0o55,0o376,0o56,0o50,0o17,0o315,0o73,0o55,0o376,0o56,0o40,0o50,0o347,0o315,0o33,0o55,0o70,0o42,0o30,0o12,0o347,0o315,0o33,0o55,0o332,0o212,0o34,0o357,0o240,0o70,0o357,0o241,0o300,(15658734^0O73567354),0o70,0o337,0o315,0o42,0o55,0o70,0o13,0o357,0o340,0o244,(0O507646144^0x51F4C61),0o300,(0x5E30A78-0O570605164),0o17,0o70,0o347,0o30,0o357,0o376,0o105,0o50,(0O334664274-0x37368B9),0o376,0o145,0o300,(1011010-0O3666474),0o377,0o347,0o376,0o53,0o50,(0O507646144^0x51F4C61),0o376,0o55,0o40,(15658734^0O73567354),(0x5E30A78-0O570605164),0o347,0o315,0o33,0o55,0o70,0o313,0o305,0o315,0o73,0o55,0o315,0o325,0o55,0o301,0o332,0o255,0o61,0o247,0o372,0o255,0o61,(0x5E30A78-0O570605164),0o50,(15658734^0O73567354),0o355,0o104,0o303,0o117,0o55,0o376,0o60,0o330,0o376,0o72,0o77,0o311,0o315,0o33,0o55,0o330,0o326,0o60,0o117,(1011010-0O3666474),(0x75bcd15-0O726746425),0o375,0o41,0o72,0o134,0o257,0o137,0o121,0o110,0o107,0o315,0o266,0o52,0o357,0o70,0o247,0o311,0o365,0o357,0o240,0o70,0o361,0o315,0o42,0o55,0o330,0o357,(0O57060516-0xbc614d),0o244,(0x5E30A78-0O570605164),0o17,0o70,0o315,0o164,(0x75bcd15-0O726746425),0o30,0o361,(0x9D8DE4-0O47306735),0o17,0o60,(15658734^0O73567354),0o57,0o74,0o365,0o41,0o222,0o134,0o315,0o13,0o65,0o357,0o244,0o70,0o361,0o313,0o77,0o60,0o15,0o365,0o357,0o301,0o340,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),0o63,(15658734^0O73567354),(0O507646144^0x51F4C61),0o341,0o70,0o361,0o50,(0O347010110&0x463A71D),0o365,0o357,0o61,(0x5E30A78-0O570605164),0o70,0o361,0o30,0o345,0o357,(15658734^0O73567354),0o70,0o311,0o43,0o116,0o43,0o176,0o251,0o221,0o137,0o43,0o176,0o211,0o251,0o127,0o311,0o16,(0x75bcd15-0O726746425),0o345,0o66,(0x75bcd15-0O726746425),0o43,0o161,0o43,0o173,0o251,0o221,0o167,0o43,0o172,0o211,0o251,0o167,0o43,0o66,(0x75bcd15-0O726746425),0o341,0o311,0o357,0o70,0o176,0o247,0o50,(0O507646144^0x51F4C61),0o357,0o242,0o17,0o47,0o70,0o357,(15658734^0O73567354),0o70,0o345,0o325,0o353,0o106,0o315,0o177,0o55,0o257,0o220,0o313,0o171,0o102,0o113,0o173,0o321,0o341,0o311,0o127,0o27,0o237,0o137,0o117,0o257,0o107,0o315,0o266,0o52,0o357,0o64,0o357,0o32,0o40,0o232,0o205,(0x5E30A78-0O570605164),0o47,0o70,0o315,0o242,0o55,0o330,0o365,(0O507646144^0x51F4C61),(0x5E30A78-0O570605164),0o50,(0O334664274-0x37368B9),0o361,0o67,0o311,0o361,0o311,0o357,0o61,0o66,(0x75bcd15-0O726746425),0o13,0o61,0o67,(0x75bcd15-0O726746425),0o15,(15658734^0O73567354),0o70,0o76,0o60,0o327,0o311,0o52,0o70,0o76,0o55,0o327,0o357,0o240,0o303,0o304,0o305,(15658734^0O73567354),0o70,0o331,0o345,0o331,0o357,0o61,0o47,0o302,(0O334664274-0x37368B9),0o342,(0O57060516-0xbc614d),0o302,(15658734^0O73567354),0o70,0o176,0o247,0o40,0o107,0o315,0o177,0o55,(1011010-0O3666474),0o20,0o172,0o247,0o40,(1011010-0O3666474),0o263,0o50,0o11,0o123,(1011010-0O3666474),(0O347010110&0x463A71D),0o325,0o331,0o321,0o331,0o30,0o127,0o357,0o342,0o70,0o176,0o326,0o176,0o315,0o301,0o55,0o127,0o72,0o254,0o134,0o222,0o62,0o254,0o134,0o172,0o315,0o117,0o55,0o357,0o61,0o47,0o301,(0O334664274-0x37368B9),0o341,0o70,0o315,0o325,0o55,0o345,0o62,0o241,0o134,0o75,0o27,0o237,0o74,0o41,0o253,0o134,0o167,0o43,0o206,0o167,0o341,0o303,0o317,0o56,0o326,0o200,0o376,0o34,0o70,0o23,0o315,0o301,0o55,0o326,(0x9D8DE4-0O47306735),0o107,0o41,0o254,0o134,0o206,0o167,0o170,0o355,0o104,0o315,0o117,0o55,0o30,0o222,0o353,0o315,0o272,0o57,0o331,0o313,0o372,0o175,0o331,0o326,0o200,0o107,0o313,0o43,0o313,0o22,0o331,0o313,0o23,0o313,0o22,0o331,0o41,0o252,0o134,0o16,(0O507646144^0x51F4C61),0o176,0o217,0o47,0o167,0o53,0o15,0o40,0o370,0o20,0o347,0o257,0o41,0o246,0o134,0o21,0o241,0o134,(1011010-0O3666474),0o11,0o355,0o157,0o16,0o377,0o355,0o157,0o40,(0x5E30A78-0O570605164),0o15,0o14,0o40,0o12,0o22,0o23,0o375,0o64,0o161,0o375,0o64,0o162,0o16,(0x75bcd15-0O726746425),0o313,0o100,0o50,(0O57060516-0xbc614d),0o43,0o20,0o347,0o72,0o253,0o134,0o326,0o11,0o70,0o12,0o375,0o65,0o161,0o76,(0x5E30A78-0O570605164),0o375,0o276,0o157,0o30,0o101,0o357,(15658734^0O73567354),0o342,0o70,0o353,0o315,0o272,0o57,0o331,0o76,0o200,0o225,0o56,(0x75bcd15-0O726746425),0o313,0o372,0o331,0o315,0o335,0o57,0o375,0o176,0o161,0o376,(0O347010110&0x463A71D),0o70,(1011010-0O3666474),0o331,0o313,0o22,0o331,0o30,0o40,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(15658734^0O73567354),0o173,0o315,0o213,0o57,0o137,0o172,0o315,0o213,0o57,0o127,0o305,0o331,0o301,0o20,0o361,0o41,0o241,0o134,0o171,0o375,0o116,0o161,0o11,0o167,0o375,0o64,0o161,0o30,0o323,0o365,0o41,0o241,0o134,0o375,0o116,0o161,(1011010-0O3666474),(0x75bcd15-0O726746425),0o11,0o101,0o361,0o53,0o176,0o316,(0x75bcd15-0O726746425),0o167,0o247,0o50,(0O507646144^0x51F4C61),0o376,0o12,0o77,0o60,(0O347010110&0x463A71D),0o20,0o361,0o66,(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o375,0o64,0o162,0o375,0o160,0o161,0o357,(15658734^0O73567354),0o70,0o331,0o341,0o331,0o355,0o113,0o253,0o134,0o41,0o241,0o134,0o170,0o376,0o11,0o70,(0x5E30A78-0O570605164),0o376,0o374,0o70,0o46,0o247,0o314,0o357,0o25,0o257,0o220,0o372,0o122,0o57,0o107,0o30,0o14,0o171,0o247,0o50,(0O334664274-0x37368B9),0o176,0o43,0o15,0o315,0o357,0o25,0o20,0o364,0o171,0o247,0o310,(0x5E30A78-0O570605164),0o76,0o56,0o327,0o76,0o60,0o20,0o373,0o101,0o30,0o346,0o120,0o25,(1011010-0O3666474),(0O57060516-0xbc614d),0o315,0o112,0o57,0o76,0o105,0o327,0o112,0o171,0o247,0o362,0o203,0o57,0o355,0o104,0o117,0o76,0o55,0o30,(15658734^0O73567354),0o76,0o53,0o327,(1011010-0O3666474),(0x75bcd15-0O726746425),0o303,0o33,0o32,0o325,0o157,0o46,(0x75bcd15-0O726746425),0o135,0o124,0o51,0o51,0o31,0o51,0o131,0o31,0o114,0o175,0o321,0o311,0o176,0o66,(0x75bcd15-0O726746425),0o247,0o310,0o43,0o313,0o176,0o313,0o376,0o53,0o310,0o305,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o11,0o101,0o117,0o67,0o53,0o176,0o57,0o316,(0x75bcd15-0O726746425),0o167,0o20,0o370,0o171,0o301,0o311,0o345,0o365,0o116,0o43,0o106,0o167,0o43,0o171,0o116,0o305,0o43,0o116,0o43,0o106,0o353,0o127,0o136,0o325,0o43,0o126,0o43,0o136,0o325,0o331,0o321,0o341,0o301,0o331,0o43,0o126,0o43,0o136,0o361,0o341,0o311,0o247,0o310,0o376,0o41,0o60,0o26,0o305,0o107,0o331,0o313,0o55,0o313,0o32,0o313,0o33,0o331,0o313,0o32,0o313,0o33,0o20,0o362,0o301,0o320,0o315,(0x5E30A78-0O570605164),0o60,0o300,0o331,0o257,0o56,(0x75bcd15-0O726746425),0o127,0o135,0o331,0o21,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o311,0o34,0o300,0o24,0o300,0o331,0o34,0o40,(0O57060516-0xbc614d),0o24,0o331,0o311,0o353,0o315,0o156,0o64,0o353,0o32,0o266,0o40,0o46,0o325,0o43,0o345,0o43,0o136,0o43,0o126,0o43,0o43,0o43,0o176,0o43,0o116,0o43,0o106,0o341,0o353,0o11,0o353,0o216,0o17,0o316,(0x75bcd15-0O726746425),0o40,0o13,0o237,0o167,0o43,0o163,0o43,0o162,0o53,0o53,0o53,0o321,0o311,0o53,0o321,0o315,0o223,0o62,0o331,0o345,0o331,0o325,0o345,0o315,0o233,0o57,0o107,0o353,0o315,0o233,0o57,0o117,0o270,0o60,(0O334664274-0x37368B9),0o170,0o101,0o353,0o365,0o220,0o315,0o272,0o57,0o315,0o335,0o57,0o361,0o341,0o167,0o345,0o150,0o141,0o31,0o331,0o353,0o355,0o112,0o353,0o174,0o215,0o157,0o37,0o255,0o331,0o353,0o341,0o37,0o60,(0O347010110&0x463A71D),0o76,(0O57060516-0xbc614d),0o315,0o335,0o57,0o64,0o50,0o43,0o331,0o175,0o346,0o200,0o331,0o43,0o167,0o53,0o50,0o37,0o173,0o355,0o104,0o77,0o137,0o172,0o57,0o316,(0x75bcd15-0O726746425),0o127,0o331,0o173,0o57,0o316,(0x75bcd15-0O726746425),0o137,0o172,0o57,0o316,(0x75bcd15-0O726746425),0o60,(0x9D8DE4-0O47306735),0o37,0o331,0o64,0o312,0o255,0o61,0o331,0o127,0o331,0o257,0o303,0o125,0o61,0o305,(1011010-0O3666474),0o20,0o174,0o115,0o41,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o51,0o70,0o12,0o313,0o21,0o27,0o60,(0O334664274-0x37368B9),0o31,0o70,(15658734^0O73567354),0o20,0o363,0o301,0o311,0o315,0o351,0o64,0o330,0o43,0o256,0o313,0o376,0o53,0o311,0o32,0o266,0o40,0o42,0o325,0o345,0o325,0o315,0o177,0o55,0o353,0o343,0o101,0o315,0o177,0o55,0o170,0o251,0o117,0o341,0o315,0o251,0o60,0o353,0o341,0o70,0o12,0o172,0o263,0o40,(0O57060516-0xbc614d),0o117,0o315,0o216,0o55,0o321,0o311,0o321,0o315,0o223,0o62,0o257,0o315,0o300,0o60,0o330,0o331,0o345,0o331,0o325,0o353,0o315,0o300,0o60,0o353,0o70,0o132,0o345,0o315,0o272,0o57,0o170,0o247,0o355,0o142,0o331,0o345,0o355,0o142,0o331,(1011010-0O3666474),0o41,0o30,0o21,0o60,(0O507646144^0x51F4C61),0o31,0o331,0o355,0o132,0o331,0o331,0o313,0o34,0o313,0o35,0o331,0o313,0o34,0o313,0o35,0o331,0o313,0o30,0o313,0o31,0o331,0o313,0o31,0o37,0o20,0o344,0o353,0o331,0o353,0o331,0o301,0o341,0o170,0o201,0o40,(0O57060516-0xbc614d),0o247,0o75,0o77,0o27,0o77,0o37,0o362,0o106,0o61,0o60,0o150,0o247,0o74,0o40,(0O347010110&0x463A71D),0o70,(1011010-0O3666474),0o331,0o313,0o172,0o331,0o40,0o134,0o167,0o331,0o170,0o331,0o60,0o25,0o176,0o247,0o76,0o200,0o50,(0O57060516-0xbc614d),0o257,0o331,0o242,0o315,0o373,0o57,(0x9D8DE4-0O47306735),0o167,0o70,0o56,0o43,0o167,0o53,0o30,0o51,(1011010-0O3666474),0o40,0o331,0o313,0o172,0o331,0o40,0o22,(0x9D8DE4-0O47306735),0o313,0o23,0o313,0o22,0o331,0o313,0o23,0o313,0o22,0o331,0o65,0o50,0o327,0o20,0o352,0o30,0o327,0o27,0o60,0o14,0o315,(0x5E30A78-0O570605164),0o60,0o40,(0x9D8DE4-0O47306735),0o331,0o26,0o200,0o331,0o64,0o50,0o30,0o345,0o43,0o331,0o325,0o331,0o301,0o170,0o27,0o313,0o26,0o37,0o167,0o43,0o161,0o43,0o162,0o43,0o163,0o341,0o321,0o331,0o341,0o331,0o311,0o317,(0O507646144^0x51F4C61),0o315,0o223,0o62,0o353,0o257,0o315,0o300,0o60,0o70,0o364,0o353,0o315,0o300,0o60,0o330,0o331,0o345,0o331,0o325,0o345,0o315,0o272,0o57,0o331,0o345,0o140,0o151,0o331,0o141,0o150,0o257,(1011010-0O3666474),0o337,0o30,0o20,0o27,0o313,0o21,0o331,0o313,0o21,0o313,0o20,0o331,0o51,0o331,0o355,0o152,0o331,0o70,0o20,0o355,0o122,0o331,0o355,0o122,0o331,0o60,0o17,0o31,0o331,0o355,0o132,0o331,0o247,0o30,(0O347010110&0x463A71D),0o247,0o355,0o122,0o331,0o355,0o122,0o331,0o67,(0x5E30A78-0O570605164),0o372,0o322,0o61,0o365,0o50,0o341,0o137,0o121,0o331,0o131,0o120,0o361,0o313,0o30,0o361,0o313,0o30,0o331,0o301,0o341,0o170,0o221,0o303,0o75,0o61,0o176,0o247,0o310,0o376,0o201,0o60,(1011010-0O3666474),0o66,(0x75bcd15-0O726746425),0o76,0o40,0o30,0o121,0o376,0o221,0o40,0o32,0o43,0o43,0o43,0o76,0o200,0o246,0o53,0o266,0o53,0o40,(0O334664274-0x37368B9),0o76,0o200,0o256,0o53,0o40,0o66,0o167,0o43,0o66,0o377,0o53,0o76,0o30,0o30,0o63,0o60,0o54,0o325,0o57,0o306,0o221,0o43,0o126,0o43,0o136,0o53,0o53,0o16,(0x75bcd15-0O726746425),0o313,0o172,0o50,(0O57060516-0xbc614d),0o15,0o313,0o372,(1011010-0O3666474),(0O347010110&0x463A71D),0o220,0o200,0o70,(0x5E30A78-0O570605164),0o132,0o26,(0x75bcd15-0O726746425),0o220,0o50,(0x9D8DE4-0O47306735),0o107,0o313,0o72,0o313,0o33,0o20,0o372,0o315,0o216,0o55,0o321,0o311,0o176,0o326,0o240,0o360,0o355,0o104,0o325,0o353,0o53,0o107,0o313,0o70,0o313,0o70,0o313,0o70,0o50,(0O507646144^0x51F4C61),0o66,(0x75bcd15-0O726746425),0o53,0o20,0o373,0o346,(0x9D8DE4-0O47306735),0o50,0o11,0o107,0o76,0o377,0o313,0o47,0o20,0o374,0o246,0o167,0o353,0o321,0o311,0o315,0o226,0o62,0o353,0o176,0o247,0o300,0o325,0o315,0o177,0o55,0o257,0o43,0o167,0o53,0o167,(1011010-0O3666474),0o221,0o172,0o247,0o40,(0O347010110&0x463A71D),0o263,0o102,0o50,0o20,0o123,0o130,(1011010-0O3666474),0o211,0o353,(0O507646144^0x51F4C61),0o51,0o60,0o374,0o313,0o11,0o313,0o34,0o313,0o35,0o353,0o53,0o163,0o53,0o162,0o53,0o160,0o321,0o311,(0x75bcd15-0O726746425),0o260,(0x75bcd15-0O726746425),0o100,0o260,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o60,(0x75bcd15-0O726746425),0o361,0o111,0o17,0o332,0o242,0o100,0o260,(0x75bcd15-0O726746425),0o12,0o217,0o66,0o74,0o64,0o241,0o63,0o17,0o60,0o312,0o60,0o257,0o61,0o121,0o70,0o33,0o65,0o44,0o65,0o73,0o65,0o73,0o65,0o73,0o65,0o73,0o65,0o73,0o65,0o73,0o65,0o24,0o60,0o55,0o65,0o73,0o65,0o73,0o65,0o73,0o65,0o73,0o65,0o73,0o65,0o73,0o65,0o234,0o65,0o336,0o65,0o274,0o64,0o105,0o66,0o156,0o64,0o151,0o66,0o336,0o65,0o164,0o66,0o265,0o67,0o252,0o67,0o332,0o67,0o63,0o70,0o103,0o70,0o342,0o67,0o23,0o67,0o304,0o66,0o257,0o66,0o112,0o70,0o222,0o64,0o152,0o64,0o254,0o64,0o245,0o64,0o263,0o64,0o37,0o66,0o311,0o65,(0O57060516-0xbc614d),0o65,0o300,0o63,0o240,0o66,0o206,0o66,0o306,0o63,0o172,0o66,(1011010-0O3666474),0o65,0o371,0o64,0o233,0o66,0o203,0o67,0o24,0o62,0o242,0o63,0o117,0o55,0o227,0o62,0o111,0o64,0o33,0o64,0o55,0o64,0o17,0o64,0o315,0o277,0o65,0o170,0o62,0o147,0o134,0o331,0o343,0o331,0o355,0o123,0o145,0o134,0o331,0o176,0o43,0o345,0o247,0o362,0o200,0o63,0o127,0o346,0o140,0o17,0o17,0o17,0o17,0o306,0o174,0o157,0o172,0o346,0o37,0o30,0o16,0o376,0o30,0o60,(0O347010110&0x463A71D),0o331,(0O57060516-0xbc614d),0o373,0o377,0o124,0o135,0o11,0o331,(0x9D8DE4-0O47306735),0o157,0o21,0o327,0o62,0o46,(0x75bcd15-0O726746425),0o31,0o136,0o43,0o126,0o41,0o145,0o63,0o343,0o325,0o331,0o355,0o113,0o146,0o134,0o311,0o361,0o72,0o147,0o134,0o331,0o30,0o303,0o325,0o345,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o315,(0O507646144^0x51F4C61),0o37,0o341,0o321,0o311,0o355,0o133,0o145,0o134,0o315,0o300,0o63,0o355,0o123,0o145,0o134,0o311,0o315,0o251,0o63,0o355,0o260,0o311,0o142,0o153,0o315,0o251,0o63,0o331,0o345,0o331,0o343,0o305,0o176,0o346,0o300,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o117,0o14,0o176,0o346,0o77,0o40,(15658734^0O73567354),0o43,0o176,0o306,0o120,0o22,0o76,(0O507646144^0x51F4C61),0o221,0o43,0o23,(1011010-0O3666474),(0x75bcd15-0O726746425),0o355,0o260,0o301,0o343,0o331,0o341,0o331,0o107,0o257,(0O507646144^0x51F4C61),0o310,0o22,0o23,0o30,0o372,0o247,0o310,0o365,0o325,0o21,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o315,0o310,0o63,0o321,0o361,0o75,0o30,0o362,0o117,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o201,0o117,(1011010-0O3666474),(0x75bcd15-0O726746425),0o11,0o311,0o325,0o52,0o150,0o134,0o315,(1011010-0O3666474),0o64,0o315,0o300,0o63,0o341,0o311,0o142,0o153,0o331,0o345,0o41,0o305,0o62,0o331,0o315,0o367,0o63,0o315,0o310,0o63,0o331,0o341,0o331,0o311,0o345,0o353,0o52,0o150,0o134,0o315,(1011010-0O3666474),0o64,0o353,0o315,0o300,0o63,0o353,0o341,0o311,(1011010-0O3666474),(0O507646144^0x51F4C61),0o32,0o116,0o353,0o22,0o161,0o43,0o23,0o20,0o367,0o353,0o311,0o107,0o315,0o136,0o63,0o61,0o17,0o300,(15658734^0O73567354),0o240,0o302,0o61,0o340,(0x5E30A78-0O570605164),0o342,0o301,(0O334664274-0x37368B9),0o70,0o315,0o306,0o63,0o315,0o142,0o63,0o17,(0O57060516-0xbc614d),0o302,(15658734^0O73567354),0o65,0o356,0o341,(0O334664274-0x37368B9),0o70,0o311,(1011010-0O3666474),0o377,0o30,(1011010-0O3666474),0o315,0o351,0o64,0o330,(1011010-0O3666474),(0x75bcd15-0O726746425),0o176,0o247,0o50,0o13,0o43,0o170,0o346,0o200,0o266,0o27,0o77,0o37,0o167,0o53,0o311,0o325,0o345,0o315,0o177,0o55,0o341,0o170,0o261,0o57,0o117,0o315,0o216,0o55,0o321,0o311,0o315,0o351,0o64,0o330,0o325,0o21,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o43,0o313,0o26,0o53,0o237,0o117,0o315,0o216,0o55,0o321,0o311,0o315,0o231,0o36,0o355,0o170,0o30,(0x5E30A78-0O570605164),0o315,0o231,0o36,0o12,0o303,0o50,0o55,0o315,0o231,0o36,0o41,0o53,0o55,0o345,0o305,0o311,0o315,0o361,0o53,0o13,0o170,0o261,0o40,0o43,0o32,0o315,0o215,0o54,0o70,0o11,0o326,0o220,0o70,0o31,0o376,0o25,0o60,0o25,0o74,0o75,0o207,0o207,0o207,0o376,0o250,0o60,0o14,0o355,0o113,0o173,0o134,0o201,0o117,0o60,(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o303,0o53,0o55,0o317,0o11,0o345,0o305,0o107,0o176,0o43,0o266,0o43,0o266,0o43,0o266,0o170,0o301,0o341,0o300,0o67,0o311,0o315,0o351,0o64,0o330,0o76,0o377,0o30,(1011010-0O3666474),0o315,0o351,0o64,0o30,(0O507646144^0x51F4C61),0o257,0o43,0o256,0o53,(0x9D8DE4-0O47306735),0o345,0o76,(0x75bcd15-0O726746425),0o167,0o43,0o167,0o43,0o27,0o167,0o37,0o43,0o167,0o43,0o167,0o341,0o311,0o353,0o315,0o351,0o64,0o353,0o330,0o67,0o30,0o347,0o353,0o315,0o351,0o64,0o353,0o320,0o247,0o30,0o336,0o353,0o315,0o351,0o64,0o353,0o320,0o325,0o33,0o257,0o22,0o33,0o22,0o321,0o311,0o170,0o326,(0O347010110&0x463A71D),0o313,0o127,0o40,(0O57060516-0xbc614d),0o75,0o17,0o60,(0O347010110&0x463A71D),0o365,0o345,0o315,0o74,0o64,0o321,0o353,0o361,0o313,0o127,0o40,(0x9D8DE4-0O47306735),0o17,0o365,0o315,0o17,0o60,0o30,0o63,0o17,0o365,0o315,0o361,0o53,0o325,0o305,0o315,0o361,0o53,0o341,0o174,0o265,0o343,0o170,0o40,0o13,0o261,0o301,0o50,(0x5E30A78-0O570605164),0o361,0o77,0o30,0o26,0o361,0o30,0o23,0o261,0o50,0o15,0o32,0o226,0o70,0o11,0o40,0o355,0o13,0o23,0o43,0o343,0o53,0o30,0o337,0o301,0o361,0o247,0o365,0o357,0o240,0o70,0o361,0o365,0o334,(0O57060516-0xbc614d),0o65,0o361,0o365,0o324,0o371,0o64,0o361,0o17,0o324,(0O57060516-0xbc614d),0o65,0o311,0o315,0o361,0o53,0o325,0o305,0o315,0o361,0o53,0o341,0o345,0o325,0o305,0o11,0o104,0o115,0o367,0o315,0o262,0o52,0o301,0o341,0o170,0o261,0o50,(15658734^0O73567354),0o355,0o260,0o301,0o341,0o170,0o261,0o50,(15658734^0O73567354),0o355,0o260,0o52,0o145,0o134,0o21,0o373,0o377,0o345,0o31,0o321,0o311,0o315,0o325,0o55,0o70,0o16,0o40,0o14,0o365,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o367,0o361,0o22,0o315,0o262,0o52,0o353,0o311,0o317,0o12,0o52,0o135,0o134,0o345,0o170,0o306,0o343,0o237,0o365,0o315,0o361,0o53,0o325,(0O334664274-0x37368B9),0o367,0o341,0o355,0o123,0o135,0o134,0o325,0o355,0o260,0o353,0o53,0o66,0o15,0o375,0o313,(0O57060516-0xbc614d),0o276,0o315,0o373,0o44,0o337,0o376,0o15,0o40,(0x9D8DE4-0O47306735),0o341,0o361,0o375,0o256,(0O57060516-0xbc614d),0o346,0o100,0o302,0o212,0o34,0o42,0o135,0o134,0o375,0o313,(0O57060516-0xbc614d),0o376,0o315,0o373,0o44,0o341,0o42,0o135,0o134,0o30,0o240,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o367,0o42,0o133,0o134,0o345,0o52,0o121,0o134,0o345,0o76,0o377,0o315,(0O57060516-0xbc614d),0o26,0o315,0o343,0o55,0o341,0o315,0o25,0o26,0o321,0o52,0o133,0o134,0o247,0o355,0o122,0o104,0o115,0o315,0o262,0o52,0o353,0o311,0o315,0o224,0o36,0o376,0o20,0o322,0o237,0o36,0o52,0o121,0o134,0o345,0o315,(0O57060516-0xbc614d),0o26,0o315,0o346,0o25,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,(0O334664274-0x37368B9),0o14,0o367,0o22,0o315,0o262,0o52,0o341,0o315,0o25,0o26,0o303,0o277,0o65,0o315,0o361,0o53,0o170,0o261,0o50,(0O57060516-0xbc614d),0o32,0o303,0o50,0o55,0o315,0o361,0o53,0o303,0o53,0o55,0o331,0o345,0o41,0o147,0o134,0o65,0o341,0o40,(0x5E30A78-0O570605164),0o43,0o331,0o311,0o331,0o136,0o173,0o27,0o237,0o127,0o31,0o331,0o311,0o23,0o23,0o32,0o33,0o33,0o247,0o40,0o357,0o331,0o43,0o331,0o311,0o361,0o331,0o343,0o331,0o311,0o357,0o300,(15658734^0O73567354),0o61,0o340,(0O507646144^0x51F4C61),0o47,0o340,(0O57060516-0xbc614d),0o300,(0x5E30A78-0O570605164),(0O334664274-0x37368B9),0o340,0o70,0o311,0o357,0o61,0o66,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o72,0o70,0o311,0o61,0o72,0o300,(0O334664274-0x37368B9),0o340,(0O57060516-0xbc614d),0o60,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o241,(0O334664274-0x37368B9),0o70,0o311,0o357,0o75,0o64,0o361,0o70,0o252,0o73,0o51,(0x5E30A78-0O570605164),0o61,0o47,0o303,(0O334664274-0x37368B9),0o61,0o17,0o241,(0O334664274-0x37368B9),0o210,0o23,0o66,0o130,0o145,0o146,0o235,0o170,0o145,0o100,0o242,0o140,0o62,0o311,0o347,0o41,0o367,0o257,0o44,0o353,0o57,0o260,0o260,0o24,0o356,0o176,0o273,0o224,0o130,0o361,0o72,0o176,0o370,0o317,0o343,0o70,0o315,0o325,0o55,0o40,(0x9D8DE4-0O47306735),0o70,(0O334664274-0x37368B9),0o206,0o60,0o11,0o317,(0O507646144^0x51F4C61),0o70,(0x9D8DE4-0O47306735),0o226,0o60,(0x5E30A78-0O570605164),0o355,0o104,0o167,0o311,0o357,(15658734^0O73567354),0o240,0o70,0o311,0o357,0o75,0o61,0o67,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o70,0o317,0o11,0o240,(15658734^0O73567354),0o70,0o176,0o66,0o200,0o315,0o50,0o55,0o357,0o64,0o70,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0O57060516-0xbc614d),0o61,0o64,0o360,0o114,0o314,0o314,0o315,(0O334664274-0x37368B9),0o67,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0O57060516-0xbc614d),0o241,(0O334664274-0x37368B9),(0O57060516-0xbc614d),0o70,0o64,0o357,(0O57060516-0xbc614d),0o64,0o360,0o61,0o162,0o27,0o370,(0x5E30A78-0O570605164),(0O57060516-0xbc614d),0o242,(0O334664274-0x37368B9),0o242,(0O334664274-0x37368B9),0o61,0o64,0o62,0o40,(0x5E30A78-0O570605164),0o242,(0O334664274-0x37368B9),0o214,0o21,0o254,0o24,0o11,0o126,0o332,0o245,0o131,0o60,0o305,0o134,0o220,0o252,0o236,0o160,0o157,0o141,0o241,0o313,0o332,0o226,0o244,0o61,0o237,0o264,0o347,0o240,0o376,0o134,0o374,0o352,0o33,0o103,0o312,0o66,0o355,0o247,0o234,0o176,0o136,0o360,0o156,0o43,0o200,0o223,(0x5E30A78-0O570605164),0o17,0o70,0o311,0o357,0o75,0o64,0o356,0o42,0o371,0o203,0o156,(0x5E30A78-0O570605164),0o61,0o242,0o17,0o47,(0O334664274-0x37368B9),0o61,0o17,0o61,0o17,0o61,0o52,0o241,(0O334664274-0x37368B9),0o61,0o67,0o300,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(15658734^0O73567354),0o70,0o311,0o241,(0O334664274-0x37368B9),(0O57060516-0xbc614d),0o66,(0x75bcd15-0O726746425),(15658734^0O73567354),0o33,0o70,0o311,0o357,0o71,0o52,0o241,(0O334664274-0x37368B9),0o340,(0x75bcd15-0O726746425),(1011010-0O3666474),0o33,0o63,(0O334664274-0x37368B9),0o357,0o71,0o61,0o61,(0x5E30A78-0O570605164),0o61,0o17,0o241,(0O334664274-0x37368B9),0o206,0o24,0o346,0o134,0o37,0o13,0o243,0o217,0o70,0o356,0o351,0o25,0o143,0o273,0o43,0o356,0o222,0o15,0o315,0o355,0o361,0o43,0o135,0o33,0o352,(0x5E30A78-0O570605164),0o70,0o311,0o357,0o61,0o37,(0O57060516-0xbc614d),0o40,(0O507646144^0x51F4C61),0o70,0o311,0o315,0o227,0o62,0o176,0o376,0o201,0o70,0o16,0o357,0o241,0o33,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),0o61,0o66,0o243,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(1011010-0O3666474),0o33,0o63,(0O334664274-0x37368B9),0o357,0o240,(0O57060516-0xbc614d),0o61,0o61,(0x5E30A78-0O570605164),0o61,0o17,0o241,(0O334664274-0x37368B9),0o214,0o20,0o262,0o23,0o16,0o125,0o344,0o215,0o130,0o71,0o274,0o133,0o230,0o375,0o236,(0x75bcd15-0O726746425),0o66,0o165,0o240,0o333,0o350,0o264,0o143,0o102,0o304,0o346,0o265,0o11,0o66,0o276,0o351,0o66,0o163,0o33,0o135,0o354,0o330,0o336,0o143,0o276,0o360,0o141,0o241,0o263,0o14,(0x5E30A78-0O570605164),0o17,0o70,0o311,0o357,0o61,0o61,(0x5E30A78-0O570605164),0o241,(0O334664274-0x37368B9),0o33,0o50,0o241,0o17,(0O507646144^0x51F4C61),0o44,0o61,0o17,0o70,0o311,0o357,0o42,0o243,(0O334664274-0x37368B9),0o33,0o70,0o311,0o357,0o61,0o60,(0x75bcd15-0O726746425),0o36,0o242,0o70,0o357,(0O57060516-0xbc614d),0o61,0o60,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o45,(0x5E30A78-0O570605164),0o70,0o303,0o304,0o66,(15658734^0O73567354),0o61,0o60,(0x75bcd15-0O726746425),0o11,0o240,(0O57060516-0xbc614d),0o67,(0x75bcd15-0O726746425),(1011010-0O3666474),0o241,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(15658734^0O73567354),0o241,0o70,0o311,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o20,0o20,0o20,(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o44,0o44,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o44,0o176,0o44,0o44,0o176,0o44,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o76,0o50,0o76,0o12,0o76,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o142,0o144,(0O347010110&0x463A71D),0o20,0o46,0o106,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o50,0o20,0o52,0o104,0o72,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o20,0o20,0o20,0o20,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,(0O347010110&0x463A71D),0o76,(0O347010110&0x463A71D),0o24,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o76,(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o76,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o30,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x5E30A78-0O570605164),(0O347010110&0x463A71D),0o20,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o106,0o112,0o122,0o142,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o50,(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o76,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,(15658734^0O73567354),0o74,0o100,0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o14,(15658734^0O73567354),0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o30,0o50,0o110,0o176,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,0o100,0o174,(15658734^0O73567354),0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o100,0o174,0o102,0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,(15658734^0O73567354),(0x5E30A78-0O570605164),(0O347010110&0x463A71D),0o20,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o74,0o102,0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o102,0o76,(15658734^0O73567354),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o20,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0O347010110&0x463A71D),0o20,(0O347010110&0x463A71D),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o76,(0x75bcd15-0O726746425),0o76,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0O347010110&0x463A71D),(0x5E30A78-0O570605164),(0O347010110&0x463A71D),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,(0x5E30A78-0O570605164),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o112,0o126,0o136,0o100,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o102,0o176,0o102,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o174,0o102,0o174,0o102,0o102,0o174,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o100,0o100,0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o170,0o104,0o102,0o102,0o104,0o170,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,0o100,0o174,0o100,0o100,0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,0o100,0o174,0o100,0o100,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o100,0o116,0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o102,0o176,0o102,0o102,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o76,(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o76,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),0o102,0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o110,0o160,0o110,0o104,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o100,0o100,0o100,0o100,0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o146,0o132,0o102,0o102,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o142,0o122,0o112,0o106,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o102,0o102,0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o174,0o102,0o102,0o174,0o100,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o102,0o122,0o112,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o174,0o102,0o102,0o174,0o104,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o100,0o74,(15658734^0O73567354),0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o376,0o20,0o20,0o20,0o20,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o102,0o102,0o102,0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o102,0o102,0o102,0o44,0o30,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o102,0o102,0o102,0o132,0o44,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o44,0o30,0o30,0o44,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o202,0o104,0o50,0o20,0o20,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,(0x5E30A78-0O570605164),(0O347010110&0x463A71D),0o20,0o40,0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o40,0o20,(0O347010110&0x463A71D),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o160,0o20,0o20,0o20,0o20,0o160,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o70,0o124,0o20,0o20,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),0o34,0o42,0o170,0o40,0o40,0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o70,(0x5E30A78-0O570605164),0o74,0o104,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o74,0o42,0o42,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o34,0o40,0o40,0o40,0o34,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),0o74,0o104,0o104,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o70,0o104,0o170,0o100,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,0o20,0o30,0o20,0o20,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o104,0o104,0o74,(0x5E30A78-0O570605164),0o70,(0x75bcd15-0O726746425),0o100,0o100,0o170,0o104,0o104,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),0o60,0o20,0o20,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),0o44,0o30,(0x75bcd15-0O726746425),0o40,0o50,0o60,0o60,0o50,0o44,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o20,0o20,0o20,0o20,0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o150,0o124,0o124,0o124,0o124,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o170,0o104,0o104,0o104,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o70,0o104,0o104,0o104,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o170,0o104,0o104,0o170,0o100,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o104,0o104,0o74,(0x5E30A78-0O570605164),(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o34,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o70,0o100,0o70,(0x5E30A78-0O570605164),0o170,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o70,0o20,0o20,0o20,0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o104,0o104,0o104,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o104,0o50,0o50,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o124,0o124,0o124,0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o50,0o20,0o50,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o104,0o104,0o74,(0x5E30A78-0O570605164),0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o174,(0O347010110&0x463A71D),0o20,0o40,0o174,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,(0O347010110&0x463A71D),0o60,(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o160,0o20,0o14,0o20,0o20,0o160,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o231,0o241,0o241,0o231,0o102,0o74];exports.zxSpectrum48DisAnn={"labels":{"0":"START","8":"ERROR_1","16":"PRINT_A_1","32":"NEXT_CHAR","40":"FP_CALC","48":"BC_SPACES","56":"MASK_INT","125":"SKIP_OVER","4555":"START_NEW","83":"ERROR_2","5618":"PRINT_A_2","28":"TEST_CHAR","116":"CH_ADD_P1","13147":"CALCULATE","5790":"RESERVE","72":"KEY_INT","3082":"PO_MSG","3092":"PO_TABLE","3088":"PO_TOKENS","3137":"PO_SEARCH","3106":"PO_EACH","3131":"PO_SAVE","3125":"PO_TR_SP","13759":"STK_PNTRS","13150":"GEN_ENT_1","13154":"GEN_ENT_2","13157":"RE_ENTRY","13164":"SCAN_ENT","13184":"FIRST_3D","13198":"ENT_TABLE","13196":"DOUBLE_A","13015":"FP_OP_ADDR","12997":"stk_zero_const","13000":"stk_one_const","13004":"stk_half_const","13006":"stk_pi_half_cons","13011":"stk_ten_const","13218":"fp_calc_2","13225":"TEST_5_SP","7941":"TEST_ROOM","13236":"STACK_NUM","13248":"MOVE_FP","13254":"STK_DATA","13256":"STK_CONST","13278":"FORM_EXP","13297":"STK_ZEROS","13303":"SKIP_CONS","13304":"SKIP_NEXT","13318":"LOC_MEM","13327":"get_mem_0","13339":"stk_zero","13357":"st_mem_0","13372":"EXCHANGE","13374":"SWAP_BYTE","13418":"abs","13428":"NEG_TEST","13545":"TEST_ZERO","13422":"NEGATE","13443":"INT_CASE","11647":"INT_FETCH","11662":"INT_STORE","13458":"sgn","13477":"in_func","7833":"FIND_INT_2","13488":"IN_PK_STK","13484":"peek","11560":"STACK_A","13491":"usr_no","11563":"STACK_BC","13500":"usr_string","11249":"STK_FETCH","13543":"REPORT_A","11405":"ALPHA","13523":"USR_RANGE","13540":"USR_STACK","13561":"GREATER_0","13575":"SIGN_TO_C","13569":"NOT_FUNC","13579":"FP_0_OR_1","13574":"less_0","13595":"or_oper","13604":"no_and_no","13613":"str_and_no","14263":"C_ENT","1218":"SA_BYTES","1232":"SA_FLAG","517":"KEY_TABLE_L","85":"ERROR_3","119":"TEMP_PTR_1","120":"TEMP_PTR_2","102":"RESET","112":"NO_RESET","144":"SKIPS","654":"KEY_SCAN","662":"KEY_LINE","24":"GET_CHAR","683":"KEY_DONE","671":"KEY_3KEYS","673":"KEY_BITS","703":"KEYBOARD","710":"K_ST_LOOP","721":"K_CH_SET","798":"K_TEST","753":"K_NEW","819":"K_DECODE","776":"K_END","784":"K_REPEAT","812":"K_MAIN","871":"K_DIGIT","847":"K_KLC_LET","833":"K_E_LET","842":"K_LOOK_UP","868":"K_TOKENS","925":"K_KLC_DGT","905":"K_GRA_DGT","898":"K_8_AND_9","946":"K_AT_CHAR","949":"BEEPER","977":"BE_IX_P3","978":"BE_IX_P2","979":"BE_IX_P1","980":"BE_IX_P0","982":"BE_HandL_LP","1010":"BE_AGAIN","1014":"BE_END","1016":"BEEP","1132":"REPORT_B","1061":"BE_I_OK","1063":"BE_OCTAVE","1134":"SEMI_TONE","7828":"FIND_INT1","1343":"SA_LD_RET","1240":"SA_LEADER","1258":"SA_SYNC_1","1266":"SA_SYNC_2","1287":"SA_START","1278":"SA_LOOP","1294":"SA_PARITY","1285":"SA_LOOP_P","1297":"SA_BIT_2","1317":"SA_8_BITS","1308":"SA_OUT","1306":"SA_SET","1300":"SA_BIT_1","1340":"SA_DELAY","1364":"SA_LD_END","1366":"LD_BYTES","2548":"PRINT_OUT","1387":"LD_BREAK","1388":"LD_START","1511":"LD_EDGE_1","1396":"LD_WAIT","1507":"LD_EDGE_2","1408":"LD_LEADER","1423":"LD_SYNC","1480":"LD_MARKER","1449":"LD_LOOP","1459":"LD_FLAG","1469":"LD_VERIFY","1474":"LD_NEXT","1476":"LD_DEC","1482":"LD_8_BITS","1513":"LD_DELAY","1517":"LD_SAMPLE","1541":"SAVE_ETC","7308":"EXPT_EXT","9520":"SYNTAX_Z","1618":"SA_DATA","1569":"SA_SPACE","1570":"SA_SPACE_1","1577":"SA_BLANK","1611":"SA_NAME","1604":"SA_NULL","1602":"REPORT_F","1696":"SA_SCRD","7306":"REPORT_C","10418":"LOOK_VARS","1650":"SA_V_OLD","1648":"REPORT_2","1669":"SA_V_NEW","1682":"SA_DATA_1","1679":"SA_V_TYPE","7150":"CHECK_END","1882":"SA_ALL","1731":"SA_CODE","1814":"SA_LINE","8264":"PR_ST_END","1761":"SA_CODE_1","7398":"USE_ZERO","1776":"SA_CODE_2","7298":"EXPT_1NUM","1781":"SA_CODE_3","1785":"SA_CODE_4","1808":"SA_TYPE_3","1827":"SA_LINE_1","1850":"SA_TYPE_0","2416":"SA_CONTRL","1895":"LD_LOOK_H","1930":"LD_TYPE","1958":"LD_NAME","1965":"LD_CH_PR","1995":"VR_CONTRL","2056":"LD_CONTRL","2230":"ME_CONTRL","2025":"VR_CONT_1","2054":"REPORT_R","2036":"VR_CONT_2","2048":"VR_CONT_3","2050":"LD_BLOCK","2073":"LD_CONT_1","2085":"LD_CONT_2","2094":"LD_DATA","2163":"LD_PROG","2124":"LD_DATA_1","6632":"RECLAIM_2","5717":"MAKE_ROOM","6629":"RECLAIM_1","2221":"LD_PROG_1","2258":"ME_NEW_LP","2263":"ME_OLD_LP","2288":"ME_VAR_LP","2271":"ME_OLD_L1","2283":"ME_NEW_L2","6584":"NEXT_ONE","2297":"ME_OLD_VP","2339":"ME_VAR_L2","2313":"ME_OLD_V2","2305":"ME_OLD_V1","2337":"ME_VAR_L1","2322":"ME_OLD_V3","2334":"ME_OLD_V4","2348":"ME_ENTER","2366":"ME_ENT_1","2389":"ME_ENT_2","2392":"ME_ENT_3","5633":"CHAN_OPEN","5588":"WAIT_KEY","2449":"SA_1_SEC","2819":"PO_FETCH","2777":"PO_ABLE","2665":"PO_QUEST","2595":"PO_BACK_1","2618":"PO_BACK_3","2616":"PO_BACK_2","3545":"CL_SET","2917":"PO_CHAR","2639":"PO_ENTER","2655":"PO_COMMA","2755":"PO_FILL","2685":"PO_TV_1","2688":"PO_CHANGE","8721":"CO_TEMP_5","2754":"PO_TAB","2732":"PO_AT_ERR","2751":"PO_AT_SET","7839":"REPORT_B","3157":"PO_SCR","3206":"REPORT_5","2768":"PO_SPACE","3488":"CL_CHAN_A","2780":"PO_STORE","2852":"PO_ANY","2812":"PO_ST_PR","2800":"PO_ST_E","2845":"PO_F_PR","2898":"PO_Tand_UDG","2872":"PO_GR_1","2878":"PO_GR_2","2892":"PO_GR_3","2922":"PO_CHAR_2","2911":"PO_T","2934":"PO_CHAR_3","2943":"PR_ALL","2963":"PR_ALL_1","3789":"COPY_BUFF","2980":"PR_ALL_2","2998":"PR_ALL_3","2999":"PR_ALL_4","3027":"PR_ALL_6","3009":"PR_ALL_5","3035":"PO_ATTR","3066":"PO_ATTR_1","2621":"PO_RIGHT","2669":"PO_TV_2","2677":"PO_2_OPER","2682":"PO_1_OPER","2695":"PO_CONT","3140":"PO_STEP","3328":"REPORT_D","3282":"PO_SCR_3","3582":"CL_SC_ALL","3739":"CL_ADDR","3312":"PO_SCR_3A","3330":"PO_SCR_4","3405":"TEMPS","3356":"PO_SCR_4A","3584":"CL_SCROLL","3373":"PO_SCR_4B","3419":"TEMPS_1","3429":"TEMPS_2","3435":"CLS","3503":"CL_ALL","3438":"CLS_LOWER","3652":"CL_LINE","3470":"CLS_3","3463":"CLS_1","3465":"CLS_2","3476":"CL_CHAN","4264":"KEY_INPUT","3566":"CL_SET_1","3572":"CL_SET_2","3589":"CL_SCR_1","3597":"CL_SCR_2","3609":"CL_SCR_3","3720":"CL_ATTR","3658":"CL_LINE_1","3661":"CL_LINE_2","3712":"CL_LINE_3","3756":"COPY","3762":"COPY_1","3828":"COPY_LINE","3785":"COPY_2","3802":"COPY_END","3795":"COPY_3","3807":"CLEAR_PRB","3815":"PRB_BYTES","3837":"COPY_L_1","8020":"BREAK_KEY","3852":"COPY_L_2","3860":"COPY_L_3","3864":"COPY_L_4","3870":"COPY_L_5","3884":"EDITOR","3888":"ED_AGAIN","4223":"ED_ERROR","3896":"ED_LOOP","3969":"ADD_CHAR","3986":"ED_KEYS","3948":"ED_CONTR","4126":"ED_IGNORE","3979":"ADD_CH_1","5714":"ONE_SPACE","4009":"ED_EDIT","4247":"CLEAR_SP","6510":"LINE_ADDR","5781":"LINE_NO","6229":"OUT_LINE","5653":"CHAN_FLAG","4083":"ED_DOWN","4097":"ED_STOP","6415":"LN_FETCH","4206":"ED_LIST","4132":"ED_ENTER","4145":"ED_EDGE","4113":"ED_CUR","4134":"ED_END","4501":"SET_DE","4158":"ED_EDGE_1","4177":"ED_EDGE_2","6428":"LN_STORE","6037":"AUTO_LIST","4496":"SET_HL","4381":"ED_COPY","4379":"KEY_INP_DONE","4346":"KEY_CONTR","4315":"KEY_MandCL","4357":"KEY_DATA","4326":"KEY_MODE","4340":"KEY_FLAG","4365":"KEY_NEXT","4371":"KEY_CHAN","4455":"ED_FULL","6269":"OUT_LINE2","6369":"OUT_CURS","4432":"ED_BLANK","4476":"ED_C_DONE","4446":"ED_SPACES","4478":"ED_C_END","4519":"REMOVE_FP","4535":"NEW","4570":"RAM_CHECK","4572":"RAM_FILL","4578":"RAM_READ","4591":"RAM_DONE","4633":"RAM_SET","5551":"IN_CHAN_INFO","5572":"REPORT_J","5574":"IN_STREAM_DATA","5433":"COPYR_TEXT","4777":"MAIN_1","4770":"MAIN_EXEC","5808":"SET_MIN","6935":"LINE_SCAN","4815":"MAIN_3","4780":"MAIN_2","4867":"MAIN_4","6651":"E_LINE_NO","5469":"MAIN_ADD","7050":"LINE_RUN","4883":"MAIN_G","4924":"MAIN_5","5615":"OUT_CODE","5009":"REP_MESSAGES","6683":"OUT_NUM1","4998":"MAIN_9","4979":"MAIN_6","4982":"MAIN_7","4996":"MAIN_8","5461":"REPORT_G","5501":"MAIN_ADD_1","5547":"MAIN_ADD_2","5598":"WAIT_KEY_1","5606":"INPUT_AD","5623":"CALL_SUB","5676":"CALL_JUMP","5648":"CHAN_OP_1","5604":"REPORT_8","5646":"REPORT_O","5677":"CHN_CODE_LKP","5852":"INDEXER","5684":"CHAN_K","5702":"CHAN_S_1","5698":"CHAN_S","5709":"CHAN_P","5732":"POINTERS","5739":"PTR_NEXT","5759":"PTR_DONE","5775":"LINE_ZERO","5777":"LINE_NO_A","5823":"SET_WORK","5829":"SET_STK","5844":"REC_EDIT","5851":"INDEXER_1","5918":"STR_DATA","5861":"CLOSE","5889":"CLOSE_2","5884":"CLOSE_1","5910":"CLOSE_LOOKUP","5925":"REPORT_O_2","5927":"STR_DATA_1","5974":"OPEN_1","5981":"OPEN_2","5991":"OPEN_3","5989":"REPORT_F_1","6010":"OPEN_STRM_LOOKUP","6017":"OPEN_K","6027":"OPEN_END","6021":"OPEN_S","6025":"OPEN_P","6113":"AUTO_L_2","6094":"AUTO_L_1","6116":"AUTO_L_3","6125":"AUTO_L_4","6195":"LIST_ALL","6133":"LLIST","6139":"LIST_1","6137":"LIST","8304":"STR_ALTER","6175":"LIST_4","6164":"LIST_2","6170":"LIST_3","6178":"LIST_5","7390":"FETCH_NUM","6197":"LIST_ALL_1","6528":"CP_LINES","6245":"OUT_LINE_1","6696":"OUT_NUM_2","6273":"OUT_LINE3","6292":"OUT_LINE4","6305":"OUT_LINE5","6337":"OUT_FLASH","6326":"NUMBER","6324":"OUT_LINE6","6455":"OUT_CHAR","6387":"OUT_C_1","6409":"OUT_C_2","6437":"OUT_SP_2","6442":"OUT_SP_NO","6443":"OUT_SP_1","11547":"NUMERIC","6508":"OUT_CH_3","6490":"OUT_CH_1","6504":"OUT_CH_2","6516":"LINE_AD_1","6539":"EACH_STMT","6544":"EACH_S_1","6552":"EACH_S_2","6554":"EACH_S_3","6565":"EACH_S_4","6573":"EACH_S_5","6577":"EACH_S_6","6613":"NEXT_O_3","6599":"NEXT_O_1","6606":"NEXT_O_2","6614":"NEXT_O_4","6619":"NEXT_O_5","6621":"DIFFER","11579":"INT_TO_FP","11682":"FP_TO_BC","6677":"E_LINE_1","6722":"OUT_NUM_4","6704":"OUT_NUM_3","6778":"P_LET","6781":"P_GOTO","6785":"P_IF","6790":"P_GOSUB","6794":"P_STOP","6797":"P_RETURN","6800":"P_FOR","6808":"P_NEXT","6812":"P_PRINT","6815":"P_INPUT","6818":"P_DIM","6821":"P_REM","6824":"P_NEW","6827":"P_RUN","6830":"P_LIST","6833":"P_POKE","6837":"P_RANDOM","6840":"P_CONT","6843":"P_CLEAR","6846":"P_CLS","6849":"P_PLOT","6853":"P_PAUSE","6857":"P_READ","6860":"P_DATA","6863":"P_RESTORE","6866":"P_DRAW","6870":"P_COPY","6873":"P_LPRINT","6876":"P_LLIST","6879":"P_SAVE","6880":"P_LOAD","6881":"P_VERIFY","6882":"P_MERGE","6883":"P_BEEP","6887":"P_CIRCLE","6891":"P_INK","6892":"P_PAPER","6893":"P_FLASH","6894":"P_BRIGHT","6895":"P_INVERSE","6896":"P_OVER","6897":"P_OUT","6901":"P_BORDER","6905":"P_DEF_FN","6908":"P_OPEN","6914":"P_CLOSE","6918":"P_FORMAT","6922":"P_MOVE","6928":"P_ERASE","6932":"P_CAT","6953":"STMT_1_1","6952":"STMT_LOOP","7091":"LINE_END","7030":"STMT_RET","6728":"SYNTAX_TABLE","6997":"GET_PARAM","6994":"SCAN_LOOP","7023":"SEPARATOR","7169":"CMD_CLASS_TBL","7037":"STMT_R_1","7035":"REPORT_L","7156":"STMT_NEXT","7070":"LINE_NEW","7121":"NEXT_LINE","7103":"LINE_USE","7148":"REPORT_N","7088":"REPORT_0","7090":"REM","7181":"CLASS_03","7184":"CLASS_00","7185":"CLASS_05","7199":"CLASS_01","7202":"VAR_A_1","7216":"VAR_A_2","7238":"VAR_A_3","7214":"REPORT_2A","7246":"CLASS_02","7254":"VAL_FET_1","7257":"VAL_FET_2","9467":"SCANNING","11007":"LET","7276":"CLASS_04","7289":"NEXT_2NUM","7290":"EPT_2NUM","7318":"PERMS","8700":"CO_TEMP_4","7358":"CLASS_09","7382":"CL_09_1","8674":"CO_TEMP_2","7387":"CLASS_0B","7406":"STOP","7408":"IF","7424":"IF_1","7427":"FOR","7440":"F_USE_1","7446":"F_REORDER","7476":"F_LandS","7642":"NEXT_LOOP","7524":"F_LOOP","7558":"LOOK_PROG","7556":"REPORT_I","7548":"F_FOUND","7587":"LOOP_P_2","7563":"LOOK_P_1","7595":"NEXT","7640":"REPORT_1","7795":"GO_TO_2","7650":"NEXT_1","7657":"NEXT_2","7660":"READ_3","7661":"READ","7710":"READ_2","7690":"READ_1","7688":"REPORT_E","7719":"DATA","7724":"DATA_1","7735":"DATA_2","7737":"PASS_BY","7746":"RESTORE","7749":"REST_RUN","7759":"RANDOMIZE","7770":"RAND_1","7783":"GO_TO","7775":"CONTINUE","7802":"OUT_CMD","7813":"TWO_PARAM","7808":"POKE","11733":"FP_TO_A","7822":"TWO_P_1","7836":"FIND_I_1","7841":"RUN","7855":"CLEAR_RUN","7852":"CLEAR","7863":"CLEAR_1","7898":"REPORT_M","7900":"CLEAR_2","7917":"GO_SUB","7957":"REPORT_4","7962":"FREE_MEM","7971":"RETURN","7990":"REPORT_7","7994":"PAUSE","7997":"PAUSE_1","8015":"PAUSE_END","8009":"PAUSE_2","8032":"DEF_FN","8042":"DEF_FN_1","8073":"DEF_FN_4","8061":"DEF_FN_2","8125":"DEF_FN_7","8102":"DEF_FN_6","8070":"DEF_FN_3","8084":"DEF_FN_5","8131":"UNSTACK_Z","8137":"LPRINT","8143":"PRINT_1","8141":"PRINT","8159":"PRINT_2","8261":"PR_END_Z","8178":"PRINT_4","8165":"PRINT_3","8270":"PR_POSN_1","8188":"PR_ITEM_1","8181":"PRINT_CR","8206":"PR_ITEM_2","8967":"STK_TO_BC","8222":"PR_AT_TAB","8228":"PR_ITEM_3","8690":"CO_TEMP_3","11747":"PRINT_FP","8252":"PR_STRING","8295":"PR_POSN_3","8289":"PR_POSN_2","8302":"PR_POSN_4","8329":"INPUT","8342":"INPUT_1","8385":"IN_ITEM_1","8365":"INPUT_2","8408":"IN_ITEM_2","8626":"IN_NEXT_2","8429":"IN_ITEM_3","8442":"IN_PROMPT","8623":"IN_NEXT_1","8476":"IN_PR_2","8474":"IN_PR_1","8489":"IN_PR_3","8542":"IN_VAR_3","8506":"IN_VAR_1","8520":"IN_VAR_2","8633":"IN_ASSIGN","8545":"IN_VAR_4","8662":"IN_CHAN_K","8564":"IN_VAR_5","8603":"IN_VAR_6","10930":"STK_ST_STR","8656":"IN_STOP","8654":"REPORT_C_1","8659":"REPORT_H","8673":"CO_TEMP_1","8756":"CO_TEMP_7","8819":"CO_TEMP_C","8744":"CO_TEMP_6","8772":"REPORT_K","8812":"CO_CHANGE","8766":"CO_TEMP_8","8774":"CO_TEMP_9","8792":"CO_TEMP_B","8791":"CO_TEMP_A","8829":"CO_TEMP_D","8839":"CO_TEMP_E","8870":"BORDER_1","8874":"PIXEL_ADD","9465":"REPORT_B_1","8907":"POINT_SUB","8916":"POINT_LP","8924":"PLOT","8933":"PLOT_SUB","8944":"PLOT_LOOP","8957":"PL_TST_IN","8963":"PLOT_END","8980":"STK_TO_A","8992":"CIRCLE","9019":"C_R_GRE_1","9341":"CD_PRMS_1","9031":"C_ARC_GE_1","9050":"C_ARC_GE_2","9248":"DRW_STEPS","9090":"DRAW","9101":"DR_3_PRMS","9335":"LINE_DRAW","9123":"DR_SIN_NZ","9153":"DR_PRMS","9311":"ARC_END","9253":"ARC_LOOP","9273":"ARC_START","9399":"DRAW_LINE","9365":"USE_252","9367":"DRAW_SAVE","9412":"DL_X_GE_Y","9419":"DL_LARGER","9422":"D_L_LOOP","9428":"D_L_DIAG","9435":"D_L_HR_VT","9439":"D_L_STEP","9463":"D_L_RANGE","9452":"D_L_PLOT","9471":"S_LOOP_1","9622":"SCANNING_TABLE","9860":"S_ALPHNUM","9487":"S_QUOTE_S","9506":"S_2_COORD","9517":"S_REPORT_C","9525":"S_SCRN_S","9551":"S_SCRN_LP","9562":"S_SC_MTCH","9587":"S_SCR_NXT","9565":"S_SC_ROWS","9597":"S_SCR_STO","9600":"S_ATTR_S","9647":"S_U_PLUS","9651":"S_QUOTE","9689":"S_Q_PRMS","9662":"S_Q_AGAIN","9675":"S_Q_COPY","9691":"S_STRING","10002":"S_CONT_2","9704":"S_BRACKET","9717":"S_FN","9720":"S_RND","10173":"S_FN_SBRN","9765":"S_RND_END","9776":"S_PI_END","9767":"S_PI","9923":"S_NUMERIC","9780":"S_INKEY","9997":"S_PUSH_PO","9829":"S_INK_EN","9824":"S_IN_STK","9832":"S_SCREEN","9842":"S_ATTR","9851":"S_POINT","11400":"ALPHANUM","9951":"S_NEGATE","9929":"S_LETTER","9869":"S_DECIMAL","9909":"S_STK_DEC","11419":"DEC_TO_FP","9910":"S_SD_SKIP","9949":"S_CONT_1","10646":"STK_VARS","9991":"S_NO_TO_STR","10003":"S_CONT_3","10019":"S_OPERTR","10036":"S_LOOP","10834":"SLICING","10133":"OPERATOR_TABLE","10160":"PRIORITY_TABLE","10099":"S_TIGHTER","10060":"S_STK_LST","10075":"S_SYNTEST","10084":"S_RUNTEST","10081":"S_REPORT_C_1","10096":"S_LOOPEND","10128":"S_NEXT","10120":"S_NOT_AND","10231":"SF_RUN","10192":"SF_BRKT_1","10214":"SF_REPORT_C","10217":"SF_FLAG_6","10201":"SF_ARGMTS","10212":"SF_BRKT_2","10228":"SF_SYN_EN","10242":"SF_ARGMT_1","10260":"SF_CP_DEF","10411":"FN_SKPOVR","10277":"SF_NOT_FD","10289":"SF_VALUES","10248":"SF_FND_DF","10373":"SF_R_BR_2","10307":"SF_ARG_LP","10322":"SF_ARG_VL","10379":"REPORT_Q","10381":"SF_VALUE","10479":"V_RUN_SYN","10462":"V_STR_VAR","10467":"V_TEST_FN","10452":"V_CHAR","10577":"STK_F_ARG","10493":"V_RUN","10548":"V_SYNTAX","10496":"V_EACH","10546":"V_80_BYTE","10538":"V_NEXT","10559":"V_FOUND_2","10514":"V_MATCHES","10515":"V_SPACES","10537":"V_GET_PTR","10558":"V_FOUND_1","10563":"V_PASS","10571":"V_END","10586":"SFA_LOOP","10603":"SFA_CP_VR","10625":"SFA_MATCH","10641":"SFA_END","10727":"SV_COUNT","10670":"SV_ARRAYS","10657":"SV_SIMPLE_STR","10825":"SV_SLICEQ","10688":"SV_PTR","10784":"REPORT_3","10691":"SV_COMMA","10730":"SV_LOOP","10712":"SV_CLOSE","10770":"SV_RPT_C","10824":"SV_DIM","10720":"SV_CH_ADD","10821":"SV_SLICE","10747":"SV_MULT","10990":"LD_DE_DEp1","10956":"INT_EXP_1","10996":"GET_HL_mul_DE","10874":"SL_RPT_C","10796":"SV_ELEM_STR","10786":"SV_NUMBER","10929":"STK_ST_0","10925":"SL_STORE","10881":"SL_SECOND","10957":"INT_EXP_2","10900":"SL_DEFINE","10920":"SL_OVER","10934":"STK_STORE","10987":"I_RESTORE","10984":"I_CARRY","12457":"HL_EQ_HLmulDE","11110":"L_EXISTS","11019":"L_EACH_CH","11020":"L_NO_SP","11039":"L_TEST_CH","11049":"L_SPACES","11200":"L_NEWS","11087":"L_SINGLE","11070":"L_CHAR","11242":"L_FIRST","11097":"L_NUMERIC","11174":"L_ENTER","11122":"L_DELETES","11183":"L_ADD_STR","11163":"L_LENGTH","11171":"L_IN_WS","11206":"L_STRING","11266":"DIM","11285":"D_RUN","11295":"D_LETTER","11309":"L_SIZE","11310":"D_NO_LOOP","11269":"D_REPORT_C","11388":"DIM_CLEAR","11391":"DIM_SIZES","11448":"NOT_BIN","11426":"BIN_DIGIT","11443":"BIN_END","12717":"REPORT_6","11467":"DECIMAL","11499":"E_FORMAT","11477":"DEC_STO_1","11471":"DEC_RPT_C","11482":"NEXT_DGT_1","11554":"STK_DIGIT","11506":"SIGN_FLAG","11518":"SIGN_DONE","11519":"ST_E_PART","11544":"E_FP_JUMP","11599":"E_TO_FP","11584":"NEXT_DGT_2","11605":"E_SAVE","11616":"E_LOOP","11629":"E_DIVS","11630":"E_FETCH","11633":"E_TST_END","11643":"E_END","11660":"P_INT_STO","11693":"FP_DELETE","11713":"LOG_2A","11745":"FP_A_END","11762":"PF_NEGATIVE","11768":"FP_POSITIVE","11777":"PF_LOOP","11862":"PF_LARGE","11806":"PF_SAVE","11812":"PF_SMALL","11899":"PF_BITS","11983":"PF_FRACTION","11887":"PF_MEDIUM","12218":"FETCH_TWO","11914":"PF_BYTES","11937":"PF_DIGITS","11945":"PF_INSERT","11955":"PF_TEST_2","11960":"PF_ALL_9","11979":"PF_MORE","12044":"PF_ROUND","12253":"SHIFT_FP","11999":"PF_FRN_LP","12012":"PR_FR_DGT","12015":"PF_FR_EXX","12171":"CA_EQ_10ApC","12056":"PF_RND_LP","12069":"PF_R_BACK","12077":"PF_COUNT","12102":"PF_NOT_E","12140":"PF_E_FRMT","12106":"PF_E_SBRN","12114":"PF_OUT_LP","12126":"PF_DC_OUT","12121":"PF_OUT_DT","12132":"PF_DEC_0S","12163":"PF_E_POS","12165":"PF_E_SIGN","12187":"PREP_ADD","12207":"NEG_BYTE","12281":"ADDEND_0","12261":"ONE_SHIFT","12292":"ADD_BACK","12283":"ZEROS_4_OR_5","12301":"ALL_ADDED","12303":"SUBTRACT","12308":"ADDITION","12350":"FULL_ADDN","12348":"ADDN_OFLW","12947":"RE_ST_TWO","12373":"SHIFT_LEN","12412":"TEST_NEG","12447":"ADD_REP_6","12453":"GO_NC_MLT","12451":"END_COMPL","12629":"TEST_NORM","12465":"HL_LOOP","12478":"HL_END","12476":"HL_AGAIN","12480":"PREP_MUL_DIV","12490":"MULTIPLY","12528":"MULT_LONG","12527":"MULT_OFLW","12522":"MULT_RESULT","12637":"ZERO_RESULT","12581":"STRT_MLT","12564":"MLT_LOOP","12571":"NO_ADD","12603":"MAKE_EXPT","12605":"DIVN_EXPT","12614":"OFLW1_CLR","12625":"OFLW2_CLR","12652":"NORMALISE","12633":"NEAR_ZERO","12638":"SKIP_ZERO","12693":"OFLOW_CLR","12654":"SHIFT_ONE","12678":"NORML_NOW","12719":"DIVISION","12770":"DIV_START","12754":"DIV_LOOP","12786":"SUBN_ONLY","12763":"DIV_34TH","12793":"NO_RSTORE","12794":"COUNT_ONE","12820":"TRUNCATE","12833":"T_GT_ZERO","12914":"NIL_BYTES","12863":"T_SMALL","12851":"T_FIRST","12908":"T_EXPONENT","12909":"X_LARGE","12882":"T_NUMERIC","12894":"T_TEST","12903":"T_STORE","12897":"T_SHIFT","12931":"BITS_ZERO","12926":"BYTE_ZERO","12944":"IX_END","12938":"LESS_MASK","12950":"RESTK_SUB","12951":"RE_STACK","12977":"RS_NRMLSE","12989":"RS_STORE","12978":"RSTK_LOOP","13385":"SERIES_06_ETC","13395":"G_LOOP","13627":"NO_L_EQL_ETC","13635":"EX_OR_NOT","13646":"NU_OR_STR","13657":"STRINGS","13708":"END_TESTS","13668":"BYTE_COMP","13685":"SEC_PLUS","13675":"SECOND_LOW","13682":"BOTH_NULL","13704":"STR_TEST","13701":"FIRST_LESS","13724":"STRS_ADD","13751":"OTHER_STR","13769":"CHRS","13788":"REPORT_B_2","13790":"VAL","13836":"V_REPORT_C","13855":"STR_STRING","13893":"READ_IN","13919":"R_I_STORE","13929":"CODE_FUNC","13937":"STK_CODE","13940":"LEN_FUNC","13946":"DEC_JR_NZ","13959":"JUMP_2","13958":"JUMP","13967":"JUMP_TRUE","13979":"END_CALC","13984":"N_MOD_M","14007":"X_NEG","14018":"EXIT_INT","14020":"EXP_FUNC","14085":"N_NEGTV","14083":"REPORT_6_1","14092":"RESULT_OK","14094":"RESULT_ZERO","14099":"NAT_LOG_FUNC","14108":"VALID","14106":"REPORT_A_1","14141":"GRE_0_8","14211":"GET_ARGT","14241":"ZPLUS","14248":"YNEG","14261":"SINE","14298":"TAN_FUNC","14306":"ATAN_FUNC","14328":"SMALL","14330":"CASES","14387":"ARCSIN","14403":"ARCCOS","14410":"SQR","14444":"LAST","14417":"TO_POWER","14429":"X_IS_0","14442":"ONE"},"comments":{"654":"The initial key value for each line will be +2F, +2E,...,+28. (Eight lines.)","11":"The address reached by the interpreter is copied to the error pointer before proceeding.","28":"Find out if the character is printable. Return if it is so.","58":"The lower two bytes of the frame counter are incremented every 20 ms.","67":"The highest byte of the frame counter is only incremented when the value of the lower two bytes is zero.","3083":"The high byte of the last entry on the machine stack is made zero so as to suppress trailing spaces (see below).","3088":"The base address of the token","3091":"Save the code on the stack. (Range +00 - +5A; RND - COPY).","3092":"Locate the required entry.","3095":"Print the message/token.","3097":"A 'space' will be printed before the message/token if required.","3106":"Collect a code.","3107":"Cancel any 'inverted bit'.","3109":"Print the character.","3112":"Collect the code again.","3113":"Advance the pointer.","3114":"The 'inverted bit' goes to the carry flag and signals the end of the message/token;","3115":"otherwise jump back.","3117":"For messages - D holds +00; for tokens - D holds +00 - +5A.","3120":"Jump forward if the last character was a '$'.","3124":"Return if the last character was any other before 'A'.","3125":"Examine the value in D and return if it indicates a message, RND, INKEY$ or PI.","3129":"All other cases will require a 'trailing space'.","13147":"Presume a unary operation and therefore set HL to point to the start of the 'last value' on the calculator stack and DE one-past this floating-point number (STKEND).","13151":"Either, transfer a single operation offset to BREG temporarily, or, when using the subroutine recursively pass the parameter to BREG to be used as a counter.","13154":"The return address of the sub-routine is store in H'L'. This saves the pointer to the first literal. Entering the CALCULATOR at GEN-ENT-2 is used whenever BREG is in use as a","13157":"A loop is now entered to handle each literal in the list that follows the calling instruction;","13161":"so first, always set to STKEND. Go to the alternate register set, and fetch the literal for this loop.","13163":"Make H'L' point to the next literal.","13164":"This pointer is saved briefly on the machine stack. SCAN-ENT is used by the SINGLE CALCULATION subroutine to find the subroutine that is required.","13165":"Test the A register.","13166":"Separate the simple literals from the multi-purpose literals. Jump with literals 00 - 3D.","13169":"Save the literal in D.","13170":"Continue only with bits 5 & 6.","13172":"Four right shifts make them now bits 1 & 2.","13176":"The offsets required are 3E-41.","13178":"And L will now hold double the required offset.","13180":"Now produce the parameter by taking bits 0,1,2,3 & 4 of the literal; keep the parameter in A.","13184":"Jump forward if performing a unary operation.","13188":"All of the subroutines that perform binary operations require that HL points to the first operand","13189":"and DE points to the second operand (the 'last value') as they appear on the calculator stack.","13196":"As each entry in the table of addresses takes up two bytes the offset produced is doubled.","13015":"\"jump-true\", \"exchange\", \"delete\", \"subtract\"","13023":"\"multiply\", \"division\", \"to-power\", \"or\"","13031":"\"no-&-no\", \"no-l-eql\", \"no-gr-eq\", \"nos-neql\"","13039":"\"no-grtr\", \"no-less\", \"nos-eql\", \"addition\"","13047":"\"str-&-no\", \"str-l-eql\", \"str-gr-eq\", \"strs-neql\"","13055":"\"str-grtr\", \"str-less\", \"strs-eql\", \"strs-add\"","13063":"\"val$\", \"usr-$\", \"read-in\", \"negate\"","13071":"\"code\", \"val\", \"len\", \"sin\"","13079":"\"cos\", \"tan\", \"asn\", \"acs\" ","13087":"\"atn\", \"ln\", \"exp\", \"int\"","13095":"\"sqr\", \"sgn\", \"abs\", \"peek\"","13103":"\"in\", \"usr-no\", \"str$\", \"chr$\"","13111":"\"not\", \"duplicate\", \"n-mod-m\", \"jump\"","13119":"\"stk-data\", \"dec-jr-nz\", \"less-0\", \"greater-0\"","13127":"\"end-calc\", \"get-argt\", \"truncate\", \"fp-calc-2\"","13135":"\"e-to-fp\", \"re-stack\", \"series-06\", \"stk-zero\"","13143":"\"st-mem-0\", \"get-mem-0\"","13198":"The base address of the table.","13201":"The address of the required table entry is formed in HL;","13203":"and the required subroutine address is loaded into the DE register pair.","13211":"The RE-ENTRY is put on the machine stack underneath the subroutine address.","13212":"Return to the main set of registers.","13213":"The current value of BREG is transferred to the B register thereby returning the single operation offset.","13217":"An indirect jump to the required subroutine.","13218":"Discard the RE-ENTRY address.","13219":"Transfer the offset to A.","13222":"Enter the alternate register set.","13223":"Jump back to find the required address; stack the RE-ENTRY address and jump to the subroutine for the operation.","13225":"Save DE briefly.","13226":"Save HL briefly.","13227":"Specify the test is for 5 bytes.","13230":"Make the test.","13233":"Restore HL.","13234":"Restore DE.","13235":"Finished.","13236":"Copy STKEND to DE as destination address.","13240":"Move the number.","13243":"Reset STKEND from DE.","13247":"Finished.","13248":"A test is made for room.","13251":"Move the five bytes involved.","13253":"Finished.","13254":"This subroutine performs the manipulatory operation of adding a 'last value' to the calculator stack; hence HL is set to point one-past the present 'last value' and hence point to the result.","13256":"Now test that there is indeed","13259":"Go to the alternate register set and stack the pointer to the next literal.","13262":"Switch over the result pointer and the next literal pointer.","13263":"Save BC briefly.","13264":"The first literal is put into A and divided by Hex.40 to give the integer values 0, 1, 2 or 3.","13270":"The integer value is transferred to C and incremented, thereby giving the range 1, 2, 3 or 4 for the number of literals that will be needed.","13271":"The literal is fetch anew, reduced mod Hex.40 and discarded as inappropriate if the remainder if zero;","13276":"in which case the next literal is fetched and used unreduced.","13278":"The exponent, e, is formed by the addition of Hex.50 and passed to the calculator stack as the first of the five bytes of the result.","13281":"The number of literals specified in C are taken from the source and entered into the bytes of the result.","13290":"Restore BC.","13291":"Return the result pointer to HL and the next literal pointer to its usual position in H' & L'.","13295":"The number of zero bytes required at this stage is given by 5-C-1; and this number of zeros is added to the result to make up the required five bytes.","13303":"The subroutine returns if the parameter is zero, or when the requested constant has been reached.","13305":"Save the parameter.","13306":"Save the result pointer.","13307":"The dummy address.","13310":"Perform imaginary stacking of an expanded constant.","13313":"Restore the result pointer.","13314":"Restore the parameter.","13315":"Count the loops.","13316":"Jump back to consider the value of the counter.","13318":"Copy the parameter to C.","13319":"Double the parameter.","13320":"Double the result.","13321":"Add the value of the parameter to give five times the original value.","13322":"This result is wanted in the BC register pair.","13325":"Produce the new base address.","13326":"Finished.","13327":"Save the result pointer.","13328":"Fetch the pointer to the current memory area (see above).","13331":"The base address is found.","13334":"The five bytes are moved.","13337":"Set the result pointer.","13338":"Finished.","13339":"Set HL to hold the result pointer.","13346":"Go to the alternate register set and save the next literal pointer.","13343":"The base address of the calculator's table of constants.","13347":"Find the requested base address.","13350":"Expand the constant.","13354":"Restore the next literal pointer.","13356":"Finished.","13357":"Save the result pointer.","13358":"Source to DE briefly.","13359":"Fetch the pointer to the current memory area.","13362":"The base address is found.","13369":"'Last value' +5, i.e. STKEND, to DE.","13365":"Exchange source and destination pointers.","13366":"The five bytes are moved.","13370":"Result pointer to HL.","13371":"Finished.","13372":"There are five bytes involved.","13374":"Each byte of the second number.","13375":"Each byte of the first number.","13376":"Switch source and destination.","13377":"Now to the first number.","13378":"Now to the second number.","13379":"Move to consider the next pair of bytes.","13381":"Exchange the five bytes.","13383":"Get the pointers correct as the number 5 is an odd number.","13384":"Finished.","13418":"B is set to FF hex.","13420":"The jump is made into 'unary minus'.","13422":"If the number is zero, the subroutine returns leaving 00 00 00 00 00 unchanged.","13426":"B is set to +00 hex for 'negate'.","13428":"If the first byte is zero, the jump is made to deal with a 'small integer'.","13432":"Point to the second byte.","13433":"Get +FF for 'abs', +00 for 'negate'.","13434":"Now +80 for 'abs', +00 for 'negate'.","13436":"This sets bit 7 for 'abs', but changes nothing for 'negate'.","13437":"Now bit 7 is changed, leading to bit 7 of byte 2 reset for 'abs', and simply changed for 'negate'.","13440":"The new second byte is stored.","13441":"HL points to the first byte again.","13442":"Finished.","13443":"Save STKEND in DE.","13444":"Save pointer to the number in HL.","13445":"Fetch the sign in C, the number in DE.","13448":"Restore the pointer to the number in HL.","13449":"Get +FF for 'abs', +00 for 'negate'","13450":"Now +FF for 'abs', no change for 'negate'.","13451":"Now +00 for 'abs', and a changed byte for 'negate': store it in C.","13453":"Store result on the stack.","13456":"Return STKEND to DE.","13457":"Finished.","13461":"If X is zero, just return with zero as the 'last value'.","13462":"Save the pointer to STKEND.","13463":"Store 1 in DE.","13466":"Point to the second byte of X.","13467":"Rotate bit 7 into the carry flag.","13469":"Point to the destination again.","13470":"Set C to zero for positive X and to FF hex for negative X.","13472":"Stack 1 or -1 as required.","13475":"Restore the pointer to STKEND.","13476":"Finished.","13477":"The 'last value', X, is compressed into BC.","13480":"The signal is received.","13484":"Evaluate the 'last value', rounded to the nearest integer; test that it is in range and return it in BC.","13487":"Fetch the required byte.","13488":"Exit by jumping to STACK-A.","13491":"Evaluate the 'last value', rounded to the nearest integer; test that it is in range and return it in BC.","13494":"Make the return address be that of the subroutine STACK-BC.","13498":"Make an indirect jump to the required location.","13500":"Fetch the parameters of the X$","13503":"Decrease the length by 1 to test it.","13506":"If the length was not 1, then jump to give error report A.","13508":"Fetch the single code of the string.","13509":"Does it denote a letter?","13512":"If so, jump to gets its address.","13514":"Reduce range for actual user-defined graphics to 0 - 20 decimal.","13516":"Give report A if out of range.","13518":"Test the range again.","13520":"Give report A if out of range.","13522":"Make range of user-defined graphics 1 to 21 decimal, as for a to u.","13523":"Now make the range 0 to 20 decimal in each case.","13524":"Multiply by 8 to get an offset for the address.","13527":"Test the range of the offset.","13529":"Give report A if out of range.","13531":"Fetch the address of the first user-defined graphic in BC.","13535":"Add C to the offset.","13536":"Store the result back in C.","13537":"Jump if there is no carry.","13539":"Increment B to complete the address.","13540":"Jump to stack the address.","13545":"Save HL on the stack.","13546":"Save BC on the stack.","13547":"Save the value of A in B.","13548":"Get the first byte.","13549":"Point to the second byte.","13550":"OR first byte with second.","13551":"Point to the third byte.","13552":"OR the result with the third byte.","13553":"Point to the fourth byte.","13554":"OR the result with the fourth byte.","13555":"Restore the original value of A.","13556":"And of BC.","13557":"Restore the pointer to the number to HL.","13558":"Return with carry reset if any of the four bytes was non-zero.","13559":"Set the carry flag to indicate that the number was zero, and return.","13561":"Is the 'last-value' zero?","13564":"If so, return.","13567":"Jump forward to LESS THAN ZERO but signal the opposite action is needed.","13569":"The carry flag will be set only if the 'last value' is zero; this gives the correct result.","13572":"Jump forward.","13574":"Clear the A register.","13575":"Point to the sign byte.","13576":"The carry is reset for a positive number and set for a negative number;","13578":"when entered from GREATER-0 the opposite sign goes to the carry.","13579":"Save the result pointer.","13580":"Clear A without disturbing the carry.","13582":"Set the first byte to zero.","13583":"Point to the second byte.","13584":"Set the second byte to zero.","13585":"Point to the third byte.","13586":"Rotate the carry into A, making A one if the carry was set, but zero if the carry was reset.","13587":"Set the third byte to one or zero.","13588":"Ensure that A is zero again.","13589":"Point to the fourth byte.","13590":"Set the fourth byte to zero.","13591":"Point to the fifth byte.","13592":"Set the fifth byte to zero.","13593":"Restore the result pointer.","13595":"Point HL at Y, the second number.","13596":"Test whether Y is zero.","13599":"Restore the pointers.","13600":"Return if Y was zero; X is now the 'last value'.","13601":"Set the carry flag","13602":"and jump back to set the 'last value' to 1.","13604":"Point HL at Y, DE at X.","13605":"Test whether Y is zero.","13608":"Swap the pointers back.","13609":"Return with X as the 'last value' if Y was non-zero.","13610":"Reset the carry flag","13611":"and jump back to set the 'last value' to zero.","13613":"Point HL at Y, DE at X$.","13614":"Test whether Y is zero.","13617":"Swap the pointers back.","13618":"Return with X$ as the 'last value' if Y was non-zero.","13619":"Save the pointer to the number.","13620":"Point to the fifth byte of the string parameters i.e. length-high.","13621":"Clear the A register.","13622":"Length-high is now set to zero.","13623":"Point to length-low.","13624":"Length-low is now set to zero.","13625":"Restore the pointer.","13626":"Return with the string parameters being the 'last value'.","14261":"X","14262":"W","14263":"W, W","14264":"W, W, W","14265":"W, W*W","14266":"W, W*W, W*W","14267":"W, 2*W*W","14268":"W, 2*W*W, 1","14269":"W, 2*W*W-1 = Z","14295":"SIN (PI*W/2) = SIN X (or = COS X)","14270":"W, Z","72":"Save the current values held in these registers.","74":"Now scan the keyboard.","81":"The maskable interrupt is enabled before returning.","83":"The address on the stack points to the error code.","85":"It is transferred to ERR-NR.","88":"The machine is cleared before exiting via SET-STK.","102":"Save the current values held in these registers.","104":"The two bytes of NMIADD must both be zero for the reset to occur.","109":"Note: This should have been 'JR Z'!","111":"Jump to START.","112":"Restore the current values to these registers and return.","116":"Fetch the address.","119":"Increment the pointer.","120":"Set CH-ADD.","123":"Fetch he addressed value and then return.","125":"Return with the carry flag reset if ordinary character code.","128":"Return if the end of the line has been reached.","131":"Return with codes +00 to +0F but with carry set.","134":"Return with codes +18 to +20 again with carry set.","138":"Skip-over once.","139":"Jump forward with codes +10 to +15 (INK to OVER).","143":"Skip-over once more (AT & TAB).","145":"Return with the carry flag set and CH-ADD holding the appropriate address.","656":"Initialise DE to 'no-key'.","659":"C = port address, B = counter.","662":"Read from the port specified.","664":"A pressed key in the line will set its respective bit (from bit 0 - outer key, to bit 4 - inner key).","671":"If three keys are being pressed on the keyboard then the D register will no longer hold +FF - so return if this happens.","667":"Jump forward if none of the five keys in the line are being pressed.","673":"Repeatedly subtract '8' from the preset key value until a key-bit is found.","679":"Copy any earlier key value to the D register.","680":"Pass the new key value to the E register.","681":"If there is a second, or possibly a third, pressed key in this line then jump back.","683":"The line has been scanned so the initial key value is reduced for the next pass.","684":"The counter is shifted and the jump taken if there are still lines to be scanned.","688":"Accept any key value for a pair of keys if the 'D' key is CAPS SHIFT.","691":"Accept the key value for a pair of keys if the 'D' key is SYMBOL SHIFT.","697":"It is however possible for the 'E' key of a pair to be SYMBOL SHIFT - so this has to be considered.","702":"Return with the zero flag set if it was SYMBOL SHIFT and 'another key'; otherwise reset.","703":"Fetch a key value in the DE register pair but return immediately if the zero pair flag is reset.","707":"Start with KSTATE0.","710":"Jump forward if a 'set is free'; i.e. KSTATE0/4 holds +FF.","721":"Fetch the low byte of the address and jump back if the second set has still to be considered.","715":"However if the set is not free decrease its '5 call counter' and when it reaches zero signal then set as free.","728":"Make the necessary tests and return if needed. Also change the key value to a 'main code'.","732":"Look first at KSTATE0.","735":"Jump forward if the codes match - indicating a repeat.","738":"Save the address of KSTATE0.","739":"Now look at KSTATE4.","742":"Jump forward if the codes match - indicating a repeat.","749":"Now consider the first set.","750":"Continue if the set is 'free' but exit from the KEYBOARD subroutine if not.","753":"The code is passed to the E register and to KSTATE0/4.","756":"The '5 call counter' for this set is reset to '5'.","758":"The third system variable of the set holds the REPDEL value (normally 0.7 secs.).","762":"Point to KSTATE3/7.","764":"Fetch MODE.","767":"Fetch FLAGS.","770":"Save the pointer whilst the 'main code' is decoded.","775":"The final code value is saved in KSTATE3/7; from where it is collected in case of a repeat.","776":"Enter the final code value into LAST-K and signal 'a new key'.","783":"Finally return.","784":"Point to the '5 call counter' of the set being used and reset it to '5'.","787":"Point to the third system variable - the REPDEL/REPPER value, and decrement it.","789":"Exit from the KEYBOARD subroutine if the delay period has not passed.","790":"However once it has passed the delay period for the next repeat is to be REPPER.","794":"The repeat has been accepted so the final code value is fetched from KSTATE3/7 and passed to K-END.","798":"Copy the shift byte.","799":"Clear the D register for later.","801":"Move the key number.","802":"Return now if the key was 'CAPS SHIFT' only or 'no-key'.","805":"Jump forward unless the 'E' was SYMBOL SHIFT.","809":"However accept SYMBOL SHIFT and another key; return with SYMBOL SHIFT only.","812":"The base address of the table.","815":"Index into the table and fetch the 'main code'.","817":"Signal 'valid keystroke' before returning.","819":"Copy the 'main code'.","820":"Jump forward if a digit key is being considered; also SPACE, ENTER & both shifts.","824":"Decrement the MODE value.","825":"Jump forward, as needed, for modes 'K', 'L', 'C' & 'E'.","830":"Add the offset.","832":"Return with the 'final code'.","833":"The base address for table 'b'.","836":"Jump forward to use this table if neither shift key is being pressed.","839":"Otherwise use the base address for table 'c'.","842":"Clear the D register.","844":"Index the required table and fetch the 'final code'.","846":"Then return.","847":"The base address for table 'e'","850":"Jump back if using the SYMBOL SHIFT key and a letter key.","854":"Jump forward if currently in 'K' mode.","858":"If CAPS LOCK is set then return with the 'main code'","863":"Also return in the same manner if CAPS SHIFT is being pressed.","865":"However if lower case codes are required then +20 has to be added to the 'main code' to give the correct 'final code'.","868":"Add the required offset and return.","871":"Proceed only with the digit keys. i.e. Return with SPACE (+20), ENTER (+0D) & both shifts (+0E).","874":"Now separate the digit keys into three groups - according to the mode.","875":"Jump with 'K', 'L' & 'C' modes;","878":"and also with 'G' mode.","880":"The base address for table 'f'.","883":"Use this table for SYMBOL SHIFT & a digit key in extended mode.","887":"Jump forward with digit keys '8' and '9'.","891":"Reduce the range +30 to +37 giving +10 to +17.","893":"Return with this 'paper colour code' if the CAPS SHIFT is not being used.","895":"But if it is then the range is to be +18 to +1F instead - indicating an 'ink colour code'.","898":"+38 & +39 go to +02 & +03.","900":"Return with these codes if CAPS SHIFT is not being used. (These are 'BRIGHT' codes.)","902":"Subtract '2' is CAPS SHIFT is being used; giving +00 & +01 (as 'FLASH' codes).","905":"The base address of table 'd'.","908":"Use this table directly for both digit key '9' that is to give GRAPHICS,","912":"and digit key '0' that is to give DELETE.","916":"For keys '1' to '8' make the range +80 to +87.","920":"Return with a value from this range if neither shift key is being pressed.","922":"But if 'shifted' make the range +88 to +8F.","925":"Return directly if neither shift key is being used. (Final codes +30 to +39.)","927":"Use table 'd' if the CAPS SHIFT key is also being pressed.","934":"Reduce the range to give +20 to +29.","936":"Separate the '@' character from the others.","940":"The '-' character has also to be separated.","942":"Return now with the 'final codes' +21, +23 to +29.","943":"Give the '-' character a code of +5F.","946":"Give the '@' character a code of +40.","949":"Disable the interrupt for the duration of a 'beep'.","950":"Save L temporarily.","951":"Each '1' in the L register is to count '4' T states, but take INT (L/4) and count '16' T states instead.","955":"Go back to the original value in L and find how many were lost by taking INT (L/4).","961":"The base address of the timing loop.","965":"Alter the length of the timing loop. Use an earlier starting point for each '1' lost by taking INT (L/4).","967":"Fetch the present border colour and move it to bits 2, 1 & 0 of the A register.","975":"Ensure the MIC output is 'off'.","977":"Add '4' T states for each earlier entry port that is used.","980":"The values in the B & C registers will come from H & L registers - see below.","982":"The 'timing loop'.","983":"i.e. 'BC' * '4' T states.","985":"(But note that at the half-cycle point - C will be equal to 'L+1'.)","991":"Flip bit 4.","993":"Perform the OUT operation; leaving the border unchanged.","995":"Reset the B register.","996":"Save the A register.","997":"Jump if at the half-cycle point.","1001":"Jump forward if the last complete pass has been made already.","1005":"Fetch the saved value.","1006":"Reset the C register.","1007":"Decrease the pass counter.","1008":"Jump back to the required starting location of the loop.","1010":"Reset the C register.","1011":"Add '16' T states as this path is shorter.","1012":"Jump back.","1014":"Enable interrupt.","1015":"Finally return.","1016":"The floating-point calculator is used to manipulate the two values - t & P.","1017":"t, P, P","1018":"t, P, i","1019":"t, P, i (mem-0 holds i)","1020":"t, p (where p is the fractional part of P)","1021":"Stack the decimal value 'K'.","1022":"which is a little below 12*(2^0.5)-1","1027":"t, p*K","1029":"t, p*K+1","1028":"t, p*K, 1","1031":"This is 'mem-0-1st (MEMBOT).","1034":"Fetch the exponent of i.","1035":"Give an error if i is not in the integral (short) form.","1038":"Copy the sign byte to the C register.","1041":"Copy the low-byte to the B register.","1046":"Again give report B if i does not satisfy the test: -128<=i<=+127","1052":"Fetch the low-byte and test it further.","1055":"Accept -60<=i<=67.","1058":"Reject -128 to -61.","1061":"Start '6' octaves below middle C.","1064":"Repeatedly reduce i in order to find the correct octave.","1068":"Ass back the last subtraction.","1070":"Save the octave number.","1071":"The base address of the 'semi-tone table'.","1074":"Consider the table and pass the 'A th.' value to the calculator stack. (Call it C.)","1080":"t, pK+1, C","1081":"t, C*(pK+1)","1083":"Fetch the octave number. Multiply the 'last value' by '2 to the power of the octave number'.","1086":"t, f","1087":"The frequency is put aside for the moment in mem-0.","1089":"t, t","1091":"The value 'INT t' must be in the range +00 to +0A.","1098":"t","1099":"t, f","1101":"f*t, t","1100":"f*t","1103":"f*t, f, 437.500","1102":"The value '3.5 * 10^6/8' is formed on the top of the calculator stack.","1108":"f*t, 437.500, f","1109":"f*t, 437.500/f","1113":"f*t, 437.500/f - 30.125","1115":"The 'timing loop' value is compressed into the BC register pair;","1118":"and saved.","1119":"The 'f*t' value is compressed into the BC register pair.","1122":"Move the 'timing loop' value to the HL register pair.","1123":"Move the 'f*t' value to the DE register pair.","1125":"Return if 'f*t' has given the result of 'no cycles' required.","1154":"329.63Hz: E","1149":"311.12Hz: D#","1144":"293.66Hz: D","1139":"277.18Hz: C#","1134":"261.63Hz: C","1159":"349.23Hz: F","1164":"369.99Hz: F#","1169":"392.00Hz: G","1174":"415.30Hz: G#","1179":"440.00Hz: A","1184":"466.16Hz: A#","1189":"493.88Hz: B","1218":"Pre-load the machine stack with the address - SA/LD-RET.","1222":"This constant will give a leader of about 5 secs. for a 'header'.","1225":"Jump forward if SAVEing a header.","1229":"This constant will give a leader of about 2 secs. for a program/data block.","1232":"The flag is saved.","1233":"The 'length' is incremented and the 'base address' reduced to allow for the flag.","1236":"The maskable interrupt is disabled during the SAVE.","1237":"Signal 'MIC on' and border to be RED.","1239":"Give a value to B.","1240":"The main timing period.","1242":"MIC on/off, border RED/CYAN, on each pass.","1246":"The main timing constant.","1248":"Decrease the low counter.","1249":"Jump back for another pulse.","1251":"Allow for the longer path (-reduce by 13 T states).","1252":"Decrease the high counter.","1253":"Jump back for another pulse until completion of the leader.","1258":"MIC off for 667 T states from 'OUT to OUT'.","1260":"MIC on and RED.","1262":"Signal 'MIC off & CYAN'.","1264":"MIC on for 735 T States from 'OUT to OUT'.","1268":"Now MIC off & border CYAN.","1270":"+3B is a timing constant; +0E signals 'MIC off & YELLOW'.","1273":"Fetch the flag and pass it to the L register for 'sending'.","1275":"Jump forward into the SAVEing loop.","1278":"The 'length' counter is tested and the jump taken when it has reached zero.","1282":"Fetch the next byte that is to be SAVEd.","1285":"Fetch the current 'parity'.","1286":"Include the present byte.","1287":"Restore the 'parity'. Note that on entry here the 'flag' value initialises 'parity'.","1288":"Signal 'MIC on & BLUE'.","1290":"Set the carry flag. This will act as a 'marker' for the 8 bits of a byte.","1291":"Jump forward.","1294":"Get final 'parity' value.","1295":"Jump back.","1297":"Come here on the second pass and fetch 'MIC off & YELLOW'.","1298":"Set the zero flag to show 'second pass'.","1300":"The main timing loop; always 801 T states on a 2nd. pass.","1302":"Jump, taking the shorter path, if SAVEing a '0'.","1304":"However if SAVEing a '1' then add 855 T states.","1308":"On the 1st. pass 'MIC on & BLUE' and on the 2nd. pass 'MIC off & YELLOW'.","1310":"Set the timing constant for the second pass.","1312":"Jump back at the end of the first pass; otherwise reclaim 13 T states.","1315":"Clear the carry flag and set A to hold +01 (MIC on & BLUE) before continuing into the '8 bit loop'.","1317":"Move bit 7 to the carry and the 'marker' leftwards.","1319":"SAVE the bit unless finished with the byte.","1322":"Decrease the 'counter'.","1323":"Advance the 'base address'.","1325":"Set the timing constant for the first bit of the next byte.","1327":"Return (to SA/LD-RET) if the BREAK key is being pressed.","1333":"Otherwise test the 'counter and jump back even if it has reached zero (so as to send the 'parity' byte).","1338":"Exit when the 'counter reaches +FFFF. But first give a short delay.","1343":"Save the carry flag. (It is reset after a LOADing error.)","1344":"Fetch the original border colour from its system variable.","1349":"Move the border colour to bits 2, l & 0.","1352":"Set the border to its original colour.","1354":"Read the BREAK key for a last time.","1359":"Enable the maskable interrupt.","1360":"Jump unless a break is to be made.","1364":"Retrieve the carry flag.","1365":"Return to the calling routine.","2465":"Initial byte is stepped over.","2466":"\"Start tape, then press any key.\"","2497":"\"'carriage return' - Program:\"","2507":"\"'carriage return' - Number array:\"","2522":"\"'carriage return' - Character array:\"","2540":"\"'carriage return' - Bytes:\"","1366":"This resets the zero flag. (D cannot hold +FF.)","1367":"The A register holds +00 for a header and +FF for a block of data. The carry flag is reset for VERIFYing and set for LOADing.","1368":"Restore D to its original value.","1369":"The maskable interrupt is now disabled.","1370":"The border is made WHITE.","1374":"Preload the machine stack with the address - SA/LD-RET.","1378":"Make an initial read of port '254'.","1380":"Rotate the byte obtained but keep only the EAR bit,","1385":"Store the value in the C register. - (+22 for 'off' and +02 for 'on' - the present EAR state.)","1383":"Signal 'RED' border.","1386":"Set the zero flag.","1387":"Return if the BREAK key is being pressed.","1388":"Return with the carry flag reset if there is no 'edge' within approx. 14,000 T states. But if an 'edge' is found the border will go CYAN.","1393":"The length of this waiting period will be almost one second in duration.","1403":"Continue only if two edges are found within the allowed time period.","1408":"The timing constant","1413":"Continue only if two edges are found within the allowed time period.","1415":"However the edges must have been found within about 3,000 T states of each other.","1420":"Count the pair of edges in the H register until '256' pairs have been found.","1423":"The timing constant.","1425":"Every edge is considered until two edges are found close together - these will be the start and finishing edges of the 'off' sync pulse.","1435":"The finishing edge of the 'on' pulse must exist. (Return carry flag reset.)","1439":"The border colours from now on will be BLUE & YELLOW.","1443":"Initialise the 'parity matching' byte to zero.","1445":"Set the timing constant for the flag byte.","1447":"Jump forward into the byte LOADING loop.","1449":"Fetch the flags.","1450":"Jump forward only when handling the first byte.","1452":"Jump forward if VERIFYing a tape.","1454":"Make the actual LOAD when required.","1457":"Jump forward to LOAD the next byte.","1459":"Keep the carry flag in a safe place temporarily.","1461":"Return now if the type flag does not match the first byte on the tape. (Carry flag reset.)","1463":"Restore the carry flag now.","1466":"Increase the counter to compensate for its 'decrease' after the jump.","1469":"Fetch the original byte.","1472":"Match it against the new byte.","1473":"Return if 'no match'. (Carry flag reset.)","1474":"Increase the 'destination'.","1476":"Decrease the 'counter'.","1477":"Save the flags.","1478":"Set the timing constant.","1480":"Clear the 'object' register apart from a 'marker' bit.","1482":"Find the length of the 'off' and 'on' pulses of the next bit.","1485":"Return if the time period is exceeded. (Carry flag reset.)","1486":"Compare the length against approx. 2,400 T states; resetting the carry flag for a '0' and setting it fore '1'.","1489":"Include the new bit in the L register.","1493":"Jump back whilst there are still bits to be fetched.","1491":"Set the timing constant for the next bit.","1496":"Fetch the 'parity matching' byte and include the new byte.","1498":"Save it once again.","1499":"Make a further pass if the DE register pair does not hold zero.","1503":"Fetch the 'parity matching' byte.","1504":"Return with the carry flat set if the value is zero. (Carry flag reset if in error.)","1507":"In effect call LD-EDGE-1 twice; returning in between if there is an error.","1511":"Wait 358 T states before entering the sampling loop.","1517":"Count each pass.","1518":"Return carry reset & zero set if 'time-up'.","1519":"Read from port +7FFE.","1521":"i.e. BREAK & EAR.","1523":"Shift the byte.","1524":"Return carry reset & zero reset if BREAK was pressed.","1525":"Now test the byte against the 'last edge-type'; jump back unless it has changed.","1530":"Change the 'last edge-type' and border colour.","1533":"Keep only the border colour.","1535":"Signal 'MIC off'.","1537":"Change the border colour (RED/CYAN or BLUE/YELLOW).","1539":"Signal the successful search before returning.","1541":"Drop the address - SCAN-LOOP.","1542":"Reduce T-ADDR-lo by +E0; giving +00 for SAVE, +01 for LOAD, +02 for VERIFY and +03 for MERGE.","1550":"Pass the parameters of the 'name' to the calculator stack.","1553":"Jump forward if checking syntax.","1558":"Allow seventeen locations for the header of a SAVE but thirty four for the other commands.","1569":"The required amount of space is made in the work space.","1570":"Copy the start address to the IX register pair.","1573":"A program name can have up to ten characters but first enter eleven space characters into the prepared area.","1581":"A null name is +FF only.","1586":"The parameters of the name are fetched and its length is tested.","1585":"The parameters of the name are fetched and its length is tested.","1588":"This is '-10'.","1592":"In effect jump forward if the length of the name is not too long. (i.e. No more than ten characters.)","1596":"But allow for the LOADing, VERIFYing and MERGEing of programs with 'null' names or extra long names.","1604":"Jump forward if the name has a 'null' length.","1608":"But truncate longer names.","1611":"Copy the start address to the HL register pair.","1613":"Step to the second location.","1615":"Switch the pointers over and copy the name.","1618":"Is the present code the token 'DATA'?","1621":"Jump if not.","1626":"However it is not possible to have 'MERGE name DATA'.","1631":"Advance CH-ADD.","1632":"Look in the variables area for the array.","1635":"Set bit 7 of the array's name.","1637":"Jump if handling an existing array.","1639":"Signal 'using a new array'.","1642":"Consider the value in T-ADDR and give an error if trying to SAVE or VERIFY a new array.","1650":"Note: This fails to exclude simple strings.","1653":"Jump forward if checking syntax.","1659":"The low length byte goes into the work space; followed by the high length byte.","1658":"Point to the 'low length' of the variable.","1668":"Step past the length bytes.","1669":"Copy the array's name.","1672":"Assume an array of numbers.","1676":"Jump if it is so.","1678":"It is an array of characters.","1679":"Save the 'type' in the first location of the header area.","1682":"Save the pointer in DE.","1683":"Is the next character a ')' ?","1686":"Give report C if it is not.","1688":"Advance CH-ADD.","1689":"Move on to the next statement if checking syntax.","1692":"Return the pointer to the HL register pair before jumping forward. (The pointer indicates the start of an existing array's contents.)","1696":"Is the present code the token SCREEN$'.","1698":"Jump if not.","100":"However it is not possible to have 'MERGE name SCREEN$'.","1708":"Advance CH-ADD.","1703":"However it is not possible to have 'MERGE name SCREEN$'.","1709":"Move on to the next statement if checking syntax.","1712":"The display area and the attribute area occupy +1800 locations and these locations start at +4000;","1723":"these details are passed to the header area in the work space.","1729":"Jump forward.","108":"Is the present code the token 'CODE'?","1731":"Is the present code the token 'CODE'?","1733":"Jump if not.","1735":"However it is not possible to have 'MERGE name CODE'.","1743":"Advance CH-ADD.","1747":"Jump forward if the statement has not finished.","1749":"However it is not possible to have 'SAVE name CODE' by itself.","1756":"Put a zero on the calculator stack - for the 'start'.","1759":"Jump forward.","1761":"Fetch the first number.","1765":"Is the present character a ',' or not?","1767":"Jump if it is - the number was a 'starting address'.","1769":"However refuse 'SAVE name CODE' that does not have a 'start' and a 'length'.","1776":"Put a zero on the calculator stack.","1779":"Jump forward.","1781":"Advance CH-ADD.","1782":"Fetch the 'length'.","1785":"But move on to the next statement now if checking syntax.","1788":"ompress the 'length' into the BC register pair and store it.","1797":"Compress the 'starting address' into the BC register pair and store it.","1806":"Transfer the 'pointer' to the HL register pair as usual.","1808":"Enter the 'type' number.","1812":"Rejoin the other pathways.","1814":"Is the present code the token 'LINE'?","1816":"Jump if it is.","1818":"Move on to the next statement if checking syntax.","1821":"When there are no further parameters an +80 is entered.","1825":"Jump forward.","1827":"However only allow 'SAVE name LINE number'.","1834":"Advance CH-ADD.","1835":"Pass the number to the calculator stack.","1838":"Move on to the next statement if checking syntax.","1841":"Compress the 'line number' into the BC register pair and store it.","1850":"Enter the 'type' number.","1854":"The pointer to the end of the variables area.","1857":"The pointer to the start of the BASIC program.","1861":"Now perform the subtraction to find the length of the 'program + variables'; store the result.","1870":"Repeat the operation but this time storing the length of the 'program' only.","1881":"Transfer the 'pointer' to the HL register pair as usual.","1882":"Jump forward when handling a SAVE command.","1889":"Save the 'destination' pointer.","1890":"Form in the IX register pair the base address of the 'second header area'.","1895":"Make a copy of the base address.","1897":"LOAD seventeen bytes.","1900":"Signal 'header'.","1901":"Signal 'LOAD'.","1902":"Now look for a header.","1905":"Retrieve the base address.","1907":"Go round the loop until successful.","1911":"Ensure that channel 'S' is open.","1914":"Set the scroll counter.","1918":"Signal 'names do not match'.","1920":"Compare the 'new' type against the 'old' type.","1926":"Jump if the 'types' do not match.","1928":"But if they do; signal 'ten characters are to match'.","1930":"Clearly the 'header' is nonsense if 'type 4 or more'.","1934":"The base address of the message block.","1937":"Save the C register whilst the appropriate message is printed.","1944":"Make the DE register pair point to the 'new type' and the HL register pair to the 'old name'.","1949":"Ten characters are to be considered.","1951":"Jump forward if the match is to be against an actual name.","1955":"But if the 'old name' is 'null' then signal 'ten characters already match'.","1958":"Consider each character of the 'new name' in turn.","1960":"Match it against the appropriate character of the 'old name'.","1962":"Do not count it if it does not match.","1965":"Print the 'new' character.","1966":"Loop for ten characters.","1968":"Accept the name only if the counter has reached zero.","1972":"Follow the 'new name' with a 'carriage return'.","1975":"Fetch the pointer.","1976":"'SCREEN$ and CODE' are handled with VERIFY.","1983":"Jump forward if using a LOAD command.","1990":"Jump forward if using a MERGE command; continue with a VERIFY command.","1995":"Save the 'pointer'.","1996":"Fetch the 'number of bytes' as described in the 'old' header.","2002":"Fetch also the number from the 'new' header.","2008":"Jump forward if the 'length' is unspecified.","2012":"Give report R if attempting to LOAD a larger block than has been requested.","2016":"Accept equal 'lengths'.","2021":"Also give report R if trying to VERIFY blocks that are of unequal size. ('Old length' greater than 'new length'.)","2025":"Fetch the 'pointer', i.e. the 'start'.","2026":"This 'pointer' will be used unless it is zero, in which case","2030":"the 'start' found in the 'new' header will be used instead.","2036":"Move the 'pointer' to the IX register pair.","2039":"Jump forward unless using the VERIFY command; with the carry flag signalling 'LOAD'","2047":"Signal 'VERIFY'.","2048":"Signal 'accept data block only' before LOADing the block.","2050":"LOAD/VERIFY a data block.","2053":"Return unless an error.","2056":"Fetch the 'number of bytes' as given in the 'new header'.","2062":"Save the 'destination pointer'.","2063":"Jump forward unless trying to LOAD a previously undeclared array.","2067":"Add three bytes to the length - for the name, the low length & the high length of a new variable.","2071":"Jump forward.","2073":"Fetch the size of the existing 'program+variables or array'.","2080":"Jump forward if no extra room will be required; taking into account the reclaiming of the presently used memory.","2085":"Allow an overhead of five bytes.","2089":"Move the result to the BC register pair and make the test.","2094":"Fetch the 'pointer' anew.","2095":"Jump forward if LOADing a BASIC program.","2101":"Jump forward if LOADing a new array.","2105":"Fetch the 'length' of the existing array by collecting the length bytes from the variables area.","2107":"Point to its old name.","2110":"Add three bytes to the BC length - one for the name and two for the 'length'.","2113":"Save the IX register pair temporarily whilst the old array is reclaimed.","2124":"Find the pointer to the end-marker of the variables area - the '80-byte'.","2128":"Fetch the 'length' of the new array.","2134":"Save this 'length'.","2135":"Add three bytes - one for the name and two for the 'length'.","2138":"'IX+0E' of the old header gives the name of the array.","2141":"The name is saved whilst the appropriate amount of room is made available.","2146":"In effect 'BC' spaces before the 'new 80-byte'.","2147":"The name is entered. The 'length' is fetched and its two bytes are also entered.","2153":"HL now points to the first location that is to be filled with data from the tape.","2154":"This address is moved to the IX register pair;","2157":"the carry flag set; 'data block' is signalled; and the block LOADed.","2163":"Save the 'destination pointer'.","2164":"Find the address of the end-marker of the current variables area - the '80-byte'.","2168":"Save IX temporarily.","2172":"Fetch the 'length' of the new data block.","2178":"Keep a copy of the 'length' whilst the present program and variables areas are reclaimed.","2183":"Save the pointer to the program area and the length of the new data block.","2185":"Make sufficient room available for the new program and its variables.","2188":"Restore the IX register pair.","2192":"The system variable VARS has also to be set for the new program.","2203":"If a line number was specified then it too has to be considered.","2209":"Jump if 'no number'; otherwise set NEWPPC & NSPPC.","2221":"Fetch the 'length'.","2222":"Fetch the 'start'.","2224":"Signal 'LOAD'.","2225":"Signal 'data block' only.","2227":"Now LOAD it.","2230":"Fetch the 'length' of the data block.","2236":"Save a copy of the 'length'.","2237":"Now made 'length+1' locations available in the work space.","2239":"Place an end-marker in the extra location.","2241":"Move the 'start' pointer to the HL register pair.","2242":"Fetch the original 'length'.","2243":"Save a copy of the 'start'.","2244":"Now set the IX register pair for the actual LOAD.","2247":"Signal 'LOAD'.","2248":"Signal 'data block only'.","2250":"LOAD the data block.","2253":"Fetch the 'start' of the new program.","2254":"Initialise DE to the 'start' of the old program.","2258":"Fetch a line number and test it.","2261":"Jump when finished with all the lines.","2263":"Fetch the high line number byte and compare it.","2265":"Jump forward if it does not match but in any case advance both pointers.","2269":"Repeat the comparison for the low line number bytes.","2271":"Now retreat the pointers.","2273":"Jump forward if the correct place has been found for a line of the new program.","2275":"Otherwise find the address of the start of the next old line.","2281":"Go round the loop for each of the 'old lines'.","2283":"Enter the 'new line' and go round the outer loop again.","2288":"Fetch each variable name in turn and test it.","2290":"Return when all the variables have been considered.","2293":"Return when all the variables have been considered.","2294":"Fetch VARS (for the old program).","2297":"Fetch each variable name and test it.","2300":"Jump forward once the end marker is found. (Make an 'addition'.)","2302":"Compare the names 0 st. bytes","2303":"Jump forward to consider it further; returning here if it proves not to match fully.","2305":"Save the new variable's name whilst the next 'old variable' is located.","2310":"Restore the pointer to the DE register pair and go round the loop again.","2313":"Consider bits 7, 6 & 5 only.","2315":"Accept all the variable types except 'long named variables'.","2319":"Make DE point to the first character of the 'new name'.","2321":"Save the pointer to the 'old name'.","2322":"Update both the 'old' and the 'new' pointers.","2324":"Compare the two letters.","2326":"Jump forward if the match fails.","2328":"Go round the loop until the 'last character' is found.","2331":"Fetch the pointer to the start of the 'old' name and jump forward - successful.","2334":"Fetch the pointer and jump back - unsuccessful.","2337":"Signal 'replace' variable.","2339":"Fetch pointer to 'new' name.","2340":"Switch over the registers.","2341":"The zero flag is to be set if there is to be a 'replacement'; reset for an 'addition'.","2342":"Signal 'handling variables'.","2343":"Now make the entry.","2346":"Go round the loop to consider the next new variable.","2348":"Jump if handling an 'addition'.","2350":"Save the flags.","2351":"Save the 'new' pointer whilst the 'old' line or variable is reclaimed.","2365":"Restore the flags.","2366":"Save the flags.","2367":"Make a copy of the 'destination' pointer.","2368":"Find the length of the 'new' variable/line.","2371":"Save the pointer to the 'new' variable/line.","2374":"Fetch PROG - to avoid corruption.","2377":"Save PROG on the stack and fetch the 'new' pointer.","2378":"Save the length.","2379":"Retrieve the flags.","2380":"Jump forward if adding a new variable.","2382":"A new line is added before the 'destination' location.","2389":"Make the room for the new variable.","2383":"Make the room for the new line.","2387":"Jump forward.","2392":"Point to the 1st new location.","2393":"Retrieve the length.","2394":"Retrieve PROG and store it in its correct place.","2399":"Also fetch the 'new' pointer.","2403":"Again save the length and the 'new' pointer.","2405":"Switch the pointers and copy the 'new' variable/line into the room made for it.","2408":"Fetch the 'new' pointer.","2409":"Fetch the length.","2410":"Save the 'old' pointer. (Points to the location after the 'added' variable/line.)","2411":"Remove the variable/line from the work space","2414":"Return with the 'old' pointer in the DE register pair.","2416":"Save the 'pointer'.","2417":"Ensure that channel 'K' is open.","2422":"Signal 'first message'.","2423":"Print the message - Start tape, then press any key.'","2429":"Signal 'screen will require to be cleared'.","2433":"Wait for a key to be pressed.","2436":"Save the base address of the 'header' on the machine stack.","2438":"Seventeen bytes are to be saved.","2441":"Signal 'It is a header'.","2442":"Send the 'header'; with a leading 'type' byte and a trailing 'parity' byte.","2445":"Retrieve the pointer to the 'header'.","2447":"The delay is for fifty interrupts, i.e. one second.","2452":"Fetch the length of the data block that is to be SAVEd.","2458":"Signal 'data block'.","2460":"Fetch the 'start of block pointer' and SAVE the block.","2548":"The current print position.","2551":"If the code represents a printable character then jump.","2556":"Print a question mark for codes in the range +00 - +05.","2560":"And also for codes +18 - +1F.","2564":"Base of 'control' table.","2567":"Move the code to the DE register pair.","2570":"Index into the table and fetch the offset.","2572":"Add the offset and make an indirect jump to the appropriate subroutine.","2595":"Move leftwards by one column.","2596":"Accept the change unless up against the lefthand side.","2607":"Go up one line.","2601":"If dealing with the printer jump forward.","2608":"Set column value.","2610":"Test against top line. Note: This ought to be +19.","2613":"Accept the change unless at the top of the screen.","2615":"Unacceptable so down a line.","2616":"Set to lefthand column.","2618":"Make an indirect return via CL-SET & PO-STORE.","2621":"Fetch P-FLAG and save it on the machine stack.","2625":"Set P-FLAG to OVER 1.","2629":"A 'space'.","2631":"Print the character.","2634":"Fetch the old value of P-FLAG.","2638":"Finished. Note: The programmer has forgotten to exit via PO-STORE.","2639":"Jump forward if handling the printer.","2646":"Set to lefthand column.","2648":"Scroll if necessary.","2651":"Now down a line.","2652":"Make an indirect return via CL-SET & PO-STORE.","2655":"Why again?","2658":"Current column number.","2659":"Move rightwards by two columns and then test.","2661":"The A register will be +00 or +10.","2663":"Exit via PO-FILL.","2665":"The character '?'.","2667":"Now print this character instead.","2669":"Save the first operand in TVDATA-hi and change the address of the 'output' routine to PO-CONT (+0A87).","2677":"The character code will be saved in TVDATA-lo and the address of the 'output' routine changed to PO-TV-2 (+0A6D).","2682":"The 'output' routine is to be changed to PO-CONT (+0A87).","2685":"Save the control character code.","2688":"HL will point to the 'output' routine address.","2691":"Enter the new 'output' routine address and thereby force the next character code to be considered as an operand.","2695":"Restore the original address for PRINT-OUT (+09F4).","2701":"Fetch the control code and the first operand if there are indeed two operands.","2704":"The 'last' operand and the control code are moved.","2706":"Jump forward if handling INK to OVER.","2711":"Jump forward if handling TAB.","2713":"The line number.","2714":"The column number.","2715":"Reverse the column number; i.e. +00 - +1F becomes +1F - +00.","2718":"Must be in range.","2720":"Add in the offset to give C holding +21 - +22.","2723":"Jump forward if handling the printer.","2729":"Reverse the line number; i.e. +00 - +15 becomes +16 - +01.","2732":"If appropriate jump forward.","2735":"The range +16 - +01 becomes +17 - +02.","2737":"And now +18 - +03.","2738":"If printing in the lower part of the screen then consider whether scrolling is needed.","2745":"Give report 5 - Out of screen, REPORT-5 if required.","2751":"Return via CL-SET & PO-STORE.","2754":"Fetch the first operand.","2755":"The current print position.","2758":"Add the current column value.","2759":"Find how many 'spaces', modulo 32, are required and return if the result is zero.","2763":"Use D as the counter.","2764":"Suppress 'leading space'.","2768":"Print 'D number' of spaces.","2776":"Now finished.","2777":"Print the character(s) and continue into PO-STORE.","2780":"Jump forward if handling the printer.","2786":"Jump forward if handling the lower part of the screen.","2792":"Save the values that relate to the main part of the screen. Then return.","2800":"Save the values that relate to the lower part of the screen.","2811":"Then return.","2812":"Save the values that relate to the printer buffer.","2818":"Then return.","2819":"Jump forward if handling the printer.","2825":"Fetch the values relating to the main part of the screen and return if this was the intention.","2845":"Fetch the values relating to the printer buffer.","2837":"Otherwise fetch the values relating to the lower part of the screen.","2852":"Jump forward with ordinary character codes.","2856":"Jump forward with token codes and UDG codes.","2860":"Move the graphic code.","2861":"Construct the graphic form.","2864":"HL has been disturbed so 'fetch' again.","2867":"Make DE point to the start of the graphic form; i.e. MEMBOT.","2870":"Jump forward to print the graphic character.","2872":"This is MEMBOT.","2875":"In effect call the following subroutine twice.","2878":"Determine bit 0 (and later bit 2) of the graphic code.","2881":"The A register will hold +00 or +0F depending on the value of the bit in the code.","2883":"Save the result in C.","2884":"Determine bit 1 (and later bit 3) of the graphic code.","2887":"The A register will hold +00 or +F0.","2889":"The two results are combined.","2890":"The A register holds half the character form and has to be used four times.","2894":"This is done for the upper half of the character form and then the lower.","2898":"Jump forward with token codes.","2902":"UDG codes are now +00 - +0F.","2904":"Save the current position values on the machine stack.","2905":"Fetch the base address of the UDG area and jump forward.","2911":"Now print the token and return via PO-FETCH.","2917":"The current position is saved.","2918":"The base address of the character area is fetched.","2922":"The print address is saved.","2923":"This is FLAGS.","2926":"Allow for a leading space","2928":"Jump forward if the character is not a 'space'.","2932":"But 'suppress' if it is.","2934":"Now pass the character code to the HL register pair.","2937":"The character code is in effect multiplied by 8.","2940":"The base address of the character form is found.","2941":"The current position is fetched and the base address passed to the DE register pair.","2943":"Fetch the column number.","2944":"Move one column rightwards.","2945":"Jump forward unless a new line is indicated.","2949":"Move down one line.","2950":"Column number is +21.","2951":"Jump forward if handling the screen.","2957":"Save the base address whilst the printer buffer is emptied.","2962":"Copy the new column number.","2963":"Test whether a new line is being used.","2965":"If it is see if the display requires to be scrolled.","2969":"Save the position values and the destination address on the machine stack.","2971":"Fetch P-FLAG and read bit 0.","2974":"Prepare the 'OVER-mask' in the B register; i.e. OVER 0 = +00 & OVER 1 - +FF.","2980":"Read bit 2 of P-FLAG and prepare the 'INVERSE-mask' in the C register; i.e. INVERSE 0 = +00 & INVERSE 1 = +FF.","2984":"Set the A register to hold the 'pixel-line' counter and clear the carry flag.","2987":"Jump forward if handling the screen.","2993":"Signal 'printer buffer no longer empty.","2997":"Set the carry flag to show that the printer is being used.","2998":"Exchange the destination address with the base address before entering the loop.","2999":"The carry flag is set when using the printer. Save this flag in F'.","3000":"Fetch the existing 'pixel-line'.","3001":"Use the 'OVER-mask' and then XOR the result with the 'pixel-line' of the character form.","3003":"Finally consider the 'INVERSE-mask'.","3004":"Enter the result.","3005":"Fetch the printer flag and jump forward if required.","3015":"Set the attribute byte only if handling the screen.","3008":"Update the destination address","3009":"Update the 'pixel-line' of the character form.","3010":"Decrease the counter and loop back unless it is zero.","3013":"Make the H register hold a correct high-address for the character area.","3022":"Restore the original destination address and the position values.","3024":"Decrease the column number and increase the destination address before returning.","3027":"Save the printer flag again.","3028":"The required increment value.","3030":"Add the value and pass the result back to the E register.","3032":"Fetch the flag.","3033":"Jump back into the loop.","3035":"The high byte of the destination address is divided by eight and ANDed with +03 to determine which third of the screen is being addressed;","3039":"i.e. 00,01 or 02.","3041":"The high byte for the attribute area is then formed.","3044":"D holds ATTR-T, and E holds MASK-T.","3048":"The old attribute value.","3049":"The values of MASK-T and ATTR-R are taken into account.","3052":"Jump forward unless dealing with PAPER 9.","3058":"The old paper colour is ignored and depending on whether the ink colour is light or dark","3064":"The new paper colour will be black (000) or white (111).","3066":"Jump forward unless dealing with INK 9.","3072":"The old ink colour is ignored and depending on whether the paper colour is light or dark.","3078":"ink colour will be black (000) or white (111).","3080":"Enter the new attribute value and return.","3131":"Save the DE register pair.","3132":"Save HL & BC.","3133":"Print the single character.","3134":"Restore HL & BC.","3135":"Restore DE.","3136":"Finished.","3137":"Save the 'entry number'.","3138":"HL now holds the base address.","3139":"Make the range +01 - ?.","3140":"Wait for an 'inverted character'.","3149":"Fetch the 'entry number' and return with carry set for the first thirty two entries.","3145":"Count through the entries until the correct one is found.","3148":"DE points to the initial character.","3153":"However if the initial character is a letter then a leading space may be needed.","3157":"Return immediately if the printer is being used.","3162":"Pre-load the machine stack with the address of 'CL-SET'.","3165":"Transfer the line number.","3167":"Jump forward if considering 'INPUT ... AT ..'.","3174":"Return, via CL-SET, if the line number is greater than the value; give report 5 if it is less; otherwise continue.","3180":"Jump forward unless dealing an 'automatic listing'.","3186":"Fetch the line counter.","3189":"Decrease this counter.","3190":"Jump forward if the listing is to be scrolled.","3192":"Otherwise open channel 'K', restore the stack pointer, flag that the automatic listing has finished and return via CL-SET.","3208":"Decrease the scroll counter and proceed to give the prompt only if is becomes zero.","3213":"The counter is reset.","3219":"The current values of ATTR-T and MASK-T are saved.","3223":"The current value of P-FLAG is saved.","3227":"Channel 'K' is opened.","3232":"The message 'scroll?' is message '0'. This message is now printed.","3239":"Signal 'clear the lower screen after a keystroke'.","3246":"Signal 'L mode'.","3248":"Signal 'no key yet'.","3250":"Note: DE should be pushed also.","3251":"Fetch a single key code.","3254":"Restore the registers.","3255":"There is a jump forward to REPORT-D - 'BREAK - CONT repeats' - if the keystroke was 'BREAK', 'STOP', 'N' or 'n';","3259":"otherwise accept the keystroke as indicating the need to scroll the display.","3274":"Restore the value of P-FLAG.","3269":"Open channel 'S'.","3278":"Restore the values of ATTR-T and MASK-T.","3282":"The whole display is scrolled.","3285":"The line and column numbers for the start of the line above the lower part of the display are found and saved.","3292":"The corresponding attribute byte for this character area is then found. The HL register pair holds the address of the byte.","3304":"DE points to the first attribute byte of the bottom line.","3307":"The value is fetched.","3308":"The 'lower part' value.","3309":"There are thirty two bytes.","3311":"Exchange the pointers.","3312":"Make the first exchange and then proceed to use the same values for the thirty two attribute bytes of the two lines being handled.","3318":"The line and column numbers of the bottom line of the 'upper part' are fetched before returning.","3330":"The 'out of screen' error is given if the lower part is going to be 'too large' and a return made if scrolling is unnecessary.","3340":"The A register will now hold 'the number of scrolls to be made'.","3342":"The line and column numbers are now saved.","3343":"The 'scroll number', ATTR-T & P-FLAG are all saved.","3352":"The 'permanent' colour items are to be used.","3355":"The 'scroll number' is fetched.","3356":"Save the 'number'.","3360":"The value in DF-SZ is incremented; the B register set to hold the former value and the A register the new value.","3367":"The jump is taken if only the lower part of the display is to be scrolled. (B = old DF-SZ).","3370":"Otherwise S-POSN-hi is incremented and the whole display scrolled. (B = +18)","3373":"Scroll 'B' lines.","3376":"Fetch and decrement the scroll number'.","3378":"Jump back until finished.","3380":"Restore the value of P-FLAG.","3381":"Restore the values of ATTR-T and MASK-T.","3388":"In case S-POSN has been changed CL-SET is called to give a matching value to DF-CC.","3399":"Reset the flag to indicate that the lower screen is being handled, fetch the line and column numbers, and then return.","3405":"A is set to hold +00.","3406":"The current values of ATTR-P and MASK-P are fetched.","3409":"Jump forward if handing the main part of the screen.","3415":"Otherwise use +00 and the value in BORDCR instead.","3419":"Now set ATTR-T & MASK-T.","3425":"Jump forward if dealing with the lower part of the screen (A = +00).","3427":"Otherwise fetch the value of P-FLAG and move the odd bits to the even bits.","3429":"Proceed to copy the even bits of A to P-FLAG.","3435":"The whole of the display is 'cleared'.","3441":"Signal 'do not clear the lower screen after keystroke'.","3443":"Signal 'lower part'.","3445":"Use the permanent values. i.e. ATTR-T is copied from BORDCR.","3448":"The lower part of the screen is now 'cleared' with these values.","3454":"Attribute byte at start of line '22'.","3457":"Fetch ATTR-P.","3460":"The line counter.","3463":"+20 characters per line.","3461":"Jump forward into the loop.","3465":"Go back along the line setting the attribute bytes.","3470":"Loop back until finished.","3472":"It will be two lines in size.","3476":"Open channel 'K'.","3481":"Fetch the address of the current channel and make the output address +09F4 (= PRINT-OUT) and the input address +10A8 (= KEY-INPUT).","3495":"First the output address then the input address.","3498":"As the lower part of the display is being handled the 'lower print line' will be line '23'.","3501":"Return via CL-SET.","3503":"The system variable COORDS is reset to zero.","3509":"Signal 'the screen is clear'.","3513":"Perform the 'house keeping' tasks.","3516":"Open channel 'S'.","3521":"Use the 'permanent' values.","3524":"Now 'clear' the 24 lines of the display.","3529":"Ensure that the current output address is +09F4 (PRINT-OUT).","3538":"Reset the scroll counter.","3542":"As the upper part of the display is being handled the 'upper print line' will be Line '0'.","3545":"The start of the printer buffer.","3548":"Jump forward if handling the printer buffer.","3554":"Transfer the line number.","3555":"Jump forward if handling the main part of the display.","3561":"The top line of the lower part of the display is called 'line +18' and this has to be converted.","3566":"The line & column numbers are saved.","3567":"The line number is moved.","3568":"The address for the start of the line is formed in HL.","3571":"The line & column numbers are fetched back.","3572":"The column number is now reversed and transferred to the DE register pair.","3578":"The required address is now formed; and the address and the line and column numbers are stored by jumping to PO-STORE.","3582":"The entry point after 'scroll?'","3584":"Find the starting address of the line.","3587":"There are eight pixel lines to a complete line.","3589":"Save both counters.","3591":"Jump forward unless dealing at the present moment with a 'third' of the display.","3597":"The result of this manipulation is to leave HL unchanged and DE pointing to the required destination.","3603":"There are +20 characters.","3606":"Decrease the counter as one line is being dealt with.","3607":"Now move the thirty two bytes.","3609":"Again DE is made to point to the required destination.","3610":"This time only thirty two locations away.","3615":"Save the line number in B.","3616":"Now find how many characters there are remaining in the 'third'.","3621":"Pass the 'character total' to the C register.","3622":"Fetch the line number.","3623":"BC holds the 'character total' and a pixel line from each of the characters is 'scrolled'.","3627":"Now prepare to increment the address to jump across a 'third' boundary.","3629":"Increase HL by +0700.","3630":"Jump back if there are any 'thirds' left to consider.","3634":"Fetch the original address.","3635":"Address the next pixel line.","3636":"Fetch the counters.","3637":"Decrease the pixel line counter","3638":"and jump back unless eight lines have been moved.","3640":"The required address in the attribute area and the number of characters in 'B' lines are found.","3643":"The displacement for all the attribute bytes is thirty two locations away.","3648":"The attribute bytes are 'scrolled'.","3650":"The B register is loaded with +01 and CL-LINE is entered.","3652":"The line number is saved for the duration of the subroutine.","3653":"The starting address for the line is formed in HL.","3658":"Save the line number and the pixel line counter.","3659":"Save the address.","3660":"Save the line number in A.","3661":"Find how many characters are involved in 'B mod 8' lines.","3666":"Pass the result to the C register. (C will hold +00 i.e. 256 dec. for a 'third'.)","3667":"Fetch the line number.","3668":"Make the BC register pair hold 'one less' than the number of characters.","3671":"Make DE point to the first character.","3673":"Clear the pixel-byte of the first character.","3675":"Make DE point to the second character and then clear the pixel-bytes of all the other characters.","3678":"For each 'third' of the display HL has to be increased by +0701.","3682":"Now decrease the line number.","3683":"Discard any extra lines and pass the 'third' count to B.","3686":"Jump back if there are still 'thirds' to be dealt with.","3689":"Update the address for each pixel line.","3690":"Fetch the counters.","3691":"Decrease the pixel line counter and jump back unless finished.","3694":"The address of the first attribute byte and the number of bytes are found.","3697":"HL will point to the first attribute byte and DE the second.","3700":"Fetch the value in ATTR-P.","3703":"Jump forward if handling the main part of the screen.","3709":"Otherwise use BORDCR instead.","3712":"Set the attribute byte.","3713":"One byte has been done.","3714":"Now copy the value to all the attribute bytes.","3716":"Restore the line number.","3717":"Set the column number to the lefthand column and return.","3720":"Fetch the high byte.","3721":"Multiply this value by thirty two.","3724":"Go back to the 'eight' line.","3725":"Address the attribute area.","3727":"Restore to the high byte and transfer the address to DE.","3729":"This is always zero.","3730":"The line number.","3731":"Multiply by thirty two.","3736":"Move the result to the BC register pair before returning.","3739":"The line number has to be reversed.","3742":"The result is saved in D.","2543":"In effect '(A mod 8) * 32'.","3743":"In effect '(A mod 8) * 32'.","3746":"1st. line = +00, 2nd. line = +20, etc.","3748":"The low byte goes into L.","3749":"The true line number is fetched.","3750":"In effect '64 +8 * INT (A/8)'","3752":"For the upper 'third' of the display the high byte = +40, middle 'third' = +48, and the lower 'third' = +50.","3754":"The high byte goes to H.","3755":"Finished.","3756":"The maskable interrupt is disabled during COPY.","3757":"The '176' lines.","3759":"The base address of the display.","3762":"Save the base address and the number of the line.","3764":"It is called '176' times.","3767":"Fetch the line number and the base address.","3769":"The base address is updated by '256' locations for each line of pixels.","3770":"Jump forward and hence round the loop again directly for the eight pixel lines of a character line.","3775":"Fetch the low byte.","3776":"Update it by +20 bytes.","3778":"The carry flag will be reset when 'within thirds' of the display.","3779":"Change the carry flag.","3780":"The A register will hold +F8 when within a 'third' but +00 when a new third' is reached.","3783":"The high byte of the address is now updated.","3785":"Jump back until '176' lines have been printed.","3787":"Jump forward to the end routine.","3789":"Disable the maskable interrupt.","3790":"The base address of the printer buffer.","3793":"There are eight pixel lines.","3795":"Save the line number.","3796":"It is called '8' times.","3799":"Fetch the line number.","3800":"Jump back until '8' lines have been printed.","3802":"Stop the printer motor.","3806":"Enable the maskable interrupt and continue into CLEAR-PRB.","3807":"The base address of the printer buffer.","3810":"Reset the printer 'column'.","3813":"Clear the A register.","3814":"Also clear the B register (in effect B holds dec.256).","3815":"The '256' bytes of the printer buffer are all cleared in turn.","3819":"Signal 'the buffer is empty'.","3823":"Set the printer position and return via CL-SET & P0-STORE.","3828":"Copy the pixel-line number.","3829":"The A register will hold +00 until the last two lines are being handled.","3834":"Slow the motor for the last two pixel lines only.","3836":"The D register will hold either +00 or +02.","3837":"Jump forward unless the BREAK key is being pressed.","3842":"But if it is then; stop the motor,","3846":"enable the maskable interrupt,","3847":"clear the printer buffer and exit via the error handling routine 'BREAK-CONT repeats'.","3852":"Fetch the status of the printer.","3855":"Make an immediate return if the printer is not present.","3856":"Wait for the stylus.","3858":"There are thirty two bytes.","3860":"Fetch a byte.","3861":"Update the pointer.","3862":"Eight bits per byte.","3864":"Move D left.","3866":"Move each bit into the carry.","3868":"Move D back again, picking up the carry from E.","3870":"Again fetch the status of the printer and wait for the signal from the encoder.","3878":"'Print' each bit.","3876":"Now go ahead and pass the 'bit' to the printer.","3880":"Decrease the byte counter.","3881":"Jump back whilst there are still bytes; otherwise return.","3884":"The current value is saved on the machine stack.","3888":"Any event that leads to the error handling routine being used will come back to ED-ERROR.","3896":"Return once a key has been pressed.","3899":"Save the code temporarily.","3902":"Fetch the duration of the keyboard click.","3905":"And the pitch.","3908":"Now make the 'pip'.","3911":"Restore the code.","3912":"Pre-load the machine stack with the address of ED-LOOP.","3920":"Also accept ','.","3916":"Accept all character codes, graphic codes and tokens.","3924":"Jump forward if the code represents an editing key.","3928":"INK & PAPER will require two locations.","3931":"Copy the code to 0.","3932":"Jump forward with INK & PAPER'","3936":"Three locations required.","3937":"Jump forward unless dealing with INPUT LINE... .","3944":"Get the second code.","3947":"and put it in E.","3948":"Get another code.","3951":"Save the previous codes.","3952":"Fetch K-CUR.","3955":"Signal 'K mode'.","3959":"Make two or three spaces.","3962":"Restore the previous codes.","3963":"Point to the first location.","3964":"Enter first code.","3965":"cf7d Then enter the second code which will be overwritten if there are only two codes - i.e. with INK & PAPER.","3967":"Jump forward.","3969":"Signal 'K mode'.","3973":"Fetch the cursor position.","3979":"Enter the code into the space and signal that the cursor is to occur at the location after. Then return indirectly to ED-LOOP.","3986":"The code is transferred to the DE register pair.","4000":"EDIT, cursor left, cursor right, cursor down, cursor up, DELETE, ENTER, SYMBOL SHIFT, GRAPHICS","3989":"The base address of the editing key table.","3992":"The entry is addressed and then fetched into E.","3994":"The address of the handling routine is saved on the machine stack.","3996":"The HL register pair is set and an indirect jump made to the required routine.","4009":"Fetch the current line number.","4012":"But jump forward if in 'INPUT mode'.","4019":"Find the address of the start of the current line and hence its number.","4025":"If the line number returned is zero then simply clear the editing area.","4030":"Save the address of the line.","4031":"Move on to collect the length of the line.","4035":"Add +0A to the length and test that there is sufficient room for a copy of the line.","4044":"Now clear the editing area.","4047":"Fetch the current channel address and exchange it for the address of the line.","4051":"Save it temporarily.","4052":"Open channel 'A' so that the line will be copied to the editing area.","4057":"Fetch the address of the line.","4058":"Goto before the line.","4059":"Decrement the current line number so as to avoid printing the cursor.","4062":"Print the BASIC line","4065":"Increment the current line number. Note: The decrementing of the line number does not always stop the cursor from being printed.","4068":"Fetch the start of the line in the editing area and step past the line number and the length to find the address for K-CUR.","4078":"Fetch the former channel address and set the appropriate flags before returning to ED-LOOP.","4083":"Jump forward if in 'INPUT' mode'.","4092":"The next line number is found and a new automatic listing produced.","4097":"'STOP in INPUT' report.","4101":"Jump forward.","4103":"The cursor is moved.","4106":"Jump forward.","4110":"The current character is tested and if it is 'carriage return' then return.","4108":"The current character is tested and if it is 'carriage return' then return.","4112":"Otherwise make the cursor come after the character.","4113":"Set the system variable K-CUR.","4117":"Move the cursor leftwards.","4120":"Reclaim the current character.","4126":"The next two codes from the key-input routine are ignored.","4132":"The address of ED-LOOP and ED-ERROR are discarded.","4134":"The old value of ERR-SP is restored.","4138":"Now return if there were no errors.","4143":"Otherwise make an indirect jump to the error routine.","4145":"DE will hold either E-LINE (for editing) or WORKSP (for INPUTing).","4149":"The carry flag will become set if the cursor is already to be at the start of the line.","4152":"Correct for the subtraction.","4153":"Drop the return address.","4154":"Return via ED-LOOP if the carry flag is set.","4155":"Restore the return address.","4156":"Move the current address of the cursor to BC.","4158":"HL will point to the character in the line after that addressed by DE.","4161":"Fetch a character code.","4162":"Jump forward if the code does not represent INK to TAB.","4168":"Allow for one parameter.","4169":"Fetch the code anew.","4170":"Carry is reset for TAB. ","4172":"Note: This splits off AT & TAB but AT & TAB in this form are not implemented anyway so it makes no difference.","4174":"Jump forward unless dealing with AT & TAB which would have two parameters, if used.","4177":"Prepare for true subtraction.","4178":"The carry flag will be reset when the 'updated pointer' reaches K-CUR.","4181":"For the next loop use the 'updated pointer', but if exiting use the 'present pointer' for K-CUR.","4182":"Note: It is the control character that is deleted when using DELETE.","4185":"Return if in 'INPUT mode'.","4190":"Fetch the current line number and its start address.","4196":"HL now points to the previous line.","4197":"This line's number is fetched.","4203":"The line number is stored.","4206":"A new automatic listing is now produced and channel 'K' re-opened before returning to ED-LOOP.","4214":"Jump back unless dealing with INPUT. LINE.","4220":"Jump back.","4223":"Jump back if using other than channel 'K'.","4229":"Cancel the error number and give a 'rasp' before going around the editor again.","4247":"Save the pointer to the space.","4248":"DE will point to the first character and HL the last.","4251":"The correct amount is now reclaimed.","4255":"The system variables K-CUR and MODE ('K mode') are initialised before fetching the pointer and returning.","4264":"Copy the edit-linear the INPUT-line to the screen if the mode has changed.","4271":"Return with both carry and zero flags reset if no new key has been pressed.","4277":"Otherwise fetch the code and signal that it has been taken","4284":"Save the code temporarily.","4285":"Clear the lower part of the display if necessary; e.g. after 'scroll?';","4292":"Fetch the code.","4293":"Accept all characters and token codes.","4297":"Jump forward with most of the control character codes.","4301":"Jump forward with the 'mode' codes and the CAPS LOCK code.","4305":"Save the code.","4306":"Keep only bit 0.","4173":"C holds +00 (= OFF) or C holds +01 (= ON).","4308":"C holds +00 (= OFF) or C holds +01 (= ON).","4309":"Fetch the code.","4310":"Rotate it once (losing bit 0).","4311":"Increase it by +12 giving for BRIGHT - +13 and INVERSE - +14.","4315":"Jump forward with 'mode' codes.","4320":"Flip bit 3 of FLAGS2. This is the CAPS LOCK flag.","4324":"Jump forward.","4326":"Check the lower limit.","4329":"Reduce the range.","4334":"Has it been changed?","4335":"Enter the new 'mode' code.","4336":"Jump if it has changed;","4338":"otherwise make it 'L mode'.","4340":"Signal 'the mode might have changed.","4344":"Reset the carry flag and return.","4346":"Save the code.","4347":"Make the C register hold the parameter. (+00 to +07)","4350":"A now holds the INK code.","4352":"But if the code was an 'unshifted' code then make A hold the PAPER code.","4357":"Save the parameter.","4363":"Jump forward.","4365":"Fetch the parameter.","4371":"Fetch the channel address.","4376":"Now set the input address.","4379":"Show a code has been found and return.","4381":"Use the permanent colours.","4384":"Signal that the 'mode is to be considered unchanged' and the 'lower screen does not need clearing'.","4392":"Save the current value of S-POSNL.","4396":"Keep the current value of ERR-SP.","4403":"Push this address on to the machine stack to make ED-FULL the entry point following an error.","4408":"Push the value of ECHO-E on to the stack.","4412":"Make HL point to the start of the space and DE the end.","4417":"Now print the line.","4420":"Exchange the pointers and print the cursor.","4424":"Next fetch the Current value of S-POSNL and exchange it with ECHO-E.","4428":"Pass ECHO-E to DE.","4429":"Again fetch the permanent colours.","4432":"Fetch the current line number and subtract the old line number.","4436":"Jump forward if no 'blanking' of lines required.","4438":"Jump forward if not on the same line.","4440":"Fetch the old column number (S-POSNL-lo) and subtract the new column number.","4444":"Jump if no spaces required.","4446":"A 'space'.","4448":"Save the old values.","4449":"Print it.","4452":"Fetch the old values.","4453":"Back again.","4455":"Give out a 'rasp'.","4466":"Cancel the error number.","4470":"Fetch the current value of and jump forward.","4476":"The new position value.","4477":"The 'error address'.","4478":"The old value of ERR-SP is restored.","4482":"Fetch the old value of S-POSNL.","4483":"Save the new position values.","4484":"Set the system variables.","4487":"The old value of S-POSNL goes into ECHO-E.","4491":"X-PTR is cleared in a suitable manner and the return made.","4496":"Point to the last location of the editing area.","4499":"Clear the carry flag.","4501":"Point to the start of the editing area and return if in 'editing mode'.","4510":"Otherwise change DE.","4514":"Return if now intended.","4515":"Fetch STKBOT and then return.","4519":"Each character in turn is examined.","4520":"Is it a number marker?","4522":"It will occupy six locations.","4525":"Reclaim the F-P number.","4528":"Fetch the code again.","4529":"Update the pointer.","4530":"'Carriage return'?","4532":"Back if not. But make a simple return if it is.","4535":"Disable the maskable interrupt.","4536":"The NEW flag.","4538":"The existing value of RAMTOP is preserved.","4542":"Load the alternate registers with the following system variables. All of which will also be preserved.","4555":"Save the flag for later.","4556":"Make the border white in white colour.","4560":"Set the I register to hold the value of +3F.","4564":"Wait 24 T states.","4570":"Transfer the value in DE (START = +FFFF, NEW = RAMTOP).","4572":"Enter the value of +02 into every location above +3FFF.","4578":"Prepare for true subtraction.","4579":"The carry flag will become reset when the top is reached.","4582":"Update the pointer.","4583":"Jump when at top.","4585":"+02 goes to +01.","4586":"But if zero then RAM is faulty. Use current HL as top.","4588":"+01 goes to +00.","4589":"Step to the next test unless it fails.","4591":"HL points to the last actual location in working order.","4592":"Switch registers.","4593":"Restore P-RAMT,RASP/PIP &UDG","4605":"Test the START/NEW flag.","4606":"Jump forward if coming from the NEW command routine.","4608":"Top of physical RAM.","4611":"Last byte of 'U' in character set.","4614":"There are this number of bytes in twenty one letters.","4617":"Switch the pointers.","4618":"Now copy the character forms of the letter 'A' to 'U'.","4620":"Switch the pointers back.","4621":"Point to the first byte.","4622":"Now set UDG.","4625":"Down one location.","4626":"Set the system variables RASP & PIP.","4633":"Set RAMTOP.","4636":"Initialise the system variable CHARS.","4642":"The top location is made to hold +3E.","4647":"The next location is left holding zero.","4648":"These two locations represent the 'last entry'.","4649":"Step down two locations to find the correct value for ERR-SP.","4654":"Interrupt mode 1 is used.","4656":"IY holds +ERR-NR always.","4660":"The maskable interrupt can now be enabled. The real-time clock will be updated and the keyboard scanned every 1/50th of a second.","4661":"The base address of the channel information area.","4667":"The initial channel data is moved from the table to the channel information area.","5551":"PRINT-OUT, KEY-INPUT, 'K'","5556":"PRINT-OUT, REPORT-J, 'S'","5561":"ADD-CHAR, REPORT-J, 'R'","5566":"PRINT-OUT, REPORT-J, 'P' + End marker.","5574":"#FD --> 'K', #FE --> 'S', #FF --> 'R', #00 --> 'K', #01 --> 'K', #02 --> 'S', #03 --> 'P'","4676":"The system variable DATADD is made to point to the last location of the channel data.","4682":"And PROG & VARS to the the location after that.","4688":"The end-marker of the variables area.","4690":"Move on one location to find the value for E-LINE.","4694":"Make the edit-line be a single 'carriage return' character.","4697":"Now enter an end-marker.","4699":"Move on one location to find the value for WORKSP, STKBOT & STKEND.","4709":"Initialise the colour system variables to : FLASH 0, BRIGHT 0, PAPER 7, & INK 0.","4720":"Initialise the system variables REPDEL & REPPER.","4726":"Make KSTATE-0 hold +FF","4729":"Make KSTATE-4 hold +FF","4732":"Next move the initial stream data from its table to the streams area.","4743":"Signal 'printer in use' and clear the printer buffer.","4750":"Set the size of the lower part of the display and clear the whole display.","4757":"Now print the message '© 1982 Sinclair Research Ltd'","5009":"initial byte is stepped over.","5010":"'OK'","5012":"'NEXT without FOR'","5028":"'Variable not found'","5046":"'Subscript wrong'","5062":"'Out of memory'","5074":"'Out of screen'","5087":"'Number too big'","5101":"'RETURN without GOSUB'","5121":"'End of file'","5132":"'STOP statement'","5146":"'Invalid argument'","5162":"'Integer out of range'","5182":"'Nonsense in BASIC'","5199":"'BREAK - CONT repeats'","5219":"'Out of DATA'","5230":"'Invalid file name'","5247":"'No room for line'","5263":"'STOP in INPUT'","5276":"'FOR without NEXT'","5292":"'Invalid I/O device'","5310":"'Invalid colour'","5324":"'BREAK into program'","5342":"'RAMTOP no good'","5356":"'Statement lost'","5370":"'Invalid stream'","5384":"'FN without DEF'","5398":"'Parameter error'","5413":"'Tape loading error'","5431":"comma + space (', ')","5433":"'© 1982 Sinclair Research Ltd'","4764":"Signal 'the lower part will required to be cleared.","4768":"Jump forward into the main execution loop.","4770":"The lower part of the screen is to be two lines in size.","4774":"Produce an automatic listing.","4777":"All the areas from E-LINE onwards are given their minimum configurations.","4780":"Channel 'K' is opened before calling the EDITOR.","4785":"The EDITOR is called to allow the user to build up a BASIC line.","4788":"The current line is scanned for correct syntax.","4791":"Jump forward if the syntax is correct.","4797":"Jump forward if other than channel 'K' is being used.","4867":"The maskable interrupt must be enabled.","4803":"Point to the start of the line with the error.","4806":"Remove the floating-point forms from this line.","4809":"Reset ERR-NR and jump back leaving the listing unchanged.","4815":"Point to the start of the line.","4818":"Set CH-ADD to the start also.","4821":"Fetch any line number into BC.","4824":"Is the line number a valid one?","4826":"Jump if it is so, and add the new line to the existing program.","4829":"Fetch the first character of the line and see if the line is 'carriage return only'.","4832":"If it is then jump back.","4834":"Clear the whole display unless the flag says it is unnecessary.","4841":"Clear the lower part anyway.","4844":"Set the appropriate value for the scroll counter.","4852":"Signal 'line execution'.","4856":"Ensure ERR-NR is correct.","4860":"Deal with the first statement in the line.","4864":"Now the line is interpreted. Note: The address 1303 goes on to the machine stack and is addressed by ERR-SP.","4868":"Signal 'ready for a new key'.","4872":"Empty the printer buffer if CALL NZ,0ECD,COPY-BUFF it has been used.","4879":"Fetch the error number and increment it.","4883":"Save the new value.","4884":"The system variables FLAGX, X-PTR-hi & DEFADD are all set to zero.","4897":"Ensure that stream +00 points to channel 'K'","4896":"Ensure that stream +00 points to channel 'K'","4902":"Clear all the work areas and the calculator stack.","4905":"Signal 'editing mode'.","4909":"Clear the lower screen.","4912":"Signal 'the lower screen will require clearing'.","4916":"Fetch the report value.","4917":"Make a copy in B.","4918":"Jump forward with report numbers '0 to 9'.","4922":"Add the ASCII letter offset value.","4924":"Print the report code and follow it with a 'space'.","4930":"Fetch the report value and use it to identify the required report message.","4934":"Print the message and follow it by a 'comma' and a 'space'.","4944":"Now fetch the current line number and print it as well.","4951":"Follow it by a ':'","4954":"Fetch the current statement number into the BC register pair and print it.","4962":"Clear the editing area.","4965":"Fetch the error number again.","4968":"Increment it as usual.","4969":"If the program was completed successfully there cannot be any 'CONTinuing' so jump.","4971":"If the program halted with 'STOP statement' or 'BREAK into program' CONTinuing will be from the next statement;","4979":"otherwise SUBPPC is unchanged.","4982":"The system variables OLDPPC & OSPCC have now to be made to hold the CONTinuing line and statement numbers.","4988":"The values used will be those in PPC & SUBPPC unless NSPPC indicates that the 'break' occurred before a 'jump'.","4996":"(i.e. after a GO TO statement etc.)","4998":"NSPPC is reset to indicate 'no jump'.","5002":"'K mode' is selected.","5006":"And finally the jump back is made but no program listing will appear until requested.","5461":"'G' has the code '10+07+30'","5463":"Clear BC.","5466":"Jump back to give the report.","5469":"Make the new line number the 'current line'.","5473":"Fetch CH-ADD and save the address in DE.","5477":"Push the address of REPORT-G on to the machine stack.","5480":"ERR-SP will now point to REPORT-G.","5481":"Fetch WORKSP.","5484":"Find the length of the line from after the line number to the 'carriage return' character inclusively.","5487":"Save the length.","5488":"Move the line number to the HL register pair.","5490":"Is there an existing line with this number?","5493":"Jump if there was not.","5495":"Find the length of the 'old' line and reclaim it.","5501":"Fetch the length of the 'new' line and jump forward if it is only a 'line number and a carriage return'.","5507":"Save the length.","5508":"Four extra locations will be needed.","5512":"Make HL point to the location before the 'destination'.","5513":"Save the current value of PROG to avoid corruption when adding a first line.","5518":"Space for the new line is created.","5521":"The old value of PROG is fetched and restored.","5525":"A copy of the line length (without parameters) is taken.","5527":"Make DE point to the end location of the new area and HL to the 'carriage return' character of the new line in the editing area.","5533":"Now copy over the line.","5535":"Fetch the line's number.","5538":"Destination into HL & number into DE.","5539":"Fetch the new line's length.","5540":"The high length byte.","5542":"The low length byte.","5544":"The low line number byte.","5546":"The high line number byte.","5547":"Drop the address of REPORT-G.","5548":"Jump back and this time do produce and automatic listing.","5588":"Jump forward if the flag indicates the lower screen does not require clearing.","5594":"Otherwise signal 'consider the mode as having changed'.","5598":"Call the input subroutine indirectly via INPUT-AD.","5601":"Return with acceptable codes.","5602":"Both the carry flag and the zero flag are reset if 'no key is being pressed'; otherwise signal an error.","5606":"Save the registers.","5608":"Fetch the base address for the current channel information.","5611":"Step past the output address.","5613":"Jump forward.","5615":"Increase the value in the register by +30.","5618":"Again save the registers.","5620":"Fetch the base address for the current channel. This will point to an output address.","5623":"Fetch the low byte.","5625":"Fetch the high byte.","5626":"Move the address to the HL register pair.","5627":"Call the actual subroutine.","5630":"Restore the registers.","5632":"Return will be from here unless an error occurred.","5633":"The value in the A register is doubled and then increased by +16.","5636":"The result is moved to L.","5637":"The address 5C16 is the base address for stream +00.","5639":"Fetch the first byte of the required stream's data;","5641":"then the second byte.","5642":"Give an error if both bytes are zero; otherwise jump forward.","5648":"Reduce the stream data.","5649":"The base address of the whole channel information area.","5652":"Form the required address in this area.","5653":"The HL register pair holds the base address for a particular channel.","5656":"Signal 'using other than channel 'K''.","5660":"Step past the output and the input addresses and make HL point to the channel code.","5664":"Fetch the code.","5665":"The base address of the 'channel code look-up table'.","5668":"Index into this table and locate the required offset; but return if there is not a matching channel code.","5672":"Pass the offset to the DE register pair.","5675":"Jump forward to the appropriate flag setting routine.","5684":"Signal 'using lower screen'.","5688":"Signal 'ready for a key'.","5692":"Signal 'using channel 'K'.","5696":"Jump forward.","5698":"Signal 'using main screen'.","5702":"Signal 'printer not being used'.","5706":"Exit via TEMPS so as to set the colour system variables.","5709":"Signal 'printer in use'.","5714":"Just the single extra location is required.","5717":"Save the pointer.","5718":"Make sure that there is sufficient memory available for the task being undertaken.","5721":"Restore the pointer.","5722":"Alter all the pointers before making the 'room'.","5725":"Make HL hold the new STKEND.","5728":"Switch 'old' and 'new'.","5729":"Now make the 'room' and return.","5732":"These registers are saved.","5733":"Copy the address of the 'position'.","5734":"This is VARS, the first of the fourteen system pointers.","5739":"Fetch the two bytes of the current pointer.","5742":"Exchange the system variable with the address of the 'position'.","5743":"The carry flag will become set if the system variable's address is to be updated.","5747":"Restore the 'position'.","5748":"Jump forward if the pointer is to be left; otherwise change it.","5750":"Save the old value.","5751":"Now add the value in BC to the old value.","5754":"Enter the new value into the system variable - high byte before low byte.","5757":"Point again to the high byte.","5758":"Fetch the old value.","5759":"Point to the next system variable and jump back until all fourteen have been considered.","5763":"Put the old value of STKEND in HL and restore the other registers.","5766":"Now find the difference between the old value of STKEND and the 'position'.","5769":"Transfer the result to BC and add '1' for the inclusive byte.","5772":"Reform the old value of STKEND and pass it to DE before returning.","5775":"Line number zero.","5777":"Consider the other pointer.","5778":"Use line number zero.","5781":"Fetch the high byte and test it.","5784":"Jump back if not suitable.","5786":"Fetch the high byte.","5788":"Fetch the low byte and return.","5790":"Fetch the current value of STKBOT and decrement it to get the last location of the work space.","5794":"Now make 'BC spaces'.","5797":"Point to the first new space and then the second.","5799":"Fetch the old value of WORKSP and restore it.","5804":"Restore BC - number of spaces.","5805":"Switch the pointers.","5806":"Make HL point to the first of the displaced bytes.","5807":"Now return.","5808":"Fetch E-LINE.","5811":"Make the editing area hold only the 'carriage return' character and the end marker.","5819":"Move on to clear the work space.","5823":"Fetch the WORKSP.","5826":"This clears the work space.","5829":"Fetch STKBOT.","5832":"This clears the stack.","5835":"Save STKEND.","5836":"The base of the memory area.","5839":"Set MEM to this address.","5842":"Restore STKEND to the HL register pair before returning.","5844":"Fetch E-LINE.","5848":"Reclaim the memory.","5851":"Move on to consider the next pair of entries.","5852":"Fetch the first of a pair of entries but return if it is zero - the end marker.","5855":"Compare it to the supplied code.","5856":"Point to the second entry.","5857":"Jump back if the correct entry has not been found.","5859":"The carry flag is set upon a successful search.","5861":"The existing data for the stream is fetched.","5864":"Check the code in that stream's channel.","5867":"Prepare to make the stream's data zero.","5870":"Prepare to identify the use of streams +00 to +03.","5873":"The carry flag will be set with streams +04 to +0F.","5875":"Jump forward with these streams; otherwise find the correct entry in the 'initial stream data' table.","5881":"Fetch the initial data for streams +00 to +03.","5884":"Now enter the data; either zero & zero, or the initial values.","5889":"Save the address of the stream's data.","5890":"Fetch the base address of the channel information area and find the channel data for the stream being CLOSEd.","5894":"Step past the subroutine addresses and pick up the code for that channel.","5898":"Save the pointer.","5899":"The base address of the 'CLOSE stream look-up' table.","5902":"Index into this table and locate the required offset.","5905":"Pass the offset to the BC register pair.","5908":"Jump forward to the appropriate routine.","5916":"Fetch the channel information pointer and return.","5918":"The given stream number is taken off the calculator stack.","5921":"Give an error if the stream number is greater than +0F.","5927":"Range now +03 to +12; and now +06 to +24.","5930":"The base address of the stream data area.","5933":"Move the stream code to the BC register pair.","5936":"Index into the data area and fetch the two data bytes into the BC register pair.","5940":"Make the pointer address the first of the data bytes before returning.","5943":"Exchange the stream number","5945":"Fetch the data for the stream.","5948":"Jump forward if both bytes of the data are zero, i.e. the stream was in a closed state.","5952":"Save DE.","5953":"Fetch CHANS - the base address of the channel information and find the code of the channel associated with the stream being OPENed.","5961":"Return DE.","5962":"The code fetched from the channel information area must be 'K', 'S' or 'P'; give an error if it is not.","5974":"Collect the appropriate data in DE.","5977":"Enter the data into the two bytes in the stream information area.","5980":"Finally return.","5981":"Save HL","5982":"Fetch the parameters of the channel code.","5985":"Give an error if the expression supplied is a null expression; i.e. OPEN #5,\"\".","5991":"The length of the expression is saved.","5992":"Fetch the first character.","5993":"Convert lower case codes to upper case ones.","5995":"Move code to the C register.","5996":"The base address of the 'OPEN stream look-up' table.","5999":"Index into this table and locate the required offset.","6002":"Jump back if not found.","6004":"Pass the offset to the BC register pair.","6007":"Make HL point to the start of the appropriate subroutine.","6008":"Fetch the length of the expression before jumping to the subroutine.","6017":"The data bytes will be +01 & +00.","6021":"The data bytes will be +06 & +00.","6025":"The data bytes will be +10 & +00.","6027":"Decrease the length of the expression and give an error if it was not a single character;","6032":"otherwise clear the register, fetch HL and return.","6037":"The stack pointer is saved allowing the machine stack to be reset when the listing is finished. (see PO-SCR,0C55)","6041":"Signal 'automatic listing in the main screen'.","6045":"Clear this part of the screen.","6048":"Switch to the editing area.","6052":"Now clear the lower part of the screen as well.","6058":"Then switch back.","6062":"Signal 'screen is clear'.","6066":"Now fetch the 'current' line number and the 'automatic' line number.","6073":"If the 'current' number is less than the 'automatic' number then jump forward to update the 'automatic' number.","6079":"Save the 'automatic' number.","6083":"Find the address of the start of the 'current' line and produce an address roughly a 'screen before it' (negated).","6089":"Save the 'result' on the machine stack whilst the 'automatic' line address is also found (in HL).","6093":"The 'result' goes to the BC register pair.","6094":"Save the 'result'.","6095":"Find the address of the start of the line after the present 'automatic' line (in DE).","6098":"Restore the 'result'.","6099":"Perform the computation and jump forward if finished.","6102":"Move the next line's address to the HL register pair and collect its line number.","6107":"Now S-TOP can be updated and the test repeated with the new line.","6113":"When E-PPC is less than S-TOP.","6116":"Fetch the top line's number hence its address.","6122":"If the line cannot be found use DE instead.","6125":"The listing is produced.","6128":"The return will be to here unless scrolling was needed to show the current line.","6133":"Use stream +03.","6137":"Use stream +02.","6139":"Signal 'an ordinary listing in the main part of the screen'.","6143":"Open the channel unless checking syntax.","6153":"Jump forward if unchanged.","6149":"With the present character in the A register see if the stream is to be changed.","6152":"Is the present character a ';'?","6155":"Is the present character a ';'?","5138":"Jump if it is.","6164":"A numeric expression must follow, e.g. LIST #5,20","6158":"Jump if it is.","6160":"Is it a ','?","6162":"Jump if it is not.","6170":"Otherwise use zero and also jump forward.","6168":"Jump forward with it.","6175":"Fetch any line or use zero if none supplied.","6178":"If checking the syntax of the edit-line move on to the next statement.","6181":"Line number to BC.","6184":"High byte to A.","6185":"Limit the high byte to the correct range and pass the whole line number to HL.","6189":"Set E-PPC and find the address of the start of this line or the first line after it if the actual line does not exist.","6195":"Flag 'before the current line'.","6197":"Print the whole of a BASIC line.","6200":"This will be a 'carriage return'.","6201":"Jump back unless dealing with an automatic listing.","6213":"Also jump back if there is still part of the main screen that can be used.","6215":"A return can be made at this point if the screen is full and the current line has been printed (E = +00)","6217":"However if the current line is missing from the listing then S-TOP has to be updated and a further line printed (using scrolling).","6229":"Fetch the 'current' line number and compare it.","6236":"Pre-load the D register with the current line cursor.","6238":"Jump forward if printing the 'current' line.","6240":"Load the D register with zero (it is not the cursor) and set E to hold +01 if the line is before the 'current' line and +00 if after. (The carry flag comes from CP-LINES.)","6245":"Save the line marker.","6248":"Fetch the high byte of the line number and make a full return if the listing has been finished.","6254":"The line number can now be printed - with leading spaces.","6257":"Move the pointer on to address the first command code in the line.","6260":"Signal 'leading space allowed'","6264":"Fetch the cursor code and A jump forward unless the cursor is to be printed.","6268":"So print the cursor now.","6269":"Signal 'no leading space now'.","6273":"Save the registers.","6274":"Move the pointer to DE.","6275":"Signal 'not in quotes'.","6282":"Signal 'print in K-mode'.","6284":"Jump forward unless in INPUT mode.","6290":"Signal 'print in L-mode'.","6292":"Fetch the syntax error pointer and jump forward unless it is time to print the error marker.","6300":"Print the error marker now.","6302":"It is a flashing '?'.","6305":"Consider whether to print the cursor.","6308":"Move the pointer to HL now.","6309":"Fetch each character in turn.","6310":"If the character is a 'number marker' then the hidden floating-point form is not to be printed.","6313":"Update the pointer for the next pass.","6314":"Is the character a 'carriage return'?","6316":"Jump if it is.","6318":"Switch the pointer to DE.","6319":"Print the character.","6322":"Go around the loop for at least one further pass.","6324":"Restore the DE register pair and return.","6326":"Is the character a 'number marker'? Return if not.","6329":"Advance the pointer six times so as to step past the 'number marker' and the five locations holding the floating-point form.","6335":"Fetch the current code before returning.","6337":"Save the current register.","6338":"Save the ATTR-T & MASK-T on the machine stack.","6342":"Ensure that FLASH is active.","6352":"Save P-FLAG also on the machine stack.","6346":"Use these modified values for ATTR-T & MASK-T.","6354":"Ensure INVERSE 0, OVER 0, and not PAPER 9 nor INK 9.","6356":"The character is printed.","6359":"The former value of P-FLAG is restored.","6363":"The former values of ATTR-T & MASK-T are also restored before returning.","6369":"Fetch the address of the cursor but return if the correct place is not being considered.","6376":"The current value of MODE is fetched and doubled.","6381":"Jump forward unless dealing with Extended mode or Graphics.","6383":"Add the appropriate offset to give 'E' or 'G'.","6385":"Jump forward to print it.","6390":"Signal 'K-mode'.","6392":"The character 'K'.","6394":"Jump forward to print 'K', if 'the printing is to be in 'K' mode'.","6398":"The 'printing is to be in L-mode' so signal 'L-MODE'.","6400":"Form the character 'L'.","6401":"Jump forward if not in 'C-mode'.","6407":"The character 'C'.","6409":"Save the DE register pair whilst the cursor is printed - FLASHing.","6414":"Return once it has been done.","6415":"The line number held by the system variable is collected.","6418":"The pointer is saved.","6419":"The line number is moved to the register pair and incremented.","6421":"The address of the start of this line is found, or the next line if the actual line number is not being used.","6424":"The number of that line is fetched.","6427":"The pointer to the system variable is restored.","6428":"Return if in 'INPUT mode';","6433":"otherwise proceed to enter the line number into the two locations of the system variable.","6436":"Return when it has been done.","6437":"The A register will hold +20 for a space or +FF for no-space.","6438":"Test the value and return if there is not to be a space.","6440":"Jump forward to print a space","6442":"Clear the A register.","6443":"The 'trial subtraction'.","6444":"Count each 'trial'.","6445":"Jump back until exhausted.","6447":"Restore last 'subtraction' and discount it.","6450":"If no 'subtractions' were possible jump back to see if a space is to be printed.","6452":"Otherwise print the digit.","6455":"Return carry reset if handling a digit code.","6458":"Jump forward to print the digit.","6460":"Also print the control characters and 'space'.","6464":"Signal 'print in K-mode'.","6468":"Jump forward if dealing with the token 'THEN'.","6472":"Jump forward unless dealing with ':'.","6482":"Jump forward if the ':' 'not in quotes', i.e. an inter-statement marker.","6476":"Jump forward to print the ':' if in 'INPUT mode'.","6488":"The ':' is inside quotes and can now be printed.","6490":"Accept for printing all characters except '\"'.","6494":"Save the character code whilst changing the 'quote mode'.","6495":"Fetch FLAGS2 and flip bit 2.","6500":"Enter the amended value and restore the character code.","6504":"Signal 'the next character is to be printed in L-mode'.","6508":"The present character is printed before returning.","6510":"Save the given line number.","6511":"Fetch the system variable and transfer the address to the DE register pair.","6516":"The given line number.","6517":"Compare the given line number against the addressed line number.","6520":"Return if carry reset;","6521":"otherwise address the next line's number.","6525":"Switch the pointers and jump back to consider the next line of the program.","6528":"Fetch the high byte of the addressed line number and compare it. Return if they do not match.","6531":"Next compare the low bytes.","6532":"Return with the carry flag set if the addressed line number has yet to reach the given line number.","6536":"Not used.","6539":"Set CH-ADD to the current byte.","6542":"current byte.","6544":"Decrease 'D' and return if the required statement has been found.","6546":"Fetch the next character code and jump if it does not match the given token code.","6550":"But should it match then return with the carry and the zero flags both reset.","6552":"Update the pointer and fetch the new code.","6554":"Step over any number.","6557":"Update CH-ADD.","6560":"Jump forward if the character is not a '\"'.","6565":"Jump forward if the character is a ':'.","6564":"Otherwise set the 'quotes flag'.","6569":"Jump forward unless the code is the token 'THEN'.","6573":"Read the 'quotes flag' and jump back at the end of each statement (including after 'THEN').","6577":"Jump back unless at the end of a BASIC line.","6581":"Decrease the statement counter and set the carry flag before returning.","6584":"Save the address of the current line or variable.","6585":"Fetch the first byte.","6586":"Jump forward if searching for a 'next line'.","6590":"Jump forward if searching for the next string or array variable.","6594":"Jump forward with simple numeric and FOR-NEXT variables.","6598":"Long name numeric variables only.","6599":"A numeric variable will occupy five locations but a FOR-NEXT control variable will need eighteen locations.","6606":"The carry flag becomes reset for long named variables only; until the final character of the long name is reached.","6607":"Increment the pointer and fetch the new code.","6609":"Jump back unless the previous code was the last code of the variable's name.","6611":"Now jump forward (BC = +0005 or +0012).","6613":"Step past the low byte of the line number.","6614":"Now point to the low byte of the length.","6615":"Fetch the length into the BC register pair.","6618":"Allow for the inclusive byte.","6619":"Point to the first byte of the 'next' line or variable.","6620":"Fetch the address of the previous one and continue into the 'difference' subroutine.","6621":"Prepare for a true subtraction.","6622":"Find the length from one 'start' to the next and pass it to the BC register pair.","6626":"Reform the address and exchange them before returning.","6629":"Use the 'difference' subroutine to develop the appropriate values.","6632":"Save the number of bytes to be reclaimed.","6633":"All the system variable pointers above the area have to be reduced by 'BC' so this number is 2's complemented before the pointers are altered.","6643":"Return the 'first location' address to the DE register pair and reform the address of the first location to the left.","6646":"Save the 'first location' whilst the actual reclamation occurs.","6650":"Now return.","6651":"Pick up the pointer to the edit-line.","6654":"Set the CH-ADD to point to the location before any number.","6658":"Pass the first code to the A register.","6659":"However before considering the code make the calculator's memory area a temporary calculator stack area.","6668":"Compress the line number into the BC register pair.","6665":"Now read the digits of the line number. Return zero if no number exists.","6671":"Jump forward if the number exceeds '65,536'.","6673":"Otherwise test it against '10,000'.","6677":"Give report C if over '9,999'.","6680":"Return via SET-STK that restores the calculator stack to its rightful place.","6683":"Save the other registers throughout the subroutine.","6685":"Clear the A register.","6686":"Jump forward to print a zero rather than '-2' when reporting on the edit-line.","6690":"Move the number to the HL register pair.","6692":"Flag 'no leading spaces'.","6694":"Jump forward to print the number.","6696":"Save the DE register pair.","6697":"Fetch the number into the DE register pair and save the pointer (updated).","6701":"Move the number to the HL register pair and flag 'leading space are to be printed'.","6704":"This is '-1,000'.","6707":"Print a first digit.","6710":"This is '-100'.","6713":"Print the second digit.","6716":"This is '-10'.","6718":"Print the third digit.","6721":"Move any remaining part of the number to the A register.","6722":"Print the digit.","6725":"Restore the registers before returning.","6728":"DEF FN: 1AF9; CAT: 1B14; FORMAT: 1B06; MOVE: 1B0A; ERASE: 1B10; OPEN #: 1AFC; CLOSE #: 1B02; MERGE: 1AE2;","6736":"VERIFY: 1AE1; BEEP: 1AE3; CIRCLE: 1AE7; INK: 1AEB; PAPER: 1AEC; FLASH: 1AED; BRIGHT: 1AEE; INVERSE: 1AEF;","6744":"OVER: 1AF0; OUT: 1AF1; LPRINT: 1AD9; LLIST: 1ADC; STOP: 1A8A; READ: 1AC9; DATA: 1ACC; RESTORE: 1ACF;","6752":"NEW: 1AA8; BORDER: 1AF5; CONTINUE: 1AB8; DIM: 1AA2; REM: 1AA5; FOR: 1A90; GO TO: 1A7D; GO SUB: 1A86;","6760":"INPUT: 1A9F; LOAD: 1AE0; LIST: 1AAE; LET: 1A7A; PAUSE: 1AC5; NEXT: 1A98; POKE: 1AB1; PRINT: 1A9C;","6768":"PLOT: 1AC1; RUN: 1AAB; SAVE: 1ADF; RANDOMIZE: 1AB5; IF: 1A81; CLS: 1ABE; DRAW: 1AD2; CLEAR: 1ABB;","6776":"RETURN: 1A8D; COPY: 1AD6;","6778":"CLASS-01, '=', CLASS-02","6781":"CLASS-06, CLASS-00, 1E67","6785":"CLASS-06, 'THEN', CLASS-05, 1CF0","6790":"CLASS-06, CLASS-00, 1EED","6794":"CLASS-00, 1CEE","6797":"CLASS-00, 1F23","6800":"CLASS-04, '=', CLASS-06, 'TO', CLASS-06, CLASS-05, 1D03","6808":"CLASS-04, CLASS-00, 1DAB","6812":"CLASS-05, 1FCD","6815":"CLASS-05, 2089","6818":"CLASS-05, 2C02","6821":"CLASS-05, 1BB2","6824":"CLASS-00, 11B7","6827":"CLASS-03, 1EA1","6830":"CLASS-05, 17F9","6833":"CLASS-08, CLASS-00, 1E80","6837":"CLASS-03, 1E4F","6840":"CLASS-00, 1E5F","6843":"CLASS-03, 1EAC","6846":"CLASS-00, 0D6B","6849":"CLASS-09, CLASS-00, 22DC","6853":"CLASS-06, CLASS-00, 1F3A","6857":"CLASS-05, 1DED","6860":"CLASS-05, 1E27","6863":"CLASS-03, 1E42","6866":"CLASS-09, CLASS-05, 2382","6870":"CLASS-00, 0EAC","6873":"CLASS-05, 1FC9","6876":"CLASS-05, 17F5","6879":"CLASS-0B","6880":"CLASS-0B","6881":"CLASS-0B","6882":"CLASS-0B","6883":"CLASS-08, CLASS-00, 03F8","6887":"CLASS-09, CLASS-05, 2320","6891":"CLASS-07","6892":"CLASS-07","6893":"CLASS-07","6894":"CLASS-07","6895":"CLASS-07","6896":"CLASS-07","6897":"CLASS-08, CLASS-00, 1E7A","6901":"CLASS-06, CLASS-00, 2294","6905":"CLASS-05, 1F60","6908":"CLASS-06, ',', CLASS-0A, CLASS-00, 1736","6914":"CLASS-06, CLASS-00, 16e5","6918":"CLASS-0A, CLASS-00, 1793","6922":"CLASS-0A, ',', CLASS-0A, CLASS-00, 1793","6928":"CLASS-0A, CLASS-00, 1793","6932":"CLASS-00, 1793","6935":"Signal 'syntax checking'.","6939":"CH-ADD is made to point to the first code after any line number.","6942":"The system variable SUBPPC is initialised to +00 and ERR-NR to +FF.","6950":"Jump forward to consider the first statement of the line.","6952":"Advance CH-ADD along the line.","6953":"The work space is cleared.","6956":"Increase SUBPPC on each passage around the loop.","6959":"But only '127' statements are allowed in a single line.","6962":"Fetch a character.","6963":"Clear the register for later.","6965":"Is the character a 'carriage return'; jump if it is.","6969":"Go around the loop again if it is a ':'.","6973":"Pre-load the machine stack with the return address - STMT-RET.","6977":"Save the command temporarily in the C register whilst CH-ADD is advanced again.","6980":"Reduce the command's code by +CE; giving the range +00 to +31 for the fifty commands.","6982":"Give the appropriate error if not a command code.","6985":"Move the command code to the BC register pair (B holds +00).","6986":"The base address of the syntax offset table.","6989":"The required offset is passed to the C register and used to compute the base address for the command's entries in the parameter table.","6992":"Jump forward into the scanning loop with this address.","6994":"The temporary pointer to theentries in the parameter table.","6997":"Fetch each entry in turn.","6998":"Update the pointer to the entries for the next pass.","7002":"Pre-load the machine stack with the return address - SCAN-LOOP.","7006":"Copy the entry to the C register for later.","7007":"Jump forward if the entry is a 'separator'.","7011":"The base address of the 'command class' table.","7014":"Clear the B register and index into the table.","7016":"Fetch the offset and compute the starting address of the required command class routine.","7019":"Push the address on to the machine stack.","7020":"Before making an indirect jump to the command class routine pass the command code to the A register and set the B register to +FF.","7023":"The current character is fetched and compared to the entry in the parameter table.","7025":"Give the error report if there is not a match.","7028":"Step past a correct character and return.","7030":"The BREAK key is tested after every statement.","7033":"Jump forward unless it has been pressed.","7037":"Jump forward if there is not a 'jump' to be made.","7043":"Fetch the 'new line' number and jump forward unless dealing with a further statement in the editing area.","7050":"A line in the editing area is considered as line '-2'.","7056":"Make HL point to the end marker of the editing area and DE to the location before the start of that area.","7065":"Fetch the number of the next statement to be handled before jumping forward.","7070":"The starting address of the line, or the 'first line after' is found.","7073":"Collect the statement number.","7076":"Jump forward if the required line was found;","7078":"otherwise check the validity of the statement number - must be zero.","7081":"Also check that the 'first line after' is not after the actual 'end of program'.","7086":"Jump forward with valid addresses;","7088":"otherwise signal the error 'OK'.","7091":"Return if syntax is being checked;","7090":"Drop the address - STMT-RET.","7095":"otherwise fetch the address in NXTLIN.","7098":"Return also if the address is after the end of the program - the 'run' is finished.","7102":"Signal 'statement zero' before proceeding.","7103":"Statement zero becomes statement '1'.","7107":"The line number of the line to be used is collected and passed to PPC.","7114":"Now find the 'length' of the line.","7118":"Switch over the values.","7119":"Form the address of the start of the line after in HL and the location before the 'next' line's first character in DE.","7121":"Set NXTLIN for use once the current line has been completed.","7124":"As usual CH-ADD points to the location before the first character to be considered.","7129":"The E register is cleared in case EACH-STMT is used.","7128":"The statement number is","7135":"The statement number minus one goes into SUBPPC.","7131":"Signal 'no jump'.","7139":"A first statement can now be considered.","7142":"However for later statements the 'starting address' has to be found.","7146":"Jump forward unless the statement does not exist.","7150":"Do not proceed unless checking syntax.","7154":"Drop the addresses of SCAN-LOOP & STMT-RET before continuing into STMT-NEXT.","7156":"Fetch the present character.","7157":"Consider the 'next line' if it is a 'carriage return'.","7161":"Consider the 'next statement' if it is a ' : '.","7166":"Otherwise there has been a syntax error.","7181":"A number is fetched but zero is used in cases of default.","7184":"Set the zero flag for later.","7185":"In all cases drop the address - SCAN-LOOP.","7186":"If handling commands of classes 00 & 03 AND syntax is being checked move on now to consider the next statement.","7189":"Save the line pointer in the DE register pair.","7190":"Fetch the pointer to the entries in the parameter table and fetch the address of the required command routine.","7196":"Exchange the pointers back and make an indirect jump to the command routine.","7199":"Look in the variables area to determine whether or not the variable has been used already.","7202":"Initialise FLAGX to +00.","7206":"Jump forward if the variable has been used before.","7208":"Signal 'a new variable'.","7212":"Give an error if trying to use an 'undimensioned array'.","7216":"The parameters of simple string variables and all array variables are passed to the calculator stack. (STK-VARS will 'slice' a string if required.)","7219":"Jump forward if handling a numeric variable.","7225":"Clear the A register.","7226":"The parameters of the string of string array variable are fetched unless syntax is being checked.","7235":"Bit 0 is set only when handling complete simple strings' thereby signalling 'old copy to be deleted'.","7238":"Set STRLEN as required.","7242":"Set DEST as required and return.","7246":"The address - SCAN-LOOP is dropped.","7247":"The assignment is made.","7250":"Move on to the next statement either via CHECK-END if checking syntax, or STMT-RET if in 'run-time'.","7254":"Use FLAGS.","7257":"Save FLAGS or FLAGX.","7258":"Evaluate the next expression.","7261":"Fetch the old FLAGS or FLAGX.","7262":"Fetch the new FLAGS.","7265":"The nature - numeric or string of the variable and the expression must match.","7270":"Jump forward to make the actual assignment unless checking syntax when simply return.","7268":"Give report C if they do not.","7276":"Look in the variables area for the variable being used.","7279":"Save the AF register pair whilst the discriminator byte is tested to ensure that the variable a FOR-NEXT control variable.","7286":"Restore the flags register and jump back to make the variable that has been found the 'variable in assignment'.","7289":"Advance CH-ADD.","7290":"Evaluate each expression in turn - so evaluate the first.","7293":"Give an error report if the separator is not a comma.","7297":"Advance CH-ADD.","7298":"Evaluate the next expression.","7301":"Return as long as the result was numeric; otherwise it is an error.","7308":"Evaluate the next expression.","7311":"This time return if the result indicates a string;","7316":"otherwise give an error report.","7318":"The syntax/run flag is read.","7322":"Signal 'main screen'.","7326":"Only during a 'run' call TEMPS to ensure the temporary colours are the main screen colours.","7329":"Drop the return address - SCAN-LOOP.","7330":"Fetch the low byte of T-ADDR and subtract +13 to give the range +D9 to +DE which are the token codes for INK to OVER.","7335":"Jump forward to change the temporary colours as directed by the BASIC statement.","7338":"Move on to the next statement if checking syntax.","7341":"Now the temporary colour values are made permanent (both ATTR-P & MASK-P).","7347":"This is P-FLAG; and that too has to be considered.","7351":"Move the mask leftwards.","7352":"Impress onto the mask only the even bits of the other byte.","7356":"Restore the result.","7358":"Jump forward if checking syntax.","7363":"Signal 'main screen'.","7367":"Set the temporary colours for the main screen.","7370":"This is MASK-T.","7373":"Fetch its present value but keep only its INK part 'unmasked'.","7376":"Restore the value which now indicates 'FLASH 8; BRIGHT 8; PAPER 8;'.","7377":"Also ensure NOT 'PAPER 9'.","7381":"Fetch the present character before continuing to deal with embedded colour items.","7382":"Deal with the locally dominant colour items.","7385":"Now get the first two operands for PLOT, DRAW or CIRCLE.","7387":"Jump to the cassette handling routine.","7390":"Jump forward if at the end of a line.","7394":"But jump to EXPT-1NUM unless at the end of a statement.","7398":"Do not perform the operation if syntax is being checked.","7408":"Drop the return address - STMT-RET.","7409":"Jump forward if checking syntax.","7417":"Make HL point to the first byte and call TEST-ZERO.","7421":"If the value was 'FALSE' jump to the next line.","7424":"But if 'TRUE' jump to the next statement (after the THEN).","7427":"Jump forward unless a 'STEP' is given.","7431":"Advance CH-ADD and fetch the value of the STEP.","7435":"Move on to the next statement if checking syntax; otherwise jump forward.","7440":"Move on to the next statement if checking syntax;","7443":"otherwise use the calculator to place a '1' on the calculator stack.","7446":"v, l, s","7447":"v, l, s (mem-0 = s)","7448":"v, l","7449":"l, v","7450":"l, v, s","7451":"l, s, v","7453":"The variable is found, or created if needed (v is used).","7456":"Make it a 'memory area'.","7459":"Fetch the variable's single character name.","7461":"Ensure bit 7 of the name is set.","7463":"It will have six locations at least.","7466":"Make HL point after them.","7467":"Rotate the name and jump if it was already a FOR variable.","7470":"Otherwise create thirteen more locations.","7475":"Again make HL point to the LIMIT position.","7476":"The pointer is saved.","7478":"l","7477":"l, s","7479":"-","7481":"The pointer is restored and both pointers exchanged.","7480":"DE still points to 'l'.","7483":"The ten bytes of the LIMIT and the STEP are moved.","7487":"The current line number.","7490":"Exchange the registers before adding the line number to the FOR control variable.","7494":"The looping statement is always the next statement - whether it exists or not.","7500":"Is a 'pass' possible?","7503":"Return now if it is.","7504":"Fetch the variable's name.","7507":"Copy the present line number to NEWPPC.","7513":"Fetch the current statement number and two's complement it.","7518":"Transfer the result to the D register.","7519":"Fetch the current value of CH-ADD.","7522":"The search will be for 'NEXT'.","7524":"Save the variable's name.","7525":"Fetch the current value of NXTLIN.","7529":"The program area is now searched and BC will change with each new line examined.","7532":"Upon return save the pointer.","7536":"Restore the variable's name.","7537":"If there are no further NEXTs then give an error.","7539":"Advance past the NEXT that was found.","7540":"Allow for upper and lower case letters before the new variable name is tested.","7543":"Jump forward if it matches.","7545":"Advance CH-ADD again and jump back if not the correct variable.","7548":"Advance CH-ADD.","7549":"The statement counter in the D register counted statements back from zero so it has to be subtracted from '1'.","7553":"The result is stored.","7552":"The result is stored.","7555":"Now return - to STMT-RET.","7558":"Fetch the present character.","7559":"Jump forward if it is a ' : ' which will indicate there are more statements in the present line.","7563":"Fetch the high byte of the line number and return with carry set if there are no further lines in the program.","7569":"The line number is fetched and passed to NEWPPC.","7576":"Then the length is collected.","7580":"The pointer is saved whilst the address of the end of the line is formed in the BC register pair.","7584":"The pointer is restored.","7585":"Set the statement counter to yero.","7587":"The end-of-line pointer is saved whilst the statements of the line are examined.","7592":"Make a return if there was an 'occurrence';","7593":"otherwise consider the next line.","7595":"Jump to give the error report if the variable was not found.","7605":"The address of the variable is fetched and the name tested further.","7609":"Step past the name.","7610":"Make the variable a temporary 'memory area'.","7614":"v","7615":"v, s","7616":"v+s","7617":"v+s","7620":"Test the new VALUE against the LIMIT","7623":"Return now if the FOR-NEXT loop has been completed.","7624":"Find the address of the low byte of the looping line number.","7631":"Now fetch this line number.","7635":"Followed by the statement number.","7637":"Exchange the numbers before jumping forward to treat them as the destination line of a GO TO command.","7643":"l","7644":"l, v","7645":"l, v, s","7646":"l, v, (1/0)","7647":"l, v, (1/0)","7649":"v, l","7650":"v-l or l-v","7651":"(1/0)","7657":"end-calc","7658":"Set the carry flag and return.","7660":"Come here on each pass, after the first, to move along the READ statement.","7661":"Consider whether the variable has been used before; find the existing entry if it has.","7664":"Jump forward if checking syntax.","7669":"Save the current pointer in X-PTR.","7673":"Fetch the current DATA list pointer and jump forward unless a new DATA statement has to be found.","7681":"The search is for 'DATA'.","7683":"Jump forward if the search is successful.","7690":"Advance the pointer along the DATA list and set CH-ADD.","7693":"Fetch the value and assign it to the variable.","7696":"Fetch the current value of CH-ADD and store it in DATADD.","7700":"Fetch the pointer to the READ statement and clear X-PTR.","7707":"Make CH-ADD once again point to the READ statement.","7710":"GET the present character and CP +2C see if it is a ','.","7713":"If it is then jump back as there are further items;","7715":"otherwise return either via CHECK-END (if checking syntax) or the RET instruction (to STMT-RET).","7719":"Jump forward unless checking syntax.","7724":"Scan the next expression.","7727":"Check for the correct separator - a ',';","7729":"but move on to the next statement if not matched.","7732":"Whilst there are still expressions to be checked go around the loop.","7735":"It is a 'DATA' statement that is to be passed-by.","7737":"Make the BC register pair hold a very high number.","7738":"Look back along the statement for the token.","7740":"Now look along the line for the statement after. (The 'D-1'th statement from the current position).","7746":"Compress the operand into the BC register pair.","7749":"Transfer the result to the HL register pair.","7751":"Now find the address of that line or the 'first line after'.","7754":"Make DATADD point to the location before.","7758":"Return once it is done.","7759":"Fetch the operand.","7762":"Jump forward unless the value of the operand is zero.","7766":"Fetch the two low order bytes of FRAMES instead.","7770":"Now enter the result into the system variable SEED before returning.","7775":"The line number.","7778":"The statement number.","7781":"Jump forward.","7783":"Fetch the operand and transfer it to the HL register pair.","7788":"Set the statement number to zero.","7791":"Give the error message - Integer out of range - with lines over '614139'","7795":"Enter the line number and then the statement number.","7801":"Return; - to STMT-RET.","7802":"The operands are fetched.","7805":"The actual OUT instruction.","7807":"Return; - to STMT-RET.","7812":"Return; - to STMT-RET.","7808":"The operands are fetched.","7813":"The parameter is fetched.","7816":"Give an error if it is too high a number.","7818":"Jump forward with positive numbers but two's complement negative numbers.","7822":"Save the first parameter whilst the second is fetched.","7826":"The first parameter is restored before returning.","7828":"Fetch the 'last value'.","7833":"Fetch the 'last value'.","7836":"In both cases overflow is indicated by a set carry flag.","7838":"Return with all positive numbers that are in range.","7841":"THE 'RUN' COMMAND ROUTINE: The parameter of the RUN command is passed to NEWPPC by calling the GO TO command routine. The operations of 'RESTORE 0' and 'CLEAR 0' are then performed before a return is made.","7847":"Set NEWPPC as required.","7852":"Fetch the operand - using zero by default.","7855":"Jump forward if the operand is other than zero. When called from RUN there is no jump.","7859":"If zero use the existing value in RAMTOP.","7863":"Save the value.","7864":"Next reclaim all the bytes of the present variables area.","7875":"Clear the display area.","7878":"The current value of STKEND.","7881":"This is increased by '50' before being tested. This forms the lower limit.","7888":"RAMTOP will be too low.","7890":"For the upper test the value for RAMTOP is tested against P-RAMT.","7896":"Jump forward if acceptable.","7900":"Now the value can actually be passed to RAMTOP.","7904":"Fetch the address - STMT-RET.","7905":"Fetch the 'error address'.","7906":"Enter a GO SUB stack end marker.","7908":"Leave one location.","7909":"Make the stack pointer point to an empty GO SUB stack.","7910":"Next pass the 'error address' to the stack and save its address in ERR-SP.","7915":"An indirect return is now made to STMT-RET.","7917":"Save the address - STMT-RET.","7918":"Fetch the statement number and increment it.","7922":"Exchange the 'error address' with the statement number.","7923":"Reclaim the use of a location.","7924":"Next save the present line number.","7929":"Return the 'error address' to the machine stack and reset ERR-SP to point to it.","7934":"Return the address - STMT-RET.","7935":"Now set NEWPPC & NSPPC to the required values.","7938":"But before making the jump make a test for room.","7941":"Increase the value taken from STKEND by the value carried into the routine by the BC register pair.","7945":"Jump forward if the result is over +FFFF.","7947":"Try it again allowing for a further eighty bytes.","7954":"Finally test the value against the address of the machine stack.","7956":"Return if satisfactory.","7957":"This is a 'run-time' error and the error marker is not to be used.","7962":"Do not allow any overhead.","7965":"Make the test and pass the result to the BC register before returning.","7971":"Fetch the address - STMT-RET.","7972":"Fetch the 'error address'.","7973":"Fetch the last entry on the GO SUB stack.","7974":"The entry is tested to see if it is the GO SUB stack end marker; jump if it is.","7979":"The full entry uses three locations only.","7980":"Exchange the statement number with the 'error address'.","7981":"Move the statement number.","7982":"Reset the error pointer.","7986":"Replace the address - STMT-RET.","7987":"Jump back to change NEWPPC & NSPPC.","7990":"Replace the end marker and the 'error address'.","7994":"Fetch the operand.","7997":"Wait for a maskable interrupt.","7998":"Decrease the counter.","7999":"If the counter is thereby reduced to zero the PAUSE has come to an end.","8003":"If the operand was zero BC will now hold +FFFF and this value will be returned to zero.","8006":"Jump back unless a key has been pressed.","8015":"Signal 'no key pressed'.","8019":"Now return; - to STMT-RET.","8020":"Form the port address +7FFE and read in a byte.","8022":"Examine only bit 0 by shifting it into the carry position.","8025":"Return if the BREAK key is not being pressed.","8026":"Form the port address +FEFE and read in a byte.","8030":"Again examine bit 0.","8031":"Return with carry reset if both keys are being pressed.","8032":"Jump forward if checking syntax.","8037":"Otherwise bass-by the 'DEF FN' statement.","8042":"Signal 'a numeric variable'.","8046":"Check that the present code is a letter.","8049":"Jump forward if not.","8051":"Fetch the next character.","8052":"Jump forward unless it is a '$'.","8056":"Change bit 6 as it is a string variable.","8060":"Fetch the next character.","8061":"A '(' must follow the variable's name.","8065":"Fetch the next character. ","8066":"Jump forward if it is a ')' as there are no parameters of the function.","8070":"The present code must be a letter.","8076":"Save the pointer in DE.","8077":"Fetch the next character.","8078":"Jump forward unless it is a '$'.","8082":"Otherwise save the new pointer in DE instead.","8083":"Fetch the next character.","8084":"Move the pointer to the last character of the name to the HL register pair.","8085":"Now make six locations after that last character and enter a 'number marker' into the first of the new locations.","8097":"otherwise jump out of the loop.","8095":"If the present character is a ',' then jump back as there should be a further parameter;","8102":"Check that the ')' does exist.","8111":"Fetch the next character.","8112":"Save the nature - numeric or string - of the variable.","8106":"The next character is fetched. It must be an '='.","8116":"Now consider the definition as an expression.","8119":"Fetch the nature of the variable and check that it is of the same type as found for the definition.","8125":"Give an error report if it is required.","8128":"Exit via the CHECK-END subroutine. (Thereby moving on to consider the next statement in the line.)","8131":"Is syntax being checked?","8134":"Fetch the return address but ignore it in 'syntax-time'.","8136":"In 'run-time' make a simple return to the calling routine.","8137":"Prepare to open channel 'P'.","8141":"Prepare to open channel 'S'.","8139":"Jump forward.","8143":"Unless syntax is being checked open a channel.","8149":"Set the temporary colour system variables.","8152":"Call the print controlling subroutine.","8155":"Move on to consider the next statement; via CHECK-END IF checking syntax.","8159":"Get the first character.","8160":"Jump forward if already at the end of the item list.","8165":"Deal with any consecutive position controllers.","8170":"Deal with a single print item.","8173":"Check for further position controllers and print items until there are none left.","8178":"Return now if the present character is a ')';","8181":"Return if changing syntax.","8184":"Print a carriage return character and then return.","8188":"The first character is fetched.","8189":"Jump forward unless it is an 'AT'.","8191":"The two parameters are transferred to the calculator stack.","8193":"The two parameters are transferred to the calculator stack.","8196":"Return now if checking syntax.","8199":"The parameters are compressed into the BC register pair.","8202":"The A register is loaded with the AT control character before the jump is taken.","8206":"Jump forward unless it is a 'TAB'.","8210":"Get the next character.","8211":"Transfer one parameter to the calculator stack.","8214":"Return now if checking syntax.","8217":"The value is compressed into the BC register pair.","8220":"The A register is loaded with the TAB control character.","8222":"Print the control character.","8223":"Follow it with the first value.","8225":"Finally print the second value; then return.","8228":"Return with carry reset if a colour items was found.","8232":"Next consider if the stream is to be changed.","8231":"Continue if none were found.","8235":"Continue unless it was altered.","8236":"Evaluate the expression but return now if checking syntax.","8242":"Test for the nature of the expression.","8246":"If it is string then fetch the necessary parameters;","8249":"but if it is numeric then exit via PRINT-FP.","8252":"Return now if there are no characters remaining in the string;","8254":"otherwise decease the counter.","8256":"Fetch the code and incrementE the pointer.","8258":"The code is printed and a jump taken to consider any further characters.","8261":"Return now if the character is a ')'.","8264":"Return now if the character is a 'carriage return'.","8267":"Make a final test against ':' before returning.","8270":"Get the present character.","8271":"Jump forward if it is a ';'.","8275":"Also jump forward with a character other than a ',';","8279":"but do not actually print the character if checking syntax.","8284":"Load the A register with the 'comma' control code and print it; then jump forward.","8289":"Is it a \"'\"?","8291":"Return now if not any of the position controllers.","8292":"Print 'carriage return' unless checking syntax.","8295":"Fetch the next character.","8296":"If not at the end of a print statement then jump forward;","8302":"The zero flag will be reset if the end of the print statement has not been reached.","8301":"otherwise return to the calling routine.","8304":"Unless the present character is a '#' return with the carry flag set.","8308":"Advance CH-ADD.","8309":"Pass the parameter to the calculator stack.","8312":"Clear the carry flag.","8313":"Return now if checking syntax.","8316":"The value is passed to the A register.","8319":"Give report O if the value is over +FF.","8324":"Use the channel for the stream in question.","8327":"Clear the carry flag and return.","8329":"Jump forward if syntax is being checked.","8334":"Open channel 'K'.","8339":"The lower part of the display is cleared.","8342":"Signal that the lower screen is being handled. Reset all other bits.","8346":"Call the subroutine to deal with the INPUT items.","8349":"Move on to the next statement if checking syntax.","8352":"Fetch the current print position.","8356":"Jump forward if the current position is above the lower screen.","8362":"Otherwise set the print position to the top of the lower screen.","8369":"Now set the scroll counter.","8365":"Reset S-POSN.","8375":"Signal 'main screen'.","8379":"Set the system variables and exit via CLS-LOWER.","8385":"Consider first any position control characters.","8390":"Jump forward if the present character is not a '('.","8394":"Fetch the next character.","8395":"Now call the PRINT command routine to handle the items inside the brackets.","8398":"Fetch the present character.","8399":"Give report C unless the character is a ')'.","8404":"Fetch the next character and jump forward to see if there are any further INPUT items.","8408":"Jump forward if it is not 'LINE'.","8412":"Advance CH-ADD.","8413":"Determine the destination address for the variable.","8416":"Signal 'using INPUT LINE'.","8420":"Give report C unless using a string variable.","8427":"Jump forward to issue the prompt message.","8429":"Jump to consider going round the loop again if the present character is not a letter.","8435":"Determine the destination address for the variable.","8438":"Signal 'not INPUT LINE'.","8442":"Jump forward if only checking syntax.","8448":"The work space is set to null.","8454":"Signal 'string result'.","8456":"Signal 'INPUT mode'.","8458":"Allow the prompt message only a single location.","8461":"Jump forward if using 'LINE'.","8465":"Jump forward if awaiting a numeric entry.","8472":"A string entry will need three locations.","8474":"Bit 6 of FLAGX will become set for a numeric entry.","8476":"The required number of locations is made available.","8477":"A 'carriage return' goes into the last location.","8479":"Test bit 6 of the C register and jump forward if only one location was required.","8484":"A 'double quotes' character goes into the first and second locations.","8489":"The position of the cursor can now be saved.","8492":"Jump forward with 'INPUT LINE'","8498":"Save the current values of CH-ADD & ERR-SP on the machine stack.","8506":"This will be the 'return point' in case of errors.","8510":"Only change the error stack pointer if using channel 'K'.","8520":"Set HL to the start of the INPUT line and remove any floating-point forms. (There will not be any except perhaps after an error.)","8526":"Signal 'no error yet'.","8530":"Now get the INPUT and with the syntax/run flag indicating syntax, check the INPUT for errors; jump if in order; return to IN-VAR-1 if not.","8542":"Get a 'LINE'.","8545":"The cursor address is reset.","8549":"The jump is taken if using other than channel 'K'.","8554":"The input-line is copied to the display and the position in ECHO-E made the current position in the lower screen.","8567":"Signal 'edit mode'.","8569":"Jump forward if handling an INPUT LINE.","8575":"Drop the address IN-VAR-1.","8580":"Reset the ERR-SP to its original address.","8584":"Save the original CH-ADD address in X-PTR.","8588":"Now with the syntax/run flag indicating 'run' make the assignment.","8591":"Restore the original address to CH-ADD and clear X-PTR.","8601":"Jump forward to see if there are further INPUT items.","8603":"The length of the 'LINE' in the work space is found.","8613":"DE points to the start and BC holds the length.","8615":"These parameters are stacked and the actual assignment made.","8621":"Also jump forward to consider further items.","8623":"Handle any print items.","8626":"Handle any position controllers.","8629":"Go around the loop again if there are further items;","8632":"otherwise return.","8633":"Set CH-ADD to point to the first location of the work space and fetch the character.","8640":"Is it a 'STOP'?","8642":"Jump if it is.","8644":"Otherwise make the assignment of the 'value' to the variable.","8650":"Get the present character and check it is a 'carriage return'.","8653":"Return if it is.","8656":"But do not give the error report on the syntax-pass.","8662":"The base address of the channel information for the current channel is fetched and the channel code compared to the character 'K'.","8672":"Return afterwards.","8673":"Consider the next character in the BASIC statement.","8674":"Jump forward to see if the present code represents an embedded 'temporary' colour item.","8677":"Return carry set if not a colour item.","8678":"Fetch the present character.","8679":"Jump back if it is either a ',' or a ';'; otherwise there has been an error.","8690":"Return with the carry flag Set if the code is not in the range +D9 to +DE (INK to OVER).","8697":"The colour item code is preserved whilst CH-ADD is advanced to address the parameter that follows it.","8700":"The token range (+D9 to +DE) is reduced to the control character range (+10 to +15).","8702":"The control character code is preserved whilst the parameter is moved to the calculator stack.","8707":"A return is made at this point if syntax is being checked.","8711":"The control character code is preserved whilst the parameter is moved to the D register.","8717":"The control character is sent out.","8718":"Then the parameter is fetched and sent out before returning.","8721":"Reduce the range and jump forward with INK & PAPER.","8727":"Reduce the range once again and jump forward with FLASH & BRIGHT.","8733":"Prepare to jump with OVER.","8735":"Fetch the parameter.","8736":"Prepare the mask for OVER.","8738":"Now jump.","8740":"Bit 2 of the A register is to be reset for INVERSE 0 and set for INVERSE 1; the mask is to have bit 2 set.","8744":"Save the A register whilst the range is tested.","8745":"The correct range for INVERSE and OVER is only '0-1'.","8750":"Fetch the A register.","8754":"Exit via CO-CHANGE and alter P-FLAG using 'B' as a mask. i.e. Bit 0 for OVER & bit 2 for INVERSE'","8756":"Fetch the parameter.","8757":"Prepare the mask for INK.","8759":"Jump forward with INK.","8761":"Multiply the parameter for PAPER by eight.","8764":"Prepare the mask for PAPER.","8766":"Save the parameter in the C register whilst the range of the parameter is tested.","8767":"Fetch the original value.","8768":"Only allow PAPER/INK a range of '0' to '9'.","8774":"Prepare to alter ATTR-T, MASK-T & P-FLAG.","8777":"Jump forward with PAPER/INK '0' to '7'.","8781":"Fetch the current value of ATTR-T and use it unchanged, by jumping forward, with PAPER/INK '8'.","8784":"But for PAPER/INK '9' the PAPER and INK colours have to be black and white.","8788":"Jump for black INK/PAPER; but continue for white INK/PAPER.","8791":"Move the value to the C register.","8792":"Move the value.","8793":"Now change ATTR-T as needed.","8796":"The bits of MASK-T are set only when using PAPER/INK '8' or '9'.","8800":"Now change MASK-T as needed.","8803":"The appropriate mask is built up in the B register in order to change bits 4 & 6 as necessary.","8808":"The bits of P-FLAG are set only when using PAPER/INK '9'.","8811":"Continue into CO-CHANGE to manipulate P-FLAG.","8812":"The bits, specified by the mask in the B register, are changed in the value and the result goes to form the system variable.","8816":"Move on to address the next system variable.","8817":"Return with the mask in the A register.","8819":"The zero flag will be set for BRIGHT.","8820":"The parameter is fetched and rotated.","8822":"Prepare the mask for FLASH.","8824":"Jump forward with FLASH.","8826":"Rotate an extra time and prepare the mask for BRIGHT.","8829":"Save the value in the C register.","8830":"Fetch the parameter and test its range; only '0', '1' & '8' are allowable.","8839":"Fetch the value.","8843":"Now change the system variable.","8846":"The value is fetched anew.","8847":"The set bit of FLASH/BRIGHT '8' (bit 3) is moved to bit 7 (for FLASH) or bit 6 (for BRIGHT).","8850":"Exit via CO-CHANGE.","8852":"The parameter is fetched and its range is tested.","8859":"The OUT instruction is then used to set the border colour.","8861":"The parameter is then multiplied by eight.","8864":"If the border colour is a 'light' colour then the INK colour in the editing area is to be black - make the jump.","8868":"Change the INK colour.","8870":"Set the system variable as required and return.","8874":"Test that the y co-ordinate (in B) is not greater than 175.","8880":"B now contains 175 minus y.","8881":"A holds b7b6b5b4b3b2b1b0, the bite of B. And now 0b7b6b5b4b3b2b1.","8884":"Now 10b7b6b5b4b3b2.","8886":"Now 010b7b6b5b4b3.","8888":"Finally 010b7b6b2b1b0, so that H becomes 64 + 8*INT (B/64) + B (mod 8), the high byte of the pixel address. C contains X.","8893":"A starts as c7c6c5c4c3c2c1c0.","8895":"And is now c2c1c0c7c6c5c4c3.","8899":"Now c2c1b5b4b3c5c4c3.","8901":"Finally b5b4b3c7c6c5c4c3, so that L becomes 32*INT (B(mod 64)/8) + INT(x/8), the low byte.","8904":"A holds x(mod 8): so the pixel is bit (A - 7) within the byte.","8907":"Y co-ordinate to B, x to C.","8910":"Pixel address to HL.","8913":"B will count A+1 loops to get the wanted bit of (HL) to location 0.","8919":"The bit is 1 for ink, 0 for paper.","8921":"It is put on the calculator stack.","8924":"Y co-ordinate to B, x to C.","8927":"The subroutine is called.","8930":"Exit, setting temporary colours.","8933":"The system variable is set.","8937":"Pixel address to HL.","8940":"B will count A+1 loops to get a zero to the correct place in A.","8942":"The zero is entered.","8944":"Then lined up with the pixel bit position in the byte.","8947":"Then copied to B.","8948":"The pixel-byte is obtained in A.","8949":"P-FLAG is obtained and first tested for OVER.","8956":"OVER 0 first makes the pixel zero.","8954":"Jump if OVER 1.","8957":"Test for INVERSE.","8961":"INVERSE 0 leaves the pixel complemented (OVER 1) or 1 (OVER 0).","8963":"The byte is entered. Its other bits are unchanged in every case.","8964":"Exit, setting attribute byte.","8967":"First number to A.","8970":"Hence to B.","8971":"Save it briefly.","8972":"Second number to A.","8975":"Its sign indicator to E.","8976":"Restore first number.","8977":"Its signs indicator to D.","8978":"Second number to C.","8979":"BC, DE are now as required.","8980":"Modulus of rounded last value to A if possible; else, report error.","8986":"One to C for positive last value.","8988":"Return if value was positive.","8989":"Else change C to +FF (i.e. minus one).","8991":"Finished.","8992":"Get the present character.","8993":"Test for comma.","8995":"If not so, report the error.","8998":"Get next character (the radius).","8999":"Radius to calculator stack.","9002":"Move to consider next statement if checking syntax.","9006":"X, Y, Z","9007":"Z is re-stacked; its exponent is therefore available.","9009":"Get exponent of radius.","9010":"Test whether radius less than 1.","9012":"If not, jump.","9014":"If less, delete it from the stack.","9015":"The stack holds X, Y.","9017":"Just plot the point X, Y.","9020":"X, Y, Z, PI/2.","9022":"Now increase exponent to 83 hex, changing PI/2 into 2*PI.","9024":"X, Y, Z, 2*PI.","9025":"2*PI is copied to mem-5.","9026":"X, Y, Z","9028":"Set the initial parameters.","9031":"Save the arc-count in B.","9032":"X,Y,Z","9033":"X,Y,Z,Z","9034":"X,Y,Z,Z,SIN (PI/A)","9035":"X,Y,Z,Z*SIN (PI/A)","9037":"Z*SIN (PI/A) is half the initial 'arc' length; it is tested to see whether it is less than 0.5.","9040":"If not, the jump is made.","9050":"X,Y,Z,Z*SIN (PI/A)","9042":"Otherwise, Z is deleted from the stack, with the half-arc too; the machine stack is cleared; and a jump is made to plot X, Y.","9051":"(Z*SIN (PI/A) to mem-2 for now)","9052":"X,Y,Z*SIN (PI/A),Z","9053":"X,Y,Z*SIN (PI/A),Z","9054":"X,Y,Z*SIN (PI/A)","9055":"X, Y - Z*SIN (PI/A)","9056":"Y - Z*SIN (PI/A), X","9057":"Y - Z*SIN (PI/A), X, Z","9058":"Y - Z*SIN (PI/A), X+Z","9059":"X+Z is copied to mem-0","9060":"X+Z, Y - Z*SIN (PI/A)","9061":"X+Z, Y-Z*SIN (PI/A), Y-Z*SIN (PI/A)","9062":"sa,sb,sb,sa","9063":"sa,sb,sa,sb","9064":"sa,sb,sa,sb,sb","9065":"sa,sb,sa,sb,sb,sa","9066":"sa,sb,sa,sb,sb,sa,0","9067":"mem-1 is set to zero","9068":"sa,sb,sa,sb,sb,sa","9070":"Incrementing the exponent byte of mem-2 sets mem-2 to 2*Z*SIN(PI/A).","9073":"The last value X+Z is moved from the stack to A and copied to L.","9077":"It is saved in HL.ű","9078":"Y - Z*SIN (PI/A) goes from the stack to A and is copied to H.","9082":"HL now holds the initial point.","9083":"It is copied to COORDS.","9086":"The arc-count is restored.","9087":"The jump is made to DRAW.","9090":"Get the current character.","9091":"If it is a comma, then jump.","9095":"Move on to next statement if checking syntax.","9335":"The final arc is drawn to reach X0+X, Y0+Y (or close the circle).","9098":"Jump to just draw the line.","9101":"Get next character (the angle).","9102":"Angle to calculator stack.","9105":"Move on to next statement if checking syntax.","9108":"X, Y, G are on the stack.","9109":"G is copied to mem-5","9110":"X, Y, G, 0.5","9111":"X, Y, G/2","9112":"X, Y, SIN (G/2)","9113":"X, Y, SIN (G/2), SIN (G/2)","9114":"X, Y, SIN (G/2), (0/1)","9115":"X, Y, SIN (G/2), (1/0)","9118":"just draw a straight line","9123":"SIN (G/2) is copied to mem-0","9124":"X, Y are now on the stack.","9125":"Y is copied to mem-1","9126":"X","9127":"X, X","9128":"X, X' (X' = ABS X)","9129":"X, X', Y","9130":"X, Y, X'","9131":"X, Y, X', Y","9132":"X, Y, X', Y' (Y' = ABS Y)","9133":"X, Y, X'+Y'","9134":"X, Y, X'+Y', SIN (G/2)","9135":"X, Y, (X'+Y')/SIN (G/2)=Z'","9136":"X, Y, Z (Z = ABS Z')","9137":"X, Y, Z, SIN (G/2)","9138":"X, Y, SIN (G/2), Z","9139":"Z is re-stacked to make sure that its exponent is available","9141":"Get exponent of Z.","9142":"If Z is greater than or equal to 1, jump.","9146":"X, Y, SIN (G/2), Z","9147":"X, Y, SIN (G/2)","9148":"X, Y","9150":"Just draw the line from X0, Y0 to X0+X, Y0+Y.","9153":"The subroutine is called.","9156":"Save the arc-counter in B.","9157":"X,Y,SIN(G/2),Z","9158":"X,Y,SIN(G/2)","9159":"X,Y,SIN(G/2),SIN(G/2*A)","9160":"X,Y,SIN(G/2*A),SIN(G/2)","9161":"X,Y,SIN(G/2*A)/SIN(G/2)=W","9162":"W is copied to mem-1","9163":"X,Y","9164":"Y,X","9165":"Y,X,X","9166":"Y,X,X,W","9167":"Y,X,X*W","9168":"X*W is copied to mem-2","9169":"Y,X","9170":"X,Y","9171":"X,Y,Y","9172":"X,Y,Y,W","9173":"X,Y,Y*W","9174":"X,Y,Y*W,X*W","9175":"X,Y,Y*W,X*W,G","9176":"X,Y,Y*W,X*W,G,G/A","9177":"X,Y,Y*W,X*W,G - G/A","9178":"X,Y,Y*W,X*W,G - G/A, ½","9179":"X,Y,Y*W,X*W, G/2 - G/2*A=F","9180":"X,Y,Y*W,X*W, F, F","9181":"X,Y,Y*W,X*W, F, SIN F","9182":"SIN F is copied to mem-5","9183":"X,Y,Y*W,X*W,F","9184":"X,Y,Y*W,X*W, COS F","9185":"COS F is copied to mem-0","9186":"X,Y,Y*W,X*W","9187":"X*W is copied to mem-2","9188":"X,Y,Y*W","9189":"Y*W is copied to mem-1","9190":"X,Y,Y*W,SIN F","9191":"X,Y,Y*W*SIN F","9192":"X,Y,Y*W*SIN F,X*W","9193":"X,Y,Y*W*SIN F,X*W, COS F","9194":"X,Y,Y*W*SIN F,X*W*COS F","9195":"X,Y,Y*W*SIN F+X*W*COS F=U","9196":"X,Y,U,Y*W","9197":"X,Y,Y*W,U","9198":"U is copied to mem-1","9199":"X,Y,Y*W","9200":"X,Y,Y*W, COS F","9201":"X,Y,Y*W*COS F","9202":"X,Y,Y*W*COS F,X*W","9203":"X,Y,Y*W*COS F,X*W, SIN F","9204":"X,Y,Y*W*COS F,X*W*SIN F","9205":"X,Y,Y*W*COS F - X*W*SIN F = V","9206":"V is copied to mem-2","9207":"X, Y, V' (V' = ABS V)","9208":"X, Y, V', U","9209":"X, Y, V', U' (U' = ABS U)","9210":"X, Y, U' + V'","9211":"X, Y","9212":"DE now points to U' + V'","9213":"Get exponent of U' + V'","9214":"If U' + V' is less than 1, just tidy the stack and draw the line from X0, Y0 to X0+X, Y0+Y.","9216":"If U' + V' is less than 1, just tidy the stack and draw the line from X0, Y0 to X0+X, Y0+Y.","9220":"Otherwise, continue with the parameters: X, Y, on the stack.","9222":"Y, X","9224":"Get X0 into A and so on to the stack.","9230":"Y, X, X0","9231":"X0 is copied to mem-0","9232":"Y, X0 + X","9233":"X0+X, Y","9235":"Get Y0 into A and so on to the stack.","9241":"X0+X, Y, Y0","9242":"Y0 is copied to mem-5","9243":"X0+X, Y0+Y","9244":"X0+X, Y0+Y, X0","9245":"X0+X, Y0+Y, X0, Y0","9247":"Restore the arc-counter in B.","9248":"B counts the passes through the loop.","9249":"Jump when B has reached zero.","9251":"Jump into the loop to start.","9254":"Un-1","9255":"Un-1,Un-1","9256":"Un-1,Un-1,COS(G/A)","9257":"Un-1,Un-1*COS(G/A)","9258":"Un-1,Un-1*COS(G/A),Vn-1","9259":"Un-1,Un-1*COS(G/A),Vn-1,SIN(G/A)","9261":"Un-1,Un-1*COS(G/A)-Vn-1*SIN(G/A)=Un","9260":"Un-1,Un-1*COS(G/A),Vn-1*SIN(G/A)","9262":"Un is copied to mem-1","9263":"Un-1","9264":"Un-1,SIN(G/A)","9265":"Un-1*SIN(G/A)","9266":"Un-1*SIN(G/A),Vn-1","9267":"Un-1*SIN(G/A),Vn-1,COS(G/A)","9268":"Un-1*SIN(G/A),Vn-1*COS(G/A)","9269":"Un-1*SIN(G/A)+Vn-1*COS(G/A)=Vn","9270":"Vn is copied to mem-2","9271":"As noted in the text, the stack in fact holds X0+X,Y0+Y, Xn and Yn","9273":"Save the arc-counter.","9274":"X0+X, Y0+y, Xn, Yn","9275":"Yn is copied to mem-0","9276":"X0+X, Y0+Y, Xn","9277":"X0+X, Y0+Y, Xn, Un","9278":"X0+X, Y0+Y, Xn+Un = Xn+1","9279":"X0+X, Y0+Y, Xn+1, Xn+1","9281":"Next Xn', the approximate value of Xn reached by the line-drawing subroutine is copied to A","9284":"and hence to the stack.","9287":"X0+X,Y0+Y,Xn+1,Xn'","9288":"X0+X,Y0+Y,Xn+1,Xn+1,Xn' - Xn' = Un'","9289":"X0+X,Y0+Y,Xn+1,Un',Yn","9290":"X0+X,Y0+Y,Xn+1,Un',Yn,Vn","9291":"X0+X,Y0+Y,Xn+1,Un',YnX0+X,Y0+Y,Xn+1,Un',Yn + Vn = Yn+1","9292":"Yn+1 is copied to mem-0","9293":"X0+X,Y0+Y,Xn+1,Yn+1,Un'","9294":"X0+X,Y0+Y,Xn+1,Yn+1,Un',Yn+1","9296":"Yn', approximate like Xn', is copied to A and hence to the stack.","9302":"X0+X,Y0+Y,Xn+1,Yn+1,Un',Yn+1,Yn'","9303":"X0+X,Y0+Y,Xn+1,Yn+1,Un',Vn'","9305":"The next 'arc' is drawn.","9308":"The arc-counter is restored.","9309":"Jump if more arcs to draw.","9316":"The X-co-ordinate of the end of the last arc that was drawn, say Xz', is copied to the stack.","9311":"The co-ordinates of the end of the last arc that was drawn are now deleted from the stack.","9314":"Y0+Y, X0+X","9323":"Y0+Y, X0+X - Xz'","9324":"X0+X - Xz', Y0+Y","9326":"The Y-co-ordinate is obtained.","9332":"X0+X - Xz', Y0+Y, Yz'","9333":"X0+X - Xz', Y0+Y - Yz'","9338":"Exit, setting temporary colours.","9341":"Z","9342":"Z,Z","9343":"Z, SQR Z","9344":"Z, SQR Z, 2","9347":"Z, 2, SQR Z","9348":"Z, 2/SQR Z","9349":"Z, 2/SQR Z, G","9350":"Z, G, 2/SQR Z","9351":"Z, G*SQR Z/2","9352":"Z, G'*SQR Z/2 (G' = mod G)","9354":"Z, G'*SQR Z/2 = A1, say A1 to A from the stack, if possible.","9357":"If A1 rounds to 256 or more, use 252.","9359":"4*INT (A1/4) to A.","9361":"Add 4, giving the arc-count A.","9363":"Jump if still under 256.","9365":"Here, just use 252 decimal.","9367":"Now save the arc-count.","9368":"Copy it to calculator stack too.","9371":"Z, A","9372":"Z, A, G","9373":"Z, G, A","9374":"Z, G/A","9375":"Z,G/A, G/A","9376":"Z, G/A, SIN (G/A)","9377":"SIN (G/A) is copied to mem-4","9378":"Z, G/A","9379":"Z, G/A, G/A","9380":"Z, G/A, G/A, 0.5","9381":"Z, G/A, G/2*A","9382":"Z, G/A, SIN (G/2*A)","9383":"SIN (G/2*A) is copied to mem-1","9384":"Z, SIN (G/2*A), G/A","9385":"G/A is copied to mem-0","9386":"Z, SIN (G/2*A) = S","9387":"Z, S, S","9388":"Z, S*S","9389":"Z, S*S, S*S","9390":"Z, 2*S*S","9391":"Z, 2*S*S, 1","9392":"Z, 2*S*S - 1","9393":"Z, 1 - 2*S*S = COS (G/A)","9394":"COS (G/A) is copied to mem-3","9395":"Z","9397":"Restore the arc-count to B.","9398":"Finished.","9399":"Z, SIN (G/2*A), G/AABS Y to B; ABS X to C; SGN Y to D; SGN X to E.","9402":"Jump if ABS X is greater than or equal to ABS Y, so that the smaller goes to L, and the larger (later) goes to H.","9407":"Save diag. step (±1,±1) in DE.","9408":"Insert a vertical step (±1, 0) into DE (D holds SGN Y).","9410":"Now jump to set H.","9412":"Return if ABS X and ABS Y RET Z are both zero.","9414":"The smaller (ABS Y here) goes to L.","9415":"ABS X to B here, for H.","9416":"Save the diagonal step here too.","9417":"Hor. step (0, ±1) to DE here.","9419":"Larger of ABS X, ABS Y to H now.","9420":"B to A as well as to H.","9421":"A starts at INT (H/2).","9422":"L is added to A.","9423":"If 256 or more, jump - diag. step.","9425":"If A is less than H, jump for horizontal or vertical step.","9428":"Reduce A by H.","9429":"Restore it to C.","9430":"Now use the exchange resisters.","9431":"Diag. step to B'C'.","9432":"Save it too.","9433":"Jump to take the step.","9435":"Save A (unreduced) in C.","9436":"Step to stack briefly.","9437":"Get exchange registers.","9438":"Step to B'C' now.","9439":"Now take the step: first, COORDS to H'L' as the start point.","9442":"Y-step from B' to A.","9443":"Add in H'.","9444":"Result to B'","9445":"Now the X-step; it will be tested for range (Y will be tested in PLOT).","9447":"Add L' to C' in A, jump on carry for further test.","9450":"Zero after no carry denotes X-position -1, out of range.","9452":"Restore true value to A.","9453":"Value to C' for plotting.","9454":"Plot the step.","9457":"Restore main registers.","9458":"C back to A to continue algorithm.","9459":"Loop back for 8 steps (i.e. H steps).","9461":"Clear machine stack.","9462":"Finished.","9463":"Zero after carry denotes X. position 255, in range.","9467":"The first character is fetched.","9468":"The starting priority marker.","9470":"It is stacked.","9471":"The main re-entry point.","9472":"Index into scanning function table with the code in C.","9478":"Restore the code to A.","9479":"Jump if code not found in table.","9482":"Use the entry found in the table to build up the required address in HL, and jump to it.","9487":"Point to the next character.","9490":"Increase the length count by one.","9491":"Is it a carriage return?","9493":"Report the error if so.","9496":"Is it another '\"'?","9498":"Loop back if it is not.","9500":"Point to next character;","9503":"set zero flag if it is another '\"'.","9505":"Finished.","9506":"Fetch the next character.","9507":"Is it a '('?","9509":"Report the error if it is not.","9511":"Co-ordinates to calculator stack.","9514":"Fetch the current character.","9515":"Is it a ')'?","9517":"Report the error if it is not.","9520":"Test bit 7 of FLAGS.","9536":"The number 32 (decimal) * (x mod 8) + y is formed in A and copied to E.","9525":"x to C, y to B; 0<=x<23","9528":"decimal; 0<=y<=31 decimal.","9531":"CHARS plus 256 decimal gives HL pointing to the character set.","9535":"x is copied to A.","9539":"This is the low byte of the required screen address.","9543":"x is copied to A again","9544":"Now the number 64 (decimal) + 8*INT (x/8) is inserted into D.","9548":"DE now holds the screen address.","9549":"B counts the 96 characters.","9551":"Save the count.","9552":"And the screen pointer.","9553":"And the character set pointer.","9554":"Get first row of screen character.","9555":"Match with row from character set","9556":"Jump if direct match found.","9558":"Now test for match with inverse character (get +00 in A from +FF).","9559":"Jump if neither match found.","9561":"Restore +FF to A.","9562":"Inverse status (+00 or +FF) to C.","9563":"B counts through the other 7 rows.","9565":"Move DE to next row (add 256 dec.).","9566":"Move HL to next row (i.e. next byte).","9567":"Get the screen row.","9568":"Match with row from the ROM.","9569":"Include the inverse status.","9570":"Jump if row fails to match.","9572":"Jump back till all rows done.","9574":"Discard character set pointer.","9575":"And screen pointer.","9576":"Final count to BC.","9577":"Last character code in set plus one.","9579":"A now holds required code.","9580":"One space is now needed in the work space.","9583":"Make the space.","9584":"Put the character into it.","9585":"Jump to stack the character.","9587":"Restore character set pointer.","9588":"Move it on 8 bytes, to the next character in the set.","9592":"Restore the screen pointer.","9593":"And the counter.","9594":"Loop back for the 96 characters.","9596":"Stack the empty string (Length zero).","9597":"Jump to stack the matching character, or the null string if no match is found.","9600":"x to C, y to B. Again, 0<=x<=23","9603":"decimal; 0<=y<=31 decimal.","9604":"x is copied to A and the number 32 (decimal)*x (mod 8)+y is formed in A and copied to L.","9607":"32*x(mod 8)+INT (x/8) is also copied to C.","9611":"L holds low byte of attribute address.","9612":"32*x(mod 8)+INT (x/8) is copied to A.","9613":"88 (decimal)+INT (x/8) is formed in A and copied to H.","9617":"H holds high byte of attribute address.","9618":"The attribute byte is copied to A.","9619":"Exit, stacking the required byte.","9647":"For unary plus, simply move on to the next character and jump back to the main re-entry of SCANNING.","9651":"Fetch the current character.","9652":"Point to the start of the string.","9653":"Save the start address.","9654":"Set the length to zero.","9657":"Call the \"matching\" subroutine.","9660":"Jump if zero reset - no more quotes.","9662":"Call it again for a third quote.","9665":"And again for the fifth, seventh etc.","9667":"If testing syntax, jump to reset bit 6 of FLAGS and to continue scanning.","9672":"Make space in the work space for the string and the terminating quote.","9673":"Get the pointer to the start.","9674":"Save the pointer to the first space.","9675":"Get a character from the string.","9676":"Point to the next one.","9677":"Copy last one to work space.","9678":"Point to the next space.","9679":"Is last character a '\"'?","9681":"If not, jump to copy next one.","9683":"But if it was, do not copy next one;","9684":"if next one is a '\"', jump to copy the one after it;","9687":"otherwise, finished with copying.","9689":"Get true length to BC.","9690":"Restore start of copied string.","9691":"This entry point is used whenever bit 6 is to be reset and a string stacked if executing a line.","9698":"This is done now.","9701":"Jump to continue scanning the","9704":"The 'scanning BRACKET CALL 24FB,SCANNING routine' simply gets the character and calls SCANNING recursively.","9708":"Report the error if no matching bracket;","9713":"then continue scanning.","9717":"Jump to the The 'scanning FN routine'.","9720":"Unless syntax is being checked, jump to calculate a random number.","9725":"Fetch the current value of value SEED","9729":"Put it on the calculator stack.","9734":"The 'last value' is now SEED+1.","9735":"Put the decimal number 75 on the calculator stack.","9738":"'last value' (SEED+1)*75.","9739":"Put the decimal number 65537 on the calculator stack.","9745":"Divide (SEED+1)*75 by 65537 to give a 'remainder' and an 'answer'.","9746":"Discard the 'answer'.","9748":"The 'last value' is now 'remainder' - 1.","9749":"Make a copy of the 'last value'.","9750":"The calculation is finished.","9751":"Use the 'last value' to give the new value for SEED.","9758":"Fetch the exponent of 'last value'.","9760":"Jump forward if the exponent is zero.","9762":"Reduce the exponent, i.e. divide 'last value' by 65536 to give the required 'last value'.","9765":"Jump past the 'PI' routine.","9767":"Test for syntax checking.","9770":"Jump if required.","9772":"Now use the calculator.","9773":"The value of PI/2 is put on the calculator stack as the 'last value'.","9775":"The exponent is incremented thereby doubling the 'last value' giving PI.","9776":"Move on to the next character.","9777":"Jump forward.","9780":"Priority +10 hex, operation code +5A for the 'read-in' subroutine.","9784":"If next char. is '#', jump.","9786":"There will be a numerical argument.","9792":"Reset bit 6 for a string result.","9794":"Test for syntax checking.","9796":"Jump if required.","9798":"Fetch a key-value in DE.","9801":"Prepare empty string; stack it if too many keys pressed.","9805":"Test the key value; stack empty string if unsatisfactory.","9810":"+FF to D for L made (bit 3 set).","9811":"Key-value to E for decoding.","9812":"Decode the key-value.","9815":"Save the ASCII value briefly.","9816":"One space is needed in the work space.","9819":"Make it now.","9820":"Restore the ASCII value.","9821":"Prepare to stack it as a string.","9822":"Its length is one.","9824":"Complete the length parameter.","9826":"Stack the required string.","9829":"Jump forward.","9832":"Check that 2 co-ordinates are given.","9835":"Call the subroutine unless checking syntax;","9838":"then get next character and jump back.","9842":"Check that 2 co-ordinates are given.","9845":"Call the subroutine unless checking syntax;","9848":"then get the next character and jump forward.","9851":"Check that 2 co-ordinates are given.","9854":"Call the subroutine unless checking syntax;","9857":"then get the next character and jump forward.","9860":"Is the character alphanumeric?","9863":"Jump if not a letter or a digit.","9865":"Now jump if it a letter; otherwise continue on into S-DECIMAL.","9869":"Jump forward if a line is being executed.","9874":"The floating-point form is found.","9877":"Set HL to point one past the last digit.","9878":"Six locations are required.","9881":"Make the room in the BASIC line.","9884":"Point to the first free space.","9885":"Enter the number marker code.","9887":"Point to the second location.","9888":"This pointer is wanted in DE.","9889":"Fetch the 'old' STKEND.","9892":"There are 5 bytes to move.","9894":"Clear the carry flag.","9895":"The 'new' STKEND='old' STKEND -5.","9900":"Move the floating-point number from the calculator stack to the line. ","9902":"Put the line pointer in HL.","9903":"Point to the last byte added.","9904":"This sets CH-ADD.","9907":"Jump forward.","9909":"Get the current character.","9910":"Now move on to the next character in turn until the number marker code is found.","9916":"Point to the first byte of the number.","9917":"Move the floating-point number.","9920":"Set CH-ADD.","9923":"Set the numeric marker flag.","9927":"Jump forward.","9929":"Look in the existing variables for the matching entry.","9932":"An error is reported if there is no existing entry.","9935":"Stack the parameters of the string entry/return numeric element base address.","9938":"Fetch FLAGS.","9941":"Test bits 6 and 7 together.","9943":"One or both bits are reset.","9945":"A numeric value is to be stacked.","9946":"Move the number.","9949":"Jump forward.","9951":"Priority +09, operation code +D8.","9954":"Is it a '-'?","9956":"Jump forward if it is 'unary","9958":"Priority 16 dec, operation code +18 hex.","9961":"Is it 'VAL$'?","9963":"Jump forward if it is 'VAL$'.","9965":"The range of the functions is changed from +AF to +C3 to range +00 to +14 hex.","9970":"Priority +04, operation code +F0.","9973":"Is it the function 'NOT'?","9975":"Jump if it is so.","9977":"Check the range again.","9980":"Priority 16 decimal.","9982":"The function range is now +DC +EF.","9984":"Transfer the operation code.","9985":"Separate CODE, VAL and LEN which operate on strings to give numerical results.","9991":"Separate STR$ and CHR$ which operate on numbers to give string results.","9995":"Mark the operation codes. The other operation codes have bits 6 and 7 both set.","9997":"Stack the priority and operation codes before moving on to consider the next part of the expression.","10002":"Fetch the present character.","10003":"Jump forward if it is not a '(', which indicates a parenthesised expression.","10007":"Jump forward if dealing with a numeric parenthesised expression.","10013":"Modify the parameters of the 'last value'.","10016":"Move on to consider the next character.","10019":"Original code to BC to index into table of operators.","10133":"+ : #CF; - : #C3; * : #C4; / : #C5","10141":"^ : #C6; = : #CE; > : #CC; < : #CD","10149":"<= : #C9; >= : #CA; <> : #CB; OR : #C7;","10157":"AND : #C8; End marker","10022":"The pointer to the table.","10025":"Index into the table.","10028":"Jump forward if no operation found.","10030":"Get required code from the table.","10031":"The pointer to the priority table: i.e. 26ED +C3 gives 27B0 as the first address.","10034":"Index into the table.","10035":"Fetch the appropriate priority.","10036":"Get the 'last' operation and priority.","10037":"The priority goes to the A register.","10038":"Compare 'last' against 'present'.","10039":"Exit to wait for the argument.","10041":"Are both priorities zero?","10042":"Exit via GET-CHAR thereby making 'last value' the required result.","10045":"Stack the 'present' values.","10049":"The 'last' operation is compared with the code for USR, which will give 'USR number' unless modified;","10052":"jump if not 'USR'.","10054":"Test bit 6 of FLAGS.","10056":"Jump if it is set ('USR number').","10058":"Modify the 'last' operation code: 'offset' 19, +80 for string input and numerical result ('USR string').","10060":"Stack the 'last' values briefly.","10061":"Do not perform the actual operation if syntax is being checked.","10066":"The 'last' operation code.","10067":"Strip off bits 6 and 7 to convert the operation code to a calculator offset.","10071":"Perform the actual operation.","10073":"Jump forward.","10075":"Get the 'last' operation code.","10076":"This tests the nature of the 'last value' against the requirement of the operation. They are to be the same for correct syntax.","10081":"Jump if syntax fails.","10084":"Get the 'last' operation code.","10088":"Assume result to be numeric.","10094":"It is string.","10090":"Jump forward if the nature of 'last value' is numeric.","10096":"Get the 'present' values into BC:","10097":"Jump back.","10099":"The 'last' values go on the stack.","10100":"Get the 'present' operation code.","10101":"Do not modify the operation code if dealing with a numeric operand.","10107":"Clear bits 6 and 7.","10109":"Increase the code by +08 hex.","10111":"Return the code to the C register.","10112":"Is the operation 'AND'?","10114":"Jump if it is not so.","10116":"'AND' requires a numeric operand.","10118":"Jump forward.","10120":"The operations -,*,/,^ and OR are not possible between strings.","10122":"Is the operation a '+'?","10124":"Jump if it is so.","10126":"The other operations yield a numeric result.","10128":"The 'present' values go on the machine stack.","10129":"Consider the next character.","10130":"Go around the loop again.","10173":"Unless syntax is being checked, a jump is made to SF-RUN.","10178":"Get the first character of the name.","10179":"If it is not alphabetic, then report the error.","10185":"Get the next character.","10186":"Is it a '$'?","10188":"Save the zero flag on the stack.","10189":"Jump if it was not a '$'.","10191":"But get the next character if it was.","10192":"If the character is not a '(', then report the error.","10196":"Get the next character.","10197":"Is it a ')'?","10199":"Jump if it is; there are no arguments.","10201":"Within the loop, call SCANNING to check the syntax of each argument and to insert floating-point numbers.","10204":"Get the character which follows the argument;","10205":"if it is not a ',' then jump - no more arguments.","10209":"Get the first character in the next argument.","10210":"Loop back to consider this argument.","10212":"Is the current character a ')'?","10214":"Report the error if it is not.","10217":"Point to the next character in the BASIC line.","10221":"Assume a string-valued function and reset bit 6 of FLAGS.","10223":"Restore the zero flag, jump if FN is indeed string valued.","10226":"Otherwise, set bit 6 of FLAGS.","10228":"Jump back to continue scanning the line.","10231":"Get the first character of the name.","10232":"Reset bit 5 for upper case.","10234":"Copy the name to B.","10235":"Get the next character.","10236":"Subtract 24 hex, the code for '$'.","10238":"Copy the result to C (zero for a string, non-zero for a numerical function).","10239":"Jump if non-zero: numerical function.","10241":"Get the next character, the '('.","10242":"Get 1st character of 1st argument.","10243":"Save the pointer to it on the stack.","10244":"Point to the start of the program.","10247":"Go back one location.","10248":"The search will be for 'DEF FN'.","10251":"Save the name and 'string status'.","10252":"Search the program now.","10255":"Restore the name and status.","10260":"When a DEF FN statement is found, the name and status of the two functions are compared: if they do not match, the search is resumed.","10261":"Get the name of the DEF FN function.","10264":"Reset bit 5 for upper case.","10266":"Does it match the FN name?","10267":"Jump if it does not match.","10269":"Get the next character in the DEF FN.","10272":"Subtract 24 hex, the code for '$'.","10274":"Compare the status with that of FN.","10289":"If HL is now pointing to a '$', move on to the '('.","10275":"Jump if complete match now","10277":"Restore the pointer to the 'DEF FN'.","10278":"Step back one location.","10279":"Use the search routine to find the end of the DEF FN statement, preparing for the next search; save the name and status meanwhile.","10287":"Jump back for a further search.","10294":"Get the pointer to the first argument of FN, and copy it to CH-ADD.","10293":"Discard the pointer to 'DEF FN'.","10302":"Save this pointer on the stack.","10299":"Move past the '(' now.","10303":"Is it pointing to a ')'?","10305":"If so, jump: FN has no arguments.","10307":"Point to the next code.","10308":"Put the code into A.","10309":"Is it the 'number marker' code, #0E?","10311":"Set bit 6 of D for a numerical argument.","10313":"Jump on zero: numerical argument.","10315":"Now ensure that HL is pointing to the '$' character (not e.g. to a control code).","10319":"HL now points to the 'number marker'.","10320":"Bit 6 of D is reset: string argument.","10322":"Point to the 1st of the 5 bytes in DEF FN.","10323":"Save this pointer on the stack.","10324":"Save the 'string status' of the argument.","10325":"Now evaluate the argument.","10328":"Get the no./string flag into A.","10329":"Test bit 6 of it against the result of SCANNING.","10334":"Give report Q if they did not match.","10336":"Get the pointer to the first of the 5 spaces in DEF FN into DE.","10338":"Point HL at STKEND.","10341":"BC will count 5 bytes to be moved.","10344":"First, decrease STKEND by 5, so deleting the 'last value' from the stack.","10349":"Copy the 5 bytes into the spaces in DEF FN.","10351":"Point HL at the next code.","10352":"Ensure that HL points to the character after the 5 bytes.","10356":"Is it a ')'?","10358":"Jump if it is: no more arguments in the DEF FN statement.","10360":"It is a ',': save the pointer to it.","10361":"Get the character after the last argument that was evaluated from FN.","10362":"If it is not a ',' jump: mismatched arguments of FN and DEF FN.","10366":"Point CH-ADD to the next argument of FN.","10367":"Point HL to the ',' in DEF FN again.","10368":"Move HL on to the next argument in DEF FN.","10371":"Jump back to consider this argument.","10373":"Save the pointer to the ')' in DEF FN.","10374":"Get the character after the last argument in FN.","10375":"Is it a ')'?","10377":"If so, jump to evaluate the function; but if not, give report Q.","10381":"Restore pointer to ')' in DEF FN.","10382":"Get this pointer into HL.","10383":"Insert it into CH-ADD.","10386":"Get the old value of DEFADD.","10389":"Stack it, and get the start address of the arguments area of DEF FN into DEFADD.","10393":"Save address of ')' in FN.","10394":"Move CH-ADD on past ')' and '=' to the start of the expression for the function in DEF FN.","10396":"Now evaluate the function.","10399":"Restore the address of ')' in FN.","10400":"Store it in CH-ADD.","10403":"Restore original value of DEFADD.","10404":"Put it back into DEFADD.","10407":"Get the next character in the BASIC line.","10408":"Jump back to continue scanning.","10411":"Point to the next code in the statement.","10412":"Copy the code to A.","10417":"Finished.","10415":"Jump back to skip over it if it is a control code or a space.","10418":"Presume a numeric variable.","10422":"Get the first character into A.","10423":"Is it alphabetic?","10426":"Give an error report if it is not so.","10429":"Save the pointer to the first letter.","10430":"Transfer bits 0 to 4 of the letter to the C register; bits 5 & 7 are always reset.","10433":"Get the 2nd character into A.","10434":"Save this pointer also.","10435":"is the 2nd character a '('?","10437":"Separate arrays of numbers.","10439":"Now set bit 6.","10441":"Is the 2nd character a '$'?","10443":"Separate all the strings.","10445":"Now set bit 5.","10447":"If the variable's name has only one character then jump forward.","10452":"Is the character alphanumeric?","10455":"Jump out of the loop when the end of the name is found.","10457":"Mark the discriminator byte.","10459":"Get the next character.","10460":"Go back to test it.","10462":"Step CH-ADD past the '$'.","10463":"Reset the bit 6 to indicate a string.","10467":"Is DEFADD-hi zero?","10469":"If so, jump forward.","10470":"If so, jump forward.","10476":"If so, jump forward to search the DEF FN statement.","10473":"In 'run-time'?","10479":"Copy the discriminator bytes to B register.","10480":"Jump forward if in 'run-time'.","10486":"Drop the character code part.","10485":"Move the discriminator to A.","10488":"Indicate syntax by setting bit 7.","10490":"Restore the discriminator.","10491":"Jump forward to continue.","10493":"Pick up the VARS pointer.","10496":"The 1st. letter of each existing variable.","10497":"Match on bits 0 to 6.","10499":"Jump when the '80-byte' is reached.","10501":"The actual comparison.","10502":"Jump forward if the 1st characters do not match.","10504":"Rotate A leftwards and then double it to test bits 5 & 6.","10506":"Strings and array variables.","10509":"Simple numeric and FOR-NEXT variables.","10511":"Take a copy of the pointer to the 2nd. character.","10513":"Save the 1st letter pointer.","10514":"Consider the next character.","10515":"Fetch each character in turn.","10516":"Point to the next character.","10517":"Is the character a 'space'?","10519":"Ignore the spaces.","10521":"Set bit 5 so as to match lower and upper case letters.","10523":"Make the comparison.","10524":"Back for another character if it does match.","10526":"Will it match with bit 7 set?","10528":"Try it.","10529":"Jump forward if the 'last characters' do not match.","10531":"Check that the end of the name has been reached before jumping forward.","10537":"Fetch the pointer.","10538":"Save B & C briefly.","10539":"DE is made to point to the next variable.","10542":"Switch the two pointers.","10543":"Get B & C back.","10544":"Go around the loop again.","10546":"Signal 'variable not found'.","10548":"Drop the pointer to the 2nd. character.","10549":"Fetch the present character.","10550":"Is it a '('?","10552":"Jump forward.","10554":"Indicate not dealing with an array and jump forward.","10558":"Drop the saved variable pointer.","10559":"Drop the 2nd character pointer.","10560":"Drop the first letter pointer.","10561":"Save the 'last' letter pointer.","10562":"Fetch the current character.","10563":"Is it alphanumeric?","10566":"Jump when the end of the name has been found.","10568":"Fetch the next character.","10569":"Go back and test it.","10571":"HL holds the pointer to the letter of a short name or the 'last' character of a long name.","10572":"Rotate the whole register.","10574":"Specify the state of bit 6.","10576":"Finished.","10577":"Point to the 1st character in the arguments area and put it into A.","10581":"Is it a ')'?","10583":"Jump to search the variables area.","10586":"Get the next argument in the loop.","10587":"Set bits 5 & 6, assuming a simple numeric variable; copy it to B.","10590":"Point to the next code.","10591":"Put it into the A register.","10592":"Is it the 'number marker' code #0E?","10594":"Jump if so: numeric variable.","10596":"Ensure that HL points to the character, not to a space or control code.","10600":"HL now points to the 'number marker'.","10601":"Reset bit 5 of B: string variable.","10603":"Get the variable name into A.","10604":"Is it the one we are looking for?","10605":"Jump if it matches.","10607":"Now pass over the 5 bytes of the floating-point number or string parameters to get to the next argument.","10612":"Pass on to the next character.","10615":"Is it a ')'?","10617":"If so, jump to search the variable area.","10620":"Point to the next argument.","10623":"Jump back to consider it.","10625":"Test for a numeric variable.","10627":"Jump if the variable is numeric; SCANNING will stack it.","10629":"Point to the first of the 5 bytes to be stacked.","10630":"Point DE to STKEND.","10634":"Stack the 5 bytes.","10637":"Point HL to the new position of STKEND, and reset the system variable.","10641":"Discard the LOOK-VARS pointers (2nd & 1st character pointers).","10643":"Return from the search with both the carry and zero flags reset - signalling that a call STK-VAR is not required.","10645":"Finished.","10646":"Clear the array flag.","10647":"Clear the B register for later.","10648":"Jump forward if syntax is being checked.","10652":"Jump forward if dealing with an array variable.","10656":"Signal 'a simple string'.","10657":"Move along the entry.","10658":"Pick up the low length counter.","10659":"Advance the pointer.","10660":"Pick up the high length pointer.","10661":"Advance the pointer.","10662":"Transfer the pointer to the actual string.","10663":"Pass these parameters to the calculator stack.","10666":"Fetch the present character and jump forward to see if a 'slice' is required.","10670":"Step past the length bytes.","10673":"Collect the 'number of dimensions'.","10674":"Jump forward if handling an array of numbers.","10678":"Decrease the 'number of dimensions' and jump if the number is now zero.","10681":"Save the pointer in DE.","10682":"Get the present character.","10683":"Is it a '('?","10685":"Report the error if it is not so.","10687":"Restore the pointer.","10688":"Pass the pointer to DE.","10689":"Jump forward.","10691":"Save the counter.","10692":"Get the present character.","10693":"Restore the counter.","10694":"Is the present character a ','?","10696":"Jump forward to consider another subscript.","10698":"If a line is being executed then there is an error.","10702":"Jump forward if dealing with an array of strings.","10706":"Is the present character a ')'?","10708":"Report an error if not so.","10710":"Advance CH-ADD.","10711":"Return as the syntax is correct.","10712":"Is the present character a ')'?","10714":"Jump forward and check whether there is another subscript.","10716":"Is the present character a 'TO'?","10718":"It must not be otherwise.","10720":"Get the present character.","10721":"Point to the preceding character and set CH-ADD.","10725":"Evaluate the 'slice'.","10727":"Set the counter to zero.","10730":"Save the counter briefly.","10731":"Advance CH-ADD.","10732":"Restore the counter.","10733":"Fetch the discriminator byte.","10734":"Jump unless checking the syntax for an array of strings.","10738":"Get the present character.","10739":"Is it a ')'?","10741":"Jump forward as finished counting elements.","10743":"Is to 'TO'?","10745":"Jump back if dealing with a 'slice'.","10747":"Save the dimension-number counter and the discriminator byte.","10748":"Save the element-counter.","10749":"Get a dimension-size Into DE.","10752":"The counter moves to HL and the variable pointer is stacked.","10753":"The counter moves to DE and the dimension-size to HL.","10754":"Evaluate the next subscript.","10757":"Give an error if out of range.","10759":"The result of the evaluation is decremented as the counter is to count the elements occurring before the specified element.","10760":"Multiply the counter by the dimension-size.","10763":"Add the result of 'INT-EXP1' to the present counter.","10764":"Fetch the variable pointer.","10765":"Fetch the dimension-number and the discriminator byte.","10766":"Keep going round the loop until 'B' equals zero.","10768":"Report an error if checking syntax at this point.","10772":"Save the counter.","10773":"Jump forward if handling an array of strings.","10777":"Transfer the variable pointer to the BC register pair.","10779":"Fetch the present character.","10780":"Is it a ')'?","10782":"Jump past the error report unless it is needed.","10786":"Advance CH-ADD.","10787":"Fetch the counter.","10788":"There are 5 bytes to each element in an array of numbers.","10791":"Compute the total number of bytes before the required element.","10794":"Make HL point to the location before the required element.","10795":"Return with this address.","10796":"Fetch the last dimension-size.","10799":"The variable printer goes on the stack and the counter to HL.","10800":"Multiply 'counter' by 'dimension-size'.","10803":"Fetch the variable pointer.","10804":"This gives HL pointing to the location before the string.","10805":"So point to the actual 'start'.","10806":"Transfer the last dimension-size to BC to form the 'length'.","10808":"Move the 'start' to DE.","10809":"Pass these parameters to the calculator stack. Note: The first parameter is zero indicating a string from an 'array of strings' and hence the existing entry is not to be reclaimed.","10812":"Get the present character.","10813":"Is it a ')'?","10815":"Jump if it is so.","10817":"Is it a ','?","10819":"Report the error if not so.","10821":"Use SLICING to modify the set of parameters.","10824":"Fetch the next character.","10825":"Is It a '('?","10827":"Jump back if there is a 'slice' to be considered.","10829":"Signal - string result.","10833":"Return with the parameters of the required string forming a 'last value' on the calculator stack.","10834":"Check the flag.","10837":"Take the parameters off the stack in 'run-time'.","10840":"Get the next character.","10841":"Is it a ')'?","10843":"Jump forward if it is so.","10845":"The 'start' goes on the machine stack.","10846":"The A register is cleared and saved.","10848":"The 'length' is saved briefly.","10849":"Presume that the 'slice' is to begin with the first character.","10852":"Get the first character.","10853":"Pass the 'length' to HL.","10854":"Is the present character a 'TO'?","10856":"The first parameter, by default, will be '1' if the jump is taken.","10858":"At this stage A is zero.","10859":"BC is made to hold the first parameter. A will hold +FF if there has been an 'out of range' error.","10862":"Save the value anyway.","10863":"Transfer the first parameter to DE.","10865":"Save the 'length' briefly.","10866":"Get the present character.","10867":"Restore the 'length'.","10868":"Is the present character a 'TO'?","10870":"Jump forward to consider the second parameter if it is so;","10872":"otherwise show that there is a closing bracket.","10877":"The last character of the 'slice' is also the first character.","10879":"Jump forward.","10881":"Save the 'length' briefly.","10882":"Get the next character.","10883":"Restore the 'length'.","10884":"Is the present character a ')'?","10886":"Jump if there is not a second parameter.","10888":"If the first parameter was in range A will hold zero; otherwise +FF.","10889":"Make BC hold the second parameter.","10892":"Save the 'error register'.","10893":"Get the present character.","10894":"Pass the result obtained from INT-EXP2 to the HL register pair.","10896":"Check that there is a closing bracket now.","10900":"Fetch the 'error register'.","10901":"The second parameter goes on the stack and the 'start' goes to HL.","10902":"The first parameter is added to the 'start'.","10903":"Go back a location to get it correct.","10904":"The 'new start' goes on the stack and the second parameter goes to HL.","10905":"Subtract the first parameters from the second to find the length of the 'slice'.","10908":"Initialise the 'new length'.","10911":"A negative 'slice' is a 'null string' rather than an error condition. (See manual.)","10913":"Allow for the inclusive byte.","10914":"Only now test the 'error register'.","10915":"Jump if either parameter was out of range for the string.","10918":"Transfer the 'new length' to BC.","10920":"Get the 'new start'.","10921":"Ensure that a string is still indicated.","10925":"Return at this point if checking syntax; otherwise continue into the STK-STORE subroutine.","10929":"Signal - a string from an array of strings or a 'sliced' string.","10930":"Ensure the flag indicates a string result.","10934":"Save B & C briefly.","10935":"Is there room for 5 bytes? Do not return here unless there is room available.","10938":"Restore B & C.","10939":"Fetch the address of the first location above the present stack.","10942":"Transfer the first byte.","10943":"Step on.","10947":"Step on.","10944":"Transfer the second and third bytes; for a string these will be the 'start'.","10948":"Transfer the fourth and fifth bytes; for a string these will be the 'length'.","10951":"Step on so as to point to the location above the stack.","10952":"Save this address In STKEND and return.","10956":"Clear the 'error register'.","10957":"Save both the DE & HL register pairs throughout.","10959":"Save the 'error register' briefly.","10960":"The 'next expression' is evaluated to give a 'last value' on the calculator stack.","10963":"Restore the 'error register'.","10964":"Jump forward if checking syntax.","10969":"Save the error register again.","10970":"The 'last value' is compressed into BC.","10973":"Error register to D.","10974":"A 'next expression' that gives zero is always in error so jump forward if it is so.","10979":"Take a copy of the limit-value. This will be a 'dimension-size' a 'DIM-limit' or a 'string length'.","10982":"Now compare the result of evaluating the expression against the limit.","10984":"Fetch the 'old error value'.","10985":"Form the 'new error value'; +00 if no error at anytime/+FF or less if an 'out of range' error on this pass or on previous ones.","10987":"Restore HL & DE.","10989":"Return; 'error register' is the A register.","10990":"Use HL for the construction.","10991":"Point to 'DE+1'.","10992":"In effect - LD E,(DE+1).","10993":"Point to 'DE+2'.","10994":"In effect - LD D,(DE+2).","10995":"Finished.","10996":"Return directly if syntax is being checked.","11003":"Report 'Out of memory'.","11000":"Perform the multiplication.","11006":"Finished.","11007":"Fetch the present address in DEST.","11010":"Jump if handling a variable that 'exists already'.","11016":"Presume dealing with a numeric variable - 5 bytes.","11019":"Add '1' to the counter for each character of a name.","11020":"Move along the variable's name.","11021":"Fetch the 'present code'.","11022":"Jump back if it is a 'space'; thereby ignoring spaces.","11026":"Jump forward if the code is +21 to +FF.","11028":"Accept, as a final code, those in the range +00 to +0F.","11032":"Also accept the range +16 to +1F.","11036":"Step past the control code after any of INK to OVER.","11037":"Jump back as these control codes are treated as spaces.","11039":"Is the code alphanumeric?","11042":"If it is so then accept it as a character of a 'long' name.","11044":"Is the present code a 'S'?","11046":"Jump forward as handling a 'newly declared' simple string.","11049":"Copy the 'length' to A.","11050":"Make HL point to the '80-byte' at the end of the variables area.","11054":"Now open up the variables area. Note: In effect 'BC' spaces are made before the displaced '80-byte'.","11057":"Point to the first 'new' byte.","11058":"Make DE point to the second 'new' byte.","11060":"Save this pointer.","11061":"Fetch the pointer to the start of the name.","11064":"Make DE point to the first 'new' byte.","11065":"Make B hold the 'number of extra letters' that are found in a 'long name'.","11068":"Jump forward if dealing with a variable with a 'short name'.","11070":"Point to each 'extra' code.","11071":"Fetch the code.","11072":"Accept codes from +21 to +FF;","11074":"ignore codes +00 to +20.","11076":"Set bit 5, as for lower case letters.","11078":"Transfer the codes in turn to the 2nd 'new' byte onwards.","11080":"Go round the loop for all the 'extra' codes.","11082":"Mark the code as required and overwrite the last code.","11085":"Prepare the mark the letter of a 'long' name.","11087":"Fetch the pointer to the letter.","11090":"A holds +00 for a 'short' name and +C0 for a 'long' name.","11091":"Set bit 5, as for lower case letters.","11093":"Drop the pointer now.","11094":"Enter the letter and return with HL pointing to 'new 80-byte'.","11097":"Save the 'destination' pointer.","11099":"This moves STKEND back five bytes.","11101":"Restore the pointer.","11102":"Give the number a 'length' of five bytes.","11105":"Make HL point to the first of the five locations and jump forward to make the actual transfer.","11110":"Jump forward if handling any kind of string variable.","11116":"The five bytes of a number +'1'.","11119":"HL now points 'after'.","11120":"Jump back to make the actual transfer.","11122":"Fetch the 'start'. Note: This line is redundant.","11125":"Fetch the 'length'.","11129":"Jump if dealing with a complete simple string; the old string will need to be 'deleted' in this case only.","11135":"Return if the string is a null string.","11138":"Save the 'start' (DEST).","11139":"Make the necessary amount of room in the work space.","11140":"Save the pointer to the first location.","11141":"Save the 'length' for use later on.","11142":"Make DE point to the last location.","11144":"Make HL point 'one past' the new locations.","11145":"Enter a 'space' character.","11147":"Copy this character into all the new locations. Finish with HL pointing to the first new location.","11149":"Save the pointer briefly.","11150":"Fetch the 'new' parameters.","11153":"Restore the pointer.","11154":"'Length' of new area to HL. 'Pointer' to new area to stack.","11155":"Compare the two 'lengths' and jump forward if the 'new' string will fit into the room.","11161":"However modify the 'new' length if it is too long.","11163":"'Length' of new area to stack. 'Pointer' to new area to HL.","11164":"'Start' of new string to HL. 'Pointer' to new area to DE.","11165":"Jump forward if the 'new' string is a 'null' string.","11169":"Otherwise move the 'new' string to the work space.","11171":"'Length' of new area.","11172":"'Pointer' to new area.","11173":"The start - the pointer to the 'variable in assignment' which was originally in DEST. L-ENTER is now used to pass the 'new' string to the variables area.","11174":"Change the pointers over.","11175":"Check once again that the length is not zero.","11178":"Save the destination pointer.","11179":"Move the numeric value or the string.","11181":"Return with the HL register pair pointing to the first byte of the numeric value or the string.","11183":"Make HL point to the letter of the variable's name.","11185":"i.e. DEST - 3.","11186":"Pick up the letter.","11187":"Save the pointer to the 'existing version'.","11188":"Save the 'length' of the 'existing string'.","11189":"Use L-STRING to add the new string to the variables area.","11192":"Restore the 'length'.","11193":"Restore the pointer.","11194":"Allow one byte for the letter and two bytes for the length.","11197":"Exit by jumping to RECLAIM-2 which will reclaim the whole of the existing version.","11200":"Prepare for the marking of the variable's letter.","11202":"Fetch the pointer to the letter.","11205":"Mark the letter as required. L-STRING is now used to add the new string to the variables area.","11206":"Save the variable's letter","11207":"Fetch the 'start' and the 'length' of the 'new' string.","11210":"Move the 'start' to HL.","11211":"Make HL point 'one-past' the string.","11213":"Make HL point to the end of the string.","11214":"Save the pointer briefly.","11217":"Allow one byte for the letter and two bytes for the length.","11220":"Make HL point to the '80-byte' at the end of the variables area.","11224":"Now open up the variables area. Note: In effect 'BC' spaces are made before the displaced '80-byte'.","11227":"Restore the pointer to the end of the 'new' string.","11230":"Make a copy of the length of the 'new' string.","11232":"Add one to the length in case the 'new' string is a 'null' string.","11233":"Now copy the 'new' string + one byte.","11235":"Make HL point to the byte that is to hold the high-length.","11237":"Fetch the 'length'.","11238":"Enter the high-length.","11239":"Back one.","11240":"Enter the low-length.","11241":"Fetch the variable’s letter.","11242":"Make HL point to the 'old 80-byte'.","11243":"It is overwritten with the letter of the variable.","11244":"Make HL point to the 'new 80-byte'.","11247":"Finished with all the 'newly declared variables'.","11249":"Get STKEND.","11252":"Back one;","11254":"Back one;","11256":"Back one;","11258":"Back one;","11260":"Back one;","11253":"The fifth value.","11255":"The fourth one.","11257":"The third value.","11259":"The second value.","11261":"The first value.","11262":"Reset STKEND to its new position.","11265":"Finished.","11266":"Search the variables area.","11269":"Give report C as there has been an error.","11272":"Jump forward if in 'run time'.","11277":"Test the syntax for string arrays as if they were numeric.","11279":"Check the syntax of the parenthesised expression.","11282":"Move on to consider the next statement as the syntax was satisfactory.","11285":"Jump forward if there is no 'existing array'.","11287":"Save the discriminator byte.","11288":"Find the start of the next variable.","11291":"Reclaim the 'existing array'.","11294":"Restore the discriminator byte.","11295":"Set bit 7 in the discriminator bzte.","11297":"Make the dimension counter yero.","11299":"Save the counter and the discriminator byte.","11300":"The HL register pair is to hold the size of the elements in the array, '1' for a string '5' for a numeric array.","11309":"Element size DE.","11310":"Advance CH-ADD on each pass.","11311":"Set a 'limit value'.","11313":"Evaluate a parameter.","11316":"Give an error if 'out of range'.","11319":"Fetch the dimension-counter and the discriminator byte.","11320":"Save the parameter on each pass through the loop.","11321":"Increase the dimension counter on each pass also.","11322":"Restack the dimension-counter and the discriminator byte.","11323":"The parameter is moved to the HL register pair.","11325":"The byte total is built up in HL and the transferred to DE.","11329":"Get the present character and go around the loop again if there is another dimension.","11334":"Is it a ')'?","11338":"Advance CH-ADD past it.","11339":"Fetch the dimension-counter and the discriminator byte.","11340":"Pass the discriminator byte to the A register for later.","11336":"Jump back if not so.","11341":"Move the counter to L.","11342":"Clear the H register.","11344":"Increase the dimension-counter by two and double the result and form the correct overall length for the variable by adding the element byte total.","11348":"Give the report 'Out of memory' if required.","11351":"Save the element byte total.","11352":"Save the dimension counter and the discriminator byte.","11353":"Save the overall length also.","11429":"0 now gives 0 with carry set; 1 gives 0 with carry reset.","11354":"Move the overall length to BC.","11356":"Make the HL register pair point to the '80-byte'.","11360":"The room is made available. HL is made to point to the first new location.","11364":"The letter, suitably marked, is entered first.","11365":"The overall length is fetched and decreased by '3'.","11369":"Advance HL.","11370":"Enter the low length.","11371":"Advance HL.","11375":"Advance HL.","11372":"Enter the high length.","11373":"Fetch the dimension counter.","11374":"Move it to the A register.","11376":"Enter the dimension count.","11377":"HL is made to point to the last location of the array","11379":"and DE to the location before that one.","11380":"Enter a zero into the last location but overwrite it with 'space' if dealing with an array of strings.","11388":"Fetch the element byte total.","11389":"Clear the array + one extra location.","11391":"Get a dimension-size.","11392":"Enter the high byte.","11393":"Back one.","11395":"Back one.","11394":"Enter the low byte.","11396":"Decrease the dimension counter.","11397":"Repeat the operation until all the dimensions have been considered; then return.","11400":"Test for a digit; carry will be reset for a digit.","11403":"Complement the carry flag.","11404":"Return if a digit; otherwise continue on into 'ALPHA'.","11405":"Test against 41 hex, the code for 'A'","11407":"Complement the carry flag.","11408":"Return if not a valid character code.","11409":"Test against 5B hex, 1 more than code for 'Z'.","11411":"Return if an upper case letter.","11412":"Test against 61 hex, the code for 'a'.","11414":"Complement the carry flag.","11415":"Return if not a valid character code.","11416":"Test against 7B hex, 1 more than the code for 'z'.","11418":"Finished.","11419":"Is the character a 'BIN'?","11421":"Jump if it is not 'BIN'.","11423":"Initialise result to zero in DE.","11426":"Get the next character.","11427":"Subtract the character code for '1'.","11431":"Any other character causes a jump to BIN-END and will be checked for syntax during or after scanning.","11433":"Result so far to HL now.","11434":"Complement the carry flag.","11435":"Shift the result left, with the carry going to bit 0.","11437":"Report overflow if more than 65535.","11440":"Return the result so far to DE.","11441":"Jump back for next 0 or 1.","11443":"Copy result to BC for stacking.","11445":"Jump forward to stack the result.","11448":"Is the first character a '.'?","11450":"If so, jump forward.","11452":"Otherwise, form a 'last value' of the integer.","11455":"Is the next character a '.'?","11457":"Jump forward to see if it is an 'E'.","11459":"Get the next character.","11460":"Is it a digit?","11463":"Jump if not (e.g. 1.E4 is allowed).","11465":"Jump forward to deal with the digits after the decimal point.","11467":"If the number started with a decimal, see if the next character is a digit.","11471":"Report the error if it is not.","11475":"Stack zero as the integer part of such numbers.","11477":"Use the calculator again.","11478":"Find the floating-point form of the decimal number '1', and save it in the memory area.","11482":"Get the present character.","11483":"If it is a digit then stack it.","11486":"If not jump forward.","11489":"For each passage of the loop, the number saved in the memory area is fetched, divided by 10  and restored: i.e. going from .1 to .01 to .001 etc.","11491":"The present digit is multiplied by the 'saved number' and added to the 'last value'.","11496":"Get the next character.","11497":"Jump back (one more byte than needed) to consider it.","11499":"Is the present character an 'E'?","11501":"Jump forward if it is.","11503":"Is it an 'e'?","11505":"Finished unless it is so.","11506":"Use B as a sign flag, FF for '+'.","11508":"Get the next character.","11509":"Is it a '+'?","11511":"Jump forward.","11513":"Is it a '-'?","11515":"Jump if neither '+' not '-'.","11517":"Change the sign of the flag.","11518":"Point to the first digit.","11519":"Is it indeed a digit?","11522":"Report the error if not.","11524":"Save the flag in B briefly.","11525":"Stack ABS m, where m is the exponent","11528":"Transfer ABS m to A.","11531":"Restore the sign flag to B.","11532":"Report the overflow now if ABS m is greater than 255 or indeed greater than 127 (other values greater than about 39 will be detected later).","11539":"Test the sign flag in B; '+' (i.e. +FF) will now set the zero flag.","11540":"Jump if sign of m is '+'.","11542":"Negate m if sign is '-'.","11544":"Jump to assign to the 'last value' the result of x*10^m.","11547":"Test against 30 hex, the code for '0'.","11549":"Return if not a valid character code.","11550":"Test against the upper limit.","11552":"Complement the carry flag.","11553":"Finished.","11554":"Is the character a digit?","11557":"Return if not in range.","11558":"Replace the code by the actual digit.","11560":"Transfer the value to the C register.","11561":"Clear the B register","11563":"Re-initialise IY to ERR-NR.","11567":"Clear the A register.","11568":"And the E register, to indicate '+'.","11569":"Copy the less significant byte to D.","11570":"And the more significant byte to C.","11571":"Clear the B register.","11572":"Now stack the number.","11576":"Make HL point to STKEND-5.","11577":"Clear the carry flag.","11578":"Finished.","11579":"Save the first digit - in A.","11581":"The 'last value' is now zero.","11583":"Restore the first digit.","11584":"If the code represents a digit then stack the floating-point form.","11589":"'Digit' goes under 'last value'.","11590":"Define decimal 10.","11591":"'Last value' = 'last value' *10.","11592":"'Last value' = 'last value' + 'digit'.","11594":"The next code goes into A.","11597":"Loop back with this code.","11599":"Test the sign of m by rotating bit 7 of A into the carry without changing A.","11601":"Jump if m is positive.","11604":"Negate m in A without disturbing the carry flag.","11605":"Save m in A briefly.","11606":"A sign flag is now stored in the first byte of mem-0, i.e. 0 for '+' and 1 for '-'.","11609":"The stack holds x.","11613":"x, 10","11615":"Restore m in A.","11616":"In the loop, shift out the next bit of m, modifying the carry and zero flags appropriately;","11618":"jump if carry reset.","11620":"Save the rest of m and the flags.","11621":"The stack holds x' and 10^(2^n), where x' is an interim stage in the multiplication of x by 10^m, and n=0,1,2,3,4 or 5.","11622":"10^(2^n) is copied to mem-1","11623":"x', 10^(2^n), (1/0)","11624":"x', 10^(2^n)","11626":"x'*10^(2^n)= x\"","11629":"x/10^(2^n)=x'' (x'' is N'*10^(2^n) or x'/10^(2^n) according as m is '+' ot '-').","11630":"x'', 10^(2^n)","11632":"Restore the rest of m in A, and the flags.","11633":"Jump if m has been reduced to zero.","11635":"Save the rest of m in A.","11636":"x'', 10^(2^n)","11637":"x'', 10^(2^n), 10^(2^n)","11638":"x'', 10^(2^(n+1))","11640":"Restore the rest of m in A.","11641":"Jump back for all bits of m.","11644":"Use the calculator to delete the final power of 10 reached, leaving the 'last value' x*10^m on the stack.","11647":"Point to the sign byte of the number.","11648":"Copy the sign byte to C.","11649":"Point to the less significant byte.","11651":"Collect the byte in A.","11652":"Ones complement it if negative. This adds 1 for negative numbers; it sets the carry unless the byte was 0.","11653":"Less significant byte to E now.","11654":"Point to the more significant byte.","11655":"Collect it in A.","11656":"Finish two complementing in the case of a negative number; note that the carry is always left reset.","11658":"More significant byte to D now.","11659":"Finished.","11660":"This entry point would store a number known to be positive.","11662":"The pointer to the first location is saved.","11663":"The first byte is set to zero.","11665":"Point to the second location.","11666":"Enter the second byte.","11667":"Point to the third location.","11668":"Collect the less significant byte.","11669":"Twos complement it if the number is negative.","11671":"Store the byte.","11672":"Point to the fourth location.","11673":"Collect the more significant byte.","11674":"Twos complement it if the number is negative.","11676":"Store the byte.","11677":"Point to the fifth location.","11678":"The fifth byte is set to zero.","11680":"Return with HL pointing to the first byte on n on the stack.","11683":"Make HL point to STKEND-5","11684":"Collect the exponent byte of the 'last value'; jump if it is zero, indicating a 'small integer'.","11689":"Round the 'last value' to the nearest integer, which also changes it to 'small integer' form on the calculator stack if that is possible, i.e. if -65535.5 <= x <65535.3","11694":"Delete the integer from the stack; DE still points to it in memory (at STKEND).","11696":"Save both stack pointers.","11698":"HL now points to the number.","11699":"Copy the first byte to B.","11700":"Copy bytes 2, 3 and 4 to C, E and D.","11703":"Clear the A register.","11704":"This sets the carry unless B is zero.","11705":"This sets the zero flag if the number is positive (NZ denotes negative).","11707":"Copy the high byte to B.","11708":"And the low byte to C.","11709":"Copy the low byte to A too.","11710":"Restore the stack pointers.","11712":"Finished.","11713":"The integer A is stacked, either as 00 00 A 00 00 (for positive A) or as 00 FF A FF 00 (for negative A).","11716":"These bytes are first loaded into A, E, D, C, B and then STK-STORE is called to put the number on the calculator stack.","11724":"Log 2 to the base 10 is now","11725":"The stack now holds a, log 2.","11730":"A*log 2 i.e. log (2^A)","11731":"INT log (2^A)","11732":"The subroutine continues on into FP-TO-A to complete the calculation.","11733":"Compress the 'last value' into BC.","11736":"Return if out of range already.","11737":"Save the result and the flags.","11738":"Again it will be out of range if the B register does not hold zero.","11740":"Jump if in range.","11742":"Fetch the result and the flags","11743":"Signal the result is out of range.","11744":"Finished - unsuccessful.","11745":"Fetch the result and the flags.","11746":"Finished - successful.","11748":"x,x","11749":"x, (1/0) Logical value of x.","11750":"x","11752":"x,x","11753":"x, (1/0) Logical value of x.","11754":"x Hereafter x'=ABS x.","11758":"Enter the character code for '0'.","11760":"Print the '0'.","11761":"Finished as the 'last value' is zero.","11762":"x' x'=ABS x.","11764":"Enter the character code for '-'.","11766":"Print the '-'.","11768":"The 15 bytes of mem-3, mem-4, st-mem-3 and mem-5 are now initialised to zero to be used for a print buffer and two counters.","11772":"The stack is cleared, except for x'","11773":"x'","11774":"HL', which is used to holdPUSH HL calculator offsets, (e.g. for EXX 'STR$') is saved on the machine stack.","11778":"x', x'","11779":"x', INT (x')=i","11780":"i is stored in mem-2","11781":"x'-i=f","11782":"f,i","11783":"i,f","11784":"f is stored in mem-2","11785":"i","11787":"Is i a small integer (first byte zero) i.e. is ABS i <= 65535?","11789":"Jump if it is not.","11791":"i is copied to DE (i, like x', >=0).","11794":"B is set to count 16 bits.","11796":"D is copied to A for testing:","11797":"Is it zero?","11798":"Jump if it is not zero.","11800":"Now test E.","11801":"Jump if DE zero: x is a pure fraction.","11803":"Move E to D and set B for 8 bits: D was zero and E was not.","11806":"Transfer DE to DE', via the machine stack, to be moved into the print buffer at PF-BITS.","11810":"Jump forward.","11812":"i (i=zero here),","11813":"i,f","11815":"The exponent byte e of f is copied to A.","11816":"A becomes e - 126 dec i.e. e'+2, where e' is the true exponent of f.","11818":"The construction A = ABS INT (LOG (2^A)) is performed (LOG is to base 10); i.e. A=n, say","11821":"n is copied from A to D.","11822":"The current count is collected from the second byte of mem-5 and n is subtracted from it.","11829":"n is copied from D to A.","11830":"y=f*10^n is formed and stacked.","11833":"i, y","11834":"i, y, y","11835":"i, y, (INT (y) = i2","11836":"i2 is copied to mem-1","11837":"i, y - i2","11838":"i, y - i2, i2","11839":"i, f2, i2 (f2 = y - i2)","11840":"i2 is transferred from the stack to A.","11843":"The pointer to f2 is saved.","11844":"i2 is stored in the first byte of mem-3: a digit for printing.","11847":"i2 will not count as a digit for printing if it is zero; A is manipulated so that zero will produce zero but a non-zero digit will produce 1.","11851":"The zero or one is inserted into the first byte of mem-5 (the no. of digits for printing) and added  to the second byte of mem-5 (the number of digits before the decimal).","11858":"The pointer to f2 is restored.","11859":"Jump to store f2 in buffer (HL now points to f2, DE to i2).","11862":"e - 80 hex = e', the true exponent of i.","11864":"Is e' less than 28 decimal?","11866":"Jump if it is less.","11868":"n is formed in A.","11871":"And reduced to n - 7.","11873":"Then copied to B.","11874":"n - 7 is added in to the second byte of mem-5, the number of digits required before the decimal in x.","11879":"Then i is multiplied by 10^(-n+7)","11880":"This will bring it into medium range for printing.","11885":"Round the loop again to deal with the now medium-sized number.","11887":"DE now points to i, HL to f.","11888":"The mantissa of i is now in D', E', D, E.","11891":"Get the exchange registers.","11892":"True numerical bit 7 to D'.","11894":"Exponent byte e of i to A.","11895":"Back to the main registers.","11896":"True exponent e'=e - 80 hex to A.","11898":"This gives the required bit count.","11899":"The mantissa of i is now rotated left and all the bits of i are thus shifted into mem-4 and each byte of mem-4 is decimal adjusted at each shift.","11906":"All four bytes of i.","11908":"Back to the main registers.","11912":"Count of 5 bytes to C.","11914":"Get the byte of mem-4.","11915":"Shift it left, taking in the new bit.","11916":"Decimal adjust the byte.","11917":"Restore it to mem-4.","11918":"Point to next byte of mem-4.","11919":"Decrease the byte count by one.","11920":"Jump for each byte of mem-4.","11922":"Jump for each bit of INT (x).","11924":"A is cleared to receive the digits.","11931":"There are at most 9 digits.","11933":"The left nibble of mem-4 is discarded.","11935":"FF in C will signal a leading zero, 00 will signal a non-leading zero.","11937":"Left nibble of (HL) to A, right nibble of (HL) to left.","11939":"Jump if digit in A is not zero.","11941":"Test for a leading zero: it will now give zero reset.","11943":"Jump it it was a leading zero.","11945":"Insert the digit now.","11946":"Point to next destination.","11947":"One more digit for printing, and one more before the decimal.","11953":"Change the flag from leading zero to other zero.","11955":"The source pointer needs to be incremented on every second passage through the loop, when B is odd.","11960":"Jump back for all 9 digits.","11962":"Get counter: were there 9 digits excluding leading zeros?","11967":"If not, jump to get more digits.","11969":"Prepare to round: reduce count to 8.","11972":"Compare 9th digit, byte 4 of mem-4, with 4 to set carry for rounding up.","11977":"Jump forward to round up.","11980":"i is now deleted","11981":"f","11983":"DE now points to f.","11984":"The mantissa of f is now in D', E', D, E.","11987":"Get the exchange registers.","11988":"The exponent of f is reduced to zero, by shifting the bits of #80 - e places right, where L' contained e.","11993":"True numerical bit to bit 7 of D'.","11995":"Restore the main registers.","11996":"Now make the shift.","11999":"Get the digit count.","12002":"Are there already 8 digits?","12004":"If not, jump forward.","12006":"If 8 digits, just use f to round i up, rotating D' left to set the carry.","12009":"Restore main registers and jump JR 2F0C,PF-ROUND forward to round up.","12012":"Initial zero to C, count of 2 to B.","12015":"D'E'DE is multiplied by 10 in 2 stages, first DE then D'E', each byte by byte in 2 steps, and the integer part of the result is obtained in C to be passed into the print buffer.","12025":"The count and the result alternate between BC and BC'.","12028":"Look back once through the exchange registers.","12033":"Result to A for storing.","12034":"Count of digits so far in number to C.","12037":"Address the first empty byte.","12038":"Store the next digit.","12039":"Step up the count of digits.","12042":"Loop back until there are 8 digits.","12044":"Save the carry flag for the rounding.","12048":"Offset (number of digits in number) to BC.","12051":"Address the last byte of the number.","12054":"Copy C to B as the counter.","12055":"Restore the carry flag.","12056":"This is the last byte of the number.","12057":"Get the byte into A.","12058":"Add in the carry i.e. round up.","12060":"Store the rounded byte in the buffer.","12061":"If the byte is 0 or 10, B will be decremented and the final zero (or the 10) will not be counted for printing.","12066":"Reset the carry for a valid digit.","12067":"Jump if carry reset.","12069":"Jump back for more rounding or more final zeros.","12071":"There is overflow to the left;","12073":"an extra 1 is needed here.","12074":"It is also an extra digit before the decimal.","12077":"B now sets the count of the digits to be printed (final zeros will not be printed).","12081":"f is deleted.","12083":"The calculator offset saved on the stack is restored to HL'.","12086":"The counters are set.","12093":"If more than 9, or fewer than minus 4, digits are required before the decimal, then E-format will be needed.","12098":"Fewer than 4 means more than 4 leading zeros after the decimal.","12102":"Are there no digits before the?","12103":"so, print an initial zero.","12106":"Start by setting A to zero.","12107":"Subtract B: minus will mean there are digits before the decimal; jump forward to print them.","12111":"A is now required as a counter.","12112":"Jump forward to print the decimal part.","12114":"Copy the number of digits to be printed to A. If A is 0, there are still final zeros to print (B is non-zero), so jump.","12118":"Get a digit from the print buffer.","12119":"Point to the next digit.","12120":"Decrease the count by one.","12121":"Print the appropriate digit.","12124":"Loop back until B is zero.","12126":"It is time to print the decimal, A unless C is now zero; in that case, return - finished.","12129":"Add 1 to B - include the decimal.","12130":"Put the code for '.' into A.","12132":"Print the '.'.","12133":"Enter the character code for '0'.","12135":"Loop back to print all needed zeros.","12137":"Set the count for all remaining digits.","12138":"Jump back to print them.","12140":"The count of digits is copied to D.","12141":"It is decremented to give the exponent.","12142":"One digit is required before the decimal in E-format.","12144":"All the part of the number before the 'E' is now printed.","12147":"Enter the character code for 'E'.","12149":"Print the 'E'.","12150":"Exponent to C now for printing.","12151":"And to A for testing.","12152":"Its sign is tested.","12153":"Jump if it is positive.","12156":"Otherwise, negate it in A.","12158":"Then copy it back to C for printing.","12159":"Enter the character code for '-'.","12161":"Jump to print the sign.","12163":"Enter the character code for '+'.","12165":"Now print the sign: '+' or '-'.","12166":"BC holds the exponent for printing.","12168":"Jump back to print it and finish.","12171":"Save whichever DE pair is in use.","12172":"Copy the multiplicand from A to HL.","12175":"Copy it to DE too.","12177":"Double HL.","12178":"Double it again.","12179":"Add in DE to give HL=5*A.","12180":"Double again: now HL=10*A.","12181":"Copy C to DE (D is zero) for addition.","12182":"Now HL=10*A+C.","12183":"H is copied to C.","12184":"L is copied to A, completing the task.","12185":"The DE register pair is restored.","12186":"Finished.","12187":"Transfer the exponent to A.","12188":"Presume a positive number.","12190":"If the number is zero then the preparation is already finished.","12192":"Now point to the sign byte.","12193":"Set the zero flag for positive number.","12195":"Restore the true numeric bit.","12197":"Point to the first byte again.","12198":"Positive numbers have been prepared, but negative numbers need to be twos complemented.","12199":"Save any earlier exponent.","12200":"There are 5 bytes to be handled.","12203":"Point one-past the last byte.","12204":"Transfer the '5' to B.","12205":"Save the exponent in C.","12206":"Set carry flag for negation.","12207":"Point to each byte in turn.","12208":"Get each byte.","12209":"One's complement the byte.","12210":"Add in carry for negation.","12212":"Restore the byte.","12213":"Loop the '5' times.","12215":"Restore the exponent to A.","12216":"Restore any earlier exponent.","12217":"Finished.","12218":"HL is preserved.","12219":"AF is preserved.","12220":"M1 to C.","12221":"Next.","12224":"Next.","12228":"Next.","12230":"Next.","12236":"Next.","12222":"M2 to B.","12223":"Copy the sign of the result to (HL).","12225":"M1 to A.","12226":"M3 to C.","12227":"Save M2 & M3 on the machine stack.","12229":"M4 to C.","12231":"M5 to B.","12232":"HL now points to N1.","12233":"M1 to D.","12234":"N1 to E.","12235":"Save M1 & N1 on the machine stack.","12237":"N2 to D.","12238":"Next.","12239":"N3 to E.","12240":"Save N2 &N3 on the machine stack.","12241":"Get the exchange registers.","12242":"N2 to D' & N3 to E'.","12243":"M1 to H' & N1 to L'.","12244":"M2 to B' & M3 to C'.","12245":"Get the original set of registers.","12246":"Next.","12247":"N4 to D.","12248":"Next.","12249":"N5 to E.","12250":"Restore the original AF.","12251":"Restore the original HL.","12252":"Finished.","12253":"If the exponent difference is zero, the subroutine returns at once.","12255":"If the difference is greater #20, jump forward.","12259":"Save BC briefly.","12260":"Transfer the exponent difference to B to count the shifts right.","12261":"Arithmetic shift right for L', preserving the sign marker bits.","12264":"Rotate right with carry D', E', D & E.","12268":"Thereby shifting the whole five bytes of the number to the right as many times as B counts.","12273":"Loop back until B reaches zero.","12275":"Restore the original BC.","12276":"Done if no carry to retrieve.","12277":"Retrieve carry.","12280":"Return unless the carry rippled right back. (In this case there is nothing to add).","12281":"Fetch L', D' & E'.","12282":"Clear the A register.","12283":"Set the addend to zero in D',E', D & E, together with its marker byte (sign indicator) L', which was Hex.00 for a positive number and Hex.FF for a negative number.","12288":"ZEROS-4/5 produces only 4 zero bytes when called for near underflow at 3160.","12291":"Finished.","12292":"Add carry to rightmost byte.","12293":"Return if no overflow to left.","12294":"Continue to the next byte.","12295":"Return if no overflow to left.","12296":"Get the next byte.","12297":"Increment it too.","12298":"Jump if no overflow.","12300":"Increment the last byte.","12301":"Restore the original registers.","12302":"Finished.","12303":"Exchange the pointers.","12304":"Change the sign of the subtrahend.","12307":"Exchange the pointers back and continue into ADDITION.","12308":"Test whether the first bytes of both numbers are zero.","12310":"If not, jump for full addition.","12312":"Save the pointer to the second number.","12313":"Point to the second byte of the first number and save that pointer too.","12315":"Point to the less significant byte.","12316":"Fetch it in E.","12317":"Point to the more significant byte.","12318":"Fetch it in D.","12319":"Move on to the second byte of the second number.","12322":"Fetch it in A (this is the sign byte).","12323":"Point to the less significant byte.","12324":"Fetch it in C.","12325":"Point to the more significant byte.","12326":"Fetch it in B.","12327":"Fetch the pointer to the sign byte of the first number; put it in DE, and the number in HL.","12329":"Perform the addition: result in HL.","12330":"Result to DE, sign byte to HL.","12331":"Add the sign bytes and the carry into A; this will detect any overflow.","12333":"A non-zero A now indicates overflow.","12335":"Jump to reset the pointers and to do full addition.","12337":"Define the correct sign byte for the result.","12338":"Store it on the stack.","12339":"Point to the next location.","12340":"Store the low byte of the result.","12341":"Point to the next location.","12342":"Store the high byte of the result.","12343":"Move the pointer back to address the first byte of the result.","12346":"Restore STKEND to DE.","12347":"Finished.","12348":"Restore the pointer to the first number.","12349":"Restore the pointer to the second number.","12350":"Re-stack both numbers in full five byte floating-point form.","12353":"Exchange the registers.","12354":"Save the next literal address.","12355":"Exchange the registers.","12356":"Save pointer to the addend.","12357":"Save pointer to the augend.","12358":"Prepare the augend.","12361":"Save its exponent in B.","12362":"Exchange its pointers.","12363":"Prepare the addend.","12366":"Save its exponent in C.","12367":"If the first exponent is smaller, keep the first number in the addend position;","12373":"Save the larger exponent in A.","12370":"otherwise change the exponents and the pointers back again.","12374":"The difference between the exponents is the length of the shift right.","12375":"Get the two numbers from the stack.","12378":"Shift the addend right.","12381":"Restore the larger exponent.","12382":"HL is to point to the result.","12383":"Store the exponent of the result.","12384":"Save the pointer again.","12385":"M4 to H & M5 to L, (see FETCH-TWO).","12387":"Add the two right bytes. N2 to H' & N3 to L', (see FETCH-TWO).","12390":"Add left bytes with carry.","12392":"Result back in DE'.","12393":"Add H', L' and the carry; the resulting mechanisms will ensure that a single shift right is called if the sum of 2 positive numbers has overflowed left, or the sum of 2 negative numbers has not overflowed left.","12399":"The result is now in DED'E.","12400":"Get the pointer to the exponent.","12401":"The test for shift (H', L' were #00 for positive numbers and #FF for negative numbers).","12404":"A counts a single shift right.","12406":"The shift is called.","12409":"Add 1 to the exponent; this may lead to arithmetic overflow.","12412":"Test for negative result: get sign bit of L' into A (this now correctly indicates the sign of the result).","12417":"Store it in the second byte position of the result on the calculator stack.","12420":"If it is zero, then do not twos complement the result.","12422":"Get the first byte.","12423":"Negate it.","12425":"Complement the carry for continued negation, and store byte.","12427":"Get the next byte.","12428":"Ones complement it.","12429":"Add in the carry for negation.","12431":"Store the byte.","12432":"Proceed to get next byte into the A register.","12434":"Ones complement it.","12435":"Add in the carry for negation.","12437":"Store the byte.","12438":"Get the last byte.","12439":"Ones complement it.","12440":"Add in the carry for negation.","12442":"Done if no carry.","12444":"Else, get .5 into mantissa and add 1 to the exponent; this will be needed when two negative numbers add to give an exact power of 2, and it may lead to arithmetic overflow.","12447":"Give the error if required.","12453":"Clear the carry flag.","12451":"Store the last byte.","12454":"Exit via TEST-NORM.","12457":"BC is saved.","12458":"It is to be a 16 bit multiplication.","12460":"A holds the high byte.","12461":"C holds the low byte.","12462":"Initialise the result to zero.","12465":"Double the result.","12466":"Jump if overflow.","12468":"Rotate bit 7 of C into the carry.","12470":"Rotate the carry bit into bit 0 and bit 7 into the carry flag.","12471":"Jump if the carry flag is reset.","12473":"Otherwise add DE in once.","12474":"Jump if overflow.","12476":"Until 16 passes have been made.","12478":"Restore BC.","12479":"Finished.","12480":"If the number is zero, return with the carry flag set.","12484":"Point to the sign byte.","12485":"Get sign for result into A (like signs give plus, unlike give minus); also reset the carry flag.","12486":"Set the true numeric bit.","12488":"Point to the exponent again.","12489":"Return with carry flag reset.","12490":"Test whether the first bytes of OR (HL) both numbers are zero.","12492":"If not, jump for 'long' multiplication.","12494":"Save the pointers: to the second number.","12495":"And to the first number.","12496":"And to the second number yet again.","12497":"Fetch sign in C, number in DE.","12500":"Number to HL now.","12501":"Number to stack, second pointer to HL.","12502":"Save first sign in B.","12503":"Fetch second sign in C, number in DE.","12506":"Form sign of result in A: like signs give plus (00), unlike give minus (FF).","12508":"Store sign of result in C.","12509":"Restore the first number to HL.","12510":"Perform the actual multiplication.","12513":"Store the result in DE.","12514":"Restore the pointer to the first number.","12515":"Jump on overflow to 'full' multiplication.","12517":"These 5 bytes ensure that 00 FF 00 00 00 is replaced by zero; that they should not be needed if this number were excluded from the system (see after 303B above).","12522":"Now store the result on the stack.","12525":"Restore STKEND to DE.","12526":"Finished.","12527":"Restore the pointer to the second number.","12528":"Re-stack both numbers in full five byte floating-point form.","12531":"A is set to #00 so that the sign of the first number will go into A.","12532":"Prepare the first number, and  return if zero. (Result already zero.)","12536":"Exchange the registers.","12537":"Save the next literal address.","12538":"Exchange the registers.","12539":"Save the pointer to the multiplicand.","12540":"Exchange the pointers.","12541":"Prepare the 2nd number.","12544":"Exchange the pointers again.","12545":"Jump forward if 2nd number is zero.","12547":"Save the pointer to the result.","12548":"Get the two numbers from the stack.","12551":"M5 to A (see FETCH-TWO).","12552":"Prepare for a subtraction.","12553":"Initialise HL to zero for the result.","12555":"Exchange the registers.","12556":"Save M1 & N1 (see FETCH-TWO).","12557":"Also initialise HL' for the result.","12559":"Exchange the registers.","12560":"B counts 33 decimal, Hex.21, shifts.","12562":"Jump forward into the loop.","12564":"Jump forward to NO-ADD if no carry, i.e. the multiplier bit was reset.","12566":"Else, add the multiplicand in D'E'DE (see FETCH-TWO) into the result being built up on H'L'HL.","12571":"Whether multiplicand was added or not, shift result right in H'L'HL, i.e. the shift is done by rotating each byte with carry, so that any bit that drops into the carry is picked up by the next byte, and the shift continued into B'C'CA.","12581":"Shift right the multiplier in B'C'CA (see FETCH-TWO & above).","12584":"A final bit dropping into the carry will trigger another add of the multiplicand to the result.","12590":"Loop 33 times to get all the bits.","12592":"Move the result from: H'L'HL to D'E'DE.","12596":"Restore the exponents - M1 & N1.","12597":"Restore the pointer to the exponent byte.","12598":"Get the sum of the two exponent bytes in A, and the correct carry.","12600":"If the sum equals zero then clear the carry; else leave it unchanged.","12603":"Prepare to increase the exponent by #80.","12605":"These few bytes very cleverly make the correct exponent byte.","12607":"Rotating left then right gets the exponent byte (true exponent plus #80) into A.","12608":"If the sign flag is reset, no report of arithmetic overflow needed.","12611":"Report the overflow if carry rest.","12613":"Clear the carry now.","12614":"The exponent byte is now complete; but if A is zero a further check for overflow is needed.","12619":"If there is no carry set and the result is already in normal form (bit 7 of D' set) then there is overflow to report;","12620":"but if bit 7 of D' is reset, the result in just in range, i.e. just under 2**127.","12625":"Store the exponent byte, at last.","12626":"Pass the fifth result byte to A for the normalisation sequence, i.e. the overflow from L into B'.","12629":"If no carry then normalise now.","12631":"Else, deal with underflow (zero result) or near underflow (result 2**-128):","12633":"return exponent to A, test if A is zero (case 2**-128) and if so produce 2**-128 if number is normal;","12637":"otherwise produce zero.","12644":"Restore the exponent byte.","12640":"The exponent must then be set to zero (for zero) or 1 (for 2**-128).","12645":"Jump if case 2**-128.","12647":"Otherwise, put zero into second byte of result on the calculator stack.","12652":"Normalise the result by up to 32 decimal shifts left of D'E'DE (with A adjoined) until bit 7 of D' is set.","12671":"The exponent is decremented on each shift.","12672":"If the exponent becomes zero, then number from 2**-129 are rounded up to 2**-128.","12674":"Loop back, up to 32 times.","12676":"If bit 7 never became 1 then the whole result is to be zero.","12678":"After normalisation add back any final carry that went into A.","12686":"If it should ripple right back then set mantissa to 0.5 and increment the exponent.","12684":"Jump forward if the carry does not ripple right back.","12690":"This action may lead to arithmetic overflow (final case).","12693":"Save the result pointer.","12694":"Point to the sign byte in the result.","12695":"The result is moved from its present registers, D'E'DE, to BCDE; and then to ACDE.","12698":"The sign bit is retrieved from its temporary store and transferred to its correct position of bit 7 of the first byte of the mantissa.","12704":"The first byte is stored.","12705":"Next.","12706":"The second byte is stored.","12707":"Next.","12708":"The third byte is stored.","12709":"Next.","12710":"The fourth byte is stored.","12711":"Restore the pointer to the result.","12712":"Restore the pointer to second number.","12713":"Exchange the registers.","12715":"Exchange the registers.","12714":"Restore the next literal address.","12731":"Exchange the registers.","12716":"Finished","12719":"Use full floating-point forms.","12722":"Exchange the pointers.","12723":"A is set to #00, so that the sign of the first number will go into A.","12724":"Prepare the divisor and give the report for arithmetic overflow if it is zero.","12729":"Exchange the pointers.","12730":"Prepare the dividend and return if it is zero (result already zero).","12734":"Exchange the pointers.","12735":"Save the next literal address.","12736":"Exchange the registers.","12737":"Save pointer to divisor.","12738":"Save pointer to dividend.","12739":"Get the two numbers from the stack.","12742":"Exchange the registers.","12743":"Save M1 & N1 on the machine stack.","12744":"Copy the four bytes of the dividend from registers B'C'CB (i.e. M2, M3, M4 & M5; see FETCH-TWO) to the registers H'L'HL.","12749":"Clear A and reset the carry flag.","12750":"B will count upwards from -33 to -1, twos complement, #DF to #FF, looping on minus and will jump again on zero for extra precision.","12752":"Jump forward into the division loop for the first trial subtraction.","12754":"Shift the result left into B'C'CA, shifting out the bits already there, picking up 1 from the carry whenever it is set, and rotating left each byte with carry to achieve the 32 bit shift.","12763":"Move what remains of the dividend left in H'L'HL before the next trial subtraction;","12765":"if a bit drops into the carry, force no restore and a bit for the quotient, thus retrieving the lost bit and allowing a full 32-bit divisor.","12770":"Trial subtract divisor in D'E'DE from rest of dividend in H'L'HL; there is no initial carry (see previous step).","12776":"Jump forward if there is no carry.","12778":"Otherwise restore, i.e. add back the divisor. Then clear the carry so that there will be no bit for the quotient (the divisor 'did not go').","12784":"Jump forward to the counter.","12786":"Just subtract with no restore and go on to set the carry flag because the lost bit of the dividend is to be retrieved and used for the quotient.","12793":"One for the quotient in B'C'CA.","12794":"Step the loop count up by one.","12795":"Loop 32 times for all bits.","12798":"Save any 33rd bit for extra precision (the present carry).","12799":"Trial subtract yet again for any 34th bit; the PUSH AF above saves this bit too.","12801":"Now move the four bytes that form the mantissa bytes of the result from B'C'CA to D'E'DE.","12806":"Then put the 34th and 33rd bits into ‘B' to be picked up on normalisation.","12813":"Restore the exponent bytes, M1 & N1.","12814":"Restore the pointer to the result.","12815":"Get the difference between the two exponent bytes into A and set the carry flag if required.","12817":"Exit via DIVN-EXPT.","12820":"Get the exponent byte of X into A.","12821":"If A is zero, return since x is already a small integer.","12823":"Compare e, the exponent, to 81 hex.","12825":"Jump if e is greater than 80 hex.","12827":"Else, set the exponent to zero;","12829":"enter 32 decimal, 20 hex, into A and jump forward to NIL-BYTES to make all the bits of x be zero.","12833":"Compare e to 91 hex, 145 decimal.","12835":"Jump if e not 91 hex.","12837":"HL is pointed at the fourth byte of x, where the 17 bits of the integer part of x end after the first bit.","12840":"The first bit is obtained in A using 80 hex as a mask.","12843":"That bit and the previous 8 bits are tested together for zero.","12845":"HL is pointed at the second byte of x.","12846":"If already non-zero, the test can end.","12848":"Otherwise, the test for -65536 is now completed: 91 80 00 00 00 will leave the zero flag set now.","12851":"HL is pointed at the first byte of x.","12852":"If zero reset, the jump is made.","12854":"The first byte is set to zero.","12855":"HL points to the second byte.","12856":"The second byte is set to FF.","12858":"HL again points to the first byte.","12859":"The last 24 bits are to be zero.","12861":"The jump to NIL-BYTES completes the number 00 FF 00 00 00.","12863":"Jump with exponent byte 92 or more (it would be better to jump with 91 too).","12865":"Save STKEND in DE.","12866":"Range 129 <= A <= 144 becomes 126 >= A >= 111.","12867":"Range is now 15 dec >= A >= 0.","12869":"Point HL at second byte.","12870":"Second byte to D.","12871":"Point HL at third byte.","12872":"Third byte to E.","12873":"Point HL at first byte again.","12875":"Assume a positive number.","12877":"Now test for negative (bit 7 set).","12879":"Jump if positive after all.","12881":"Change the sign.","12882":"Insert true numeric bit, 1, in D.","12884":"Now test whether A >= 8 (one byte only) or two bytes needed.","12888":"Jump if two bytes needed.","12887":"Leave A unchanged.","12890":"Put the one byte into E.","12891":"And set D to zero.","12893":"Now 1 <= A <= 7 to count the shifts needed.","12894":"Jump if no shift needed.","12896":"B will count the shifts.","12897":"Shift D and E right B times to produce the correct number.","12901":"Loop until B is zero.","12903":"Store the result on the stack.","12906":"Restore STKEND to DE.","12907":"Finished.","12908":"Get the exponent byte of x into A.","12909":"Subtract 160 decimal, A0 hex, from e.","12911":"Return on plus - x has no significant non-integral part. (If the true exponent were reduced to zero, the 'binary point' would come at or after the end of the four bytes of the mantissa).","12912":"Else, negate the remainder; this gives the number of bits to become zero (the number of bits after the 'binary point').","12914":"Save the current value of DE (STKEND).","12915":"Make HL point one past the fifth byte.","12916":"HL now points to the fifth byte of x.","12917":"Get the number of bits to be set to zero in B and divide it by B to give the number of whole bytes implied.","12924":"Jump forward if the result is zero.","12926":"Else, set the bytes to zero;","12928":"B counts them.","12931":"Get A (mod 8); this is the number of bits still to be set to zero.","12933":"Jump to the end if nothing more to do.","12935":"B will count the bits now.","12936":"Prepare the mask.","12938":"With each loop a zero enters the mask from the right and thereby a mask of the correct length is produced.","12942":"The unwanted bits of (HL) are lost as the masking is performed.","12944":"Return the pointer to HL.","12945":"Return STKEND to DE.","12946":"Finished.","12947":"Call the subroutine, and then continue into it for the second call.","12954":"Save the 'other' pointer in DE.","12950":"Exchange the pointers at each call.","12951":"If the first byte is not zero, return - the number cannot be a 'small integer'.","12955":"Fetch the sign in C and the number in DE.","12958":"Clear the A register.","12959":"Point to the fifth location.","12960":"Set the fifth byte to zero.","12961":"Point to the fourth location.","12962":"Set the fourth byte to zero: bytes 2 and 3 will hold the mantissa.","12963":"Set B to 145 dec for the exponent i.e. for up to 16 bits in the integer.","12965":"Test whether D is zero so that at most 8 bits would be needed.","12967":"Jump if more than 8 bits needed.","12969":"Now test E too.","12970":"Save the zero in B (it will give zero exponent if E too is zero).","12971":"Jump if E is indeed zero.","12973":"Move E to D (D was zero, E not).","12974":"Set E to zero now.","12975":"Set B to 137 dec for the exponent - no more than 8 bits now.","12977":"Pointer to DE, number to HL.","12978":"Decrement the exponent on each shift.","12979":"Shift the number right one position.","12980":"Until the carry is set.","12982":"Sign bit to carry flag now.","12984":"Insert it in place as the number is shifted back one place - normal now.","12988":"Pointer to byte 4 back to HL.","12989":"Point to the third location.","12990":"Store the third byte.","12991":"Point to the second location.","12992":"Store the second byte.","12993":"Point to the first location.","12994":"Store the exponent byte.","12995":"Restore the 'other' pointer to DE.","12996":"Finished.","13385":"Move the parameter to B.","13386":"In effect a RST 0028 instruction but sets the counter.","13389":"Z,Z","13390":"2*Z","13391":"mem-0 holds 2*Z","13392":"-","13394":"mem-2 holds 0","13395":"B(R),B(R)","13396":"B(R),B(R),2*Z","13397":"B(R),2*B(R)*Z","13398":"B(R),2*B(R)*Z,B(R-1)","13399":"mem-1 holds B(R-1)","13400":"B(R),2*B(R)*Z-B(R-1)","13402":"B(R),2*B(R)*Z-B(R-1),A(R+1)","13408":"B(R),2*B(R)*Z-B(R-1)+A(R+1)","13409":"2*B(R)*Z-B(R-1)+A(R+1),B(R)","13410":"mem-2 holds B(R)","13411":"2*B(R)*Z-B(R-1)+A(R+1) = B(R+1)","13412":"B(R+1)","13414":"B(N),B(N-2)","13415":"B(N)-B(N-2)","13417":"Finished.","13627":"The single offset goes to the A register.","13628":"The range is now 01-06 & 09-0E.","13630":"This range is changed to: 00-02, 04-06, 08-0A & 0C-0E.","13635":"Then reduced to 00-07 with carry set for 'greater than or equal to' & 'less than'; the operations with carry set are then treated as their complementary operation once their values have been exchanged.","13646":"The numerical comparisons are now separated from the string comparisons by testing bit 2.","13650":"The numerical operations now have the range 00-01 with carry set for 'equal' and 'not equal'.","13651":"Save the offset.","13652":"The numbers are subtracted for the final tests.","13657":"The string comparisons now have the range 02-03 with carry set for 'equal' and 'not equal'.","13658":"Save the offset.","13659":"The lengths and starting addresses of the strings are fetched from the calculator stack.","13667":"The length of the second string.","13672":"Jump unless the second string is null.","13675":"Here the second string is either null or less than the first.","13679":"The carry is complemented to give the correct test results.","13682":"Here the carry is used as it stands.","13686":"The first string is now null, the second not.","13688":"Neither string is null, so their next bytes are compared.","13690":"The first byte is less.","13692":"The second byte is less.","13694":"The bytes are equal; so the lengths are decremented and a jump is made to BYTE-COMP to compare the next bytes of the reduced strings.","13703":"The carry is cleared here for the correct test results.","13704":"For the string tests, a zero is put on to the calculator stack.","13708":"These three tests, called as needed, give the correct results for all twelve comparisons. The initial carry is set for 'not equal' and 'equal', and the final carry is set for 'greater than', 'less than' and 'equal'.","13723":"Finished.","13724":"The parameters of the second string are fetched and saved.","13739":"Sufficient room is made available.","13729":"The parameters of the first string are fetched.","13733":"The lengths are now in HL and BC.","13734":"The parameters of the first string are saved.","13736":"The total length of the two strings is calculated and passed to BC.","13740":"The parameters of the new string are passed to the calculator stack.","13743":"The parameters of the first string are retrieved and the string copied to the work space as long as it is not a null string.","13751":"Exactly the same procedure is followed for the second string thereby giving 'A$+B$'.","13759":"Fetch the current value of STKEND.","13762":"Set DE to -5, twos complement.","13765":"Stack the value for STKEND.","13766":"Calculate STKEND-5.","13767":"DE now holds STKEND and HL holds STKEND-5.","13769":"The 'last value' is compressed into the A register.","13772":"Give the error report if X was greater than 255 decimal, or X was a negative number.","13776":"Save the compressed value of X.","13777":"Make one space available in the work space.","13781":"Fetch the value.","13782":"Copy the value to the work space.","13783":"Pass the parameters of the new string to the calculator stack.","13786":"Reset the pointers.","13787":"Finished.","13790":"The current value of CH-ADD is preserved on the machine stack.","13794":"The 'offset' for 'val' or 'val$' must be in the B register; it is now copied to A.","13795":"Produce +00 and carry set for 'val', +FB and carry reset for 'val$'.","13797":"Produce +FF (bit 6 therefore set) for 'val', but +00 (bit 6 reset) for 'val$'.","13798":"Save this 'flag' on the machine stack.","13799":"The parameters of the string are fetched; the starting address is saved;","13803":"one byte is added to the length and room made available for the string (+1) in the work space.","13805":"The starting address of the string goes to HL as a source address.","13806":"The pointer to the first new space goes to CH-ADD and to the machine stack.","13813":"Switch the pointers.","13811":"The string is copied to the work space, together with an extra byte.","13814":"The extra byte is replaced by a 'carriage return' character.","13817":"The syntax flag is reset and the string is scanned for correct syntax.","13824":"The character after the string is fetched.","13825":"A check is made that the end of the expression has been reached.","13827":"If not, the error is reported.","13829":"The starting address of the string is fetched.","13830":"The 'flag' for 'val/val$' is fetched and bit 6 is compared with bit 6 of the result of the syntax scan.","13836":"Report the error if they do not match.","13839":"Start address to CH-ADD again.","13842":"The flag is set for line execution.","13846":"The string is treated as a 'next expression' and a 'last value' produced.","13849":"The original value of CH-ADD is restored.","13853":"The subroutine exits via STK-PNTRS which resets the pointers.","13855":"One space is made in the work space and its address is copied to K-CUR, the address of the cursor.","13862":"This address is saved on the stack too.","13867":"Channel 'R' is opened, allowing the string to be 'printed' out into the work space.","13863":"The current channel address is saved on the machine stack.","13872":"The 'last value', X, is now printed out in the work space and the work space is expanded with each character.","13875":"Restore CURCHL to HL and restore the flags that are appropriate to it.","13879":"Restore the start address of the string.","13880":"Now the cursor address is one past the end of the string and hence the difference is the length.","13888":"Pass the parameters of the new string to the calculator stack.","13891":"Reset the pointers.","13892":"Finished.","13893":"The numerical parameter is compressed into the A register.","13896":"Is it smaller than 16 decimal?","13898":"If not, report the error.","13901":"The current channel address is saved on the machine stack.","13905":"The channel specified by the parameter is opened.","13908":"The signal is now accepted, like a 'key-value'.","13911":"The default length of the resulting string is zero.","13914":"Jump if there was no signal.","13916":"Set the length to 1 now.","13917":"Make a space in the work space.","13918":"Put the string into it.","13919":"Pass the parameters of the string to the calculator stack.","13922":"Restore CURCHL and the appropriate flags.","13926":"Exit, setting the pointers.","13929":"The parameters of the string are fetched.","13932":"The length is tested and the A register holding zero is carried forward is A$ is a null string.","13936":"The code of the first character is put into A otherwise.","13937":"The subroutine exits via STACK-A which gives the correct 'last value'.","13940":"The parameters of the string are fetched.","13943":"The subroutine exits via STACK-BC which gives the correct 'last value'.","13946":"Go to the alternative register set and save the next literal pointer on the machine stack.","13951":"Decrease BREG.","13952":"Restore the next literal pointer.","13953":"The jump is made on non-zero.","13955":"The next literal is passed over.","13956":"Return to the main register set.","13957":"Finished.","13958":"Go to the next alternate register set.","13959":"The next literal (jump length) is put in the E' register.","13960":"The number 00 hex or FF hex is formed in A according as E' is positive or negative, and is then copied to D'.","13964":"The registers H' & L' now hold the next literal pointer.","13966":"Finished.","13967":"Point to the third byte, which is zero or one.","13969":"Collect this byte in the A register.","13970":"Point to the first byte once again.","13972":"Test the third byte: is it zero?","13973":"Make the jump if the byte is non-zero, i.e. if the number is not-false.","13975":"Go to the alternate register set.","13976":"Pass over the jump length.","13977":"Back to the main set of registers.","13978":"Finished.","13979":"The return address to the calculator ('RE-ENTRY') is discarded.","13980":"Instead, the address in HL' is put on the machine stack and an indirect jump is made to it.","13982":"HL' will now hold any earlier address in the calculator chain of addresses.","13983":"Finished.","13984":"N,M","13985":"mem-0 holds M","13986":"N","13987":"N, N","13988":"N, N, M","13989":"N, N/M","13990":"N, INT (N/M)","13991":"N, INT (N/M),M","13992":"N, M, INT (N/M)","13993":"mem-0 holds INT (N/M)","13994":"N, M*INT (N/M)","13995":"n-M*INT (N/M)","13996":"n-M*INT (N/M), INT (N/M)","13998":"Finished.","13999":"X","14000":"X, X","14001":"X, (1/0)","14004":"X","14006":"Finished.","14007":"X, X","14008":"X, I(X)","14009":"mem-0 holds I(X)","14010":"X-I(X)","14011":"X-I(X), I(X)","14012":"I(X), X-I(X)","14013":"I(X), (1/0)","14016":"I(X), 1","14017":"I(X)-1","14019":"Finished.","14020":"X","14021":"X in full floating-point form","14022":"X, 1/LN 2","14028":"X/LN 2 = Y","14029":"Y, Y","14030":"Y, INT Y = N","14031":"mem-3 holds N","14032":"Y-N = W","14033":"W, W","14034":"2*W","14035":"2*W, 1","14036":"2*W-1 = Z","14037":"Z","14071":"2**W, N","14073":"The absolute value of N mod 256 decimal, is put into the A register.","14076":"Jump forward if N was negative.","14078":"Error if ABS N greater than 255.","14080":"Now add ABS N to the exponent.","14081":"Jump unless e greater than 255.","14085":"The result is to be zero if N is less than -255 decimal.","14087":"Subtract ABS N from the exponent as N was negative.","14088":"Zero result if e less than zero.","14090":"Minus e is changed to e.","14092":"The exponent, e, is entered.","14093":"Finished.","14099":"X","14100":"X in full floating-point form","14101":"X, X","14102":"X, (1/0)","14108":"X, 0","14109":"X","14111":"The exponent, e, goes into A.","14112":"X is reduced to X'.","14114":"The stack holds: X', e.","14118":"X', e, 128 (decimal)","14121":"X', e'","14122":"e', X'","14123":"e', X', X'","14124":"e', X', X',0.8 (decimal)","14130":"e', X', X'-0.8","14131":"e', X', (1/0)","14134":"X', e'","14135":"X', e', 1","14136":"X', e'-1","14137":"e'-1, X'","14139":"Double X' to give 2*X'.","14140":"e'-1,2*X'","14141":"X',e': provided X' is large | 2*X',e'-1: provided X' is small.","14142":"X',e',LN 2","14148":"X',e'*LN 2 = Y1 | 2*X', (e'-1)*LN 2 = Y2","14149":"Y1, X' | Y2, 2*X'","14150":"Y1, X', .5 | Y2, 2*X', .5","14151":"Y1, X'-.5 | Y2, 2*X'-.5","14152":"Y1, X'-.5, .5 | Y2, 2*X'-.5, .5","14153":"Y1, X'-1 | Y2, 2*X'-1","14154":"Y, X'-1, X'-1 | Y2, 2*X'-1, 2*X'-1","14155":"Y1, X'-1, X'-1, 2.5 | Y2, 2*X'-1, 2*X'-1, 2.5","14158":"Y1, X'-1,2.5*X'-3 = Z | Y2, 2*X'-1, 5*X'-3 = Z","14159":"Y1, X'-1, Z, 0.5 | Y2, 2*X'-1, Z, 0.5","14160":"Y1, X'-1, Z-0.5 | Y2, 2*X'-1, Z-0.5","14207":"Y1=LN (2**e'), LN X' | Y2=LN (2**(e'-1)), LN (2*X')","14208":"LN (2**e')*X') = LN X | LN (2**(e'-1)*2*X') = LN X","14210":"Finished: 'last value' is LN X.","14211":"X","14212":"X in full floating-point form","14213":"X, 1/(2*PI)","14219":"X/(2*PI)","14220":"X/(2*PI), X/(2*PI)","14221":"X/(2*PI), X/(2*PI), 0.5","14222":"X/(2*PI), X/(2*PI)+0.5","14223":"X/(2*PI), INT (X/(2*PI)+0.5)","14224":"X/(2*PI)-INT (X/(2*PI)+0.5)=Y","14225":"Y, Y","14226":"2*Y","14227":"2*Y, 2*Y","14228":"4*Y","14229":"4*Y, 4*Y","14230":"4*Y, ABS (4*Y)","14231":"4*Y, ABS (4*Y), 1","14232":"4*Y, ABS (4*Y)-1 = Z","14233":"4*Y, Z, Z","14234":"4*Y, Z, (1/0)","14235":"Mem-0 holds the result of the test.","14236":"4*Y, Z","14238":"4*Y","14239":"Case 1) 4*Y = V","14241":"4*Y, Z, 1","14242":"4*Y, Z-1","14243":"Z-1,4*Y","14244":"Z-1,(1/0)","14245":"Z-1","14247":"1-Z","14248":"Case 2: 1-Z = V | Case 3: Z-1 = V","14249":"Finished.","14250":"X","14251":"V","14252":"ABS V","14253":"ABS V, 1 ","14254":"ABS V-1","14255":"ABS V-1, (1/0)","14256":"ABS V-1 = W","14258":"1-ABS V","14259":"1-ABS V = W","14297":"Finished: 'last value' = SIN X or ('last value' = COS X)","14298":"X","14299":"X, X","14300":"X, SIN X","14301":"SIN X, X","14302":"SIN X, COS X","14303":"SIN X/COS X = TAN X, report arithmetic overflow if needed.","14304":"TAN X","14305":"Finished: 'last value' = TAN X.","14306":"Use the full floating-point form of X.","14309":"Fetch the exponent of X.","14310":"Jump forward for case 1: Y = X.","14314":"X","14315":"X, 1","14316":"X, -1","14317":"-1, X","14318":"-1/X","14319":"-1/X, -1/X","14320":"-1/X, (1/0)","14321":"-1/X, (1/0), PI/2","14322":"-1/X, PI/2, (1/0)","14323":"-1/X, PI/2","14325":"-1/X, -PI/2","14326":"Jump forward for case 3: Y = -1/X W = -PI/2","14328":"Y","14329":"Y, 0; Continue for case i: W = 0","14330":"W, Y","14331":"W, Y, Y","14332":"W, Y, Y, Y","14333":"W, Y, Y*Y","14334":"W, Y, Y*Y, Y*Y","14335":"W, Y, 2*Y*Y","14336":"W, Y, 2*Y*Y, 1","14337":"W, Y, 2*Y*Y-1 = Z","14383":"Case 1) W, ATN X; case 2) and case 3) W, ATN (-1/X)","14384":"ATN X - all cases now.","14386":"Finished: 'last value' = ATN X.","14387":"X","14388":"X, X","14389":"X, X, X","14390":"X, X*X","14391":"X, X*X, 1","14392":"X, X*X-1","14393":"X,1-X*X","14394":"X,SQR (1-X*X)","14395":"X,SQR (1-X*X), 1","14396":"X, 1+SQR (1-X*X)","14397":"X/(1+SQR (1-X*X)) = TAN(Y/2)","14398":"Y/2","14399":"Y/2, Y/2","14400":"Y = ASN X","14402":"Finished: 'last value' = ASN X.","14403":"X","14404":"ASN X","14405":"ASN X, PI/2","14406":"ASN X-PI/2","14407":"PI/2-ASN X = ACS X","14409":"Finished: 'last value' = ACS X.","14410":"X","14411":"X, X","14412":"X, (1/0)","14413":"X","14415":"X, 0.5","14417":"X, Y","14418":"Y, X","14419":"Y, X, X","14420":"Y, X, (1/0)","14421":"Y, X","14423":"Y, LN X","14424":"Y*LN X","14426":"Exit via EXP to form EXP(Y*LN X).","14429":"Y","14430":"Y, Y","14431":"Y, (1/0)","14432":"Y","14434":"Y, 0","14435":"0, Y","14436":"0, (1/0)","14437":"0","14439":"0, 1","14440":"1, 0","14441":"Exit via 'division' as dividing by zero gives 'arithmetic overflow'.","14442":"-","14443":"1","14444":"(1/0)","14445":"Finished: 'last value' is 0 or 1.","15616":"space","15624":"!","15632":"\"","15640":"#","15648":"$","15656":"%","15664":"&","15672":"'","15680":"(","15688":")","15696":"*","15704":"+","15712":",","15720":"-","15728":".","15736":"/","15872":"@","15744":"0","15752":"1","15760":"2","15768":"3","15776":"4","15784":"5","15792":"6","15800":"7","15808":"8","15816":"9","15824":":","15832":";","15840":"<","15848":"=","15856":">","15864":"?","16000":"P","15880":"A","15888":"B","15896":"C","15904":"D","15912":"E","15920":"f","15928":"G","15936":"H","15944":"I","15952":"J","15960":"K","15968":"L","15976":"M","15984":"N","15992":"O","16128":"Ł","14472":"Q","16008":"Q","16016":"R","16024":"S","16032":"T","16040":"U","16048":"V","16056":"W","16064":"X","16072":"Y","16080":"Z","16088":"[","16096":"\\","16104":"]","16112":"^","16120":"_","16256":"p","16136":"a","16144":"b","16152":"c","16160":"d","16168":"e","16176":"f","16184":"g","16192":"h","16200":"i","16208":"j","16216":"k","16224":"l","16232":"m","16240":"n","16248":"o","16264":"q","16272":"r","16280":"s","16288":"t","16296":"u","16304":"v","16312":"w","16320":"x","16328":"y","16336":"z","16344":"{","16352":"|","16360":"}","16368":"~","16376":"©"},"prefixComments":{"149":"THE TOKEN TABLE: All the tokens used by the Spectrum are expanded by reference to this table. The last code of each token is 'inverted' by having its bit 7 set.","19":"Unused","37":"Unused","43":"Unused","8":"THE 'ERROR' RESTART: The error pointer is made to point to the position of the error.","16":"THE 'PRINT A CHARACTER' RESTART: The A register holds the code of the character that is to be printed.","24":"THE 'COLLECT CHARACTER' RESTART: The contents of the location currently addressed by CH-ADD are fetched. A return is made if the value represents a printable character, otherwise CH-ADD is incremented and the tests repeated.","32":"THE 'COLLECT NEXT CHARACTER' RESTART: As a BASIC line is interpreted, this routine is called repeatedly to step along the line.","40":"THE 'CALCULATOR' RESTART: The floating point calculator is entered at CALCULATE.","48":"THE 'MAKE BC SPACES' RESTART: This routine creates free locations in the work space. The number of locations is determined by the current contents of the BC register pair.","56":"THE 'MASKABLE INTERRUPT' ROUTINE: The real time clock is incremented and the keyboard scanned whenever a maskable interrupt occurs.","3082":"THE 'MESSAGE PRINTING' SUBROUTINE: This subroutine is used to print messages and tokens. The A register holds the 'entry number' of the message or token in a table. The DE register pair holds the base address of the table.","3088":"Enter here when expanding token codes.","3092":"The table is searched and the correct entry printed.","3117":"Now consider whether a 'trailing space' is required.","3106":"The characters of the message/token are printed in turn.","13147":"THE 'CALCULATE' SUBROUTINE: This subroutine is used to perform floating-point calculations. These can be considered to be of three types: I) Binary operations, e.g. addition, where two numbers in floating-point form are added together to give one 'last value'. II) Unary operations, e.g. sin, where the 'last value' is changed to give the appropriate function result as a new 'last value'. III) Manipulatory operations, e.g. st-mem-0, where the 'last value' is copied to the first five bytes of the calculator's memory area.","13015":"THE TABLE OF ADDRESSES: This second table is a look-up table of the addresses of the sixty-six operational subroutines of the calculator. The offsets used to index into the table are derived either from the operation codes used in SCANNING, see 2734, etc., or from the literals that follow a RST 0028 instruction.","12997":"THE TABLE OF CONSTANTS: This first table holds the five useful and frequently needed numbers zero, one, a half, a half of pi and ten. The numbers are held in a condensed form which is expanded by the STACK LITERALS subroutine, see below, to give the required floating-point form.","13218":"THE 'SINGLE OPERATION' SUBROUTINE: (Offset 3B: 'fp-calc-2') This subroutine is only called from SCANNING at 2757 hex and is used to perform a single arithmetic operation. The offset that specifies which operation is to be performed is supplied to the calculator in the B register and subsequently transferred to the system variable BREG. The effect of calling this subroutine is essentially to make a jump to the appropriate subroutine for the single operation.","13225":"THE 'TEST 5-SPACES' SUBROUTINE: This subroutine tests whether there is sufficient room in memory for another 5-byte floating-point number to be added to the calculator stack.","13236":"THE 'STACK NUMBER' SUBROUTINE: This subroutine is called by BEEP and SCANNING twice to copy STKEND to DE, move a floating-point number to the calculator stack, and reset STKEND from DE. It calls 'MOVE-FP' to do the actual move.","13248":"THE 'MOVE A FLOATING-POINT NUMBER' SUBROUTINE: (Offset 31: 'duplicate') This subroutine moves a floating-point number to the top of the calculator stack (3 cases) or from the top of the stack to the calculator's memory area (1 case). It is also called through the calculator when it simply duplicates the number at the top of the calculator stack, the 'last value', thereby extending the stack by five bytes.","13254":"THE 'STACK LITERALS' SUBROUTINE: This subroutine places on the calculator stack, as a 'last value', the floating-point number supplied to it as 2, 3, 4 or 5 literals. In each case, the first literal supplied is divided by Hex.40, and the integer quotient plus 1 determines whether 1, 2, 3 or 4 further literals will be taken from the source to form the mantissa of the number. Any unfilled bytes of the five bytes that go to form a 5-byte floating-point number are set to zero. The first literal is also used to determine the exponent, after reducing mod Hex.40, unless the remainder is zero, in which case the second literal is used, as it stands, without reducing mod Hex.40. In either case, Hex.50 is added to the literal, giving the augmented exponent byte, e (the true exponent e' plus Hex.80). The rest of the 5 bytes are stacked, including any zeros needed, and the subroutine returns.","13303":"THE 'SKIP CONSTANTS' SUBROUTINE: This subroutine is entered with the HL register pair holding the base address of the calculator's table of constants and the A register holding a parameter that shows which of the five constants is being requested.","13318":"THE 'MEMORY LOCATION' SUBROUTINE: This subroutine finds the base address for each five byte portion of the calculator's memory area to or from which a floating-point number is to be moved from or to the calculator stack. It does this operation by adding five times the parameter supplied to the base address for the area which is held in the HL register pair. Note that when a FOR-NEXT variable is being handled then the pointers are changed so that the variable is treated as if it were the calculator's memory area (see address 1D20).","13327":"THE 'GET FROM MEMORY AREA' SUBROUTINE: (Offsets E0 to E5: 'get-mem-0' to 'get-mem-5') This subroutine is called using the literals E0 to E5 and the parameter derived from these literals is held in the A register. The subroutine calls MEMORY LOCATION to put the required source address into the HL register pair and MOVE A FLOATING-POINT NUMBER to copy the five bytes involved from the calculator's memory area to the top of the calculator stack to form a new 'last value'.","13339":"THE 'STACK A CONSTANT' SUBROUTINE: (offsets A0 to A4: 'stk-zero','stk-one','stk-half','stk-pi/2' & 'stk-ten') This subroutine uses SKIP CONSTANTS to find the base address of the requested constants from the calculator's table of constants and then calls STACK LITERALS, entering at STK-CONST, to make the expanded form of the constant the 'last value' on the calculator stack.","13357":"THE 'STORE IN MEMORY AREA' SUBROUTINE: (Offsets C0 to C5: 'st-mem-0' to 'st-mem-5') This subroutine is called using the literals C0 to C5 and the parameter derived from these literals is held in the A register. This subroutine is very similar to the GET FROM MEMORY subroutine but the source and destination pointers are exchanged.","13372":"THE 'EXCHANGE' SUBROUTINE: (Offset 01: 'exchange') This binary operation 'exchanges' the first number with the second number, i.e. the topmost two numbers on the calculator stack are exchanged.","13418":"THE 'ABSOLUTE MAGNITUDE' FUNCTION: (Offset 2A: 'abs') This subroutine performs its unary operation by ensuring that the sign bit of a floating-point number is reset.","13428":"'ABS' enters here.","13443":"The 'integer case' does a similar operation with the sign byte.","13422":"THE 'UNARY MINUS' OPERATION: (Offset 1B: 'negate') This subroutine performs its unary operation by changing the sign of the 'last value' on the calculator stack. Zero is simply returned unchanged. Full five byte floating-point numbers have their sign bit manipulated so that it ends up reset (for 'abs') or changed (for 'negate'). 'Small integers' have their sign byte set to zero (for 'abs') or changed (for 'negate').","13458":"THE 'SIGNUM' FUNCTION: (Offset 29: 'sgn') This subroutine handles the function SGN X and therefore returns a 'last value' of 1 if X is positive, zero if X is zero and -1 if X is negative.","13477":"THE 'IN' FUNCTION: (Offset 2C: 'in') This subroutine handles the function IN X. It inputs at processor level from port X, loading BC with X and performing the instruction IN A,(C).","13484":"THE 'PEEK' FUNCTION: (Offset 2B: 'peek') This subroutine handles the function PEEK X. The 'last value' is unstacked by calling FIND-INT2 and replaced by the value of the contents of the required location.","13491":"THE 'USR' FUNCTION: (Offset 2D: 'usr-no') This subroutine ('USR number' as distinct from 'USR string') handles the function USR X, where X is a number. The value of X is obtained in BC, a return address is stacked and the machine code is executed from location X.","13500":"THE 'USR-STRING' FUNCTION: (Offset 19: 'usr-$') This subroutine handles the function USR X$, where X$ is a string. The subroutine returns in BC the address of the bit pattern for the user-defined graphic corresponding to X$. It reports error A if X$ is not a single letter between a and u or a user-defined graphic.","13543":"REPORT A - Invalid argument.","13545":"THE 'TEST-ZERO' SUBROUTINE: This subroutine is called at least nine times to test whether a floating-point number is zero. This test requires that the first four bytes of the number should each be zero. The subroutine returns with the carry flag set if the number was in fact zero.","13561":"THE 'GREATER THAN ZERO' OPERATION: (Offset 37: 'greater-0') This subroutine returns a 'last value' of one if the present 'last value' is greater than zero and zero otherwise. It is also used by other subroutines to 'jump on plus'.","13569":"THE 'NOT' FUNCTION: (Offset 30: 'not') This subroutine returns a 'last value' of one if the present 'last value' is zero and zero otherwise. It is also used by other subroutines to 'jump on zero'.","13574":"THE 'LESS THAN ZERO' OPERATION: (Offset 36: 'less-0') This subroutine returns a 'last value' of one if the present 'last value' is less than zero and zero otherwise. It is also used by other subroutines to 'jump on minus'.","13579":"THE 'ZERO OR ONE' SUBROUTINE: This subroutine sets the 'last value' to zero if the carry flag is reset and to one if it is set. When called from 'E-TO-FP' however it creates the zero or one not on the stack but in mem-0.","13595":"THE 'OR' OPERATION: (Offset 07: 'or') This subroutine performs the binary operation 'X OR Y' and returns X if Y is zero and the value 1 otherwise.","13604":"THE 'NUMBER AND NUMBER' OPERATION: (Offset 08: 'no-&-no') This subroutine performs the binary operation 'X AND Y' and returns X if Y is non-zero and the value zero otherwise.","13613":"THE 'STRING AND NUMBER' OPERATION: (Offset 10: 'str-&-no') This subroutine performs the binary operation 'X$ AND Y' and returns X$ if Y is non-zero and a null string otherwise.","14261":"THE 'SINE' FUNCTION: (Offset 1F: 'sin') This subroutine handles the function SIN X and is the third of the four routines that use SERIES GENERATOR to produce Chebyshev polynomials. The approximation to SIN X is found as follows: 1) The argument X is reduced and in this case W = V directly. Note that -1 <=W <=1, as required for the series to converge. 2) The argument Z is formed, such that Z=2*W*W-1. 3) The SERIES GENERATOR is used to return (SIN (PI*W/2))/W 4) Finally a simple multiplication gives SIN X.","14262":"Perform step 1: The argument X is reduced and in this case W = V directly.","14263":"Perform step 2: The argument Z is formed, such that Z=2*W*W-1. The subroutine from now on is common to both the SINE and COSINE functions.","14270":"Perform step 3: Pass to the SERIES GENERATOR the parameter '6' and the six constants required. The SERIES GENERATOR is used to return (SIN (PI*W/2))/W. ","517":"THE KEY TABLES: There are six separate key tables. The final character code obtained depends on the particular key pressed and the 'mode' being used. (a) The main key table - L mode and CAPS SHIFT.","556":"(b) Extended mode. Letter keys and unshifted","95":"Unused","83":"THE 'ERROR-2' ROUTINE: The return address to the interpreter points to the 'DEFB' that signifies which error has occurred. This 'DEFB' is fetched and transferred to ERR-NR. The machine stack is cleared before jumping forward to clear the calculator stack.","102":"THE 'NON-MASKABLE INTERRUPT' ROUTINE: This routine is not used in the standard Spectrum but the code allows for a system reset to occur following activation of the NMI line. The system variable at 5CB0, named here NMIADD, has to have the value zero for the reset to occur.","116":"THE 'CH-ADD+1' SUBROUTINE: The address held in CH-ADD is fetched, incremented and restored. The contents of the location now addressed by CH-ADD is fetched. The entry points of TEMP-PTR1 and TEMP-PTR2 are used to set CH-ADD for a temporary period.","125":"THE 'SKIP-OVER' SUBROUTINE: The value brought to the subroutine in the A register is tested to see if it is printable. Various special codes lead to HL being incremented once, or twice, and CH-ADD amended accordingly.","608":"(d) Control codes. Digit keys and CAPS SHIFT.","582":"(c) Extended mode. Letter keys and either shift.","618":"(e) Symbol code. Letter keys and symbol shift.","644":"(f) Extended mode. Digit keys and symbol shift.","654":"THE 'KEYBOARD SCANNING' SUBROUTINE: This very important subroutine is called by both the main keyboard subroutine and the INKEY$ routine (in SCANNING). In all instances the E register is returned with a value in the range of +00 to +27, the value being different for each of the forty keys of the keyboard, or the value +FF, the no-key. The D register is returned with a value that indicates which single shift key is being pressed. If both shift keys are being pressed then the D and E registers are returned with the values for the CAPS SHIFT and SYMBOL SHIFT keys respectively. If no keys is being pressed then the DE register pair is returned holding +FFFF. The zero flag is returned reset if more than two keys are being pressed, or neither key of a pair of keys is a shift key.","662":"Now enter a loop. Eight passes are made with each pass having a different initial key value and scanning a different line of five keys. (The first line is CAPS SHIFT, Z, X, C, V.)","688":"Four tests are now made.","703":"THE 'KEYBOARD' SUBROUTINE: This subroutine is called on every occasion that a maskable interrupt occurs. In normal operation this will happen once every 20 ms. The purpose of this subroutine is to scan the keyboard and decode the key value. The code produced will, if the 'repeat' status allows it, be passed to the system variable LAST-K. When a code is put into this system variable bit 5 of FLAGS is set to show that a 'new' key has been pressed.","707":"A double system of 'KSTATE system variables' (KSTATE0 - KSTATE 3 and KSTATE4 - KSTATE7) is used from now on. The two sets allow for the detection of a new key being pressed (using one set) whilst still within the 'repeat period' of the previous key to have been pressed (details in the other set). A set will only become free to handle a new key if the key is held down for about 1/10 th. of a second. i.e. Five calls to KEYBOARD.","721":"After considering the first set change the pointer and consider the second set.","728":"Return now if the key value indicates 'no-key' or a shift key only.","732":"A key stroke that is being repeated (held down) is now separated from a new key stroke.","745":"But a new key will not be accepted unless one of the sets of KSTATE system variables is 'free'.","753":"The new key is to be accepted. But before the system variable LAST-K can be filled, the KSTATE system variables, of the set being used, have to be initialised to handle any repeats and the key's code has to be decoded.","764":"The decoding of a 'main code' depends upon the present state of MODE, bit 3 of FLAGS and the 'shift byte'.","784":"THE 'REPEATING KEY' SUBROUTINE: A key will 'repeat' on the first occasion after the delay period - REPDEL (normally 0.7 secs.) and on subsequent occasions after the delay period - REPPER (normally 0.1 secs.).","798":"THE 'K-TEST' SUBROUTINE: The key value is tested and a return made if 'no-key' or 'shift-only'; otherwise the 'main code' for that key is found.","812":"The 'main code' is found by indexing into the main key table.","819":"THE 'KEYBOARD DECODING' SUBROUTINE: This subroutine is entered with the 'main code' in the E register, the value of FLAGS in the D register, the value of MODE in the C register and the 'shift byte' in the B register. By considering these four values and referring, as necessary, to the six key tables a 'final code' is produced. This is returned in the A register.","830":"Only 'graphics' mode remains and the 'final code' for letter keys in graphics mode is computed from the 'main code'.","833":"Letter keys in extended mode are considered next.","842":"Key tables 'b-f' are all served by the following look-up routine. In all cases a 'final code' is found and returned.","847":"Letter keys in 'K', 'L' or 'C' modes are now considered. But first the special SYMBOL SHIFT codes have to be dealt with.","868":"The 'final code' values for tokens are found by adding +A5 to the 'main code'.","871":"Next the digit keys; and SPACE, ENTER & both shifts; are considered.","891":"The digit keys '0' to '7' in extended mode are to give either a 'paper colour code' or an 'ink colour code' depending on the use of the CAPS SHIFT.","898":"The digit keys '8' and '9' are to give 'BRIGHT' & 'FLASH' codes.","905":"The digit keys in graphics mode are to give the block graphic characters (+80 to +8F), the GRAPHICS code (+0F) and the DELETE code (+0C).","925":"Finally consider the digit keys in 'K', 'L' & 'C' modes.","934":"The codes for the various digit keys and SYMBOL SHIFT can now be found.","949":"THE 'BEEPER' SUBROUTINE: This subroutine is entered with the DE register pair holding the value 'f*t', where a note of given frequency 'f' is to have a duration of 't' seconds, and the HL register pair holding a value equal to the number of T states in the 'timing loop' divided by '4'. i.e. For the note 'middle C' to be produced for one second DE holds +0105 (INT(261.3 * 1)) and HL holds +066A (derived from 6,689/4 - 30.125).","977":"Now enter the sound generation loop. 'DE' complete passes are made, i.e. a pass for each cycle of the note. The HL register holds the 'length of the timing loop' with '16' T states being used for each '1' in the L register and '1,024' T states for each '1' in the H register.","991":"The loudspeaker is now alternately activated and deactivated.","1001":"After a full cycle the DE register pair is tested.","1010":"The parameters for the second half-cycle are set up.","1014":"Upon completion of the 'beep' the maskable interrupt has to be enabled.","1016":"THE 'BEEP' COMMAND ROUTINE: The subroutine is entered with two numbers on the calculator stack. The topmost number represents the 'pitch' of the note and the number underneath it represents the 'duration'.","1031":"Now perform several tests on I, the integer part of the 'pitch'.","1061":"Note: The range +70 to +127 will be rejected later on. The correct frequency for the 'pitch' i can now be found.","1077":"Now the fractional part of the 'pitch' can be taken into consideration.","1083":"The final frequency f is found by modifying the 'last value' according to the octave number.","1098":"The number of complete cycles in the 'beep' is given by 'f*t' so this value is now found.","1115":"Note: The value '437,500/f' gives the 'half-cycle' length of the note and reducing it by '30.125' allows for '120.5' T states in which to actually produce the note and adjust the counters etc. The values can now be transferred to the required registers.","1119":"Note: If the timing loop value is too large then an error will occur (returning via ERROR-1); thereby excluding 'pitch' values of '+70 to +127'.","1125":"However before making the 'beep' test the value 'f*t'.","1132":"Report B - integer out of range","1194":"THE 'PROGRAM NAME' SUBROUTINE (ZX81): The following subroutine applies to the ZX81 and was not removed when the program was rewritten for the SPECTRUM.","1218":"THE 'SA-BYTES' SUBROUTINE: This subroutine is called to SAVE the header information (from 09BA) and later the actual program/data block (from 099E).","1240":"A loop is now entered to create the pulses of the leader. Both the 'MIC on' and the 'MIC off' pulses are 2,168 T states in length. The colour of the border changes from RED to CYAN with each 'edge'. Note: An 'edge' will be a transition either from 'on' to 'off', or from 'off' to 'on'.","1256":"A sync pulse is now sent.","1270":"The header v. program/data flag will be the first byte to be SAVEd.","1278":"The byte SAVEing loop is now entered. The first byte to be SAVEd is the flag; this is followed by the actual data byte and the final byte sent is the parity byte that is built up by considering the values of all the earlier bytes.","1294":"When it is time to send the 'parity' byte then it is transferred to the L register for SAVEing.","1297":"The following inner loop produces the actual pulses. The loop is entered at SA-BIT-1 with the type of the bit to be SAVEd indicated by the carry flag. Two passes of the loop are made for each bit thereby making an 'off pulse' and an 'on pulse'. The pulses for a reset bit are shorter by 855 T states.","1317":"The '8 bit loop' is entered initially with the whole byte in the L register and the carry flag set. However it is re-entered after each bit has been SAVEd until the point is reached when the 'marker' passes to the carry flag leaving the L register empty.","1340":"Note: A reset bit will give a 'MIC off' pulse of 855 T states followed by a 'MIC on' pulse of 855 T states. Whereas a Set bit will give pulses of exactly twice as long. Note also that there are no gaps either between the sync pulse and the first bit of the flag, or between bytes.","1343":"THE 'SA/LD-RET' SUBROUTINE: This subroutine is common to both SAVEing and LOADing. The border is set to its original colour and the BREAK key tested for a last time.","1362":"Report D - BREAK-CONT repeats","1364":"Continue here.","1366":"THE 'LD-BYTES' SUBROUTINE: This subroutine is called to LOAD the header information (from 07BE) and later LOAD, or VERIFY, an actual block of data (from 0802).","2465":"THE CASSETTE MESSAGES: Each message is given with the last character inverted (+80 hex.).","2548":"THE 'PRINT-OUT' ROUTINES: All of the printing to the main part of the screen, the lower part of the screen and the printer is handled by this set of routines.","2577":"THE 'CONTROL CHARACTER' TABLE","1387":"The first stage of reading a tape involves showing that a pulsing signal actually exist (i.e. 'On/off' or 'off/on' edges.)","1648":"Report 2 - Variable not found","1393":"The next stage involves waiting a while and then showing that the signal is still pulsing.","1408":"Now accept only a 'leader signal'.","1423":"After the leader come the 'off' and 'on' part's of the sync pulse.","1439":"The bytes of the header or the program/data block can now be LOADed or VERIFied. But the first byte is the type flag.","1449":"The byte LOADing loop is used to fetch the bytes one at a time. The flag byte is first. This is followed by the data bytes and the last byte is the 'parity' byte.","1469":"If a data block is being verified then the freshly loaded byte is tested against the original byte.","1474":"A new byte can now be collected from the tape.","1482":"The 'LD-8-BITS' loop is used to build up a byte in the L register.","1496":"The 'parity matching' byte has to be updated with each new byte.","1499":"Passes round the loop are made until the 'counter' reaches zero. At that point the 'parity matching' byte should be holding zero.","1507":"THE 'LD-EDGE-2' AND 'LD-EDGE-1' SUBROUTINES: These two subroutines form the most important part of the LOAD/VERIFY operation. The subroutines are entered with a timing constant in the B register, and the previous border colour and 'edge-type' in the C register. The subroutines return with the carry flag set if the required number of 'edges' have been found in the time allowed; and the change to the value in the B register shows just how long it took to find the 'edge(s)'. The carry flag will be reset if there is an error. The zero flag then signals 'BREAK pressed' by being reset, or 'time-up' by being set. The entry point LD-EDGE-2 is used when the length of a complete pulse is required and LD-EDGE-1 is used to find the time before the next 'edge'.","1517":"The sampling loop is now entered. The value in the B register is incremented for each pass; 'time-up' is given when B reaches zero.","1530":"A new 'edge' has been found within the time period allowed for the search. So change the border colour and set the carry flag.","1541":"THE 'SAVE, LOAD, VERIFY & MERGE' COMMAND ROUTINES: The entry point SAVE-ETC is used for all four commands. The value held in T-ADDR however distinguishes between the four commands. The first part of the following routine is concerned with the construction of the 'header information' in the work space.","1602":"Report F - Invalid file name","1604":"Continue to handle the name of the program.","1611":"The name is now transferred to the work space (second location onwards).","1618":"The many different parameters, if any, that follow the command are now considered. Start by handling 'xxx \"name\" DATA'.","1650":"Continue with the handling of an existing array.","1669":"The next part is common to both 'old' and 'new' arrays. Note: Syntax path error.","1682":"The last part of the statement is examined before joining the other pathways.","1696":"Now consider 'SCREEN$'.","1731":"Now consider 'CODE'.","1761":"Look for a 'starting address'.","1781":"Fetch the 'length' as it was specified.","1785":"The parameters are now stored in the header area of the work space.","1808":"'SCREEN$' and 'CODE' are both of type 3.","1814":"Now consider 'LINE'; and 'no further parameters'.","1827":"Fetch the 'line number' that must follow 'LINE'.","1850":"'LINE' and 'no further parameters' are both of type 0.","1854":"The parameters that describe the program, and its variables, are found and stored in the header area of the work space.","1882":"In all cases the header information has now been prepared. The location 'IX+00' holds the type number. Locations 'IX+01 to IX+0A' holds the name (+FF in 'IX+01' if null). Locations 'IX+0B & IX+0C' hold the number of bytes that are to be found in the 'data block'. Locations 'IX+0D to IX+10' hold a variety of parameters whose exact interpretation depends on the 'type'. The routine continues with the first task being to separate SAVE from LOAD, VERIFY and MERGE.","1889":"In the case of a LOAD, VERIFY or MERGE command the first seventeen bytes of the 'header area' in the work space hold the prepared information, as detailed above; and it is now time to fetch a 'header' from the tape.","1895":"Now enter a loop; leaving it only when a 'header' has been LOADed.","1909":"The new 'header' is now displayed on the screen but the routine will only proceed if the 'new' header matches the 'old' header.","1934":"The appropriate message - 'Program:', 'Number array:', 'Character array:' or 'Bytes:' is printed.","1942":"The 'new name' is printed and as this is done the 'old' and the 'new' names are compared.","1958":"A loop is entered to print the characters of the 'new name'. The name will be accepted if the 'counter' reaches zero, at least.","1975":"The correct header has been found and the time has come to consider the three commands LOAD, VERIFY, & MERGE separately.","1995":"THE 'VERIFY' CONTROL ROUTINE: The verification process involves the LOADing of a block of data, a byte at a time, but the bytes are not stored - only checked. This routine is also used to LOAD blocks of data that have been described with 'SCREEN$ & CODE'.","2025":"The routine continues by considering the 'destination pointer'.","2036":"The VERIFY/LOAD flag is now considered and the actual LOAD made.","2050":"THE 'LOAD A DATA BLOCK' SUBROUTINE: This subroutine is common to all the 'LOADing' routines. In the case of LOAD & VERIFY it acts as a full return from the cassette handling routines but in the case of MERGE the data block has yet to be 'MERGEd'.","2054":"Report R - Tape loading error","2056":"THE 'LOAD' CONTROL ROUTINE: This routine controls the LOADing of a BASIC program, and its variables, or an array.","2073":"Consider now if there is enough room in memory for the new data block.","2085":"Make the actual test for room.","2094":"Now deal with the LOADing of arrays.","2124":"Space is now made available for the new array - at the end of the present variables area.","2163":"Now deal with the LOADing of a BASIC program and its variables.","2221":"The data block can now be LOADed.","2230":"THE 'MERGE' CONTROL ROUTINE: There are three main parts to this routine. 1) LOAD the data block into the work space. 2) MERGE the lines of the new program into the old program. 3) MERGE the new variables into the old variables. Start therefore with the LOADing of the data block.","2253":"The lines of the new program are MERGEd with the lines of the old program.","2258":"Enter a loop to deal with the lines of the new program.","2263":"Now enter an inner loop to deal with the lines of the old program.","2288":"In a similar manner the variables of the new program are MERGEd with the variables of the old program. A loop is entered to deal with each of the new variables in turn.","2297":"Now enter an inner loop to search the existing variables area.","2313":"The old and new variables match with respect to their first bytes but variables with long names will need to be matched fully.","2322":"Enter a loop to compare the letters of the long names.","2337":"Come here if the match was found.","2339":"And here if not. (A holds +80 - variable to be 'added'.)","2348":"THE 'MERGE A LINE OR A VARIABLE' SUBROUTINE: This subroutine is entered with the following parameters: Carry flag reset - MERGE a BASIC line. Carry flag set - MERGE a variable. Zero flag resset - It will be an 'addition'. Zero flag set - It is a 'replacement'. HL points to the start of the new entry. DE points to where it is to MERGE.","2366":"The new entry can now be made.","2408":"Fetch the 'new' pointer.","2416":"THE 'SAVE' CONTROL ROUTINE: The operation of SAVing a program or a block of data is very straightforward.","2436":"Upon receipt of a keystroke the 'header' is saved.","2520":"There follows a short delay before the program/data block is SAVEd.","2445":"There follows a short delay before the program/data block is SAVEd.","2595":"THE 'CURSOR LEFT' SUBROUTINE: The subroutine is entered with the B register holding the current line number and the C register with the current column number.","2621":"THE 'CURSOR RIGHT' SUBROUTINE: This subroutine performs an operation identical to the BASIC statement – PRINT OVER 1;CHR$ 32;","2639":"THE 'CARRIAGE RETURN' SUBROUTINE: If the printing being handled is going to the printer then a carriage return character leads to the printer buffer being emptied. If the printing is to the screen then a test for 'scroll?' is made before decreasing the line number.","1455":"THE 'PRINT COMMA' SUBROUTINE: The current column value is manipulated and the A register set to hold +00 (for TAB 0) or +10 (for TAB 16).","2655":"THE 'PRINT COMMA' SUBROUTINE: The current column value is manipulated and the A register set to hold +00 (for TAB 0) or +10 (for TAB 16).","2665":"THE 'PRINT A QUESTION MARK' SUBROUTINE: A question mark is printed whenever an attempt is made to print an unprintable code.","2669":"THE 'CONTROL CHARACTERS WITH OPERANDS' ROUTINE: The control characters from INK to OVER require a single operand whereas the control characters AT & TAB are required to be followed by two operands. The present routine leads to the control character code being saved in TVDATA-lo, the first operand in TVDATA-hi or the A register if there is only a single operand required, and the second operand in the A register.","2677":"Enter here when handling the characters AT & TAB.","2682":"Enter here when handling the colour items - INK to OVER.","2688":"The current 'output' routine address is changed temporarily.","2695":"Once the operands have been collected the routine continues.","2713":"Now deal with the AT control character.","2754":"And the TAB control character.","2777":"PRINTABLE CHARACTER CODES: The required character (or characters) is printed by calling PO-ANY followed by PO-STORE.","2780":"THE 'POSITION STORE' SUBROUTINE: The new position's 'line & column' values and the 'pixel' address are stored in the appropriate system variables.","2819":"The current position's parameters are fetched from the appropriate system variables.","2852":"THE 'PRINT ANY CHARACTER(S)' SUBROUTINE: Ordinary character codes, token codes and user-defined graphic codes, and graphic codes are dealt with separately.","2872":"Graphic characters are constructed in an Ad Hoc manner in the calculator's memory area; i.e. MEM-0 & MEM-1.","2898":"Token codes and user-defined graphic codes are now separated.","2917":"The required character form is identified.","2943":"THE 'PRINT ALL CHARACTERS' SUBROUTINE: This subroutine is used to print all '8*8' bit characters. On entry the DE register pair holds the base address of the character form, the HL register the destination address and the BC register pair the current 'line & column' values.","2969":"Now consider the present state of INVERSE & OVER","2999":"The character can now be printed. Eight passes of the loop are made - one for each 'pixel-line'.","3013":"Once the character has been printed the attribute byte is to set as required.","3027":"When the printer is being used the destination address has to be updated in increments of +20.","3131":"THE 'PO-SAVE' SUBROUTINE: This subroutine allows for characters to be printed 'recursively'. The appropriate registers are saved whilst 'PRINT-OUT' is called.","3035":"The appropriate attribute byte is identified and fetched. The new value is formed by manipulating the old value, ATTR-T, MASK-T and P-FLAG. Finally this new value is copied to the attribute area.","3137":"THE 'TABLE SEARCH' SUBROUTINE: The subroutine returns with the DE register pair pointing to the initial character of the required entry and the carry flag reset if a 'leading space' is to be considered.","3157":"THE 'TEST FOR SCROLL' SUBROUTINE: This subroutine is called whenever there might be the need to scroll the display. This occurs on three occasions; i. when handling a 'carriage return' character; ii. when using AT in an INPUT line; & iii. when the current line is full and the next line has to be used.","3206":"Report 5 - Out of screen","3208":"Now consider if the prompt 'scroll?' is required.","3213":"Proceed to give the prompt message.","3320":"The 'scroll?' message","3282":"The display is now scrolled.","3304":"The line in question will have 'lower part' attribute values and the new line at the bottom of the display may have 'ATTR-P' values so the attribute values are exchanged.","3328":"Report 0 - BREAK - CONT repeats","3330":"The lower part of the display is handled as follows:","3356":"The lower part of the screen is now scrolled 'A' number of times.","3405":"THE 'TEMPORARY COLOUR ITEMS' SUBROUTINE: This is a most important subroutine. It is used whenever the 'permanent' details are required to be copied to the 'temporary' system variables. First ATTR-T & MASK-T are considered","3422":"Next P-FLAG is considered.","3435":"THE 'CLS COMMAND' ROUTINE: In the first instance the whole of the display is 'cleared' - the 'pixels' are all reset and the attribute bytes are set to equal the value in ATTR-P - then the lower part of the display is reformed.","3454":"With the exception of the attribute bytes for lines '22' & '23' the attribute bytes for the lines in the lower part of the display will need to be made equal to ATTR-P.","3472":"The size of the lower part of the display can now be fixed.","3476":"It now remains for the following 'house keeping' tasks to be performed.","3503":"THE 'CLEARING THE WHOLE DISPLAY AREA' SUBROUTINE: This subroutine is called from; i. the CLS command routine. ii. the main execution routine, and iii. the automatic listing routine.","3545":"THE 'CL-SET' SUBROUTINE: This subroutine is entered with the BC register pair holding the line and column numbers of a character areas, or the C register holding the column number within the printer buffer. The appropriate address of the first character bit is then found. The subroutine returns via PO-STORE so as to store all the values in the required system variables.","3582":"THE 'SCROLLING' SUBROUTINE: The number of lines of the display that are to be scrolled has to be held on entry to the main subroutine in the B register.","3584":"The main entry point - from above and when scrolling for INPUT..AT.","3589":"Now enter the main scrolling loop. The B register holds the number of the top line to be scrolled, the HL register pair the starting address in the display area of this line and the C register the pixel line counter.","3597":"The pixel lines of the top lines of the 'thirds' of the display have to be moved across the 2K boundaries. (Each 'third' = 2K.)","3609":"The pixel lines within the 'thirds' can now be scrolled. The A register holds, on the first pass, +01 - +07, +09 - +0F or +11 - +17.","3634":"Now find if the loop has been used eight times - once for each pixel line.","3650":"It remains now to clear the bottom line of the display.","3652":"THE 'CLEAR LINES' SUBROUTINE: This subroutine will clear the bottom 'B' lines of the display.","3658":"Now enter a loop to clear all the pixel lines.","3688":"Now find if the loop has been used eight times.","3694":"Next the attribute bytes are set as required. The value in ATTR-P will be used when handling the main part of the display and the value in BORDCR when handling the lower part.","3720":"THE 'CL-ATTR' SUBROUTINE: This subroutine has two separate functions. 1) For a given display area address the appropriate attribute address is returned in the DE register pair. Note that the value on entry points to the 'ninth' line of a character. 2) For a given line number, in the B register, the number of character areas in the display from the start of that line onwards is returned in the BC register pair.","3739":"THE 'CL-ADDR' SUBROUTINE: For a given line number, in the B register, the appropriate display file address is formed in the HL register pair.","3756":"THE 'COPY' COMMAND ROUTINE: The one hundred and seventy six pixel lines of the display are dealt with one by one.","3775":"For each new line of characters the base address has to be updated.","3789":"THE 'COPY-BUFF' SUBROUTINE: This subroutine is called whenever the printer buffer is to have its contents passed to the printer.","3802":"Continue into the COPY-END routine.","3807":"THE 'CLEAR PRINTER BUFFER' SUBROUTINE: The printer buffer is cleared by calling this subroutine.","3828":"THE 'COPY-LINE' SUBROUTINE: The subroutine is entered with the HL register pair holding the base address of the thirty two bytes that form the pixel-line and the B register holding the pixel-line number.","3860":"Now enter a loop to handle these bytes.","3876":"Note: bit 2 - low starts the motor; bit 1 - high slows the motor and bit 7 is high for the actual 'printing'.","3884":"THE 'EDITOR' ROUTINES: The editor is called on two occasions: 1) From the main execution routine so that the user can enter a BASIC line into the system. 2) From the INPUT command routine. ","3896":"A loop is now entered to handle each keystroke.","3915":"Now analyse the code obtained.","3928":"The control keys - INK to TAB -are now considered.","3936":"AT & TAB would be handled as follows:","3948":"The other bytes for the control characters are now fetched.","3969":"THE 'ADDCHAR' SUBROUTINE: This subroutine actually adds a code to the current EDIT or INPUT line.","3986":"The editing keys are dealt with as follows:","4000":"THE 'EDITING KEYS' TABLE. This table contains offsets to the editing suboutines.","4009":"THE 'EDIT KEY' SUBROUTINE: When in 'editing mode' pressing the EDIT key will bring down the 'current BASIC line'. However in 'INPUT mode' the action of the EDIT key is to clear the current reply and allow a fresh one.","4083":"THE 'CURSOR DOWN EDITING' SUBROUTINE","4103":"THE 'CURSOR LEFT EDITING' SUBROUTINE","4108":"THE 'CURSOR RIGHT EDITING' SUBROUTINE","4117":"THE 'DELETE EDITING' SUBROUTINE","4126":"THE 'ED-IGNORE' SUBROUTINE","4132":"THE 'ENTER EDITING' SUBROUTINE","4145":"THE 'ED-EDGE' SUBROUTINE: The address of the cursor is in the HL register pair and will be decremented unless the cursor is already at the start of the line. Care is taken not to put the cursor between control characters and their parameters.","4158":"Now enter a loop to check that control characters are not split from their parameters.","4185":"THE 'CURSOR UP EDITING' SUBROUTINE","4214":"THE 'ED-SYMBOL' SUBROUTINE: If SYMBOL & GRAPHICS codes were used they would be handled as follows:","4223":"THE 'ED-ERROR' SUBROUTINE: Come here when there has been some kind of error.","4247":"THE 'CLEAR-SP' SUBROUTINE: The editing area or the work space is cleared as directed.","4264":"THE 'KEYBOARD INPUT' SUBROUTINE: This important subroutine returns the code of the last key to have bean pressed but note that CAPS LOCK, the changing of the mode and the colour control parameters are handled within the subroutine.","4305":"Now deal with the FLASH, BRIGHT& INVERSE codes.","4315":"The CAPS LOCK code and the mode codes are dealt with 'locally'.","4346":"The control key codes (apart from FLASH, BRIGHT & INVERSE) are manipulated.","4357":"The parameter is saved in K-DATA and the channel address changed from KEY-INPUT to KEY-NEXT.","4365":"Note: On the first pass entering at KEY-INPUT the A register is returned holding a control code' and then on the next pass, entering at KEY-NEXT, it is the parameter that is returned.","4371":"Now set the input address in the first channel area.","4379":"Finally exit with the required code in the A register.","4381":"THE 'LOWER SCREEN COPYING' SUBROUTINE: This subroutine is called whenever the line in the editing area or the INPUT area is to be printed in the lower part of the screen.","4432":"The remainder of any line that has been started is now completed with spaces printed with the 'permanent' PAPER colour.","4455":"Now deal with any errors.","4476":"The normal exit upon completion of the copying over of the editor the INPUT line.","4478":"But come here after an error.","4496":"THE 'SET-HL' AND 'SET-DE' SUBROUTINES:These subroutines return with HL pointing to the first location and DE the 'last' location of either the editing area or the work space.","4519":"THE 'REMOVE-FP' SUBROUTINE: This subroutine removes the hidden floating-point forms in a BASIC line.","4535":"THE 'INITIALISATION'/'NEW COMMAND' ROUTINE: The main entry point to this routine is at START/NEW (11CB). When entered from START (0000), as when power is first applied to the system, the A register holds zero and the DE register the value +FFFF. However the main entry point can also be reached following the execution of the NEW command routine.","4555":"The main entry point.","4570":"Now the memory is checked.","4608":"Overwrite the system variables when coming from START and initialise the user-defined graphics area.","4592":"Next restore the 'preserved' system variables. (Meaningless when coming from START.)","4633":"The remainder of the routine is common to both the START and the NEW operations.","4642":"Next the machine stack is set up.","4654":"The initialisation routine continues with:","5551":"THE 'INITIAL CHANNEL INFORMATION': Initially there are four channels - 'K', 'S', 'R', & 'P' - for communicating with the 'keyboard', 'screen', 'work space' and 'printer'. For each channel the output routine address comes before the input routine address and the channel's code.","5572":"Report J - Invalid I/O device","5574":"THE 'INITIAL STREAM DATA': Initially there are seven streams - +FD to +03.","5588":"THE 'WAIT-KEY' SUBROUTINE: This subroutine is the controlling subroutine for calling the current input subroutine.","5009":"THE REPORT MESSAGES: Each message is given with the last character inverted (+80 hex.).","4770":"THE 'MAIN EXECUTION' LOOP: The main loop extends from location 12A2 to location 15AE and it controls the 'editing mode', the execution of direct commands and the production of reports.","4815":"The 'edit-line' has passed syntax and the three types of line that are possible have to be distinguished from each other.","4867":"After the line has been interpreted and all the actions consequential to it have been completed a return is made to MAIN-4, so that a report can be made.","4834":"The 'edit-line' must start with a direct BASIC command so this line becomes the first line to be interpreted.","5461":"Report G - No room for line","5469":"THE 'MAIN-ADD' SUBROUTINE: This subroutine allows for a new BASIC line to be added to the existing BASIC program in the program area. If a line has both an old and a new version then the old one is 'reclaimed'. A new line that consists of only a line number does not go into the program area.","5604":"Report 8 - End of file","5606":"THE 'INPUT-AD' SUBROUTINE: The registers are saved and HL made to point to the input address.","5615":"THE 'MAIN PRINTING' SUBROUTINE: The subroutine is called with either an absolute value or a proper character code in the A register.","5623":"Now call the actual subroutine. HL points to the output or the input address as directed.","5633":"THE 'CHAN-OPEN' SUBROUTINE: This subroutine is called with the A register holding a valid stream number - normally +FD to +03. Then depending on the stream data a particular channel will be made the current channel.","5646":"Report O - Invalid stream","5648":"Using the stream data now find the base address of the channel information associated with that stream.","5677":"THE 'CHANNEL CODE LOOK-UP' TABLE","5684":"THE 'CHANNEL 'K' FLAG' SUBROUTINE","5698":"THE 'CHANNEL 'S' FLAG' SUBROUTINE","5709":"THE 'CHANNEL 'P' FLAG' SUBROUTINE","5714":"THE 'MAKE-ROOM' SUBROUTINE: This is a very important subroutine. It is called on many occasions to 'open up' an area. In all cases the HL register pair points to the location after the place where 'room' is required and the BC register pair holds the length of the 'room' needed. When a single space only is required then the subroutine is entered at ONE-SPACE.","5732":"THE 'POINTERS' SUBROUTINE: Whenever an area has to be 'made' or 'reclaimed' the system variables that address locations beyond the 'position' of the change have to be amended as required. On entry the BC register pair holds the number of bytes involved and the HL register pair addresses the location before the 'position'.","5739":"A loop is now entered to consider each pointer in turn. Only those pointers that point beyond the 'position' are changed.","5763":"Now find the size of the block to be moved.","5775":"THE 'COLLECT A LINE NUMBER' SUBROUTINE: On entry the HL register pair points to the location under consideration. If the location holds a value that constitutes a suitable high byte for a line number then the line number is returned in DE. However if this is not so then the location addressed by DE is tried instead; and should this also be unsuccessful line number zero is returned.","5781":"The usual entry point is at LINE-NO.","5790":"THE 'RESERVE' SUBROUTINE: This subroutine is normally called by using RST 0030,BC-SPACES. On entry here the last value on the machine stack is WORKSP and the value above it is the number of spaces that is to be 'reserved'.","5808":"THE 'SET-MIN' SUBROUTINE: This subroutine resets the editing area and the areas after it to their minimum sizes. In effect it 'clears' the areas.","5823":"Entering here will 'clear' the work space and the calculator stack.","5829":"Entering here will 'clear' only the calculator stack.","5835":"In all cases make MEM address the calculator's memory area.","5844":"THE 'RECLAIM THE EDIT-LINE' SUBROUTINE'","5851":"THE 'INDEXER' SUBROUTINE: This subroutine is used on several occasions to look through tables. The entry point is at INDEXER.","5861":"THE 'CLOSE #' COMMAND ROUTINE: This command allows the user to CLOSE streams. However for streams +00 to +03 the 'initial' stream data is restored and these streams cannot therefore be CLOSEd.","5889":"THE 'CLOSE-2' SUBROUTINE: The code of the channel associated with the stream being closed has to be 'K', 'S', or 'P'.","5916":"THE 'CLOSE STREAM' SUBROUTINE","5918":"THE 'STREAM DATA' SUBROUTINE","5925":"Report O - Invalid stream","5927":"Continue with valid stream numbers.","5942":"THE 'OPEN #' COMMAND ROUTINE: This command allows the user to OPEN streams. A channel code must be supplied and it must be 'K', 'k', 'S', 's', 'P', or 'p'.","5981":"THE 'OPEN-2' SUBROUTINE: The appropriate stream data bytes for the channel that is associated with the stream being OPENed are found.","5989":"Report F - Invalid file name","5991":"Continue if no error occurred.","6010":"THE 'OPEN STREAM LOOK-UP' TABLE","6017":"THE 'OPEN-K' SUBROUTINE","6021":"THE 'OPEN-S' SUBROUTINE","6025":"THE 'OPEN-P' SUBROUTINE","6035":"THE 'CAT, ERASE, FORMAT & MOVE' COMMAND ROUTINES: In the standard SPECTRUM system the use of these commands leads to the production of report O - Invalid stream.","6037":"THE 'LIST & LLIST' COMMAND ROUTINES: The routines in this part of the 16K program are used to produce listings of the current BASIC program. Each line has to have its line number evaluated, its tokens expanded and the appropriate cursors positioned. The entry point AUTO-LIST is used by both the MAIN EXECUTION routine and the EDITOR to produce a single page of the listing. ","6079":"The 'automatic' number has now to be altered to give a listing with the 'current' line appearing near the bottom of the screen.","6094":"A loop is now entered. The 'automatic' line number is increased on each pass until it is likely that the 'current' line will show on a listing.","6113":"Now the 'automatic' listing can be made.","6133":"THE 'LLIST' ENTRY POINT: The printer channel will need to be opened.","6137":"THE 'LIST' ENTRY POINT: The 'main screen' channel will need to be opened.","6175":"Come here if the stream was unaltered.","6197":"Now the controlling loop for printing a series of lines is entered.","6229":"THE 'PRINT A WHOLE BASIC LINE' SUBROUTINE: The HL register pair points to the start of the line - the location holding the high byte of the line number. Before the line number is printed it is tested to determine whether it comes before the 'current' line, is the 'current' line or comes after.","6292":"Now enter a loop to print all the codes in the rest of the BASIC line - jumping over floating-point forms as necessary.","6324":"The line has now been printed.","6326":"THE 'NUMBER' SUBROUTINE: If the A register holds the 'number marker' then the HL register pair is advanced past the floating-point form.","6337":"THE 'PRINT A FLASHING CHARACTER' SUBROUTINE: The 'error cursor' and the 'mode cursors' are printed using this subroutine.","6369":"THE 'PRINT THE CURSOR' SUBROUTINE: A return is made if it is not the correct place to print the cursor but if it is then either 'C', 'E', 'G', 'K' or 'L' will be printed.","6415":"THE 'LN-FETCH' SUBROUTINE: This subroutine is entered with the HL register pair addressing a system variable - S-TOP or E-PPC. The subroutine returns with the system variable holding the line number of the following line.","6428":"The entry point LN-STORE is used by the EDITOR.","6437":"THE 'PRINTING CHARACTERS IN A BASIC LINE' SUBROUTINE: All of the character/token codes in a BASIC line are printed by repeatedly calling this subroutine. The entry point OUT-SP-NO is used when printing line numbers which may require leading spaces.","6443":"The HL register pair holds the line number and the BC register the value for 'repeated subtraction'. (BC holds '-1000, -100 or -10'.)","6455":"The entry point OUT-CHAR is used for all characters, tokens and control characters.","6510":"THE 'LINE-ADDR' SUBROUTINE: For a given line number, in the HL register pair, this subroutine returns the starting address of that line or the 'first line after', in the HL register pair, and the start of the previous line in the DE register pair. If the line number is being used the zero flag will be set. However if the 'first line after' is substituted then the zero flag is returned reset.","6516":"Now enter a loop to test the line number of each line of the program against the given line number until the line number is matched or exceeded.","6528":"THE 'COMPARE LINE NUMBERS' SUBROUTINE: The given line number in the BC register pair is matched against the addressed line number.","6536":"THE 'FIND EACH STATEMENT' SUBROUTINE: This subroutine has two distinct functions. 1) It can be used to find the 'D'th. statement in a BASIC line - returning with the HL register pair addressing the location before the start of the statement and the zero flag set. 2) Also the subroutine can be used to find a statement, if any, that starts with a given token code (in the E register).","6544":"Enter a loop to handle each statement in the BASIC line.","6552":"Now enter another loop to consider the individual characters in the line to find where the statement ends.","6584":"THE 'NEXT-ONE' SUBROUTINE: This subroutine can be used to find the 'next line' in the program area or the 'next variable' in the variables area. The subroutine caters for the six different types of variable that are used in the SPECTRUM system.","6619":"In all cases the address of the 'next' line or variable is found.","6621":"THE 'DIFFERENCE' SUBROUTINE: The 'length' between two 'starts' is formed in the BC register pair. The pointers are reformed but returned exchanged.","6629":"THE 'RECLAIMING' SUBROUTINE: The entry point RECLAIM-1 is used when the address of the first location to be reclaimed is in the DE register pair and the address of the first location to be left alone is in the HL register pair. The entry point RECLAIM-2 is used when the HL register pair points to the first location to be reclaimed and the BC register pair holds the number of the bytes that are to be reclaimed.","6651":"THE 'E-LINE-NO' SUBROUTINE: This subroutine is used to read the line number of the line in the editing area. If there is no line number, i.e. a direct BASIC line, then the line number is considered to be zero. In all cases the line number is returned in the BC register pair.","6683":"THE 'REPORT AND LINE NUMBER PRINTING' SUBROUTINE: The entry point OUT-NUM-1 will lead to the number in the BC register pair being printed. Any value over '9,999' will not however be printed correctly. The entry point OUT-NUM-2 will lead to the number indirectly addressed by the HL register pair being printed. This time any necessary leading spaces will appear. Again the limit of correctly printed numbers is '9,999'.","6704":"Now the integer form of the number in the HL register pair is printed.","6728":"THE SYNTAX TABLES: 1) i. The offset table","6778":"THE SYNTAX TABLES: 2) The parameter table. For each of the fifty BASIC commands there are up to eight entries in the parameter table. These entries comprise command class details, required separators and, where appropriate, command routine addresses.","6935":"THE 'MAIN PARSER' OF THE BASIC INTERPRETER: The parsing routine of the BASIC interpreter is entered at LINE-SCAN when syntax is being checked, and at LINE-RUN when a BASIC program of one or more statements is to be executed. Each statement is considered in turn and the system variable CH-ADD is used to point to each code of the statement as it occurs in the program area or the editing area.","6952":"THE STATEMENT LOOP: Each statement is considered in turn until the end of the line is reached.","6973":"A statement has been identified so, first, its initial command is considered.","6994":"Each of the command class routines applicable to the present command are executed in turn. Any required separators are also considered.","7023":"THE 'SEPARATOR' SUBROUTINE: The report - 'Nonsense in BASIC is given if the required separator is not present. But note that when syntax is being checked the actual report does not appear on the screen - only the 'error marker'.","7030":"THE 'STMT-RET' SUBROUTINE: After the correct interpretation of a statement a return is made to this entry point.","7035":"Report L - 'BREAK into program'","7037":"Continue here as the BREAK key was not pressed.","7050":"THE 'LINE-RUN' ENTRY POINT: This entry point is used wherever a line in the editing area is to be 'run'. In such a case the syntax/run flag (bit 7 of FLAGS) will be set. The entry point is also used in the syntax checking of a line in the editing area that has more than one statement (bit 7 of FLAGS will be reset).","7070":"THE 'LINE-NEW' SUBROUTINE: There has been a jump in the program and the starting address of the new line has to be found.","7088":"Report 0 - 'OK'","7090":"THE 'REM' COMMAND ROUTINE: The return address to STMT-RET is dropped which has the effect of forcing the rest of the line to be ignored.","7091":"THE 'LINE-END' ROUTINE: If checking syntax a simple return is made but when 'running' the address held by NXTLIN has to be checked before it can be used.","7103":"THE 'LINE-USE' ROUTINE: This short routine has three functions; 1) Change statement zero to statement '1'; 2) Find the number of the new line and enter it into PPC; & 3) Form the address of the start of the line after.","7121":"THE 'NEXT-LINE' ROUTINE: On entry the HL register pair points to the location after the end of the 'next' line to be handled and the DE register pair to the location before the first character of the line. This applies to lines in the program area and also to a line in the editing area - where the next line will be the same line again whilst there are still statements to be interpreted.","7148":"Report N - 'Statement lost'","7150":"THE 'CHECK-END' SUBROUTINE: This is an important routine and is called from many places in the monitor program when the syntax of the edit-line is being checked. The purpose of the routine is to give an error report if the end of a statement has not been reached and to move on to the next statement if the syntax is correct.","7156":"THE 'STMT-NEXT' ROUTINE: If the present character is a 'carriage return' then the 'next statement' is on the 'next line'; if ' : ' it is on the same line; but if any other character is found then there is an error in syntax.","7169":"THE 'COMMAND CLASS' TABLE","7181":"THE 'COMMAND CLASSES - 00, 03 & 05': The commands of class-03 may, or may not, be followed by a number. e.g. RUN & RUN 200.","7184":"The commands of class-00 must not have any operands. e.g. COPY & CONTINUE.","7185":"The commands of class-05 may be followed by a set of items. e.g. PRINT & PRINT \"222\".","7190":"THE 'JUMP-C-R' ROUTINE: After the command class entries and the separator entries in the parameter table have been considered the jump to the appropriate command routine is made.","7199":"THE 'COMMAND CLASSES - 01, 02 & 04': These three command classes are used by the variable handling commands - LET, FOR & NEXT and indirectly by READ & INPUT. Command class 01 is concerned with the identification of the variable in a LET, READ or INPUT statement.","7202":"THE 'VARIABLE IN ASSIGNMENT' SUBROUTINE: This subroutine develops the appropriate values for the system variables DEST & STRLEN.","7214":"Report 2 - Variable not found","7216":"Continue with the handling of existing variables.","7238":"The pathways now come together to set STRLEN & DEST as required. For all numeric variables and 'new' string & string array variables STRLEN-lo holds the 'letter' of the variable's name. But for 'old' string & string array variables whether 'sliced' or complete it holds the 'length' in 'assignment'.","7242":"DEST holds the address for the 'destination of an 'old' variable but in effect the 'source' for a 'new' variable.","7246":"Command class 02 is concerned with the actual calculation of the value to be assigned in a LET statement.","7254":"THE 'FETCH A VALUE' SUBROUTINE: This subroutine is used by LET, READ & INPUT statements to first evaluate and then assign values to the previously designated variable. The entry point VAL-FET-1 is used by LET & READ and considers FLAGS whereas the entry point VAL-FET-2 is used by INPUT and considers FLAGX.","7276":"THE 'COMMAND CLASS 04' ROUTINE: The command class 04 entry point is used by FOR & NEXT statements.","7289":"THE 'EXPECT NUMERIC/STRING EXPRESSIONS' SUBROUTINE: There is a series of short subroutines that are used to fetch the result of evaluating the next expression. The result from a single expression is returned as a 'last value' on the calculator stack. The entry point NEXT-2NUM is used when CH-ADD needs updating to point to the start of the first expression.","7290":"The entry point EXPT-2NUM (EQU. CLASS-08) allows for two numeric expressions, separated by a comma, to be evaluated.","7298":"The entry point EXPT-1NUM (EQU. CLASS-06) allows for a single numeric expression to be evaluated.","7306":"Report C - Nonsense in BASIC","7308":"The entry point EXPT-EXP (EQU. CLASS-0A) allows for a single string expression to be evaluated.","7318":"THE 'SET PERMANENT COLOURS' SUBROUTINE (EQU. CLASS-07): This subroutine allows for the current temporary colours to be made permanent. As command class 07 it is in effect the command routine for the six colour item commands.","7351":"The following instructions cleverly copy the even bits of the supplied byte to the odd bits. In effect making the permanent bits the same as the temporary ones.","7358":"THE 'COMMAND CLASS 09' ROUTINE: This routine is used by PLOT, DRAW & CIRCLE statements in order to specify the default conditions of 'FLASH 8; BRIGHT 8; PAPER 8;' that are set up before any embedded colour items are considered.","7387":"THE 'COMMAND CLASS 0B' ROUTINE: This routine is used by SAVE, LOAD, VERIFY & MERGE statements.","7390":"THE 'FETCH A NUMBER' SUBROUTINE: This subroutine leads to a following numeric expression being evaluated but zero being used instead if there is no expression.","7398":"The calculator is now used to add the value zero to the calculator stack.","7406":"THE 'STOP' COMMAND ROUTINE: The command routine for STOP contains only a call to the error handling routine.","7408":"THE 'IF' COMMAND ROUTINE: On entry the value of the expression between the IF and the THEN is the 'last value' on the calculator stack. If this is logically true then the next statement is considered; otherwise the line is considered to have been finished.","7414":"Now use the calculator to 'delete' the last value on the calculator stack but leave the DE register pair addressing the first byte of the value.","7427":"THE 'FOR' COMMAND ROUTINE: This command routine is entered with the VALUE and the LIMIT of the FOR statement already on the top of the calculator stack.","7440":"There has not been a STEP supplied so the value '1' is to be used.","7446":"The three values on the calculator stack are the VALUE (v), the LIMIT (l) and the STEP (s). These values now have to be manipulated.","7453":"A FOR control variable is now established and treated as a temporary calculator memory area.","7459":"The variable that has been found may be a simple numeric variable using only six locations in which case it will need extending.","7476":"The initial values for the LIMIT and the STEP are now added.","7487":"The looping line number and statement number are now entered.","7500":"The NEXT-LOOP subroutine is called to test the possibility of a 'pass' and a return is made if one is possible; otherwise the statement after for FOR - NEXT loop has to be identified.","7524":"Now a search is made in the program area, from the present point onwards, for the first occurrence of NEXT followed by the correct variable.","7548":"NEWPPC holds the line number of the line in which the correct NEXT was found. Now the statement number has to be found and stored in NSPPC.","7556":"REPORT I - FOR without NEXT","7558":"THE 'LOOK-PROG' SUBROUTINE: This subroutine is used to find occurrences of either DATA, DEF FN or NEXT. On entry the appropriate token code is in the E register and the HL register pair points to the start of the search area.","7563":"Now a loop is entered to examine each further line in the program.","7595":"THE 'NEXT' COMMAND ROUTINE: The 'variable in assignment' has already been determined (see CLASS-04,1C6C); and it remains to change the VALUE as required.","7620":"The result of adding the VALUE and the STEP is now tested against the LIMIT by calling NEXT-LOOP.","7609":"Next the variable's VALUE and STEP are manipulated by the calculator.","7624":"Otherwise collect the 'looping' line number and statement.","7640":"Report 1 - NEXT without FOR","7642":"THE 'NEXT-LOOP SUBROUTINE: This subroutine is used to determine whether the LIMIT has been exceeded by the present VALUE. Note has to be taken of the sign of the STEP. The subroutine returns the carry flag set if the LIMIT is exceeded.","7660":"THE 'READ' COMMAND ROUTINE: The READ command allows for the reading of a DATA list and has an effect similar to a series of LET statements. Each assignment within a single READ statement is dealt with in turn. The system variable X-PTR is used as a storage location for the pointer to the READ statement whilst CH-ADD is used to step along the DATA list.","7688":"Report E - Out of DATA","7690":"Continue - picking up a value from the DATA list.","7719":"THE 'DATA' COMMAND ROUTINE: During syntax checking a DATA statement is checked to ensure that it contains a series of valid expressions, separated by commas. But in 'run-time' the statement is passed by.","7735":"The DATA statement has to be passed-by in 'run-time'.","7737":"THE 'PASS-BY' SUBROUTINE: On entry the A register will hold either the token 'DATA' or the token 'DEF FN' depending on the type of statement that is being 'passed-by'.","7746":"THE 'RESTORE' COMMAND ROUTINE: The operand for a RESTORE command is taken as a line number, zero being used if no operand is given. The REST-RUN entry point is used by the RUN command routine.","7759":"THE 'RANDOMIZE' COMMAND ROUTINE: Once again the operand is compressed into the BC register pair and transferred to the required system variable. However if the operand is zero the value in FRAMES1 and FRAMES2 is used instead.","7775":"THE 'CONTINUE' COMMAND ROUTINE: The required line number and statement number within that line are made the object of a jump.","7783":"THE 'GO TO' COMMAND ROUTINE: The operand of a GO TO ought to be a line number in the range '1' to '9999' but the actual test is against an upper value of '61439'.","7795":"The entry point GO-TO-2 is used to determine the line number of the next line to be handled in several instances.","7802":"THE 'OUT' COMMAND ROUTINE: The two parameters for the OUT instruction are fetched from the calculator stack and used as directed.","7808":"THE 'POKE' COMMAND ROUTINE: In a similar manner the POKE operation is performed.","7813":"THE 'TWO-PARAM' SUBROUTINE: The topmost parameter on the calculator stack must be compressible into a single register. It is two's complemented if it is negative. The second parameter must be compressible into a register pair.","7828":"THE 'FIND INTEGERS' SUBROUTINE: The 'last value' on the calculator stack is fetched and compressed into a single register or a register pair by entering at FIND-INT1 AND FIND-INT2 respectively.","7852":"THE 'CLEAR' COMMAND ROUTINE: This routine allows for the variables area to be cleared, the display area cleared and RAMTOP moved. In consequence of the last operation the machine stack is rebuilt thereby having the effect of also clearing the GO SUB stack.","7839":"Report B - Integer out of range","7788":"The value in the BC register pair which will be used as RAMTOP is tested to ensure it is neither too low nor too high.","7878":"The value in the BC register pair which will be used as RAMTOP is tested to ensure it is neither too low nor too high.","7898":"Report M - RAMTOP no good","7900":"Continue with the CLEAR operation.","7917":"THE 'GO SUB' COMMAND ROUTINE: The present value of PPC and the incremented value of SUBPPC are stored on the GO SUB stack.","7941":"THE 'TEST-ROOM' SUBROUTINE: A series of tests is performed to ensure that there is sufficient free memory available for the task being undertaken.","7957":"Report 4 - Out of memory","7962":"THE 'FREE MEMORY' SUBROUTINE: There is no BASIC command 'FRE' in the SPECTRUM but there is a subroutine for performing such a task. An estimate of the amount of free space can be found at any time by using: 'PRINT 65536-USR 7962'","7971":"THE 'RETURN' COMMAND ROUTINE: The line number and the statement number that are to be made the object of a 'return' are fetched from the GO SUB stack.","7990":"Report 7 - RETURN without GOSUB","7994":"THE 'PAUSE' COMMAND ROUTINE: The period of the PAUSE is determined by counting the number of maskable interrupts as they occur every 1/50 th. of a second.","8015":"The period of the PAUSE has now finished.","8020":"THE 'BREAK-KEY' SUBROUTINE: This subroutine is called in several instances to read the BREAK key. The carry flag is returned reset only if the SHIFT and the BREAK keys are both being pressed.","8032":"THE 'DEF FN' COMMAND ROUTINE: During syntax checking a DEF FN statement is checked to ensure that it has the correct form. Space is also made available for the result of evaluating the function.","8042":"First consider the variable of the function.","8070":"A loop is now entered to deal with each parameter in turn.","8131":"THE 'UNSTACK-Z' SUBROUTINE: This subroutine is called in several instances in order to 'return early' from a subroutine when checking syntax. The reason for this is to avoid actually printing characters or passing values to/from the calculator stack.","8137":"THE 'LPRINT & PRINT' COMMAND ROUTINES: The appropriate channel is opened as necessary and the items to be printed are considered in turn.","8159":"The print controlling subroutine is called by the PRINT, LPRINT and INPUT command routines.","8165":"Now enter a loop to deal with the 'position controllers' and the print items.","8181":"THE 'PRINT A CARRIAGE RETURN' SUBROUTINE","8188":"THE 'PRINT ITEMS' SUBROUTINE: This subroutine is called from the PRINT, LPRINT and INPUT command routines. The various types of print item are identified and printed.","8193":"Now deal with an 'AT'.","8206":"Next look for a 'TAB'.","8210":"Now deal with a 'TAB'.","8222":"The 'AT' and the 'TAB' print items are printed by making three calls to PRINT-OUT.","8228":"Next consider embedded colour items.","8236":"The print item must now be an expression, either numeric or string.","8252":"A loop is now set up to deal with each character in turn of the string.","8261":"THE 'END OF PRINTING' SUBROUTINE: The zero flag will be set if no further printing is to be done.","8270":"THE 'PRINT POSITION' SUBROUTINE: The various position controlling characters are considered by this subroutine.","8304":"THE 'ALTER STREAM' SUBROUTINE: This subroutine is called whenever there is the need to consider whether the user wishes to use a different stream.","8329":"THE 'INPUT' COMMAND ROUTINE: This routine allows for values entered from the keyboard to be assigned to variables. It is also possible to have print items embedded in the INPUT statement and these items are printed in the lower part of the display.","8385":"The INPUT items and embedded PRINT items are dealt with in turn by the following loop.","8408":"Now consider whether INPUT LINE is being used.","8429":"Proceed to handle simple INPUT variables.","8442":"The prompt message is now built up in the work space.","8492":"In the case of INPUT LINE the EDITOR can be called without further preparation but for other types of INPUT the error stack has to be changed so as to trap errors.","8545":"All the system variables have to be reset before the actual assignment of a value can be made.","8623":"Further items in the INPUT statement are considered.","8633":"THE 'IN-ASSIGN' SUBROUTINE: This subroutine is called twice for each INPUT value. Once with the syntax/run flag reset (syntax) and once with it set (run).","8654":"Report C - Nonsense in BASIC","8656":"Come here if the INPUT line starts with 'STOP'.","8659":"Report H - STOP in INPUT","8662":"THE 'IN-CHAN-K' SUBROUTINE: This subroutine returns with the zero flag reset only if channel 'K' is being used.","8673":"THE 'COLOUR ITEM' ROUTINES: This set of routines can be readily divided into two parts: 1) The embedded colour item' handler. 2) The 'colour system variable' handler. Embedded colour items are handled by calling the PRINT-OUT subroutine as required. A loop is entered to handle each item in turn. The entry point is at CO-TEMP-2.","8700":"The colour item code and the parameter are now 'printed' by calling PRINT-OUT on two occasions.","8721":"The colour system variables - ATTR-T, MASK-T & P-FLAG - are altered as required. This subroutine is called by PRINT-OUT. On entry the control character code is in the A register and the parameter is in the D register.","8733":"The colour control code will now be +01 for INVERSE and +02 for OVER and the system variable P-FLAG is altered accordingly.","8756":"PAPER & INK are dealt with by the following routine. On entry the carry flag is set for INK.","8772":"Report K - Invalid colour","8774":"Continue to handle PAPER & INK;","8792":"The mask (B) and the value (C) are now used to change ATTR-T.","8796":"Next MASK-T is considered.","8803":"Next P-FLAG is considered.","8812":"THE 'CO-CHANGE' SUBROUTINE: This subroutine is used to 'impress' upon a system variable the 'nature' of the bits in the A register, The B register holds a mask that shows which bits are to be 'copied over' from A to (HL).","8819":"FLASH & BRIGHT are handled by the following routine.","8839":"The system variable ATTR-T can now be altered.","8852":"THE 'BORDER' COMMAND ROUTINE: The parameter of the BORDER command is used with an OUT command to actually alter the colour of the border. The parameter is then saved in the system variable BORDCR.","8874":"THE 'PIXEL ADDRESS' SUBROUTINE: This subroutine is called by the POINT subroutine and by the PLOT command routine. Is is entered with the co-ordinates of a pixel in the BC register pair and returns with HL holding the address of the display file byte which contains that pixel and A pointing to the position of the pixel within the byte.","8924":"THE 'PLOT' COMMAND ROUTINE: This routine consists of a main subroutine plus one line to call it and one line to exit from it. The main routine is used twice by CIRCLE and the subroutine is called by DRAW. The routine is entered with the co-ordinates of a pixel on the calculator stack. It finds the address of that pixel and plots it, taking account of the status of INVERSE and OVER held in the P-FLAG.","8907":"THE 'POINT' SUBROUTINE: This subroutine is called by the POINT function in SCANNING. It is entered with the co-ordinates of a pixel on the calculator stack, and returns a last value of 1 if that pixel is ink colour, and 0 if it is paper colour.","8967":"THE 'STK-TO-BC' SUBROUTINE: This subroutine loads two floating point numbers into the BC register pair. It is thus used to pick up parameters in the range +00-+FF. It also obtains in DE the 'diagonal move' values (+/-1,+/-1) which are used in the line drawing subroutine of DRAW.","8980":"THE 'STK-TO-A' SUBROUTINE: This subroutine loads the A register with the floating point number held at the top of the calculator stack. The number must be in the range 00-FF.","8992":"THE 'CIRCLE' COMMAND ROUTINE: This routine draws an approximation to the circle with centre co-ordinates X and Y and radius Z. These numbers are rounded to the nearest integer before use. Thus Z must be less than 87.5, even when (X,Y) is in the centre of the screen. The method used is to draw a series of arcs approximated by straight lines. It is illustrated in the BASIC program in the appendix. The notation of that program is followed here. CIRCLE has four parts: 1)Tests the radius. If its modulus is less than 1, just plot X,Y; 2)Calls CD-PRMS-1 at 2470-24B6, which is used to set the initial parameters for both CIRCLE and DRAW; 3) Sets up the remaining parameters for CIRCLE, including the initial displacement for the first 'arc' (a straight line in fact); 4) Jumps into DRAW to use the arc-drawing loop at 2420-24FA.","9019":"2) 233B-2346 and the call to CD-PRMS1. 2*PI is stored in mem-5 and CD-PRMS1 is called. This subroutine stores in the B register the number of arcs required for the circle, viz. A=4*INT (PI*SQR Z/4)+4, hence 4, 8, 12 ..., up to a maximum of 32. It also stores in mem-0 to mem-4 the quantities 2*PI/A, SIN(PI/A), 0, COS (2*PI/A) and SIN (2*PI/A).","9031":"3) 2347-2381: the remaining parameters and the jump to DRAW. A test is made to see whether the initial 'arc' length is less than 1. If it is, a jump is made simply to plot X, Y. Otherwise, the parameters are set: X+Z and X-Z*SIN (PI/A) are stacked twice as start and end point, and copied to COORDS as well; zero and 2*Z*SIN (PI/A) are stored in mem-1 and mem-2 as initial increments, giving as first 'arc' the vertical straight line joining X+Z, y-Z*SIN (PI/A) and X+Z, Y+Z*SIN (PI/A). The arc-drawing loop of DRAW will ensure that all subsequent points remain on the same circle as these two points, with incremental angle 2*PI/A. But it is clear that these 2 points in fact subtend this angle at the point X+Z*(1-COS (PI/A)), Y not at X, Y. Hence the end points of each arc of the circle are displaced right by an amount 2*(1-COS (PI/A)), which is less than half a pixel, and rounds to one pixel at most.","9062":"Here sa denotes X+Z and sb denotes Y - Z*SIN (PI/A)","9090":"THE DRAW COMMAND ROUTINE: This routine is entered with the co-ordinates of a point X0, Y0, say, in COORDS. If only two parameters X, Y are given with the DRAW command, it draws an approximation to a straight line from the point X0, Y0 to X0+X, Y0+Y. If a third parameter G is given, it draws an approximation to a circular arc from X0, Y0 to X0+X, Y0+Y turning anti-clockwise through an angle G radians. The routine has four parts: 1) Just draws a line if only 2 parameters are given or if the diameter of the implied circle is less than 1; 2) Calls CD-PRMS1 at 247D-24B6 to set the first parameters; 3) Sets up the remaining parameters, including the initial displacements for the first arc; 4) Enters the arc-drawing loop and draws the arc as a series of smaller arcs approximated by straight lines, calling the line-drawing subroutine at 24B7-24FA as necessary.","9153":"2) Just calls CD-PRMS1. This subroutine saves in the B register the number of shorter arcs required for the complete arc, viz. A=4*INT (G'*SQR Z/8)+4, where G' = mod G, or 252 if this expression exceeds 252 (as can happen with a large chord and a small angle). So A is 4, 8, 12, ... , up to 252. The subroutine also stores in mem-0 to mem-4 the quantities G/A, SIN (G/2*A), 0, COS (G/A), SIN (G/A).","9156":"3) Sets up the rest of the parameters as follow. The stack will hold these 4 items, reading up to the top: X0+X and Y0+Y as end of last arc; then X0 and Y0 as beginning of first arc. Mem-0 will hold X0 and mem-5 Y0. Mem-1 and mem-2 will hold the initial displacements for the first arc, U and V; and mem-3 and mem-4 will hold COS (G/A) and SIN (G/A) for use in the arc-drawing loop.","9248":"4) The arc-drawing loop. This is entered at 2439 with the co-ordinates of the starting point on top of the stack, and the initial displacements for the first arc in mem-1 and mem-2. It uses simple trigonometry to ensure that all subsequent arcs will be drawn to points that lie on the same circle as the first two, subtending the same angle at the centre. It can be shown that if 2 points X1, Y1 and X2, Y2 lie on a circle and subtend an angle N at the centre, which is also the origin of co-ordinates, then X2 = X1*COS N - Y1*SIN N, and Y2 = X1*SIN N + Y1*COS N. But because the origin is here at the increments, say Un = Xn+1 - Xn and Vn = Yn+1 - Yn, thus achieving the desired result. The stack is shown below on the (n+1)th pass through the loop, as Xn and Yn are incremented by Un and Vn, after these are obtained from Un-1 and Vn-1. The 4 values on the top of the stack at 2425 are, in DRAW, reading upwards, X0+X, Y0+Y, Xn and Yn but to save space these are not shown until 2439. For the initial values in CIRCLE, see the end of CIRCLE, above. In CIRCLE too, the angle G must be taken to be 2*PI.","9341":"THE 'INITIAL PARAMETERS' SUBROUTINE: This subroutine is called by both CIRCLE and DRAW to set their initial parameters. It is called by CIRCLE with X, Y and the radius Z on the top of the stack, reading upwards. It is called by DRAW with its own X, Y, SIN (G/2) and Z, as defined in DRAW i. above, on the top of the stack. In what follows the stack is only shown from Z upwards. The subroutine returns in B the arc-count A as explained in both CIRCLE and DRAW above, and in mem-0 to mem-5 the quantities G/A, SIN (G/2*A), 0, COS (G/A), SIN (G/A) and G. For a circle, G must be taken to be equal to 2*PI.","9399":"THE LINE-DRAWING SUBROUTINE: This subroutine is called by DRAW to draw an approximation to a straight line from the point X0, Y0 held in COORDS to the point X0+X, Y0+Y, where the increments X and Y are on the top of the calculator stack. The subroutine was originally intended for the ZX80 and ZX81 8K ROM, and it is described in a BASIC program on page 121 of the ZX81 manual. It is also illustrated here in the Circle program in the appendix. The method is to intersperse as many horizontal or vertical steps as are needed among a basic set of diagonal steps, using an algorithm that spaces the horizontal or vertical steps as evenly as possible.","9420":"The algorithm starts here. The larger of ABS X and ABS Y, say H, is put into A and reduced to INT (H/2). The H - L horizontal or vertical steps and L diagonal steps are taken (where L is the smaller of ABS X and ABS Y) in this way: L is added to A; if A now equals or exceeds H, it is reduced by H and a diagonal step is taken; otherwise a horizontal or vertical step is taken. This is repeated H times (B also holds H). Note that meanwhile the exchange registers H' and L' are used to hold COORDS.","9465":"Report B - Integer out of range","9467":"THE 'SCANNING' SUBROUTINE: This subroutine is used to produce an evaluation result of the 'next expression'. The result is returned as the 'last value' on the calculator stack. For a numerical result, the last value will be the actual floating point number. However, for a string result the last value will consist of a set of parameters. The first of the five bytes is unspecified, the second and third bytes hold the address of the start of the string and the fourth and fifth bytes hold the length of the string. When a next expression consists of only a single operand, e.g. ... A ..., ... RND ..., ... A$ (4, 3 TO 7) ... , then the last value is simply the value that is obtained from evaluating the operand. However when the next expression contains a function and an operand, e.g. ... CHR$ A..., ... NOT A ... , SIN 1 ..., the operation code of the function is stored on the machine stack until the last value of the operand has been calculated. This last value is then subjected to the appropriate operation to give a new last value. In the case of there being an arithmetic or logical operation to be performed, e.g. ... A+B ... , A*B ..., ... A=B ... , then both the last value of the first argument and the operation code have to be kept until the last value of the second argument has been found. Indeed the calculation of the last value of the second argument may also involve the storing of last values and operation codes whilst the calculation is being performed. It can therefore be shown that as a complex expression is evaluated, e.g. ... CHR$ (T+A - 26*INT ((T+A)/26)+65)..., a hierarchy of operations yet to be performed is built up until the point is reached from which it must be dismantled to produce the final last value. Each operation code has associated with it an appropriate priority code and operations of higher priority are always performed before those of lower priority. The subroutine begins with the A register being set to hold the first character of the expression and a starting priority marker - zero - being put on the machine stack.","9487":"Four subroutines follow; they are called by routines from the scanning function table. The first one, the 'scanning quotes subroutine', is used by S-QUOTE to check that every string quote is matched by another one.","9506":"The next subroutine, the 'scanning: two co-ordinates' subroutine, is called by S-SCREEN$, S-ATTR and S-POINT to make sure the required two co-ordinates are given in their proper form.","9520":"THE 'SYNTAX-Z' SUBROUTINE: At this point the 'SYNTAX-Z' subroutine is interpolated. It is called 32 times, with a saving of just one byte each call. A simple test of bit 7 of FLAGS will give the zero flag reset during execution and set during syntax checking.","9525":"The next subroutine is the 'scanning SCREEN$ subroutine', which is used by S-SCREENS$ to find the character that appears at line x, column y of the screen. It only searches the character set 'pointed to' to CHARS. Note: This is normally the characters +20 (space) to +7F (©) although the user can alter CHARS to match for other characters, including user-defined graphics.","9600":"The last of these four subroutines is the 'scanning attributes subroutine'. It is called by S-ATTR to return the value of ATTR (x,y) which codes the attributes of line x, column y on the television screen.","9622":"THE SCANNING FUNCTION TABLE: This table contains 8 functions and 4 operators. It thus incorporates 5 new Spectrum functions and provides a neat way of accessing some functions and operators which already existed on the ZX81.","9647":"THE SCANNING FUNCTION ROUTINES","9651":"The 'scanning QUOTE routine': This routine deals with string quotes, whether simple like \"name\" or more complex like \"a \"\"white\"\" lie\" or the seemingly redundant VAL$ \"\"\"a\"\"\".","9690":"Note that the first quote was not counted into the length; the final quote was, and is discarded now. Inside the string, the first, third, fifth, etc., quotes were counted in but the second, fourth, etc., were not.","9704":"SCANNING BRACKET ROUTINE","9717":"The 'scanning FN routine'.","9720":"The 'scanning RND routine'","9767":"The 'scanning-PI routine': unless syntax is being checked the value of 'PI' is calculated and forms the 'last value' on the calculator stack.","9780":"The 'scanning INKEY$ routine'.","9832":"the 'scanning SCREEN$ routine'.","9842":"The 'scanning ATTR routine'.","9851":"The 'scan POINT routine'.","9869":"The 'scanning DECIMAL routine' which follows deals with a decimal point or a number that starts with a digit. It also takes care of the expression 'BIN', which is dealt with in the 'decimal to floating-point' subroutine.","9909":"During line execution:","9923":"A numeric result has now been identified, coming from RND, PI, ATTR, POINT or a decimal number, therefore bit 6 of FLAGS must be set.","9929":"THE SCANNING VARIABLE ROUTINE: When a variable name has been identified a call is made to LOOK-VARS which looks through those variables that already exist in the variables area (or in the program area at DEF FN statements for a user-defined function FN). If an appropriate numeric value is found then it is copied to the calculator stack using STACK-NUM. However a string or string array entry has to have the appropriate parameters passed to the calculator stack by the STK-VAR subroutine (or in the case of a user-defined function, by the STK-F-ARG subroutine as called from LOOK-VARS).","9951":"The character is tested against the code for '-', thus identifying the 'unary minus' operation. Before the actual test the B register is set to hold the priority +09 and the C register the operation code +D8 that are required for this operation.","9958":"Next the character is tested against the code for 'VAL$', with priority 16 decimal and operation code 18 hex.","9965":"The present character must now represent one of the functions CODE to NOT, with codes +AF to +C3.","9970":"The function 'NOT' is identified and dealt with separately from the others.","9980":"The remaining functions have priority 16 decimal. The operation codes for these functions are now calculated. Functions that operate on strings need bit 6 reset and functions that give string results need bit 7 reset in their operation codes.","9997":"The priority code and the operation code for the function being considered are now pushed on to the machine stack. A hierarchy of operations is thereby built up.","10002":"The scanning of the line now continues. The present argument may be followed by a '(', a binary operator or, if the end of the expression has been reached, then e.g. a carriage return character or a colon, a separator or a 'THEN'.","10007":"If the 'last value' is numeric then the parenthesised expression is a true sub-expression and must be evaluated by itself. However if the 'last value' is a string then the parenthesised expression represents an element of an array or a slice of a string. A call to SLICING modifies the parameters of the string as required.","10019":"If the present character is indeed a binary operator it will be given an operation code in the range +C3 - +CF hex, and the appropriate priority code.","10133":"THE TABLE OF OPERATORS (pairs of codes and operator codes)","10160":"THE TABLE OF PRIORITIES (precedence table)","10173":"THE 'SCANNING FUNCTION' SUBROUTINE: This subroutine is called by the 'scanning FN routine' to evaluate a user defined function which occurs in a BASIC line. The subroutine can be considered in four stages: 1) The syntax of the FN statement is checked during syntax checking. 2) During line execution, a search is made of the program area for a DEF FN statement, and the names of the functions are compared, until a match is found - or an error is reported. 3) The arguments of the FN are evaluated by calls to SCANNING. 4) The function itself is evaluated by calling SCANNING, which in turn calls LOOK-VARS and so the 'STACK FUNCTION ARGUMENT' subroutine.","10036":"The main loop of this subroutine is now entered. At this stage there are: 1) A 'last value' on the calculator stack. 2) The starting priority market on the machine stack below a hierarchy, of unknown size, of function and binary operation codes. This hierarchy may be null. 3) The BC register pair holding the 'present' operation and priority, which if the end of an expression has been reached will be priority zero.) Initially the 'last' operation and priority are taken off the machine stack and compared against the 'present' operation and priority.","10045":"Before the 'last' operation is performed, the 'USR' function is separated into 'USR number' and 'USR string' according as bit 6 of FLAGS was set or reset when the argument of the function was stacked as the 'last value'.","10075":"An important part of syntax checking involves the testing of the operation to ensure that the nature of the 'last value' is of the correct type for the operation under consideration.","10084":"Before jumping back to go round the loop again the nature of the 'last value' must be recorded in FLAGS.","10099":"Whenever the 'present' operation binds tighter, the 'last' and the 'present' values go back on the machine stack. However if the 'present' operation requires a string as its operand then the operation code is modified to indicate this requirement.","10231":"During line execution, a search must first be made for a DEF FN statement.","10258":"REPORT P - FN without DEF.","10289":"The correct DEF FN statement has now been found. The arguments of the FN statement will be evaluated by repeated calls of SCANNING, and their 5 byte values (or parameters, for strings) will be inserted into the DEF FN statement in the spaces made there at syntax checking. HL will be used to point along the DEF FN statement (calling FN-SKPOVR as needed) while CH-ADD points along the FN statement (calling RST 0020, NEXT-CHAR, as needed).","10379":"REPORT Q - Parameter error.","10381":"Finally, the function itself is evaluated by calling SCANNING, after first setting DEFADD to hold the address of the arguments as they occur in the DEF FN statement. This ensures that LOOK-VARS, when called by SCANNING, will first search these arguments for the required values, before making a search of the variables area.","10411":"THE 'FUNCTION SKIPOVER' SUBROUTINE: This subroutine is used by FN and by STK-F-ARG to move HL along the DEF FN statement while leaving CM-ADD undisturbed, as it points along the FN statement.","10418":"THE 'LOOK-VARS' SUBROUTINE: This subroutine is called whenever a search of the variables area or of the arguments of a DEF FN statement is required. The subroutine is entered with the system variable CH-ADD pointing to the first letter of the name of the variable whose location is being sought. The name will be in the program area or the work space. The subroutine initially builds up a discriminator byte, in the C register, that is based on the first letter of the variable's name. Bits 5 & 6 of this byte indicate the type of the variable that is being handled. The B register is used as a bit register to hold flags.","10452":"Now find the end character of a name that has more than one character.","10462":"Simple strings and arrays of strings require that bit 6 of FLAGS is reset.","10467":"If DEFADD-hi is non-zero, indicating that a 'function' (a 'FN') is being evaluated, and if in 'run-time', a search will be made of the arguments in the DEF FN statement.","10479":"Otherwise (or if the variable was not found in the DEF FN statement) a search of variables area will be made, unless syntax is being checked.","10493":"A BASIC line is being executed so make a search of the variables area.","10537":"In all cases where the names fail to match the HL register pair has to be made to point to the next variable in the variables area.","10546":"Come here if no entry was found with the correct name.","10548":"Come here if checking syntax.","10558":"Come here when an entry with the correct name was found.","10563":"If the matching variable name has more than a single letter then the other characters must be passed-over. Note: This appears to have been done already at V-CHAR.","10571":"The exit-parameters are now set.","10577":"THE 'STACK FUNCTION ARGUMENT' SUBROUTINE: This subroutine is called by LOOK-VARS when DEFADD-hi in non-zero, to make a search of the arguments area of a DEF FN statement, before searching in the variables area. If the variable is found in the DEF FN statement, then the parameters of a string variable are stacked and a signal is given that there is no need to call STK/VAR. But it is left to SCANNING to stack the value of a numerical variable at 26DA in the usual way.","10625":"A match has been found. The parameters of a string variable are stacked, avoiding the need to call the STK-VAR subroutine.","10646":"THE 'STK-VAR' SUBROUTINE: This subroutine is usually used either to find the parameters that define an existing string entry in the variables area or to return in the HL register pair the base address of a particular element or an array of numbers. When called from DIM the subroutine only checks the syntax of the BASIC statement. Note that the parameters that define a string may be altered by calling SLICING if this should be specified. Initially the A and the B registers are cleared and bit 7 of the C register is tested to determine whether syntax is being checked.","10652":"Next, simple strings are separated from array variables.","10657":"The parameters for a simple string are readily found.","10670":"The base address of an element in an array is now found. Initially the 'number of dimensions' is collected.","10678":"If an array of strings has its 'number of dimensions' equal to '1' then such an array can be handled as a simple string.","10681":"Next a check is made to ensure that in the BASIC line the variable is followed by a subscript.","10688":"For both numeric arrays and arrays of strings the variable pointer is transferred to the DE register pair before the subscript is evaluated.","10691":"The following loop is used to find the parameters of a specified element within an array. The loop is entered at the mid-point - SV-COUNT -, where the element count is set to zero. The loop is accessed 'B' times, this being, for a numeric array, equal to the number of dimensions that are being used, but for an array of strings 'B' is one less than the number of dimensions in use as the last subscript Is used to specify a 'slice' of the string.","10712":"For an array of strings the present subscript may represent a 'slice', or the subscript for a 'slice' may yet be present in the BASIC line.","10727":"Enter the loop here.","10768":"The SYNTAX/RUN flag is checked before arrays of strings are separated from arrays of numbers.","10777":"When dealing with an array of numbers the present character must be a ')'.","10784":"Report 3 - Subscript out of range","10786":"The address of the location before the actual floating-point form can now be calculated.","10796":"When dealing with an array of strings the length of an element is given by the last 'dimension-size'. The appropriate parameters are calculated and then passed to the calculator stack.","10812":"There are three possible forms of the last subscript. The first is illustrated by - A$(2,4 TO 8) -, the second by - A$(2)(4 TO 8) - and the third by - A$(2) - which is the default form and indicates that the whole string is required.","10829":"When finished considering the last subscript a return can be made.","10834":"THE 'SLICING' SUBROUTINE: The present string can be sliced using this subroutine. The subroutine is entered with the parameters of the string being present on the top of the calculator stack and in the registers A, B, C, D & E. Initially the SYNTAX/RUN flag is tested and the parameters of the string are fetched only if a line is being executed.","10840":"The possibility of the 'slice' being '()' has to be considered.","10845":"Before proceeding the registers are manipulated as follows:","10854":"The first parameter of the 'slice' is now evaluated.","10877":"At this point a 'slice' of a single character has been identified. e.g. - A$(4).","10881":"The second parameter of a 'slice' is now evaluated.","10900":"The 'new' parameters are now defined.","10929":"THE 'STK-STORE' SUBROUTINE: This subroutine passes the values held in the A, B, C, D & E registers to the calculator stack. The stack thereby grows in size by 5 bytes with every call to this subroutine. The subroutine is normally used to transfer the parameters of strings but it is also used by STACK-BC and LOG (2^A) to transfer 'small integers' to the stack. Note that when storing the parameters of a string the first value stored (coming from the A register) will be a zero if the string comes from an array of strings or is a 'slice' of a string. The value will be '1' for a complete simple string. This 'flag' is used in the 'LET' command routine when the '1' signals that the old copy of the string is to be 'reclaimed'.","10956":"THE 'INT-EXP' SUBROUTINE: This subroutine returns the result of evaluating the 'next expression' as an integer value held in the BC register pair. The subroutine also tests this result against a limit-value supplied in the HL register pair. The carry flag becomes set if there is an 'out of range' error.","10984":"The state of the carry flag and the value held in the D register are now manipulated so as to give the appropriate value for the 'error register'.","10987":"Restore the registers before returning.","10990":"THE 'DE,(DE+1)' SUBROUTINE: This subroutine performs the construction - LD DE,(DE+1) - and returns HL pointing to 'DE+2'.","10996":"THE 'GET-HL*DE' SUBROUTINE: Unless syntax is being checked this subroutine calls 'HL=HL*DE' which performs the implied construction. Overflow of the 16 bits available in the HL register pair gives the report 'out of memory'. This is not exactly the true situation but it implies that the memory is not large enough for the task envisaged by the programmer.","11007":"THE 'LET' COMMAND ROUTINE: This is the actual assignment routine for the LET, READ and INPUT commands. When the destination variable is a 'newly declared variable' then DEST will point to the first letter of the variable's name as it occurs in the BASIC line. Bit 1 of FLAGX will be set. However if the destination variable 'exists already' then bit 1 of FLAGX will be reset and DEST will point for a numeric variable to the location before the five bytes of the 'old number'; and for a string variable to the first location of the 'old string'. The use of DEST in this manner applies to simple variables and to elements of arrays. Bit 0 of FLAGX is set if the destination variable is a 'complete' simple string variable. (Signalling - delete the old copy.)","11016":"A 'newly declared variable' is being used. So first the length of its name is found.","11019":"Enter a loop to deal with the characters of a long name. Any spaces or colour codes in the name are ignored.","11039":"Separate 'numeric' and 'string' names.","11049":"The 'newly declared numeric variable' presently being handled will require 'BC' spaces in the variables area for its name and its value. The room is made available and the name of the variable is copied over with the characters being 'marked' as required.","11070":"The 'extra' codes of a long name are passed to the variables area.","11082":"The last code of a 'long' name has to be OR-ed with +80.","11085":"The first letter of the name of the variable being handled is now considered.","11094":"The subroutine L-FIRST is now called to enter the 'letter' into its appropriate location.","11097":"The 'last value' can now be transferred to the variables area. Note that at this point HL always points to the location after the five locations allotted to the number. A 'RST 0028' instruction is used to call the CALCULATOR and the 'last value' is deleted. However this value is not overwritten.","11110":"Come here if considering a variable that 'exists already'. First bit 6 of FLAGS is tested so as to separate numeric variables from string or array of string variables.","11116":"For numeric variables the 'new' number overwrites the 'old' number. So first HL has to be made to point to the location after the five bytes of the existing entry. At present HL points to the location before the five bytes.","11122":"The parameters of the string variable are fetched and complete simple strings separated from 'sliced' strings and array strings.","11135":"When dealing with a 'slice' of an existing simple string, a 'slice' of a string from an array of strings or a complete string from an array of strings there are two distinct stages involved. The first is to build up the 'new' string in the work space, lengthening or shortening it as required. The second stage is then to copy the 'n","11138":"Then make the required number of spaces available in the work space.","11149":"The parameters of the string being handled are now fetched from the calculator stack.","11154":"Note: At this point the required amount of room has been made available in the work space for the 'variable in assignment'. e.g. For statement - LET A$(4 to 8)=\"abcdefg\" - five locations have been made. The parameters fetched above as a 'last value' represent the string that is to be copied into the new locations with Procrustean lengthening or shortening as required. The length of the 'new' string is compared to the length of the room made available for it.","11164":"As long as the new string is not a 'null string' it is copied into the work space. Procrustean lengthening is achieved automatically if the 'new' string is shorter than the room available for it.","11171":"The values that have been saved on the machine stack are restored.","11174":"THE 'L-ENTER' SUBROUTINE: This short subroutine is used to pass either a numeric value, from the calculator stack, or a string, from the work space, to its appropriate position in the variables area. The subroutine is therefore used for all except 'newly declared' simple strings and 'complete & existing' simple strings.","11183":"THE LET SUBROUTINE CONTINUES HERE: When handling a 'complete & existing' simple string the new string is entered as if it were a 'newly declared' simple string before the existing version is 'reclaimed'.","11200":"'Newly declared' simple strings are handled as follows:","11206":"THE 'L-STRING' SUBROUTINE: The parameters of the 'new' string are fetched, sufficient room is made available for it and the string is then transferred.","11212":"Save the 'length'.","11242":"THE 'L-FIRST' SUBROUTINE: This subroutine is entered with the letter of the variable, suitably marked, in the A register. The letter overwrites the 'old 80-byte' in the variables area. The subroutine returns with the HL register pair pointing to the 'new 80-byte'.","11249":"THE 'STK-FETCH' SUBROUTINE: This important subroutine collects the 'last value' from the calculator stack. The five bytes can be either a floating-point number, in 'short' or 'long' form, or set of parameters that define a string.","11266":"THE 'DIM' COMMAND ROUTINE: This routine establishes new arrays in the variables area. The routine starts by searching the existing variables area to determine whether there is an existing array with the same name. If such an array is found then it is 'reclaimed' before the new array is established. A new array will have all its elements set to zero, if it is a numeric array, or to 'spaces', if it is an array of strings.","11285":"An 'existing array' is reclaimed.","11295":"The initial parameters of the new array are found.","11310":"The following loop is accessed for each dimension that is specified in the parenthesised expression of the DIM statement. The total number of bytes required for the elements of the array is built up in the DE register pair.","11334":"Note: At this point the DE register pair indicates the number of bytes required for the elements of the new array and the size of each dimension is stacked, on the machine stack. Now check that there is indeed a closing bracket to the parenthesised expression.","11340":"Allowance is now made for the dimension-sizes.","11364":"The parameters are now entered.","11377":"The elements of the new array are now 'cleared'.","11391":"The 'dimension-sizes' are now entered.","11400":"THE 'ALPHANUM' SUBROUTINE: This subroutine returns with the carry flag set if the present value of the A register denotes a valid digit or letter.","11405":"THE 'ALPHA' SUBROUTINE: This subroutine returns with the carry flag set if the present value of the A register denotes a valid letter of the alphabet.","11419":"THE 'DECIMAL TO FLOATING POINT' SUBROUTINE: As part of syntax checking decimal numbers that occur in a BASIC line are converted to their floating-point forms. This subroutine reads the decimal number digit by digit and gives its result as a 'last value' on the calculator stack. But first it deals with the alternative notation BIN, which introduces a sequence of 0's and 1's giving the binary representation of the required number.","11448":"For other numbers, first any integer part is converted; if the next character is a decimal, then the decimal fraction is considered.","11499":"Next consider any 'E notation', i.e. the form xEm or xem where m is a positive or negative integer.","11547":"THE 'NUMERIC’ SUBROUTINE: This subroutine returns with the carry flag reset if the present value of the A register denotes a valid digit.","11554":"THE 'STK DIGIT' SUBROUTINE: This subroutine simply returns if the current value held in the A register does not represent a digit but if it does then the floating-point form for the digit becomes the 'last value' on the calculator stack.","11560":"THE 'STACK-A' SUBROUTINE: This subroutine gives the floating-point form for the absolute binary value currently held in the A register.","11563":"THE 'STACK-BC' SUBROUTINE: This subroutine gives the floating-point form for the absolute binary value currently held in the BC register pair. The form used in this and hence in the two previous subroutines as well is the one reserved in the Spectrum for small integers n, where -65535 <= n <= 65535. The first and fifth bytes are zero; the third and fourth bytes are the less significant and more significant bytes of the 16 bit integer n in two's complement form (if n is negative, these two bytes hold 65536+n); and the second byte is a sign byte, 00 for '+' and FF for '-'.","11579":"THE 'INTEGER TO FLOATING-POINT' SUBROUTINE: This subroutine returns a 'last value' on the calculator stack that is the result of converting an integer in a BASIC line, i.e. the integer part of the decimal number or the line number, to its floating-point form. Repeated calls to CH-ADD+1 fetch each digit of the integer in turn. An exit is made when a code that does not represent a digit has been fetched.","11584":"Now a loop is set up. As long as the code represents a digit then the floating-point form is found and stacked under the 'last value'. The 'last value' is then multiplied by decimal 10 and added to the 'digit' to form a new 'last value' which is carried back to the start of the loop.","11599":"THE 'E-FORMAT TO FLOATING-POINT' SUBROUTINE: (Offset 3C - see CALCULATE below: 'e-to-fp') This subroutine gives a 'last value' on the top of the calculator stack that is the result of converting a number given in the form xEm, where m is a positive or negative integer. The subroutine is entered with x at the top of the calculator stack and m in the A register. The method used is to find the absolute value of m, say p, and to multiply or divide x by 10^p according to whether m is positive or negative. To achieve this, p is shifted right until it is zero, and x is multiplied or divided by 10^(2^n) for each set bit b(n) of p. Since p is never much more than decimal 39, bits 6 and 7 of p will not normally be set.","11647":"THE 'INT-FETCH' SUBROUTINE: This subroutine collects in DE a small integer n (-65535<=n<=65535) from the location addressed by HL: i.e. n is normally the first (or second) number at the top of the calculator stack; but HL can alls access (by exchange with DE) a number which has been deleted from the stack. The subroutine does not itself delete the number from the stack or from memory; it returns HL pointing to the fourth byte of the number in its original position.","11649":"The following mechanism will twos complement the number if it is negative (C is FF) but leave it unaltered if it is positive (C is 00)","11660":"THE 'INT-STORE' SUBROUTINE: This subroutine stores a small integer n (-65535<=n<=65535) in the location addressed by HL and the four following locations: i.e. n replaces the first (or second) number at the top of the calculator stack. The subroutine returns HL pointing to the first byte of n on the stack.","11667":"The same mechanism is now used as in 'INT-FETCH' to twos complement negative numbers. This is needed e.g. before and after the multiplication of small integers. Addition is however performed without any further twos complementing before or afterwards.","11682":"THE 'FLOATING-POINT TO BC' SUBROUTINE: This subroutine is called from four different places for various purposes and is used to compress the floating-point 'last value' into the BC register pair. If the result is too large, i.e. greater than 65536 decimal, then the subroutine returns with the carry flag set. If the 'last value' is negative then the zero flag is reset. The low byte of the result is also copied to the A register.","11713":"THE 'LOG (2^A)' SUBROUTINE: This subroutine is called by the 'PRINT-FP' subroutine to calculate the approximate number of digits before the decimal in x, the number to be printed, or, if there are no digits before the decimal, then the approximate number of leading zeros after the decimal. It is entered with the A register containing e', the true exponent of x, or e'-2, and calculates z=log to the base 10 of (2^A). It then sets A equal to ABS INT (Z + 0.5), as required, using FP-TO-A for this purpose.","11733":"THE 'FLOATING-POINT TO A' SUBROUTINE: This short but vital subroutine is called at least 8 times for various purposes. It uses the last but one subroutine, FP-TO-BC, to get the 'last value' into the A register where this is possible. It therefore tests whether the modulus of the number rounds to more than 255 and if it does the subroutine returns with the carry flag set. Otherwise it returns with the modulus of the number, rounded to the nearest integer, in the A register, and the zero flag set to imply that the number was positive, or reset to imply that it was negative.","11747":"THE 'PRINT A FLOATING-POINT NUMBER' SUBROUTINE: This subroutine is called by the PRINT command routine at 2039 and by STR$ at 3630, which converts to a string the number as it would be printed. The subroutine prints x, the 'last value' on the calculator stack. The print format never occupies more than 14 spaces. The 8 most significant digits of x, correctly rounded, are stored in an ad hoc print buffer in mem-3 and mem-4. Small numbers, numerically less than 1, and large numbers, numerically greater than 2 ^ 27, are dealt with separately. The former are multiplied by 10 ^ n, where n is the approximate number of leading zeros after the decimal, while the latter are divided by 10 ^ (n-7), where n is the approximate number of digits before the decimal. This brings all numbers into the middle range, and the numbers of digits required before the decimal is built up in the second byte of mem-5. Finally the printing is done, using E-format if there are more than 8 digits before the decimal or, for small numbers, more than 4 leading zeros after the decimal. First the sign of x is taken care of: A) If X is negative, the subroutine jumps to PF-NEGATIVE, takes ABS x and prints the minus sign. B) If x is zero, x is deleted from the calculator stack, a '0' is printed and a return is made from the subroutine. C) If x is positive, the subroutine just continues.","11777":"ii. This is the start of a loop which deals with large numbers. However every number x is first split into its integer part i and the fractional part f. If i is a small integer, i.e. if -65535 <= i <= 65535, it is stored in D'E' for insertion into the print buffer.","11812":"iii. Pure fractions are multiplied by 10^n, where n is the approximate number of leading zeros after the decimal; and -n is added to the second byte of mem-5, which holds the number of digits needed before the decimals; a negative number here indicates leading zeros after the decimal;","11815":"Note that the stack is now unbalanced. An extra byte 'DEFB +02, delete' is needed at 2E25, immediately after the RST 0028. Now an expression like \"2\" +STR$ 0.5 is evaluated incorrectly as 0.5; the zero left on the stack displaces the \"2\" and is treated as a null string. Similarly all the string comparisons can yield incorrect values if the second string takes the form STR$ x where x is numerically less than 1; e.g. the expression \"50\"<STR$ 0 .1 yields the logical value \"true\"; once again \"\" is used instead of \"50\".","11862":"iv. Numbers greater than 2 ^ 27 are similarly multiplied by 2 ^ (-n+7), reducing the number of digits before the decimal to 8, and the loop is re-entered at PF-LOOP.","11887":"v. The integer part of x is now stored in the print buffer in mem-3 and mem-4.","11899":"Note that the case where i us a small integer (less than 65536) re-enters here.","11924":"Decimal adjusting each byte of mem-4 gave 2 decimal digits per byte, there being at most 9 digits. The digits will now be re-packed, one to a byte, in mem-3 and mem-4, using the instruction RLD.","11983":"vi. The fractional part of x is now stored in the print buffer.","12044":"vii. The digits stored in the print buffer are rounded to a maximum of 8 digits for printing.","12086":"viii. The number can now be printed. First C will be set to hold the number of digits to be printed, not counting final zeros, while B will hold the number of digits required before the decimal.","12106":"The next entry point is also used to print the digits needed for E-format printing.","12171":"THE 'CA=10*A+C' SUBROUTINE': This subroutine is called by the PRINT-FP subroutine to multiply each byte of D'E'DE by 10 and return the integer part of the result in the C register. On entry, the A register contains the byte to be multiplied by 10 and the C register contains the carry over from the previous byte. On return, the A register contains the resulting byte and the C register the carry forward to the next byte.","12187":"THE 'PREPARE TO ADD' SUBROUTINE: This subroutine is the first of four subroutines that are used by the main arithmetic operation routines - SUBTRACTION, ADDITION, MULTIPLICATION and DIVISION. This particular subroutine prepares a floating-point number for addition, mainly by replacing the sign bit with a true numerical bit 1, and negating the number (two's complement) if it is negative. The exponent is returned in the A register and the first byte is set to Hex.00 for a positive number and Hex.FF for a negative number.","12218":"THE 'FETCH TWO NUMBERS' SUBROUTINE: This subroutine is called by ADDITION, MULTIPLICATION and DIVISION to get two numbers from the calculator stack and put them into the register, including the exchange registers. On entry to the subroutine the HL register pair points to the first byte of the first number and the DE register pair points to the first byte of the second number. When the subroutine is called from MULTIPLICATION or DIVISION the sign of the result is saved in the second byte of the first number. ","12220":"Call the five bytes of the first number - M1, M2, M3, M4 & M5; and the second number - N1, N2, N3, N4 & N5.","12253":"THE 'SHIFT ADDEND' SUBROUTINE: This subroutine shifts a floating-point number up to 32 decimal, Hex.20, places right to line it up properly for addition. The number with the smaller exponent has been put in the addend position before this subroutine is called. Any overflow to the right, into the carry, is added back into the number. If the exponent difference is greater than 32 decimal, or the carry ripples right back to the beginning of the number then the number is set to zero so that the addition will not alter the other number (the augend).","12292":"THE 'ADD-BACK' SUBROUTINE: This subroutine adds back into the number any carry which has overflowed to the right. In the extreme case, the carry ripples right back to the left of the number. When this subroutine is called during addition, this ripple means that a mantissa of 0.5 was shifted a full 32 places right, and the addend will now be set to zero; when called from MULTIPLICATION, it means that the exponent must be incremented, and this may result in overflow.","12303":"THE 'SUBTRACTION' OPERATION: (Offset 03 - see CALCULATE below: 'subtract') This subroutine simply changes the sign of the subtrahend and carried on into ADDITION.","12308":"THE 'ADDITION' OPERATION: (Offset 0F - see CALCULATE below: 'addition') The first of three major arithmetical subroutines, this subroutine carries out the floating-point addition of two numbers, each with a 4-byte mantissa and a 1-byte exponent. In these three subroutines, the two numbers at the top of the calculator stack are added/multiplied/divided to give one number at the top of the calculator stack, a 'last value'. HL points to the second number from the top, the augend/multiplier/dividend. DE points to the number at the top of the calculator stack, the addend/multiplicand/divisor. Afterwards HL points to the resultant 'last value' whose address can also be considered to be STKEND - 5. But the addition subroutine first tests whether the 2 numbers to be added are 'small integers'. If they are, it adds them quite simply in HL and BC, and puts the result directly on the stack. No twos complementing is needed before or after the addition, since such numbers are held on the stack in twos complement form, ready for addition.","12348":"Note that the number -65536 decimal can arise here in the form 00 FF 00 00 00 as the result of the addition of two smaller negative integers, e.g. -65000 and -536. It is simply stacked in this form. This is a mistake. The Spectrum system cannot handle this number. Most functions treat it as zero, and it is printed as -1E-38, obtained by treating is as 'minus zero' in an illegitimate format.","12353":"The full ADDITION subroutine first calls PREP-ADD for each number, then gets the two numbers from the calculator stack and puts the one with the smaller exponent into the addend position. It then calls SHIFT-FP to shift the addend up to 32 decimal places right to line it up for addition. The actual addition is done in a few bytes, a single shift is made for carry (overflow to the left) if needed, the result is twos complemented if negative, and any arithmetic overflow is reported; otherwise the subroutine jumps to TEST-NORM to normalise the result and return it to the stack with the correct sign bit inserted into the second byte.","12457":"THE 'HL=HL*DE' SUBROUTINE: This subroutine is called by 'GET-HL*DE' and by 'MULTIPLICATION' to perform the 16-bit multiplication as stated. Any overflow of the 16 bits available is dealt with on return from the subroutine.","12480":"THE 'PREPARE TO MULTIPLY OR DIVIDE' SUBROUTINE: This subroutine prepares a floating-point number for multiplication or division, returning with carry set if the number is zero, getting the sign of the result into the A register, and replacing the sign bit in the number by the true numeric bit, 1.","12490":"THE 'MULTIPLICATION' OPERATION: (Offset 04 - see CALCULATE below: 'multiply') This subroutine first tests whether the two numbers to be multiplied are 'small integers'. If they are, it uses INT-FETCH to get them from the stack, HL=HL*DE to multiply them and INT-STORE to return the result to the stack. Any overflow of this 'short multiplication' (i.e. if the result is not itself a 'small integer') causes a jump to multiplication in full five byte floating-point form (see below).","12531":"The full MULTIPLICATION subroutine prepares the first number for multiplication by calling PREP-M/D, returning if it is zero; otherwise the second number is prepared by again calling PREP-M/D, and if it is zero the subroutine goes to set the result to zero. Next it fetches the two numbers from the calculator stack and multiplies their mantissas in the usual way, rotating the first number (treated as the multiplier) right and adding in the second number (the multiplicand) to the result whenever the multiplier bit is set. The exponents are then added together and checks are made for overflow and for underflow (giving the result zero). Finally, the result is normalised and returned to the calculator stack with the correct sign bit in the second byte.","12564":"Now enter the multiplier loop.","12596":"Now add the exponents together.","12605":"The rest of the subroutine is common to both MULTIPLICATION and DIVISION.","12629":"The remainder of the subroutine deals with normalisation and is common to all the arithmetic routines.","12652":"The actual normalisation operation.","12660":"A holds zero after addition so no precision is gained or lost; A holds the fifth byte from B' after multiplication or division; but as only about 32 bits can be correct, no precision is lost. Note that A is rotated circularly, with branch at carry .... eventually a random process.","12678":"Finish the normalisation by considering the 'carry'.","12693":"The final part of the subroutine involves passing the result to the bytes reserved for it on the calculator stack and resetting the pointers.","12717":"Report 6 - Arithmetic overflow","12719":"THE 'DIVISION' OPERATION: (Offset 05 - see CALCULATE below: 'division') This subroutine first prepared the divisor by calling PREP-M/D, reporting arithmetic overflow if it is zero; then it prepares the dividend again calling PREP-M/D, returning if it is zero. Next fetches the two numbers from the calculator stack and divides their mantissa by means of the usual restoring division, trial subtracting the divisor from the dividend and restoring if there is carry, otherwise adding 1 to the quotient. The maximum precision is obtained for a 4-byte division, and after subtracting the exponents the subroutine exits by joining the later part of MULTIPLICATION.","12754":"Now enter the division loop.","12801":"Note: This jump is made to the wrong place. No 34th bit will ever be obtained without first shifting the dividend. Hence important results like 1/10 and 1/1000 are not rounded up as they should be. Rounding up never occurs when it depends on the 34th bit. The jump should have been to 31DB DIV-34TH above: i.e. byte 3200 hex in the ROM should read DA hex (128 decimal) instead of E1 hex (225 decimal).","12820":"THE 'INTEGER TRUNCATION TOWARDS ZERO' SUBROUTINE: (Offset 3A - see CALCULATE below: 'truncate') This subroutine (say I(x)) returns the result of integer truncation of x, the 'last value', towards zero. Thus I(2.4) is 2 and I(-2.4) is -2. The subroutine returns at once if x is in the form of a 'short integer'. It returns zero if the exponent byte of x if less than 81 hex (ABS x is less than 1). If I(x) is a 'short integer' the subroutine returns it in that form. It returns x if the exponent byte is A0 hex or greater (x has no significant non-integral part). Otherwise the correct number of bytes of x are set to zero and, if needed, one more byte is split with a mask.","12837":"The next 26 bytes seem designed to test whether x is in fact -65536 decimal, i.e. 91 80 00 00 00, and if it is, to set it to 00 FF 00 00 00. This is a mistake. As already stated at byte 303B above, the Spectrum system cannot handle this number. The result here is simply to make INT (-65536) return the value -1. This is a pity, since the number would have been perfectly all right if left alone. The remedy would seem to be simply to omit the 28 bytes from 3223 above to 323E inclusive from the program.","12863":"If the exponent byte of x is between 81 and 90 hex (129 and 144 decimal) inclusive, I(x) is a 'small integer', and will be compressed into one or two bytes. But first a test is made to see whether x is, after all, large.","12908":"Large values of x remains to be considered.","12914":"Now the bits of the mantissa can be cleared.","12947":"THE 'RE-STACK TWO' SUBROUTINE: This subroutine is called to re-stack two ‘small integers’ in full five byte floating-point form for the binary operations of addition, multiplication and division. It does so by calling the following subroutine twice.","12951":"THE 'RE-STACK' SUBROUTINE: (Offset 3D - see CALCULATE below: 're-stack') This subroutine is called to re-stack one number (which could be a 'small integer') in full five byte floating-point form. It is used for a single number by ARCTAN and also, through the calculator offset, by EXP, LN and 'get-argt'.","13385":"THE 'SERIES GENERATOR' SUBROUTINE: (Offsets 86,88 & 8C: 'series-06','series-08' & 'series-0C') This important subroutine generates the series of Chebyshev polynomials which are used to approximate to SIN, ATN, LN and EXP and hence to derive the other arithmetic functions which depend on these (COS, TAN, ASN, ACS, ** and SQR). The polynomials are generated, for n=1,2,..., by the recurrence relation: Tn+1(z) = 2zTn(z) - Tn-1(z), where Tn(z) is the nth Chebyshev polynomial in z. The series in fact generates: T0, 2T1, 2T2,.... , 2Tn-1, where n is 6 for SIN, 8 for EXP and 12 decimal, for LN and ATN.","13389":"The handling of the 'last value', Z: The loop of the generator requires 2*Z to be placed in mem-0, zero to be placed in mem-2 and the 'last value' to be zero.","13395":"The main loop: The series is generated by looping, using BREG as a counter; the constants in the calling subroutine are stacked in turn by calling STK-DATA; the calculator is re-entered at GEN-ENT-2 so as not to disturb the value of BREG; and the series is built up in the form: B(R) = 2*Z*B(R-1) - B(R-2) + A(R), for R = 1,2,...,N, where A(1), A(2),..., A(N) are the constants supplied by the calling subroutine (SIN, ATN, LN and EXP) and B(0) = 0 = B(-1). The (R+1)th loop starts with B(R) on the stack and with 2*Z, B(R-2) and B(R-1) in mem-0, mem-1 and mem-2 respectively.","13402":"The next constant is placed on the calculator stack.","13405":"The Calculator is re-entered without disturbing BREG.","13414":"The subtraction of B(N-2): The loop above leaves B(N) on the stack and the required result is given by B(N) - B(N-2).","13627":"THE 'COMPARISON' OPERATIONS: (Offsets 09 to 0E & 11 to 16: 'no-l-eql', 'no-gr-eq', 'nos-neql', 'no-grtr', 'no-less', 'nos-eql', 'str-l-eql', 'str-gr-eq', 'strs-neql', 'str-grtr', 'str-less' & 'strs-eql') This subroutine is used to perform the twelve possible comparison operations. The single operation offset is present in the B register at the start of the subroutine.","13724":"THE 'STRING CONCATENATION' OPERATION: (Offset 17: 'strs-add') This subroutine performs the binary operation 'A$+B$. The parameters for these strings are fetched and the total length found. Sufficient room to hold both the strings is made available in the work space and the strings are copied over. The result of this subroutine is therefore to produce a temporary variable A$+B$ that resides in the work space.","13759":"THE 'STK-PNTRS' SUBROUTINE: This subroutine resets the HL register pair to point to the first byte of the 'last value', i.e. STKEND-5, and the DE register pair to point one-past the 'last value', i.e. STKEND.","13769":"THE 'CHR$' FUNCTION: (Offset 2F: 'chrs') This subroutine handles the function CHR$ X and creates a single character string in the work space.","13788":"REPORT-B - Integer out of range","13790":"THE 'VAL' AND 'VAL$' FUNCTION: (Offsets 1D: 'val' and 18: 'val$') This subroutine handles the functions VAL X$ and VAL$ X$. When handling VAL X$, it return a 'last value' that is the result of evaluating the string (without its bounding quotes) as a numerical expression. when handling VAL$ X$, it evaluates X$ (without its bounding quotes) as a string expression, and returns the parameters of that string expression as a 'last value' on the calculator stack.","13855":"THE 'STR$' FUNCTION: (Offset 2E: 'str$') This subroutine handles the function STR$ X and returns a 'last value' which is a set of parameters that define a string containing what would appear on the screen if X were displayed by a PRINT command.","13893":"THE 'READ-IN' SUBROUTINE: (Offset 1A: 'read-in') This subroutine is called via the calculator offset through the first line of the S-INKEY$ routine in SCANNING. It appears to provide for the reading in of data through different streams from those available on the standard Spectrum. Like INKEY$ the subroutine returns a string.","13929":"THE 'CODE' FUNCTION: This subroutine handles the function CODE A$ and returns the Spectrum code of the first character in A$, or zero if A$ should be null.","13940":"THE 'LEN' FUNCTION: (Offset 1E: 'len') This subroutine handles the function LEN A$ and returns a 'last value' that is equal to the length of the string.","13946":"THE 'DECREASE THE COUNTER' SUBROUTINE: (Offset 35: 'dec-jr-nz') This subroutine is only called by the SERIES GENERATOR subroutine and in effect is a 'DJNZ' operation but the counter is the system variable, BREG, rather than the B register.","13958":"THE 'JUMP' SUBROUTINE: (Offset 33: 'jump') This subroutine executes an unconditional jump when called by the literal '33'. It is also used by the subroutines DECREASE THE COUNTER and JUMP ON TRUE.","13967":"THE 'JUMP ON TRUE' SUBROUTINE: (Offset 00: 'jump-true') This subroutine executes a conditional jump if the 'last value' on the calculator stack, or more precisely the number addressed currently by the DE register pair, is true.","13979":"THE 'END-CALC' SUBROUTINE: (Offset 38: 'end-calc') This subroutine ends a RST 0028 operation.","13984":"THE 'MODULUS' SUBROUTINE: (Offset 32: 'n-mod-m') This subroutine calculates M (mod M), where M is a positive integer held at the top of the calculator stack, the 'last value', and N is the integer held on the stack beneath M. The subroutine returns the integer quotient INT (N/M) at the top of the calculator stack, the 'last value', and the remainder N-INT (N/M) in the second place on the stack. This subroutine is called during the calculation of a random number to reduce N mod 65537 decimal.","13999":"THE 'INT' FUNCTION: (Offset 27: 'int') This subroutine handles the function INT X and returns a 'last value' that is the 'integer part' of the value supplied. Thus INT 2.4 gives 2 but as the subroutine always rounds the result down INT -2.4 gives -3. The subroutine uses the INTEGER TRUNCATION TOWARDS ZERO subroutine at 3214 to produce I (X) such that I (2.4) gives 2 and I (-2.4) gives -2. Thus, INT X is gives by I (X) for values of X that are greater than or equal to zero, and I (X)-1 for negative values of X that are not already integers, when the result is, of course, I (X).","14004":"For values of X that have been shown to be greater than or equal to zero there is no jump and I (X) is readily found.","14016":"The jump is made for values of X that are negative integers, otherwise there is no jump and I (X)-1 is calculated.","14020":"THE 'EXPONENTIAL' FUNCTION: (Offset 26: 'exp') This subroutine handles the function EXP X and is the first of four routines that use SERIES GENERATOR to produce Chebyshev polynomials. The approximation to EXP X is found as follows: 1) X is divided by LN 2 to give Y, so that 2 to the power Y is now the required result. 2) The value N is found, such that N=INT Y. 3) The value W is found, such that W=Y-N, where 0 <=W <=1, as required for the series to converge. 4) The argument Z if formed, such that Z=2*w-1. 5) The SERIES GENERATOR is used to return 2**W. 6) Finally N is added to the exponent, giving 2**(N+W), which is 2**Y and therefore the required answer for EXP X.","14021":"Perform step 1.","14029":"Perform step 2.","14032":"Perform step 3.","14033":"Perform step 4.","14037":"Perform step 5, passing to the SERIES GENERATOR the parameter '8' and the eight constants required.","14071":"Perform step 6.","14083":"Report 6 - Number too big","14094":"Use the calculator to make the 'last value' zero.","14099":"THE 'NATURAL LOGARITHM' FUNCTION: (Offset 25: 'ln') This subroutine handles the function LN X and is the second of the four routines that use SERIES GENERATOR to produce Chebyshev polynomials. The approximation to LN X is found as follows: 1) X is tested and report A is given if X is not positive. 2) X is then split into its true exponent, e', and its mantissa X' = X/(2**e'), where X' is greater than, or equal to, 0.5 but still less than 1. 3) The required value Y1 or Y2 is formed. If X' is greater than 0.8 then Y1=e'*LN 2 and if otherwise Y2 = (e'-1)*LN 2. 4) If X' is greater than 0.8 then the quantity X'-1 is stacked; otherwise 2*X'-1 is stacked. 5) Now the argument Z is formed, being if X' is greater than 0.8, Z = 2.5*X'-3; otherwise Z = 5*X'-3. In each case, -1 <=Z <=1, as required for the series to converge. 6) The SERIES GENERATOR is used to produce the required function. 7) Finally a simply multiplication and addition leads to LN X being returned as the 'last value'.","14100":"Perform step 1.","14106":"Report A - Invalid argument","14108":"Perform step 2.","14122":"Perform step 3.","14149":"Perform step 4.","14154":"Perform step 5.","14161":"Perform step 6, passing to the SERIES GENERATOR the parameter '12' decimal, and the twelve constant required.","14207":"At the end of the last loop the 'last value' is: either LN X'/(X'-1) for the larger values of X' or LN (2*X')/(2*X'-1) for the smaller values of X'. Perform step 7.","14211":"THE 'REDUCE ARGUMENT' SUBROUTINE: (Offset 39: 'get-argt') This subroutine transforms the argument X of SIN X or COS X into a value V. The subroutine first finds a value Y such that: Y = X/(2*PI) - INT (X/2*PI) + 0.5), where Y is greater than, or equal to, -.5 but less than +.5. The subroutine returns with: 1) V = 4*Y if -1 <=4*Y <=1; 2) V = 2-4*Y if 1 <4*Y <2; 3) V = -4*Y-2 if -2 <=4*Y < -1. In each case, -1 < =V <=1 and SIN (PI*V/2) = SIN X","14225":"Note: Adding 0.5 and taking INT rounds the result to the nearest integer.","14241":"If the jump was made then continue.","14250":"THE 'COSINE' FUNCTION: (Offset 20: 'cos') This subroutine handles the function COS X and returns a 'last value' 'that is an approximation to COS X. The subroutine uses the expression: COS X = SIN (PI*W/2), where -1 <=W <=1. In deriving W for X the subroutine uses the test result obtained in the previous subroutine and stored for this purpose in mem-0. It then jumps to the SINE, subroutine, entering at C-ENT, to produce a 'last value' of COS X.","14258":"If the jump was not made then continue.","14298":"THE 'TAN' FUNCTION: This subroutine handles the function TAN X. The subroutine simply returns SIN X/COS X, with arithmetic overflow if COS X = 0.","14306":"THE 'ARCTAN' FUNCTION: (Offset 24: 'atn') This subroutine handles the function ATN X and is the last of the four routines that use SERIES GENERATOR to produce Chebyshev polynomials. It returns a real number between -PI/2 and PI/2, which is equal to the value in radians of the angle whose tan is X. 1) The values W and Y are found for three cases of X, such that: 1a) if -1 < X < 1 then W = 0 & Y = X;  1b) if -1 < =X then W = PI/2 & Y = -1/X; 1c) if X < =-1 then W = -PI/2 & Y = -1/X; 2) The argument Z is formed, such that: 2a) if -1 < X < 1 then Z = 2*Y*Y-1 = 2*X*X-1; 2b) if 1 < X then Z = 2*Y*Y-1 = 2/(X*X)-1; 2c) if X < =-1 then Z = 2*Y*Y-1 = 2/(X*X)-1; 3) The SERIES GENERATOR is used to produce the required function. 4) Finally a simple multiplication and addition give ATN X.","14330":"Perform step 2.","14338":"Perform step 3, passing to the SERIES GENERATOR the parameter '12' decimal, and the twelve constants required.","14383":"At the end of the last loop the 'last value' is: case 1) ATN X/X; case 2) ATN (-1/X)/(-1/X); case 3) ATN (-1/X)/(-1/X). Perform step 4.","14387":"THE 'ARCSIN' FUNCTION: (Offset 22: 'asn') This subroutine handles the function ASN X and return a real real number from -PI/2 to PI/2 inclusive which is equal to the value in radians of the angle whose sine is X. Thereby if Y = ASN X then X = SIN Y. This subroutine uses the trigonometric identity: TAN (Y/2) = SIN Y/1(1+COS Y) to obtain TAN (Y/2) and hence (using ATN) Y/2 and finally Y.","14403":"THE 'ARCCOS' FUNCTION: (Offset 23: 'acs') This subroutine handles the function ACS X and returns a real number from zero to PI inclusive which is equal to the value in radians of the angle whose cosine is X. This subroutine uses the relation: ACS X = PI/2 - ASN X","14410":"THE 'SQUARE ROOT' FUNCTION: (Offset 28: 'sqr') This subroutine handles the function SQR X and returns the positive square root of the real number X if X is positive, and zero if X is zero. A negative value of X gives rise to report A - invalid argument (via In in the EXPONENTIATION subroutine). This subroutine treats the square root operation as being X**.5 and therefore stacks the value .5 and proceeds directly into the EXPONENTIATION subroutine.","14415":"The jump is made if X = 0, otherwise continue with:","14417":"THE 'EXPONENTIATION' OPERATION: (Offset 06: 'to-power') This subroutine performs the binary operation of raising the first number, X, to the power of the second number, Y. The subroutine treats the result X**Y as being equivalent to EXP (Y*LN X). It returns this value unless X is zero, in which case it returns 1 if Y is also zero (0**0=1), returns zero if Y is positive and reports arithmetic overflow if Y is negative.","14423":"The jump is made if X = 0, otherwise EXP (Y*LN X) is formed.","14424":"Giving report A if X is negative.","14429":"The value of X is zero so consider the three possible cases involved.","14434":"The jump is made if X = 0 and Y = 0, otherwise proceed.","14439":"The jump is made if X = 0 and Y is positive, otherwise proceed.","14446":"386E - 3CFF These locations are 'spare'. They all hold +FF.","14444":"Now return with the 'last value' on the stack being 0**Y.","14442":"The result is to be 1 for the operation.","15616":"3D00 - 3FFF These locations hold the 'character set'. There are 8 byte representations for all the characters with codes +20 (space) to +7F (©).","16384":"SCREEN: Pixel memory","22528":"SCREEN: Attribute memory","23296":"Printer buffer","23552":"System variables","23744":"Reserved"},"literals":{"4780":["$MainExecAddress"],"1218":["$SaveBytesRoutineAddress"],"0":["$SaveBytesResumeAddress"],"1388":["$LoadBytesRoutineAddress"],"1506":["$LoadBytesResumeAddress"],"1462":["$LoadBytesInvalidHeaderAddress"],"149":["$TokenTableAddress","TOKEN_TABLE"],"91":["$TokenCount"],"165":["$TokenOffset"],"23645":["CH_ADD"],"23647":["X_PTR"],"125":["SKIP_OVER"],"23649":["WORKSP"],"23672":["FRAMES"],"23655":["BREG"],"23653":["STKEND"],"13015":["FP_OP_ADDR"],"13157":["RE_ENTRY"],"23654":["STK_END_hi"],"23656":["MEM"],"12997":["stk_zero_const"],"11563":["STACK_BC"],"23675":["UDG"],"23613":["ERR_SP"],"23728":["NMI_ADD"],"23552":["KSTATE0"],"23556":["KSTATE4"],"23561":["REPDEL"],"23560":["LAST_K"],"23562":["REPPER"],"23624":["BORDCR"],"23698":["MEMBOT"],"23668":["T_ADDR_lo","T_ADDR"],"23641":["E_LINE"],"23635":["PROG"],"23627":["VARS"],"23618":["NEWPPC"],"23697":["P_FLAG"],"23567":["TVDATA_hi"],"23566":["TVDATA_lo"],"23633":["CURCHL"],"23688":["S_POSN"],"23606":["CHARS"],"23611":["FLAGS"],"23695":["ATTR_T"],"23692":["SCR_CT"],"23659":["DF_SZ"],"23689":["S_POSN_hi"],"23693":["ATTR_P"],"23612":["TV_FLAG"],"23677":["COORDS"],"23643":["K_CUR"],"23625":["E_PPC"],"23626":["E_PPC_hi"],"23658":["FLAGS2"],"23617":["MODE"],"23565":["K_DATA"],"23631":["CHANS"],"23691":["S_POSNL_hi"],"23686":["DF_CCL"],"23682":["ECHO_E"],"23680":["PR_CC"],"23684":["DF_CC"],"23690":["S_POSNL"],"23651":["STKBOT"],"23730":["RAMTOP"],"23732":["P_RAMT"],"23608":["RASP_PIP"],"23610":["ERR_NR"],"23639":["DATAADD"],"23563":["DEFADD"],"23574":["STRMS_6"],"23621":["PPC"],"23664":["OSPPC"],"23620":["NSPPC"],"23615":["LIST_SP"],"23660":["S_TOP"],"23623":["SUBPPC"],"23637":["NXTLIN"],"23665":["FLAGX"],"23666":["STRLEN"],"23629":["DEST"],"23696":["MASK_T"],"23670":["SEED"],"23662":["OLDPPC"],"23678":["COORDS_hi"],"23564":["DEFADD_hi"],"23724":["MEM_5_2nd"],"23713":["MEM_3_1st"],"23723":["MEM_5_1st"],"23722":["MEM_4_5th"],"23718":["MEM_4_1st"]},"literalReplacements":{"8":"CH_ADD","11":"X_PTR","24":"CH_ADD","49":"WORKSP","62":"FRAMES","58":"FRAMES","3088":"TOKEN_TABLE","13151":"BREG","13157":"STKEND","13198":"FP_OP_ADDR","13207":"RE_ENTRY","13213":"STK_END_hi","13219":"BREG","13236":"STKEND","13243":"STKEND","13328":"MEM","13343":"stk_zero_const","13359":"MEM","13494":"STACK_BC","13531":"UDG","116":"CH_ADD","120":"CH_ADD","88":"ERR_SP","104":"NMI_ADD","145":"CH_ADD","707":"KSTATE0","722":"KSTATE4","732":"KSTATE0","739":"KSTATE4","759":"REPDEL","776":"LAST_K","790":"REPPER","812":"KEY_TABLE_L","839":"KEY_TABLE_L","961":"BE_IX_P3","967":"BORDCR","1031":"MEMBOT","1071":"SEMI_TONE","1218":"SA_LD_RET","1344":"BORDCR","1374":"SA_LD_RET","1542":"T_ADDR_lo","1547":"T_ADDR_lo","1561":"T_ADDR_lo","1596":"T_ADDR_lo","1642":"T_ADDR_lo","1623":"T_ADDR_lo","1735":"T_ADDR_lo","1749":"T_ADDR_lo","1769":"T_ADDR_lo","1827":"T_ADDR_lo","1854":"E_LINE","1857":"PROG","1870":"VARS","1983":"T_ADDR_lo","2039":"T_ADDR_lo","2113":"X_PTR","2120":"X_PTR","2124":"E_LINE","2164":"E_LINE","2168":"X_PTR","2188":"X_PTR","2200":"VARS","2214":"NEWPPC","2254":"PROG","2294":"VARS","2351":"X_PTR","2362":"X_PTR","2371":"X_PTR","2374":"PROG","2395":"PROG","2399":"X_PTR","2621":"P_FLAG","2635":"P_FLAG","2672":"TVDATA_hi","2685":"TVDATA_lo","2688":"CURCHL","2701":"TVDATA_lo","2792":"S_POSN","2825":"S_POSN","2867":"MEMBOT","2872":"MEMBOT","2905":"UDG","2918":"CHARS","2923":"FLAGS","2971":"P_FLAG","3044":"ATTR_T","3162":"CL_SET","3216":"SCR_CT","3219":"ATTR_T","3223":"P_FLAG","3243":"FLAGS","3275":"P_FLAG","3279":"ATTR_T","3344":"ATTR_T","3348":"P_FLAG","3357":"DF_SZ","3364":"S_POSN_hi","3385":"ATTR_T","3388":"S_POSN","3406":"ATTR_P","3419":"ATTR_T","3422":"P_FLAG","3438":"TV_FLAG","3457":"ATTR_P","3481":"CURCHL","3484":"PRINT_OUT","3492":"KEY_INPUT","3506":"COORDS","3529":"CURCHL","3532":"PRINT_OUT","3700":"ATTR_P","3709":"BORDCR","3884":"ERR_SP","3888":"ED_ERROR","3892":"ERR_SP","3912":"ED_LOOP","3952":"K_CUR","3973":"K_CUR","3981":"K_CUR","3996":"K_CUR","4009":"E_PPC","4047":"CURCHL","4068":"E_LINE","4075":"K_CUR","4089":"E_PPC","4113":"K_CUR","4135":"ERR_SP","4200":"E_PPC_hi","4255":"K_CUR","4277":"LAST_K","4317":"FLAGS2","4331":"MODE","4360":"KEY_NEXT","4365":"K_DATA","4368":"KEY_INPUT","4371":"CHANS","4396":"ERR_SP","4400":"ED_FULL","4404":"ERR_SP","4432":"S_POSNL_hi","4479":"ERR_SP","2808":"DF_CCL","2841":"DF_CCL","2804":"ECHO_E","4408":"ECHO_E","4488":"ECHO_E","2815":"PR_CC","2796":"DF_CC","2829":"DF_CC","2800":"S_POSNL","2837":"S_POSNL","4392":"S_POSNL","4424":"S_POSNL","4470":"S_POSNL","4496":"WORKSP","4501":"E_LINE","4510":"WORKSP","4515":"STKBOT","4538":"RAMTOP","4543":"P_RAMT","4547":"RASP_PIP","4551":"UDG","4593":"P_RAMT","4597":"RASP_PIP","4601":"UDG","4608":"P_RAMT","4622":"UDG","4629":"RASP_PIP","4633":"RAMTOP","4639":"CHARS","4642":"RAMTOP","4651":"ERR_SP","4656":"ERR_NR","4664":"CHANS","4667":"IN_CHAN_INFO","4678":"DATAADD","4682":"PROG","4685":"VARS","4691":"E_LINE","4700":"WORKSP","4703":"STKBOT","4706":"STKEND","4711":"ATTR_P","4714":"ATTR_T","4717":"BORDCR","4723":"REPDEL","4732":"IN_STREAM_DATA","4803":"E_LINE","4815":"E_LINE","4818":"CH_ADD","4849":"SCR_CT","4879":"ERR_NR","4893":"DEFADD","4899":"STRMS_6","4931":"REP_MESSAGES","4944":"PPC","4965":"ERR_NR","4985":"OSPPC","4988":"NSPPC","5469":"E_PPC","5473":"CH_ADD","5477":"REPORT_G","5481":"WORKSP","5513":"PROG","5522":"PROG","5528":"WORKSP","5535":"E_PPC","5608":"CURCHL","5649":"CHANS","5653":"CURCHL","5665":"CHN_CODE_LKP","5725":"STKEND","5734":"VARS","5778":"LINE_ZERO","5790":"STKBOT","5800":"WORKSP","5808":"E_LINE","5820":"WORKSP","5813":"K_CUR","5823":"WORKSP","5826":"STKBOT","5829":"STKBOT","5832":"STKEND","5836":"MEMBOT","5839":"MEM","5844":"E_LINE","5890":"CHANS","5899":"CLOSE_LOOKUP","5953":"CHANS","5996":"OPEN_STRM_LOOKUP","6037":"LIST_SP","6066":"E_PPC","6069":"S_TOP","6107":"S_TOP","6113":"S_TOP","6116":"S_TOP","6189":"E_PPC","6207":"DF_SZ","6219":"S_TOP","6229":"E_PPC","6279":"FLAGS","6292":"X_PTR","6338":"ATTR_T","6346":"ATTR_T","6349":"P_FLAG","6364":"ATTR_T","6369":"K_CUR","6376":"MODE","6387":"FLAGS","6495":"FLAGS2","6500":"FLAGS2","6511":"PROG","6539":"CH_ADD","6557":"CH_ADD","6651":"E_LINE","6655":"CH_ADD","6659":"MEMBOT","6662":"STKEND","6943":"SUBPPC","6947":"ERR_NR","6973":"STMT_RET","6986":"SYNTAX_TABLE","6994":"T_ADDR","6999":"T_ADDR","7002":"SCAN_LOOP","7011":"CMD_CLASS_TBL","7043":"NEWPPC","7053":"PPC","7056":"WORKSP","7060":"E_LINE","7065":"NSPPC","7073":"NSPPC","7095":"NXTLIN","7110":"PPC","7121":"NXTLIN","7125":"CH_ADD","7190":"T_ADDR","7232":"FLAGX","7238":"STRLEN","7242":"DEST","7254":"FLAGS","7330":"T_ADDR","7341":"ATTR_T","7344":"ATTR_P","7347":"P_FLAG","7370":"MASK_T","7456":"MEM","7487":"PPC","7507":"PPC","7510":"NEWPPC","7513":"SUBPPC","7519":"CH_ADD","7525":"NXTLIN","7532":"NXTLIN","7552":"NSPPC","7572":"NEWPPC","7602":"DEST","7610":"MEM","7624":"MEM","7670":"X_PTR","7673":"DATAADD","7697":"DATAADD","7700":"X_PTR","7755":"DATAADD","7766":"FRAMES","7770":"SEED","7775":"OLDPPC","7795":"NEWPPC","7859":"RAMTOP","7864":"VARS","7868":"E_LINE","7878":"STKEND","7890":"P_RAMT","7901":"RAMTOP","7911":"ERR_SP","7924":"PPC","7930":"ERR_SP","7941":"STKEND","7982":"ERR_SP","8112":"FLAGS","8352":"S_POSN","8356":"DF_SZ","8365":"S_POSN","8372":"SCR_CT","8451":"FLAGX","8465":"FLAGS","8489":"K_CUR","8498":"CH_ADD","8502":"ERR_SP","8506":"IN_VAR_1","8516":"ERR_SP","8520":"WORKSP","8557":"ECHO_E","8564":"FLAGX","8577":"ERR_SP","8581":"X_PTR","8591":"X_PTR","8598":"CH_ADD","8603":"STKBOT","8606":"WORKSP","8633":"WORKSP","8636":"CH_ADD","8644":"FLAGX","8662":"CURCHL","8751":"P_FLAG","8774":"ATTR_T","8840":"ATTR_T","8870":"BORDCR","8933":"COORDS","9083":"COORDS","9224":"COORDS","9235":"COORDS_hi","9281":"COORDS","9296":"COORDS_hi","9316":"COORDS","9326":"COORDS_hi","9439":"COORDS","9472":"SCANNING_TABLE","9528":"CHARS","9691":"FLAGS","9725":"SEED","9754":"SEED","9789":"FLAGS","9889":"STKEND","9897":"STKEND","9920":"CH_ADD","9938":"FLAGS","10022":"OPERATOR_TABLE","10046":"FLAGS","10085":"FLAGS","10218":"FLAGS","10244":"PROG","10295":"CH_ADD","10338":"STKEND","10346":"STKEND","10383":"CH_ADD","10386":"DEFADD","10390":"DEFADD","10400":"CH_ADD","10404":"DEFADD","10467":"DEFADD_hi","10493":"VARS","10577":"DEFADD","10630":"STKEND","10638":"STKEND","10722":"CH_ADD","10939":"STKEND","10952":"STKEND","11007":"DEST","11050":"E_LINE","11061":"DEST","11087":"DEST","11122":"DEST","11125":"STRLEN","11202":"DEST","11214":"DEST","11220":"E_LINE","11227":"DEST","11244":"E_LINE","11249":"STKEND","11262":"STKEND","11356":"E_LINE","11563":"ERR_NR","11606":"MEMBOT","11822":"MEM_5_2nd","11826":"MEM_5_2nd","11844":"MEM_3_1st","11851":"MEM_5_1st","11874":"MEM_5_2nd","11909":"MEM_4_5th","11925":"MEM_4_1st","11928":"MEM_3_1st","11962":"MEM_5_1st","12030":"MEM_3_1st","12045":"MEM_3_1st","12086":"MEM_5_1st","12090":"MEM_3_1st","13759":"STKEND","13790":"CH_ADD","13806":"CH_ADD","13839":"CH_ADD","13850":"CH_ADD","13859":"K_CUR","13863":"CURCHL","13880":"K_CUR","13901":"CURCHL","13948":"BREG"},"memorySections":[{"startAddress":0,"endAddress":18,"sectionType":1},{"startAddress":19,"endAddress":23,"sectionType":2},{"startAddress":24,"endAddress":36,"sectionType":1},{"startAddress":37,"endAddress":39,"sectionType":2},{"startAddress":40,"endAddress":42,"sectionType":1},{"startAddress":43,"endAddress":47,"sectionType":2},{"startAddress":48,"endAddress":94,"sectionType":1},{"startAddress":95,"endAddress":101,"sectionType":2},{"startAddress":102,"endAddress":148,"sectionType":1},{"startAddress":149,"endAddress":516,"sectionType":2},{"startAddress":517,"endAddress":555,"sectionType":2},{"startAddress":556,"endAddress":581,"sectionType":2},{"startAddress":582,"endAddress":607,"sectionType":2},{"startAddress":608,"endAddress":617,"sectionType":2},{"startAddress":618,"endAddress":643,"sectionType":2},{"startAddress":644,"endAddress":653,"sectionType":2},{"startAddress":654,"endAddress":1133,"sectionType":1},{"startAddress":1134,"endAddress":1138,"sectionType":2},{"startAddress":1139,"endAddress":1143,"sectionType":2},{"startAddress":1144,"endAddress":1148,"sectionType":2},{"startAddress":1149,"endAddress":1153,"sectionType":2},{"startAddress":1154,"endAddress":1158,"sectionType":2},{"startAddress":1159,"endAddress":1163,"sectionType":2},{"startAddress":1164,"endAddress":1168,"sectionType":2},{"startAddress":1169,"endAddress":1173,"sectionType":2},{"startAddress":1174,"endAddress":1178,"sectionType":2},{"startAddress":1179,"endAddress":1183,"sectionType":2},{"startAddress":1184,"endAddress":1188,"sectionType":2},{"startAddress":1189,"endAddress":1193,"sectionType":2},{"startAddress":1194,"endAddress":1217,"sectionType":2},{"startAddress":1218,"endAddress":2464,"sectionType":1},{"startAddress":2465,"endAddress":2465,"sectionType":2},{"startAddress":2466,"endAddress":2496,"sectionType":2},{"startAddress":2497,"endAddress":2506,"sectionType":2},{"startAddress":2507,"endAddress":2521,"sectionType":2},{"startAddress":2522,"endAddress":2539,"sectionType":2},{"startAddress":2540,"endAddress":2547,"sectionType":2},{"startAddress":2548,"endAddress":2576,"sectionType":1},{"startAddress":2577,"endAddress":2594,"sectionType":2},{"startAddress":2595,"endAddress":3319,"sectionType":1},{"startAddress":3320,"endAddress":3327,"sectionType":2},{"startAddress":3328,"endAddress":3999,"sectionType":1},{"startAddress":4000,"endAddress":4008,"sectionType":2},{"startAddress":4009,"endAddress":5008,"sectionType":1},{"startAddress":5009,"endAddress":5009,"sectionType":2},{"startAddress":5010,"endAddress":5011,"sectionType":2},{"startAddress":5012,"endAddress":5027,"sectionType":2},{"startAddress":5028,"endAddress":5045,"sectionType":2},{"startAddress":5046,"endAddress":5061,"sectionType":2},{"startAddress":5062,"endAddress":5073,"sectionType":2},{"startAddress":5074,"endAddress":5086,"sectionType":2},{"startAddress":5087,"endAddress":5100,"sectionType":2},{"startAddress":5101,"endAddress":5120,"sectionType":2},{"startAddress":5121,"endAddress":5131,"sectionType":2},{"startAddress":5132,"endAddress":5145,"sectionType":2},{"startAddress":5146,"endAddress":5161,"sectionType":2},{"startAddress":5162,"endAddress":5181,"sectionType":2},{"startAddress":5182,"endAddress":5198,"sectionType":2},{"startAddress":5199,"endAddress":5218,"sectionType":2},{"startAddress":5219,"endAddress":5229,"sectionType":2},{"startAddress":5230,"endAddress":5246,"sectionType":2},{"startAddress":5247,"endAddress":5262,"sectionType":2},{"startAddress":5263,"endAddress":5275,"sectionType":2},{"startAddress":5276,"endAddress":5291,"sectionType":2},{"startAddress":5292,"endAddress":5309,"sectionType":2},{"startAddress":5310,"endAddress":5323,"sectionType":2},{"startAddress":5324,"endAddress":5341,"sectionType":2},{"startAddress":5342,"endAddress":5355,"sectionType":2},{"startAddress":5356,"endAddress":5369,"sectionType":2},{"startAddress":5370,"endAddress":5383,"sectionType":2},{"startAddress":5384,"endAddress":5397,"sectionType":2},{"startAddress":5398,"endAddress":5412,"sectionType":2},{"startAddress":5413,"endAddress":5430,"sectionType":2},{"startAddress":5431,"endAddress":5432,"sectionType":2},{"startAddress":5433,"endAddress":5460,"sectionType":2},{"startAddress":5461,"endAddress":5550,"sectionType":1},{"startAddress":5551,"endAddress":5555,"sectionType":2},{"startAddress":5556,"endAddress":5560,"sectionType":2},{"startAddress":5561,"endAddress":5565,"sectionType":2},{"startAddress":5566,"endAddress":5571,"sectionType":2},{"startAddress":5572,"endAddress":5573,"sectionType":1},{"startAddress":5574,"endAddress":5587,"sectionType":2},{"startAddress":5588,"endAddress":5676,"sectionType":1},{"startAddress":5677,"endAddress":5683,"sectionType":2},{"startAddress":5684,"endAddress":5774,"sectionType":1},{"startAddress":5775,"endAddress":5776,"sectionType":2},{"startAddress":5777,"endAddress":5909,"sectionType":1},{"startAddress":5910,"endAddress":5915,"sectionType":2},{"startAddress":5916,"endAddress":6009,"sectionType":1},{"startAddress":6010,"endAddress":6016,"sectionType":2},{"startAddress":6017,"endAddress":6727,"sectionType":1},{"startAddress":6728,"endAddress":6777,"sectionType":2},{"startAddress":6778,"endAddress":6780,"sectionType":2},{"startAddress":6781,"endAddress":6784,"sectionType":2},{"startAddress":6785,"endAddress":6789,"sectionType":2},{"startAddress":6790,"endAddress":6793,"sectionType":2},{"startAddress":6794,"endAddress":6796,"sectionType":2},{"startAddress":6797,"endAddress":6799,"sectionType":2},{"startAddress":6800,"endAddress":6807,"sectionType":2},{"startAddress":6808,"endAddress":6811,"sectionType":2},{"startAddress":6812,"endAddress":6814,"sectionType":2},{"startAddress":6815,"endAddress":6817,"sectionType":2},{"startAddress":6818,"endAddress":6820,"sectionType":2},{"startAddress":6821,"endAddress":6823,"sectionType":2},{"startAddress":6824,"endAddress":6826,"sectionType":2},{"startAddress":6827,"endAddress":6829,"sectionType":2},{"startAddress":6830,"endAddress":6832,"sectionType":2},{"startAddress":6833,"endAddress":6836,"sectionType":2},{"startAddress":6837,"endAddress":6839,"sectionType":2},{"startAddress":6840,"endAddress":6842,"sectionType":2},{"startAddress":6843,"endAddress":6845,"sectionType":2},{"startAddress":6846,"endAddress":6848,"sectionType":2},{"startAddress":6849,"endAddress":6852,"sectionType":2},{"startAddress":6853,"endAddress":6856,"sectionType":2},{"startAddress":6857,"endAddress":6859,"sectionType":2},{"startAddress":6860,"endAddress":6862,"sectionType":2},{"startAddress":6863,"endAddress":6865,"sectionType":2},{"startAddress":6866,"endAddress":6869,"sectionType":2},{"startAddress":6870,"endAddress":6872,"sectionType":2},{"startAddress":6873,"endAddress":6875,"sectionType":2},{"startAddress":6876,"endAddress":6878,"sectionType":2},{"startAddress":6879,"endAddress":6879,"sectionType":2},{"startAddress":6880,"endAddress":6880,"sectionType":2},{"startAddress":6881,"endAddress":6881,"sectionType":2},{"startAddress":6882,"endAddress":6882,"sectionType":2},{"startAddress":6883,"endAddress":6886,"sectionType":2},{"startAddress":6887,"endAddress":6890,"sectionType":2},{"startAddress":6891,"endAddress":6891,"sectionType":2},{"startAddress":6892,"endAddress":6892,"sectionType":2},{"startAddress":6893,"endAddress":6893,"sectionType":2},{"startAddress":6894,"endAddress":6894,"sectionType":2},{"startAddress":6895,"endAddress":6895,"sectionType":2},{"startAddress":6896,"endAddress":6896,"sectionType":2},{"startAddress":6897,"endAddress":6900,"sectionType":2},{"startAddress":6901,"endAddress":6904,"sectionType":2},{"startAddress":6905,"endAddress":6907,"sectionType":2},{"startAddress":6908,"endAddress":6913,"sectionType":2},{"startAddress":6914,"endAddress":6917,"sectionType":2},{"startAddress":6918,"endAddress":6921,"sectionType":2},{"startAddress":6922,"endAddress":6927,"sectionType":2},{"startAddress":6928,"endAddress":6931,"sectionType":2},{"startAddress":6932,"endAddress":6934,"sectionType":2},{"startAddress":6935,"endAddress":7168,"sectionType":1},{"startAddress":7169,"endAddress":7180,"sectionType":2},{"startAddress":7181,"endAddress":7656,"sectionType":1},{"startAddress":7657,"endAddress":7657,"sectionType":2},{"startAddress":7658,"endAddress":9122,"sectionType":1},{"startAddress":9123,"endAddress":9140,"sectionType":4},{"startAddress":9141,"endAddress":9621,"sectionType":1},{"startAddress":9622,"endAddress":9646,"sectionType":2},{"startAddress":9647,"endAddress":10132,"sectionType":1},{"startAddress":10133,"endAddress":10159,"sectionType":2},{"startAddress":10160,"endAddress":10172,"sectionType":2},{"startAddress":10173,"endAddress":11628,"sectionType":1},{"startAddress":11629,"endAddress":11631,"sectionType":4},{"startAddress":11632,"endAddress":11761,"sectionType":1},{"startAddress":11762,"endAddress":11763,"sectionType":4},{"startAddress":11764,"endAddress":12996,"sectionType":1},{"startAddress":12997,"endAddress":12999,"sectionType":2},{"startAddress":13000,"endAddress":13003,"sectionType":2},{"startAddress":13004,"endAddress":13005,"sectionType":2},{"startAddress":13006,"endAddress":13010,"sectionType":2},{"startAddress":13011,"endAddress":13014,"sectionType":2},{"startAddress":13015,"endAddress":13146,"sectionType":3},{"startAddress":13147,"endAddress":14006,"sectionType":1},{"startAddress":14007,"endAddress":14018,"sectionType":4},{"startAddress":14019,"endAddress":14107,"sectionType":1},{"startAddress":14108,"endAddress":14110,"sectionType":4},{"startAddress":14111,"endAddress":14240,"sectionType":1},{"startAddress":14241,"endAddress":14248,"sectionType":4},{"startAddress":14249,"endAddress":14428,"sectionType":1},{"startAddress":14429,"endAddress":14443,"sectionType":4},{"startAddress":14444,"endAddress":14444,"sectionType":4},{"startAddress":14445,"endAddress":14445,"sectionType":1},{"startAddress":14446,"endAddress":15615,"sectionType":0},{"startAddress":15616,"endAddress":16383,"sectionType":2}]};},{}],85:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var ScreenDeviceType_1=require("./ScreenDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var ScreenConfigurationData_1=require("./ScreenConfigurationData");var ScreenConfiguration_1=require("./ScreenConfiguration");var LiteEvent_1=require("../../utils/LiteEvent");var NoopScreenDevice=(function(_super){__extends(NoopScreenDevice,_super);function NoopScreenDevice(spectrum){var _this=_super.call(this)||this;_this.frameCount=(0x75bcd15-0O726746425);_this.overflow=(0x75bcd15-0O726746425);_this.frameCompleted=new LiteEvent_1.LiteEvent();_this.screenConfiguration=new ScreenConfiguration_1.ScreenConfiguration(new ScreenConfigurationData_1.ScreenConfigurationData());_this.renderingTactTable=[];_this.refreshRate=(0x75bcd15-0O726746425);_this.flashToggleFrames=(0x75bcd15-0O726746425);_this.borderColor=(0x75bcd15-0O726746425);_this.hostVm=spectrum?spectrum:new NoopSpectrumVm_1.NoopSpectrumVm();return _this;}NoopScreenDevice.prototype.reset=function(){};NoopScreenDevice.prototype.getDeviceState=function(){};NoopScreenDevice.prototype.restoreDeviceState=function(state){};NoopScreenDevice.prototype.onAttachedToVm=function(hostVm){};NoopScreenDevice.prototype.onNewFrame=function(){};NoopScreenDevice.prototype.onFrameCompleted=function(){};NoopScreenDevice.prototype.renderScreen=function(fromTact,toTact){};NoopScreenDevice.prototype.getContentionValue=function(tact){return (0x75bcd15-0O726746425);};NoopScreenDevice.prototype.getPixelBuffer=function(){return new Uint8Array((0x75bcd15-0O726746425));};return NoopScreenDevice;}(ScreenDeviceType_1.ScreenDeviceType));exports.NoopScreenDevice=NoopScreenDevice;},{"../../machine/NoopSpectrumVm":159,"../../utils/LiteEvent":173,"./ScreenConfiguration":88,"./ScreenConfigurationData":89,"./ScreenDeviceType":91}],86:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var NoopScreenFrameProvider=(function(){function NoopScreenFrameProvider(){this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();}NoopScreenFrameProvider.prototype.reset=function(){};NoopScreenFrameProvider.prototype.onAttachedToVm=function(hostVm){};NoopScreenFrameProvider.prototype.startNewFrame=function(){};NoopScreenFrameProvider.prototype.displayFrame=function(frame){};return NoopScreenFrameProvider;}());exports.NoopScreenFrameProvider=NoopScreenFrameProvider;},{"../../machine/NoopSpectrumVm":159}],87:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var RenderingTact=(function(){function RenderingTact(){this.phase=(0x75bcd15-0O726746425);this.contentionDelay=(0x75bcd15-0O726746425);this.pixelByteToFetchAddress=(0x75bcd15-0O726746425);this.attributeToFetchAddress=(0x75bcd15-0O726746425);this.pixelIndex=(0x75bcd15-0O726746425);}return RenderingTact;}());exports.RenderingTact=RenderingTact;},{}],88:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var ScreenConfiguration=(function(){function ScreenConfiguration(configData){this.interruptTact=configData.interruptTact;this.verticalSyncLines=configData.verticalSyncLines;this.nonVisibleBorderTopLines=configData.nonVisibleBorderTopLines;this.borderTopLines=configData.borderTopLines;this.borderBottomLines=configData.borderBottomLines;this.nonVisibleBorderBottomLines=configData.nonVisibleBorderBottomLines;this.displayLines=configData.displayLines;this.borderLeftTime=configData.borderLeftTime;this.borderRightTime=configData.borderRightTime;this.displayLineTime=configData.displayLineTime;this.horizontalBlankingTime=configData.horizontalBlankingTime;this.nonVisibleBorderRightTime=configData.nonVisibleBorderRightTime;this.pixelDataPrefetchTime=configData.pixelDataPrefetchTime;this.attributeDataPrefetchTime=configData.attributeDataPrefetchTime;this.screenLines=this.borderTopLines+this.displayLines+this.borderBottomLines;this.firstDisplayLine=this.verticalSyncLines+this.nonVisibleBorderTopLines+this.borderTopLines;this.lastDisplayLine=this.firstDisplayLine+this.displayLines-(0O57060516-0xbc614d);this.borderLeftPixels=(15658734^0O73567354)*this.borderLeftTime;this.borderRightPixels=(15658734^0O73567354)*this.borderRightTime;this.displayWidth=(15658734^0O73567354)*this.displayLineTime;this.screenWidth=this.borderLeftPixels+this.displayWidth+this.borderRightPixels;this.screenLineTime=this.borderLeftTime+this.displayLineTime+this.borderRightTime+this.nonVisibleBorderRightTime+this.horizontalBlankingTime;this.rasterLines=this.firstDisplayLine+this.displayLines+this.borderBottomLines+this.nonVisibleBorderBottomLines;this.screenRenderingFrameTactCount=this.rasterLines*this.screenLineTime;this.firstDisplayPixelTact=this.firstDisplayLine*this.screenLineTime+this.borderLeftTime;this.firstScreenPixelTact=(this.verticalSyncLines+this.nonVisibleBorderTopLines)*this.screenLineTime;}ScreenConfiguration.prototype.isTactVisible=function(line,tactInLine){var firstVisibleLine=this.verticalSyncLines+this.nonVisibleBorderTopLines;var lastVisibleLine=firstVisibleLine+this.borderTopLines+this.displayLines+this.borderBottomLines;return line>=firstVisibleLine&&line<lastVisibleLine&&tactInLine>=(0x75bcd15-0O726746425)&&tactInLine<this.screenLineTime-this.nonVisibleBorderRightTime-this.horizontalBlankingTime;};ScreenConfiguration.prototype.isTactInDisplayArea=function(line,tactInLine){return line>=this.firstDisplayLine&&line<=this.lastDisplayLine&&tactInLine>=this.borderLeftTime&&tactInLine<this.borderLeftTime+this.displayLineTime;};return ScreenConfiguration;}());exports.ScreenConfiguration=ScreenConfiguration;},{}],89:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var ScreenConfigurationData=(function(){function ScreenConfigurationData(){this.interruptTact=(0x75bcd15-0O726746425);this.verticalSyncLines=(0x75bcd15-0O726746425);this.nonVisibleBorderTopLines=(0x75bcd15-0O726746425);this.borderTopLines=(0x75bcd15-0O726746425);this.displayLines=(0x75bcd15-0O726746425);this.borderBottomLines=(0x75bcd15-0O726746425);this.nonVisibleBorderBottomLines=(0x75bcd15-0O726746425);this.horizontalBlankingTime=(0x75bcd15-0O726746425);this.borderLeftTime=(0x75bcd15-0O726746425);this.displayLineTime=(0x75bcd15-0O726746425);this.borderRightTime=(0x75bcd15-0O726746425);this.nonVisibleBorderRightTime=(0x75bcd15-0O726746425);this.pixelDataPrefetchTime=(0x75bcd15-0O726746425);this.attributeDataPrefetchTime=(0x75bcd15-0O726746425);}ScreenConfigurationData.prototype.Clone=function(){var sc=new ScreenConfigurationData();sc.interruptTact=this.interruptTact;sc.borderLeftTime=this.borderLeftTime;sc.displayLineTime=this.displayLineTime;sc.borderRightTime=this.borderRightTime;sc.attributeDataPrefetchTime=this.attributeDataPrefetchTime;sc.borderBottomLines=this.borderBottomLines;sc.borderTopLines=this.borderTopLines;sc.displayLines=this.displayLines;sc.horizontalBlankingTime=this.horizontalBlankingTime;sc.nonVisibleBorderBottomLines=this.nonVisibleBorderBottomLines;sc.nonVisibleBorderRightTime=this.nonVisibleBorderRightTime;sc.nonVisibleBorderTopLines=this.nonVisibleBorderTopLines;sc.pixelDataPrefetchTime=this.pixelDataPrefetchTime;sc.verticalSyncLines=this.verticalSyncLines;return sc;};return ScreenConfigurationData;}());exports.ScreenConfigurationData=ScreenConfigurationData;},{}],90:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceInfoBase_1=require("../DeviceInfoBase");var Spectrum48ScreenDevice_1=require("./Spectrum48ScreenDevice");var ScreenDeviceInfo=(function(_super){__extends(ScreenDeviceInfo,_super);function ScreenDeviceInfo(configurationData,provider,device){return _super.call(this,provider,configurationData,device?device:new Spectrum48ScreenDevice_1.Spectrum48ScreenDevice())||this;}return ScreenDeviceInfo;}(DeviceInfoBase_1.DeviceInfoBase));exports.ScreenDeviceInfo=ScreenDeviceInfo;},{"../DeviceInfoBase":28,"./Spectrum48ScreenDevice":93}],91:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceTypeBase_1=require("../../abstraction/DeviceTypeBase");var DeviceTypes_1=require("../DeviceTypes");var ScreenDeviceType=(function(_super){__extends(ScreenDeviceType,_super);function ScreenDeviceType(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(ScreenDeviceType.prototype,"key",{get:function(){return DeviceTypes_1.DT_SCREEN;},enumerable:true,configurable:true});return ScreenDeviceType;}(DeviceTypeBase_1.DeviceTypeBase));exports.ScreenDeviceType=ScreenDeviceType;},{"../../abstraction/DeviceTypeBase":13,"../DeviceTypes":29}],92:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var ScreenRenderingPhase;(function(ScreenRenderingPhase){ScreenRenderingPhase[ScreenRenderingPhase["None"]=(0x75bcd15-0O726746425)]="None";ScreenRenderingPhase[ScreenRenderingPhase["Border"]=(0O57060516-0xbc614d)]="Border";ScreenRenderingPhase[ScreenRenderingPhase["BorderFetchPixel"]=(15658734^0O73567354)]="BorderFetchPixel";ScreenRenderingPhase[ScreenRenderingPhase["BorderFetchPixelAttr"]=(0O334664274-0x37368B9)]="BorderFetchPixelAttr";ScreenRenderingPhase[ScreenRenderingPhase["DisplayB1"]=(0x5E30A78-0O570605164)]="DisplayB1";ScreenRenderingPhase[ScreenRenderingPhase["DisplayB2"]=(0O507646144^0x51F4C61)]="DisplayB2";ScreenRenderingPhase[ScreenRenderingPhase["DisplayB1FetchB2"]=(1011010-0O3666474)]="DisplayB1FetchB2";ScreenRenderingPhase[ScreenRenderingPhase["DisplayB1FetchA2"]=(0x9D8DE4-0O47306735)]="DisplayB1FetchA2";ScreenRenderingPhase[ScreenRenderingPhase["DisplayB2FetchB1"]=(0O347010110&0x463A71D)]="DisplayB2FetchB1";ScreenRenderingPhase[ScreenRenderingPhase["DisplayB2FetchA1"]=0o11]="DisplayB2FetchA1";})(ScreenRenderingPhase=exports.ScreenRenderingPhase||(exports.ScreenRenderingPhase={}));},{}],93:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var ScreenDeviceType_1=require("./ScreenDeviceType");var MemoryContentionType_1=require("../memory/MemoryContentionType");var RenderingTact_1=require("./RenderingTact");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var NoopScreenFrameProvider_1=require("./NoopScreenFrameProvider");var ScreenConfiguration_1=require("./ScreenConfiguration");var ScreenConfigurationData_1=require("./ScreenConfigurationData");var ScreenRenderingPhase_1=require("./ScreenRenderingPhase");var NoopMemoryDevice_1=require("../memory/NoopMemoryDevice");var DeviceTypes_1=require("../DeviceTypes");var LiteEvent_1=require("../../utils/LiteEvent");exports.SpectrumColors=[0o37700000000,0o37752400000,0o37700000252,0o37752400252,0o37700125000,0o37752525000,0o37700125252,0o37752525252,0o37700000000,0o37777600000,0o37700000377,0o37777600377,0o37700177400,0o37777777400,0o37700177777,0o37777777777];var Spectrum48ScreenDevice=(function(_super){__extends(Spectrum48ScreenDevice,_super);function Spectrum48ScreenDevice(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this._pixelBuffer=new Uint8Array((0x75bcd15-0O726746425));_this._flashOffColors=[];_this._flashOnColors=[];_this._pixelRenderer=new NoopScreenFrameProvider_1.NoopScreenFrameProvider();_this._memoryDevice=new NoopMemoryDevice_1.NoopMemoryDevice();_this._contentionType=MemoryContentionType_1.MemoryContentionType.None;_this._flashPhase=false;_this._pixelByte1=(0x75bcd15-0O726746425);_this._pixelByte2=(0x75bcd15-0O726746425);_this._attrByte1=(0x75bcd15-0O726746425);_this._attrByte2=(0x75bcd15-0O726746425);_this._screenWidth=(0x75bcd15-0O726746425);_this._frameCompleted=new LiteEvent_1.LiteEvent();_this.borderColor=(0x75bcd15-0O726746425);_this.renderingTactTable=[];_this.refreshRate=(0x75bcd15-0O726746425);_this.flashToggleFrames=(0x75bcd15-0O726746425);_this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();_this.frameCount=(0x75bcd15-0O726746425);_this.overflow=(0x75bcd15-0O726746425);_this.screenConfiguration=new ScreenConfiguration_1.ScreenConfiguration(new ScreenConfigurationData_1.ScreenConfigurationData());return _this;}Spectrum48ScreenDevice.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;var screenInfo=hostVm.getDeviceInfo(DeviceTypes_1.DT_SCREEN);this.screenConfiguration=hostVm.screenConfiguration;if(screenInfo&&screenInfo.provider){this._pixelRenderer=screenInfo.provider;}this._memoryDevice=hostVm.memoryDevice;this._contentionType=hostVm.memoryConfiguration.contentionType;this._screenWidth=hostVm.screenDevice.screenConfiguration.screenWidth;this._flashPhase=false;this.frameCount=(0x75bcd15-0O726746425);this.refreshRate=hostVm.baseClockFrequency/this.screenConfiguration.screenRenderingFrameTactCount;this.flashToggleFrames=Math.round(this.refreshRate/(15658734^0O73567354));this._flashOffColors=[];this._flashOnColors=[];for(var attr=(0x75bcd15-0O726746425);attr<0o400;attr++){var ink=(attr&(0x9D8DE4-0O47306735))|((attr&0o100)>>(0O334664274-0x37368B9));var paper=((attr&0o70)>>(0O334664274-0x37368B9))|((attr&0o100)>>(0O334664274-0x37368B9));this._flashOffColors[attr]=paper;this._flashOffColors[0o400+attr]=ink;this._flashOnColors[attr]=(attr&0o200)!==(0x75bcd15-0O726746425)?ink:paper;this._flashOnColors[0o400+attr]=(attr&0o200)!==(0x75bcd15-0O726746425)?paper:ink;}this._pixelBuffer=new Uint8Array(this._screenWidth*hostVm.screenDevice.screenConfiguration.screenLines);this.initializeScreenRenderingTactTable();};Spectrum48ScreenDevice.prototype.onNewFrame=function(){this.frameCount++;if(this.frameCount%this.flashToggleFrames===(0x75bcd15-0O726746425)){this._flashPhase=!this._flashPhase;}this._pixelRenderer.startNewFrame();this.renderScreen((0x75bcd15-0O726746425),this.overflow);};Spectrum48ScreenDevice.prototype.onFrameCompleted=function(){this._pixelRenderer.displayFrame(this._pixelBuffer);this._frameCompleted.trigger();};Object.defineProperty(Spectrum48ScreenDevice.prototype,"frameCompleted",{get:function(){return this._frameCompleted;},enumerable:true,configurable:true});Spectrum48ScreenDevice.prototype.reset=function(){this._flashPhase=false;this._pixelRenderer.reset();this.frameCount=(0x75bcd15-0O726746425);};Spectrum48ScreenDevice.prototype.getDeviceState=function(){};Spectrum48ScreenDevice.prototype.restoreDeviceState=function(state){};Spectrum48ScreenDevice.prototype.renderScreen=function(fromTact,toTact){if(this.hostVm.executeCycleOptions.disableScreenRendering||this.frameCount>(15658734^0O73567354)&&this.hostVm.executeCycleOptions.fastVmMode&&this.hostVm.executeCycleOptions.disableScreenRendering){return;}fromTact=fromTact%this.screenConfiguration.screenRenderingFrameTactCount;toTact=toTact%this.screenConfiguration.screenRenderingFrameTactCount;var buffer=this._pixelBuffer;for(var currentTact=fromTact;currentTact<=toTact;currentTact++){var screenTact=this.renderingTactTable[currentTact];switch(screenTact.phase){case ScreenRenderingPhase_1.ScreenRenderingPhase.None:break;case ScreenRenderingPhase_1.ScreenRenderingPhase.Border:buffer[screenTact.pixelIndex]=this.borderColor;buffer[screenTact.pixelIndex+(0O57060516-0xbc614d)]=this.borderColor;break;case ScreenRenderingPhase_1.ScreenRenderingPhase.BorderFetchPixel:buffer[screenTact.pixelIndex]=this.borderColor;buffer[screenTact.pixelIndex+(0O57060516-0xbc614d)]=this.borderColor;this._pixelByte1=this._memoryDevice.read(screenTact.pixelByteToFetchAddress,true);break;case ScreenRenderingPhase_1.ScreenRenderingPhase.BorderFetchPixelAttr:buffer[screenTact.pixelIndex]=this.borderColor;buffer[screenTact.pixelIndex+(0O57060516-0xbc614d)]=this.borderColor;this._attrByte1=this._memoryDevice.read(screenTact.attributeToFetchAddress,true);break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1:buffer[screenTact.pixelIndex]=this._getColor(this._pixelByte1&0o200,this._attrByte1);buffer[screenTact.pixelIndex+(0O57060516-0xbc614d)]=this._getColor(this._pixelByte1&0o100,this._attrByte1);this._pixelByte1<<=(15658734^0O73567354);break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1FetchB2:buffer[screenTact.pixelIndex]=this._getColor(this._pixelByte1&0o200,this._attrByte1);buffer[screenTact.pixelIndex+(0O57060516-0xbc614d)]=this._getColor(this._pixelByte1&0o100,this._attrByte1);this._pixelByte1<<=(15658734^0O73567354);this._pixelByte2=this._memoryDevice.read(screenTact.pixelByteToFetchAddress,true);break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1FetchA2:buffer[screenTact.pixelIndex]=this._getColor(this._pixelByte1&0o200,this._attrByte1);buffer[screenTact.pixelIndex+(0O57060516-0xbc614d)]=this._getColor(this._pixelByte1&0o100,this._attrByte1);this._pixelByte1<<=(15658734^0O73567354);this._attrByte2=this._memoryDevice.read(screenTact.attributeToFetchAddress,true);break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2:buffer[screenTact.pixelIndex]=this._getColor(this._pixelByte2&0o200,this._attrByte2);buffer[screenTact.pixelIndex+(0O57060516-0xbc614d)]=this._getColor(this._pixelByte2&0o100,this._attrByte2);this._pixelByte2<<=(15658734^0O73567354);break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2FetchB1:buffer[screenTact.pixelIndex]=this._getColor(this._pixelByte2&0o200,this._attrByte2);buffer[screenTact.pixelIndex+(0O57060516-0xbc614d)]=this._getColor(this._pixelByte2&0o100,this._attrByte2);this._pixelByte2<<=(15658734^0O73567354);this._pixelByte1=this._memoryDevice.read(screenTact.pixelByteToFetchAddress,true);break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2FetchA1:buffer[screenTact.pixelIndex]=this._getColor(this._pixelByte2&0o200,this._attrByte2);buffer[screenTact.pixelIndex+(0O57060516-0xbc614d)]=this._getColor(this._pixelByte2&0o100,this._attrByte2);this._pixelByte2<<=(15658734^0O73567354);this._attrByte1=this._memoryDevice.read(screenTact.attributeToFetchAddress,true);break;}}};Spectrum48ScreenDevice.prototype.getContentionValue=function(tact){return this.renderingTactTable[tact%this.screenConfiguration.screenRenderingFrameTactCount].contentionDelay;};Spectrum48ScreenDevice.prototype.getPixelBuffer=function(){return this._pixelBuffer;};Spectrum48ScreenDevice.prototype._getColor=function(pixelValue,attr){var offset=(pixelValue===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):0o400)+attr;return this._flashPhase?this._flashOnColors[offset]:this._flashOffColors[offset];};Spectrum48ScreenDevice.prototype.initializeScreenRenderingTactTable=function(){this.renderingTactTable=[];for(var tact=(0x75bcd15-0O726746425);tact<this.screenConfiguration.screenRenderingFrameTactCount;tact++){var line=Math.floor(tact/this.screenConfiguration.screenLineTime);var tactInLine=tact%this.screenConfiguration.screenLineTime;var tactItem=new RenderingTact_1.RenderingTact();tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.None;tactItem.contentionDelay=(0x75bcd15-0O726746425);if(this.screenConfiguration.isTactVisible(line,tactInLine)){var xPos=(tactInLine*(15658734^0O73567354))&0o177777;var yPos=(line-this.screenConfiguration.verticalSyncLines-this.screenConfiguration.nonVisibleBorderTopLines)&0o177777;tactItem.pixelIndex=yPos*this._screenWidth+xPos;if(!this.screenConfiguration.isTactInDisplayArea(line,tactInLine)){tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.Border;if(line>=this.screenConfiguration.firstDisplayLine&&line<=this.screenConfiguration.lastDisplayLine){if(tactInLine===this.screenConfiguration.borderLeftTime-this.screenConfiguration.pixelDataPrefetchTime){tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.BorderFetchPixel;tactItem.pixelByteToFetchAddress=this._calculatePixelByteAddress(line,tactInLine+(15658734^0O73567354));tactItem.contentionDelay=this._contentionType===MemoryContentionType_1.MemoryContentionType.Ula?(0x75bcd15-0O726746425):(15658734^0O73567354);}else if(tactInLine===this.screenConfiguration.borderLeftTime-this.screenConfiguration.attributeDataPrefetchTime){tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.BorderFetchPixelAttr;tactItem.attributeToFetchAddress=this._calculateAttributeAddress(line,tactInLine+(0O57060516-0xbc614d));tactItem.contentionDelay=this._contentionType===MemoryContentionType_1.MemoryContentionType.Ula?(1011010-0O3666474):(0O57060516-0xbc614d);}}}else{var pixelTact=tactInLine-this.screenConfiguration.borderLeftTime;switch(pixelTact&(0x9D8DE4-0O47306735)){case (0x75bcd15-0O726746425):tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1FetchB2;tactItem.pixelByteToFetchAddress=this._calculatePixelByteAddress(line,tactInLine+(0x5E30A78-0O570605164));tactItem.contentionDelay=this._contentionType===MemoryContentionType_1.MemoryContentionType.Ula?(0O507646144^0x51F4C61):(0x75bcd15-0O726746425);break;case (0O57060516-0xbc614d):tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1FetchA2;tactItem.attributeToFetchAddress=this._calculateAttributeAddress(line,tactInLine+(0O334664274-0x37368B9));tactItem.contentionDelay=this._contentionType===MemoryContentionType_1.MemoryContentionType.Ula?(0x5E30A78-0O570605164):(0x9D8DE4-0O47306735);break;case (15658734^0O73567354):tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1;tactItem.contentionDelay=this._contentionType===MemoryContentionType_1.MemoryContentionType.Ula?(0O334664274-0x37368B9):(1011010-0O3666474);break;case (0O334664274-0x37368B9):tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1;tactItem.contentionDelay=this._contentionType===MemoryContentionType_1.MemoryContentionType.Ula?(15658734^0O73567354):(0O507646144^0x51F4C61);break;case (0x5E30A78-0O570605164):tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2;tactItem.contentionDelay=this._contentionType===MemoryContentionType_1.MemoryContentionType.Ula?(0O57060516-0xbc614d):(0x5E30A78-0O570605164);break;case (0O507646144^0x51F4C61):tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2;tactItem.contentionDelay=this._contentionType===MemoryContentionType_1.MemoryContentionType.Ula?(0x75bcd15-0O726746425):(0O334664274-0x37368B9);break;case (1011010-0O3666474):if(tactInLine<this.screenConfiguration.borderLeftTime+this.screenConfiguration.displayLineTime-(15658734^0O73567354)){tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2FetchB1;tactItem.pixelByteToFetchAddress=this._calculatePixelByteAddress(line,tactInLine+(15658734^0O73567354));tactItem.contentionDelay=this._contentionType===MemoryContentionType_1.MemoryContentionType.Ula?(0x75bcd15-0O726746425):(15658734^0O73567354);}else{tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2;}break;case (0x9D8DE4-0O47306735):if(tactInLine<this.screenConfiguration.borderLeftTime+this.screenConfiguration.displayLineTime-(0O57060516-0xbc614d)){tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2FetchA1;tactItem.attributeToFetchAddress=this._calculateAttributeAddress(line,tactInLine+(0O57060516-0xbc614d));tactItem.contentionDelay=this._contentionType===MemoryContentionType_1.MemoryContentionType.Ula?(1011010-0O3666474):(0O57060516-0xbc614d);}else{tactItem.phase=ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2;}break;}}}this.renderingTactTable[tact]=tactItem;}};Spectrum48ScreenDevice.prototype._calculatePixelByteAddress=function(line,tactInLine){var row=line-this.screenConfiguration.firstDisplayLine;var column=(15658734^0O73567354)*(tactInLine-this.screenConfiguration.borderLeftTime);var da=0o40000|(column>>(0O334664274-0x37368B9))|(row<<(0O507646144^0x51F4C61));return ((da&0o174037)|((da&0o3400)>>(0O334664274-0x37368B9))|((da&0o340)<<(0O334664274-0x37368B9)))&0o177777;};Spectrum48ScreenDevice.prototype._calculateAttributeAddress=function(line,tactInLine){var row=line-this.screenConfiguration.firstDisplayLine;var column=(15658734^0O73567354)*(tactInLine-this.screenConfiguration.borderLeftTime);var da=(column>>(0O334664274-0x37368B9))|((row>>(0O334664274-0x37368B9))<<(0O507646144^0x51F4C61));return (0o54000+da)&0o177777;};Spectrum48ScreenDevice.prototype.fillScreenBuffer=function(data){for(var i=(0x75bcd15-0O726746425);i<this._pixelBuffer.length;i++){this._pixelBuffer[i]=data;}};return Spectrum48ScreenDevice;}(ScreenDeviceType_1.ScreenDeviceType));exports.Spectrum48ScreenDevice=Spectrum48ScreenDevice;},{"../../machine/NoopSpectrumVm":159,"../../utils/LiteEvent":173,"../DeviceTypes":29,"../memory/MemoryContentionType":53,"../memory/NoopMemoryDevice":56,"./NoopScreenFrameProvider":86,"./RenderingTact":87,"./ScreenConfiguration":88,"./ScreenConfigurationData":89,"./ScreenDeviceType":91,"./ScreenRenderingPhase":92}],94:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _amplitudes=[(0x75bcd15-0O726746425),0.0100,0.0145,0.0211,0.0307,0.0455,0.0645,0.1074,0.1266,0.2050,0.2922,0.3728,0.4925,0.6353,0.8056,(0O57060516-0xbc614d)];var _waveForm=[0.20,0.05,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0.05,0.20,0.80,0.95,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),0.95,0.80];var PsgRegister=(function(){function PsgRegister(){this.Value=(0x75bcd15-0O726746425);this.ModifiedTact=(0x75bcd15-0O726746425);}return PsgRegister;}());exports.PsgRegister=PsgRegister;var PsgState=(function(){function PsgState(hostVm){this._regs=[];this._noiseSeed=(0x75bcd15-0O726746425);this._lastNoiseIndex=(0x75bcd15-0O726746425);this.register14=(0x75bcd15-0O726746425);this.register15=(0x75bcd15-0O726746425);this.hostVm=hostVm;for(var i=(0x75bcd15-0O726746425);i<0o20;i++){this._regs[i]=new PsgRegister();}}Object.defineProperty(PsgState.prototype,"register0",{get:function(){return this._regs[(0x75bcd15-0O726746425)].Value;},set:function(value){this._regs[(0x75bcd15-0O726746425)].Value=value&0o377;this._regs[(0x75bcd15-0O726746425)].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register1",{get:function(){return this._regs[(0O57060516-0xbc614d)].Value;},set:function(value){this._regs[(0O57060516-0xbc614d)].Value=value&0o17;this._regs[(0O57060516-0xbc614d)].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"channelA",{get:function(){return this._regs[(0O57060516-0xbc614d)].Value<<(0O347010110&0x463A71D)|this._regs[(0x75bcd15-0O726746425)].Value;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"channelAModified",{get:function(){return this._regs[(0x75bcd15-0O726746425)].ModifiedTact>this._regs[(0O57060516-0xbc614d)].ModifiedTact?this._regs[(0x75bcd15-0O726746425)].ModifiedTact:this._regs[(0O57060516-0xbc614d)].ModifiedTact;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register2",{get:function(){return this._regs[(15658734^0O73567354)].Value;},set:function(value){this._regs[(15658734^0O73567354)].Value=value&0o377;this._regs[(15658734^0O73567354)].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register3",{get:function(){return this._regs[(0O334664274-0x37368B9)].Value;},set:function(value){this._regs[(0O334664274-0x37368B9)].Value=value&0o17;this._regs[(0O334664274-0x37368B9)].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"channelB",{get:function(){return this._regs[(0O334664274-0x37368B9)].Value<<(0O347010110&0x463A71D)|this._regs[(15658734^0O73567354)].Value;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"channelBModified",{get:function(){return this._regs[(15658734^0O73567354)].ModifiedTact>this._regs[(0O334664274-0x37368B9)].ModifiedTact?this._regs[(15658734^0O73567354)].ModifiedTact:this._regs[(0O334664274-0x37368B9)].ModifiedTact;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register4",{get:function(){return this._regs[(0x5E30A78-0O570605164)].Value;},set:function(value){this._regs[(0x5E30A78-0O570605164)].Value=value&0o377;this._regs[(0x5E30A78-0O570605164)].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register5",{get:function(){return this._regs[(0O507646144^0x51F4C61)].Value;},set:function(value){this._regs[(0O507646144^0x51F4C61)].Value=value&0o17;this._regs[(0O507646144^0x51F4C61)].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"channelC",{get:function(){return this._regs[(0O507646144^0x51F4C61)].Value<<(0O347010110&0x463A71D)|this._regs[(0x5E30A78-0O570605164)].Value;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"channelCModified",{get:function(){return this._regs[(0x5E30A78-0O570605164)].ModifiedTact>this._regs[(0O507646144^0x51F4C61)].ModifiedTact?this._regs[(0x5E30A78-0O570605164)].ModifiedTact:this._regs[(0O507646144^0x51F4C61)].ModifiedTact;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register6",{get:function(){return this._regs[(1011010-0O3666474)].Value;},set:function(value){this._regs[(1011010-0O3666474)].Value=value&0o77;this._regs[(1011010-0O3666474)].ModifiedTact=this.hostVm.cpu.tacts;this._lastNoiseIndex=(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"noisePeriodModified",{get:function(){return this._regs[(1011010-0O3666474)].ModifiedTact;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register7",{get:function(){return this._regs[(0x9D8DE4-0O47306735)].Value;},set:function(value){this._regs[(0x9D8DE4-0O47306735)].Value=value&0o177;this._regs[(0x9D8DE4-0O47306735)].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"mixerModified",{get:function(){return this._regs[(0x9D8DE4-0O47306735)].ModifiedTact;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"inputEnabled",{get:function(){return (this._regs[(0x9D8DE4-0O47306735)].Value&0o100)===(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"toneAEnabled",{get:function(){return (this._regs[(0x9D8DE4-0O47306735)].Value&(0O57060516-0xbc614d))===(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"toneBEnabled",{get:function(){return (this._regs[(0x9D8DE4-0O47306735)].Value&(15658734^0O73567354))===(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"toneCEnabled",{get:function(){return (this._regs[(0x9D8DE4-0O47306735)].Value&(0x5E30A78-0O570605164))===(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"noiseAEnabled",{get:function(){return (this._regs[(0x9D8DE4-0O47306735)].Value&(0O347010110&0x463A71D))===(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"noiseBEnabled",{get:function(){return (this._regs[(0x9D8DE4-0O47306735)].Value&0o20)===(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"noiseCEnabled",{get:function(){return (this._regs[(0x9D8DE4-0O47306735)].Value&0o40)===(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register8",{get:function(){return this._regs[(0O347010110&0x463A71D)].Value;},set:function(value){this._regs[(0O347010110&0x463A71D)].Value=value&0o37;this._regs[(0O347010110&0x463A71D)].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"amplitudeA",{get:function(){return (this._regs[(0O347010110&0x463A71D)].Value&0o17);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"amplitudeAModified",{get:function(){return this._regs[(0O347010110&0x463A71D)].ModifiedTact;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"useEnvelopeA",{get:function(){return (this._regs[(0O347010110&0x463A71D)].Value&0o20)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register9",{get:function(){return this._regs[0o11].Value;},set:function(value){this._regs[0o11].Value=value&0o37;this._regs[0o11].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"amplitudeB",{get:function(){return (this._regs[0o11].Value&0o17);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"amplitudeBModified",{get:function(){return this._regs[0o11].ModifiedTact;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"useEnvelopeB",{get:function(){return (this._regs[0o11].Value&0o20)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register10",{get:function(){return this._regs[0o12].Value;},set:function(value){this._regs[0o12].Value=value&0o37;this._regs[0o12].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"amplitudeC",{get:function(){return (this._regs[0o12].Value&0o17);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"amplitudeCModified",{get:function(){return this._regs[0o12].ModifiedTact;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"useEnvelopeC",{get:function(){return (this._regs[0o12].Value&0o20)!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register11",{get:function(){return this._regs[0o13].Value;},set:function(value){this._regs[0o13].Value=value;this._regs[0o13].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register12",{get:function(){return this._regs[0o14].Value;},set:function(value){this._regs[0o14].Value=value&0o377;this._regs[0o14].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"envelopePeriodModified",{get:function(){return this._regs[0o13].ModifiedTact>this._regs[0o14].ModifiedTact?this._regs[0o13].ModifiedTact:this._regs[0o14].ModifiedTact;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"envelopePeriod",{get:function(){return (this._regs[0o14].Value<<(0O347010110&0x463A71D))|this._regs[0o13].Value;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"register13",{get:function(){return this._regs[0o15].Value;},set:function(value){this._regs[0o15].Value=value&0o17;this._regs[0o15].ModifiedTact=this.hostVm.cpu.tacts;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"envelopeShapeModified",{get:function(){return this._regs[0o15].ModifiedTact;},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"holdFlag",{get:function(){return (this._regs[0o15].Value&(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"alternateFlag",{get:function(){return (this._regs[0o15].Value&(15658734^0O73567354))!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"attackFlag",{get:function(){return (this._regs[0o15].Value&(0x5E30A78-0O570605164))!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(PsgState.prototype,"continueFlag",{get:function(){return (this._regs[0o15].Value&(0O347010110&0x463A71D))!==(0x75bcd15-0O726746425);},enumerable:true,configurable:true});PsgState.prototype.getReg=function(index){switch(index&0o17){case (0x75bcd15-0O726746425):return this.register0;case (0O57060516-0xbc614d):return this.register1;case (15658734^0O73567354):return this.register2;case (0O334664274-0x37368B9):return this.register3;case (0x5E30A78-0O570605164):return this.register4;case (0O507646144^0x51F4C61):return this.register5;case (1011010-0O3666474):return this.register6;case (0x9D8DE4-0O47306735):return this.register7;case (0O347010110&0x463A71D):return this.register8;case 0o11:return this.register9;case 0o12:return this.register10;case 0o13:return this.register11;case 0o14:return this.register12;case 0o15:return this.register13;case 0o16:return this.register14;case 0o17:return this.register15;}return (0x75bcd15-0O726746425);};PsgState.prototype.setReg=function(index,value){switch(index&0o17){case (0x75bcd15-0O726746425):this.register0=value;break;case (0O57060516-0xbc614d):this.register1=value;break;case (15658734^0O73567354):this.register2=value;break;case (0O334664274-0x37368B9):this.register3=value;break;case (0x5E30A78-0O570605164):this.register4=value;break;case (0O507646144^0x51F4C61):this.register5=value;break;case (1011010-0O3666474):this.register6=value;break;case (0x9D8DE4-0O47306735):this.register7=value;break;case (0O347010110&0x463A71D):this.register8=value;break;case 0o11:this.register9=value;break;case 0o12:this.register10=value;break;case 0o13:this.register11=value;break;case 0o14:this.register12=value;break;case 0o15:this.register13=value;break;case 0o16:this.register14=value;break;case 0o17:this.register15=value;break;}};PsgState.prototype.getChannelASample=function(tact){if(!this.toneAEnabled||this.channelA===(0x75bcd15-0O726746425)){return (0x75bcd15-0O726746425);}var phase=Math.floor(((tact-this.channelAModified)>>(0O507646144^0x51F4C61))%this.channelA*0o20/this.channelA);return _waveForm[phase];};PsgState.prototype.getChannelBSample=function(tact){if(!this.toneBEnabled||this.channelB===(0x75bcd15-0O726746425)){return (0x75bcd15-0O726746425);}var phase=Math.floor(((tact-this.channelBModified)>>(0O507646144^0x51F4C61))%this.channelB*0o20/this.channelB);return _waveForm[phase];};PsgState.prototype.getChannelCSample=function(tact){if(!this.toneCEnabled||this.channelC===(0x75bcd15-0O726746425)){return (0x75bcd15-0O726746425);}var phase=Math.floor(((tact-this.channelCModified)>>(0O507646144^0x51F4C61))%this.channelC*0o20/this.channelC);return _waveForm[phase];};PsgState.prototype.getNoiseSample=function(tact){if(this.register6===(0x75bcd15-0O726746425)){return (0x75bcd15-0O726746425);}var noiseIndex=Math.floor(((tact-this.noisePeriodModified)>>(0O507646144^0x51F4C61))/this.register6);while(noiseIndex>this._lastNoiseIndex){this._noiseSeed=(this._noiseSeed*(15658734^0O73567354)+(0O57060516-0xbc614d))^(((this._noiseSeed>>0o20)^(this._noiseSeed>>0o15))&(0O57060516-0xbc614d));this._lastNoiseIndex++;}return ((this._noiseSeed>>0o20)&(0O57060516-0xbc614d))===(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):(0O57060516-0xbc614d);};PsgState.prototype.getAmplitudeA=function(tact){return this.useEnvelopeA?this.getEnvelopeValue(tact):_amplitudes[this.amplitudeA];};PsgState.prototype.getAmplitudeB=function(tact){return this.useEnvelopeB?this.getEnvelopeValue(tact):_amplitudes[this.amplitudeB];};PsgState.prototype.getAmplitudeC=function(tact){return this.useEnvelopeC?this.getEnvelopeValue(tact):_amplitudes[this.amplitudeC];};PsgState.prototype.getEnvelopeValue=function(tact){if(this.envelopePeriod===(0x75bcd15-0O726746425)){return (0x75bcd15-0O726746425);}var periodLength=this.envelopePeriod<<0o11;var periodCount=Math.floor((tact-this.envelopePeriodModified)/periodLength);var periodPhase=Math.floor((tact-this.envelopePeriodModified)%periodLength*0o20/periodLength);if(periodCount===(0x75bcd15-0O726746425)){return this.attackFlag?_amplitudes[periodPhase]:_amplitudes[0o17-periodPhase];}if(this.register13<=(0x9D8DE4-0O47306735)||this.register13===0o11||this.register13===0o17){return (0x75bcd15-0O726746425);}if(this.register13===0o13||this.register13===0o15){return (0O57060516-0xbc614d);}if(this.register13===0o14){return _amplitudes[periodPhase];}if(this.register13===(0O347010110&0x463A71D)){return _amplitudes[0o17-periodPhase];}return this.register13===0o16?(periodCount%(15658734^0O73567354)===(0x75bcd15-0O726746425)?_amplitudes[periodPhase]:_amplitudes[0o17-periodPhase]):(periodCount%(15658734^0O73567354)===(0O57060516-0xbc614d)?_amplitudes[periodPhase]:_amplitudes[0o17-periodPhase]);};PsgState.prototype.getState=function(){return {regs:this._regs,noiseSeed:this._noiseSeed,lastNoiseIndex:this._lastNoiseIndex};};PsgState.prototype.setState=function(regs,noiseSeed,lastNoiseIndex){this._regs=regs;this._noiseSeed=noiseSeed;this._lastNoiseIndex=lastNoiseIndex;};return PsgState;}());exports.PsgState=PsgState;},{}],95:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var PsgState_1=require("./PsgState");var SoundDeviceType_1=require("./SoundDeviceType");var LiteEvent_1=require("../../utils/LiteEvent");var SoundDevice=(function(_super){__extends(SoundDevice,_super);function SoundDevice(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this._firstTacts=(0x75bcd15-0O726746425);_this._accSamples=(0x75bcd15-0O726746425);_this._frameBegins=(0x75bcd15-0O726746425);_this._frameTacts=(0x75bcd15-0O726746425);_this._sampleRate=(0x75bcd15-0O726746425);_this._samplesPerFrame=(0x75bcd15-0O726746425);_this._tactsPerSample=(0x75bcd15-0O726746425);_this._frameCompleted=new LiteEvent_1.LiteEvent();_this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();_this.audioSamples=[];_this.nextSampleIndex=(0x75bcd15-0O726746425);_this.lastRegisterIndex=(0x75bcd15-0O726746425);_this.psgState=new PsgState_1.PsgState(new NoopSpectrumVm_1.NoopSpectrumVm());_this.lastSampleTact=(0x75bcd15-0O726746425);_this.frameCount=(0x75bcd15-0O726746425);_this.overflow=(0x75bcd15-0O726746425);return _this;}SoundDevice.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;this._frameTacts=hostVm.frameTacts;this.overrideSampleRate(0o56700);};SoundDevice.prototype.reset=function(){this._firstTacts=this._frameBegins=this.hostVm.cpu.tacts;this._accSamples=(0x75bcd15-0O726746425);this.lastRegisterIndex=(0x75bcd15-0O726746425);this.psgState=new PsgState_1.PsgState(this.hostVm);for(var i=(0x75bcd15-0O726746425);i<0o17;i++){this.psgState.setReg(i,(0x75bcd15-0O726746425));}this.frameCount=(0x75bcd15-0O726746425);this.overflow=(0x75bcd15-0O726746425);this.setRegisterValue((0x75bcd15-0O726746425));this.initializeSampling();};Object.defineProperty(SoundDevice.prototype,"sampleRate",{get:function(){return this._sampleRate;},enumerable:true,configurable:true});SoundDevice.prototype.overrideSampleRate=function(sampleRate){this._sampleRate=sampleRate;this._samplesPerFrame=this.hostVm.screenConfiguration.screenRenderingFrameTactCount*sampleRate/this.hostVm.baseClockFrequency/this.hostVm.clockMultiplier;this._tactsPerSample=Math.ceil(this.hostVm.screenConfiguration.screenRenderingFrameTactCount/this._samplesPerFrame);this.reset();};SoundDevice.prototype.getDeviceState=function(){return undefined;};SoundDevice.prototype.restoreDeviceState=function(state){};SoundDevice.prototype.onNewFrame=function(){this.frameCount++;this.initializeSampling();if(this.overflow!==(0x75bcd15-0O726746425)){this.createSamples(this._frameBegins+this.overflow);}this.overflow=(0x75bcd15-0O726746425);};SoundDevice.prototype.onFrameCompleted=function(){if(this.lastSampleTact<this._frameBegins+this._frameTacts){this.createSamples(this._frameBegins+this._frameTacts);}if(this.hostVm.cpu.tacts>this._frameBegins+this._frameTacts){this.overflow=this.hostVm.cpu.tacts-this._frameBegins-this._frameTacts;}this._frameBegins+=this._frameTacts;};Object.defineProperty(SoundDevice.prototype,"frameCompleted",{get:function(){return this._frameCompleted;},enumerable:true,configurable:true});SoundDevice.prototype.setRegisterIndex=function(index){this.lastRegisterIndex=index;};SoundDevice.prototype.setRegisterValue=function(value){this.createSamples(this.hostVm.cpu.tacts);this.psgState.setReg(this.lastRegisterIndex,value);};SoundDevice.prototype.getRegisterValue=function(){return this.psgState.getReg(this.lastRegisterIndex);};SoundDevice.prototype.initializeSampling=function(){var nextSamplesCount=this._firstTacts+(this.frameCount+(0O57060516-0xbc614d))*this._samplesPerFrame;this.lastSampleTact=this._frameBegins%this._tactsPerSample===(0x75bcd15-0O726746425)?this._frameBegins:this._frameBegins+this._tactsPerSample-(this._frameBegins+this._tactsPerSample)%this._tactsPerSample;var samplesInFrame=Math.floor(nextSamplesCount-this._accSamples);this._accSamples+=samplesInFrame;this.audioSamples=[];for(var i=(0x75bcd15-0O726746425);i<samplesInFrame;i++){this.audioSamples[i]=(0x75bcd15-0O726746425);}this.nextSampleIndex=(0x75bcd15-0O726746425);};SoundDevice.prototype.createSamples=function(cpuTacts){var nextSampleOffset=this.lastSampleTact;if(cpuTacts>this._frameBegins+this._frameTacts){cpuTacts=this._frameBegins+this._frameTacts;}while(nextSampleOffset<=cpuTacts){this.audioSamples[this.nextSampleIndex++]=this.createSampleFor(nextSampleOffset);nextSampleOffset+=this._tactsPerSample;}if(this.nextSampleIndex<this.audioSamples.length){var lastSample=this.audioSamples[this.nextSampleIndex-(0O57060516-0xbc614d)];for(var i=this.nextSampleIndex;i<this.audioSamples.length;i++){this.audioSamples[i]=lastSample;}}this.lastSampleTact=nextSampleOffset;};SoundDevice.prototype.createSampleFor=function(tact){var noise=this.psgState.getNoiseSample(tact);var channelA=this.psgState.getChannelASample(tact);if(this.psgState.noiseAEnabled&&noise>channelA){channelA=noise;}var channelB=this.psgState.getChannelBSample(tact);if(this.psgState.noiseBEnabled&&noise>channelB){channelB=noise;}var channelC=this.psgState.getChannelCSample(tact);if(this.psgState.noiseCEnabled&&noise>channelC){channelC=noise;}var sample=(channelA*this.psgState.getAmplitudeA(tact)+channelB*this.psgState.getAmplitudeB(tact)+channelC*this.psgState.getAmplitudeC(tact))/(0O334664274-0x37368B9);return sample;};return SoundDevice;}(SoundDeviceType_1.SoundDeviceType));exports.SoundDevice=SoundDevice;},{"../../machine/NoopSpectrumVm":159,"../../utils/LiteEvent":173,"./PsgState":94,"./SoundDeviceType":97}],96:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceInfoBase_1=require("../DeviceInfoBase");var SoundDevice_1=require("./SoundDevice");var SoundDeviceInfo=(function(_super){__extends(SoundDeviceInfo,_super);function SoundDeviceInfo(){return _super.call(this,undefined,undefined,new SoundDevice_1.SoundDevice())||this;}return SoundDeviceInfo;}(DeviceInfoBase_1.DeviceInfoBase));exports.SoundDeviceInfo=SoundDeviceInfo;},{"../DeviceInfoBase":28,"./SoundDevice":95}],97:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceTypeBase_1=require("../../abstraction/DeviceTypeBase");var DeviceTypes_1=require("../DeviceTypes");var SoundDeviceType=(function(_super){__extends(SoundDeviceType,_super);function SoundDeviceType(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(SoundDeviceType.prototype,"key",{get:function(){return DeviceTypes_1.DT_SOUND;},enumerable:true,configurable:true});return SoundDeviceType;}(DeviceTypeBase_1.DeviceTypeBase));exports.SoundDeviceType=SoundDeviceType;},{"../../abstraction/DeviceTypeBase":13,"../DeviceTypes":29}],98:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var TapeBlockSetPlayer_1=require("./TapeBlockSetPlayer");var TzxReader_1=require("./tzx/TzxReader");var TapReader_1=require("./tap/TapReader");var CommonTapeFilePlayer=(function(){function CommonTapeFilePlayer(reader){this._player=new TapeBlockSetPlayer_1.TapeBlockSetPlayer([]);this.dataBlocks=[];this._reader=reader;}Object.defineProperty(CommonTapeFilePlayer.prototype,"eof",{get:function(){return this._player.eof;},enumerable:true,configurable:true});CommonTapeFilePlayer.prototype.readContent=function(){var tzxReader=new TzxReader_1.TzxReader(this._reader);var readerFound=false;try{readerFound=tzxReader.readContent();}catch(_a){}if(readerFound){this.dataBlocks=tzxReader.dataBlocks.filter(function(b){return b.supportsPlayback();});this._player=new TapeBlockSetPlayer_1.TapeBlockSetPlayer(this.dataBlocks);return true;}this._reader.Seek((0x75bcd15-0O726746425));var tapReader=new TapReader_1.TapReader(this._reader);readerFound=tapReader.readContent();this.dataBlocks=tapReader.dataBlocks;this._player=new TapeBlockSetPlayer_1.TapeBlockSetPlayer(this.dataBlocks);return readerFound;};Object.defineProperty(CommonTapeFilePlayer.prototype,"currentBlockIndex",{get:function(){return this._player.currentBlockIndex;},enumerable:true,configurable:true});Object.defineProperty(CommonTapeFilePlayer.prototype,"currentBlock",{get:function(){return this._player.currentBlock;},enumerable:true,configurable:true});Object.defineProperty(CommonTapeFilePlayer.prototype,"playPhase",{get:function(){return this._player.playPhase;},enumerable:true,configurable:true});Object.defineProperty(CommonTapeFilePlayer.prototype,"startTact",{get:function(){return this._player.StartTact;},enumerable:true,configurable:true});CommonTapeFilePlayer.prototype.initPlay=function(startTact){this._player.initPlay(startTact);};CommonTapeFilePlayer.prototype.getEarBit=function(currentTact){return this._player.getEarBit(currentTact);};CommonTapeFilePlayer.prototype.nextBlock=function(currentTact){this._player.nextBlock(currentTact);};return CommonTapeFilePlayer;}());exports.CommonTapeFilePlayer=CommonTapeFilePlayer;},{"./TapeBlockSetPlayer":105,"./tap/TapReader":114,"./tzx/TzxReader":141}],99:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var MicPulseType;(function(MicPulseType){MicPulseType[MicPulseType["None"]=(0x75bcd15-0O726746425)]="None";MicPulseType[MicPulseType["TooShort"]=(0O57060516-0xbc614d)]="TooShort";MicPulseType[MicPulseType["TooLong"]=(15658734^0O73567354)]="TooLong";MicPulseType[MicPulseType["Pilot"]=(0O334664274-0x37368B9)]="Pilot";MicPulseType[MicPulseType["Sync1"]=(0x5E30A78-0O570605164)]="Sync1";MicPulseType[MicPulseType["Sync2"]=(0O507646144^0x51F4C61)]="Sync2";MicPulseType[MicPulseType["Bit0"]=(1011010-0O3666474)]="Bit0";MicPulseType[MicPulseType["Bit1"]=(0x9D8DE4-0O47306735)]="Bit1";MicPulseType[MicPulseType["TermSync"]=(0O347010110&0x463A71D)]="TermSync";})(MicPulseType=exports.MicPulseType||(exports.MicPulseType={}));},{}],100:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TapeDeviceType_1=require("./TapeDeviceType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var LiteEvent_1=require("../../utils/LiteEvent");var NoopTapeDevice=(function(_super){__extends(NoopTapeDevice,_super);function NoopTapeDevice(spectrum){var _this=_super.call(this)||this;_this.isInLoadMode=false;_this.loadCompleted=new LiteEvent_1.LiteEvent();_this.enteredLoadMode=new LiteEvent_1.LiteEvent();_this.leftLoadMode=new LiteEvent_1.LiteEvent();_this.enteredSaveMode=new LiteEvent_1.LiteEvent();_this.leftSaveMode=new LiteEvent_1.LiteEvent();_this.hostVm=spectrum?spectrum:new NoopSpectrumVm_1.NoopSpectrumVm();return _this;}NoopTapeDevice.prototype.reset=function(){};NoopTapeDevice.prototype.getDeviceState=function(){};NoopTapeDevice.prototype.restoreDeviceState=function(state){};NoopTapeDevice.prototype.onAttachedToVm=function(hostVm){};NoopTapeDevice.prototype.getEarBit=function(cpuTicks){return false;};NoopTapeDevice.prototype.setTapeMode=function(){};NoopTapeDevice.prototype.processMicBit=function(micBit){};NoopTapeDevice.prototype.onCpuOperationCompleted=function(){};return NoopTapeDevice;}(TapeDeviceType_1.TapeDeviceType));exports.NoopTapeDevice=NoopTapeDevice;},{"../../machine/NoopSpectrumVm":159,"../../utils/LiteEvent":173,"./TapeDeviceType":109}],101:[function(require,module,exports){(function(Buffer){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var BinaryReader_1=require("../../utils/BinaryReader");var NoopTapeProvider=(function(){function NoopTapeProvider(spectrum){this.hostVm=spectrum?spectrum:new NoopSpectrumVm_1.NoopSpectrumVm();}NoopTapeProvider.prototype.reset=function(){};NoopTapeProvider.prototype.onAttachedToVm=function(hostVm){};NoopTapeProvider.prototype.getTapeContent=function(){return new BinaryReader_1.BinaryReader(new Buffer(""));};NoopTapeProvider.prototype.createTapeFile=function(){};NoopTapeProvider.prototype.setName=function(name){};NoopTapeProvider.prototype.saveTapeBlock=function(block){};NoopTapeProvider.prototype.finalizeTapeFile=function(){};return NoopTapeProvider;}());exports.NoopTapeProvider=NoopTapeProvider;}).call(this,require("buffer").Buffer)},{"../../machine/NoopSpectrumVm":159,"../../utils/BinaryReader":170,"buffer":176}],102:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var PlayPhase;(function(PlayPhase){PlayPhase[PlayPhase["None"]=(0x75bcd15-0O726746425)]="None";PlayPhase[PlayPhase["Pilot"]=(0O57060516-0xbc614d)]="Pilot";PlayPhase[PlayPhase["Sync"]=(15658734^0O73567354)]="Sync";PlayPhase[PlayPhase["Data"]=(0O334664274-0x37368B9)]="Data";PlayPhase[PlayPhase["TermSync"]=(0x5E30A78-0O570605164)]="TermSync";PlayPhase[PlayPhase["Pause"]=(0O507646144^0x51F4C61)]="Pause";PlayPhase[PlayPhase["Completed"]=(1011010-0O3666474)]="Completed";})(PlayPhase=exports.PlayPhase||(exports.PlayPhase={}));},{}],103:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var PlayableDataBlockBase=(function(){function PlayableDataBlockBase(){}return PlayableDataBlockBase;}());exports.PlayableDataBlockBase=PlayableDataBlockBase;},{}],104:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var SavePhase;(function(SavePhase){SavePhase[SavePhase["None"]=(0x75bcd15-0O726746425)]="None";SavePhase[SavePhase["Pilot"]=(0O57060516-0xbc614d)]="Pilot";SavePhase[SavePhase["Sync1"]=(15658734^0O73567354)]="Sync1";SavePhase[SavePhase["Sync2"]=(0O334664274-0x37368B9)]="Sync2";SavePhase[SavePhase["Data"]=(0x5E30A78-0O570605164)]="Data";SavePhase[SavePhase["Error"]=(0O507646144^0x51F4C61)]="Error";})(SavePhase=exports.SavePhase||(exports.SavePhase={}));},{}],105:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var PlayPhase_1=require("./PlayPhase");var TapeBlockSetPlayer=(function(){function TapeBlockSetPlayer(dataBlocks){this.eof=false;this.currentBlockIndex=(0x75bcd15-0O726746425);this.playPhase=PlayPhase_1.PlayPhase.None;this.StartTact=(0x75bcd15-0O726746425);this.dataBlocks=dataBlocks;this.eof=dataBlocks.length===(0x75bcd15-0O726746425);}Object.defineProperty(TapeBlockSetPlayer.prototype,"currentBlock",{get:function(){return this.dataBlocks[this.currentBlockIndex];},enumerable:true,configurable:true});TapeBlockSetPlayer.prototype.initPlay=function(startTact){this.currentBlockIndex=-(0O57060516-0xbc614d);this.nextBlock(startTact);this.playPhase=PlayPhase_1.PlayPhase.None;this.StartTact=startTact;};TapeBlockSetPlayer.prototype.getEarBit=function(currentTact){if(this.currentBlockIndex===this.dataBlocks.length-(0O57060516-0xbc614d)&&(this.currentBlock.playPhase===PlayPhase_1.PlayPhase.Pause||this.currentBlock.playPhase===PlayPhase_1.PlayPhase.Completed)){this.eof=true;}if(this.currentBlockIndex>=this.dataBlocks.length||this.currentBlock===undefined){this.playPhase=PlayPhase_1.PlayPhase.Completed;return true;}var earbit=this.currentBlock.getEarBit(currentTact);if(this.currentBlock.playPhase===PlayPhase_1.PlayPhase.Completed){this.nextBlock(currentTact);}return earbit;};TapeBlockSetPlayer.prototype.nextBlock=function(currentTact){if(this.currentBlockIndex>=this.dataBlocks.length-(0O57060516-0xbc614d)){this.playPhase=PlayPhase_1.PlayPhase.Completed;this.eof=true;return;}this.currentBlockIndex++;this.currentBlock.initPlay(currentTact);};return TapeBlockSetPlayer;}());exports.TapeBlockSetPlayer=TapeBlockSetPlayer;},{"./PlayPhase":102}],106:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var PlayPhase_1=require("./PlayPhase");exports.PILOT_PL=0o4170;exports.HEADER_PILOT_COUNT=0o17577;exports.DATA_PILOT_COUNT=0o6227;exports.SYNC_1_PL=0o1233;exports.SYNC_2_PL=0o1337;exports.BIT_0_PL=0o1527;exports.BIT_1_PL=0o3256;exports.TERM_SYNC=0o1663;var PAUSE_MS=0o6654;var TapeDataBlockPlayer=(function(){function TapeDataBlockPlayer(data,pauseAfter){this._pilotEnds=(0x75bcd15-0O726746425);this._sync1Ends=(0x75bcd15-0O726746425);this._sync2Ends=(0x75bcd15-0O726746425);this._bitStarts=(0x75bcd15-0O726746425);this._bitPulseLength=(0x75bcd15-0O726746425);this._currentBit=false;this._termSyncEnds=(0x75bcd15-0O726746425);this._pauseEnds=(0x75bcd15-0O726746425);this.byteIndex=(0x75bcd15-0O726746425);this.bitMask=(0x75bcd15-0O726746425);this.playPhase=PlayPhase_1.PlayPhase.None;this.startTact=(0x75bcd15-0O726746425);this.lastTact=(0x75bcd15-0O726746425);this.pilotPulseLength=exports.PILOT_PL;this.sync1PulseLength=exports.SYNC_1_PL;this.sync2PulseLength=exports.SYNC_2_PL;this.zeroBitPulseLength=exports.BIT_0_PL;this.oneBitPulseLength=exports.BIT_1_PL;this.headerPilotToneLength=exports.HEADER_PILOT_COUNT;this.dataPilotToneLength=exports.DATA_PILOT_COUNT;this.pauseAfter=pauseAfter;this.data=data;}TapeDataBlockPlayer.prototype.initPlay=function(startTact){this.playPhase=PlayPhase_1.PlayPhase.Pilot;this.startTact=this.lastTact=startTact;this._pilotEnds=((this.data[(0x75bcd15-0O726746425)]&0o200)===(0x75bcd15-0O726746425)?this.headerPilotToneLength:this.dataPilotToneLength)*this.pilotPulseLength;this._sync1Ends=this._pilotEnds+this.sync1PulseLength;this._sync2Ends=this._sync1Ends+this.sync2PulseLength;this.byteIndex=(0x75bcd15-0O726746425);this.bitMask=0o200;};TapeDataBlockPlayer.prototype.getEarBit=function(currentTact){var pos=(currentTact-this.startTact);this.lastTact=currentTact;if(this.playPhase===PlayPhase_1.PlayPhase.Pilot||this.playPhase===PlayPhase_1.PlayPhase.Sync){if(pos<=this._pilotEnds){return (Math.floor(pos/this.pilotPulseLength))%(15658734^0O73567354)===(0x75bcd15-0O726746425);}if(pos<=this._sync1Ends){this.playPhase=PlayPhase_1.PlayPhase.Sync;return false;}if(pos<=this._sync2Ends){this.playPhase=PlayPhase_1.PlayPhase.Sync;return true;}this.playPhase=PlayPhase_1.PlayPhase.Data;this._bitStarts=this._sync2Ends;this._currentBit=(this.data[this.byteIndex]&this.bitMask)!==(0x75bcd15-0O726746425);this._bitPulseLength=this._currentBit?this.oneBitPulseLength:this.zeroBitPulseLength;}if(this.playPhase===PlayPhase_1.PlayPhase.Data){var bitPos=pos-this._bitStarts;if(bitPos<this._bitPulseLength){return false;}if(bitPos<(15658734^0O73567354)*this._bitPulseLength){return true;}if((this.bitMask>>=(0O57060516-0xbc614d))===(0x75bcd15-0O726746425)){this.bitMask=0o200;this.byteIndex++;}if(this.byteIndex<this.data.length){this._bitStarts+=(15658734^0O73567354)*this._bitPulseLength;this._currentBit=(this.data[this.byteIndex]&this.bitMask)!==(0x75bcd15-0O726746425);this._bitPulseLength=this._currentBit?this.oneBitPulseLength:this.zeroBitPulseLength;return false;}this.playPhase=PlayPhase_1.PlayPhase.TermSync;this._termSyncEnds=currentTact+exports.TERM_SYNC;return false;}if(this.playPhase===PlayPhase_1.PlayPhase.TermSync){if(currentTact<this._termSyncEnds){return false;}this.playPhase=PlayPhase_1.PlayPhase.Pause;this._pauseEnds=currentTact+PAUSE_MS*this.pauseAfter;return true;}if(currentTact>this._pauseEnds){this.playPhase=PlayPhase_1.PlayPhase.Completed;}return true;};return TapeDataBlockPlayer;}());exports.TapeDataBlockPlayer=TapeDataBlockPlayer;},{"./PlayPhase":102}],107:[function(require,module,exports){(function(Buffer){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TapeDeviceType_1=require("./TapeDeviceType");var TapeOperationMode_1=require("./TapeOperationMode");var CommonTapeFilePlayer_1=require("./CommonTapeFilePlayer");var SavePhase_1=require("./SavePhase");var MicPulseType_1=require("./MicPulseType");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var SpectrumRomDevice_1=require("../rom/SpectrumRomDevice");var NoopZ80Cpu_1=require("../../cpu/NoopZ80Cpu");var NoopBeeperDevice_1=require("../beeper/NoopBeeperDevice");var NoopMemoryDevice_1=require("../memory/NoopMemoryDevice");var BinaryReader_1=require("../../utils/BinaryReader");var PlayPhase_1=require("./PlayPhase");var FlagsResetMask_1=require("../../cpu/FlagsResetMask");var FlagsSetMask_1=require("../../cpu/FlagsSetMask");var TapeDataBlockPlayer_1=require("./TapeDataBlockPlayer");var TzxStandardSpeedDataBlock_1=require("./tzx/TzxStandardSpeedDataBlock");var LiteEvent_1=require("../../utils/LiteEvent");exports.SAVE_STOP_SILENCE=0o102603540;exports.ERROR_ROM_ADDRESS=(0O347010110&0x463A71D);exports.MAX_TACT_JUMP=0o23420;exports.SAVE_PULSE_TOLERANCE=0o30;exports.MIN_PILOT_PULSE_COUNT=0o5670;exports.DATA_BUFFER_LENGTH=0o200000;var TapeDevice=(function(_super){__extends(TapeDevice,_super);function TapeDevice(tapeProvider){var _this=_super.call(this)||this;_this._cpu=new NoopZ80Cpu_1.NoopZ80Cpu();_this._beeperDevice=new NoopBeeperDevice_1.NoopBeeperDevice();_this._memoryDevice=new NoopMemoryDevice_1.NoopMemoryDevice();_this._currentMode=TapeOperationMode_1.TapeOperationMode.Passive;_this._tapePlayer=new CommonTapeFilePlayer_1.CommonTapeFilePlayer(new BinaryReader_1.BinaryReader(new Buffer("")));_this._lastMicBitActivityTact=(0x75bcd15-0O726746425);_this._micBitState=false;_this._savePhase=SavePhase_1.SavePhase.None;_this._pilotPulseCount=(0x75bcd15-0O726746425);_this._bitOffset=(0x75bcd15-0O726746425);_this._dataByte=(0x75bcd15-0O726746425);_this._dataLength=(0x75bcd15-0O726746425);_this._dataBuffer=new Uint8Array((0x75bcd15-0O726746425));_this._dataBlockCount=(0x75bcd15-0O726746425);_this._prevDataPulse=MicPulseType_1.MicPulseType.None;_this._loadBytesRoutineAddress=(0x75bcd15-0O726746425);_this._saveBytesRoutineAddress=(0x75bcd15-0O726746425);_this._loadBytesInvalidHeaderAddress=(0x75bcd15-0O726746425);_this._loadBytesResumeAddress=(0x75bcd15-0O726746425);_this._loadCompleted=new LiteEvent_1.LiteEvent();_this._enteredLoadMode=new LiteEvent_1.LiteEvent();_this._leftLoadMode=new LiteEvent_1.LiteEvent();_this._enteredSaveMode=new LiteEvent_1.LiteEvent();_this._leftSaveMode=new LiteEvent_1.LiteEvent();_this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();_this.tapeProvider=tapeProvider;return _this;}Object.defineProperty(TapeDevice.prototype,"loadBytesRoutineAddress",{get:function(){return this._loadBytesRoutineAddress;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"saveBytesRoutineAddress",{get:function(){return this._saveBytesRoutineAddress;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"loadBytesInvalidHeaderAddress",{get:function(){return this._loadBytesInvalidHeaderAddress;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"loadBytesResumeAddress",{get:function(){return this._loadBytesResumeAddress;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"loadCompleted",{get:function(){return this._loadCompleted;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"enteredLoadMode",{get:function(){return this._enteredLoadMode;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"leftLoadMode",{get:function(){return this._leftLoadMode;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"enteredSaveMode",{get:function(){return this._enteredSaveMode;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"leftSaveMode",{get:function(){return this._leftSaveMode;},enumerable:true,configurable:true});TapeDevice.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;this._cpu=hostVm.cpu;this._beeperDevice=hostVm.beeperDevice;this._memoryDevice=hostVm.memoryDevice;var romDevice=this.hostVm.romDevice;var addr=romDevice.getKnownAddress(SpectrumRomDevice_1.LOAD_BYTES_ROUTINE_ADDRESS,this.hostVm.romConfiguration.spectrum48RomIndex);this._loadBytesRoutineAddress=addr?addr:(0x75bcd15-0O726746425);addr=romDevice.getKnownAddress(SpectrumRomDevice_1.SAVE_BYTES_ROUTINE_ADDRESS,this.hostVm.romConfiguration.spectrum48RomIndex);this._saveBytesRoutineAddress=addr?addr:(0x75bcd15-0O726746425);addr=romDevice.getKnownAddress(SpectrumRomDevice_1.LOAD_BYTES_INVALID_HEADER_ADDRESS,this.hostVm.romConfiguration.spectrum48RomIndex);this._loadBytesInvalidHeaderAddress=addr?addr:(0x75bcd15-0O726746425);addr=romDevice.getKnownAddress(SpectrumRomDevice_1.LOAD_BYTES_RESUME_ADDRESS,this.hostVm.romConfiguration.spectrum48RomIndex);this._loadBytesResumeAddress=addr?addr:(0x75bcd15-0O726746425);this.reset();};TapeDevice.prototype.reset=function(){this.tapeProvider.reset();this._tapePlayer=new CommonTapeFilePlayer_1.CommonTapeFilePlayer(new BinaryReader_1.BinaryReader(new Buffer("")));this._currentMode=TapeOperationMode_1.TapeOperationMode.Passive;this._savePhase=SavePhase_1.SavePhase.None;this._micBitState=true;};TapeDevice.prototype.getDeviceState=function(){};TapeDevice.prototype.restoreDeviceState=function(state){};TapeDevice.prototype.onCpuOperationCompleted=function(){this.setTapeMode();if(this.currentMode===TapeOperationMode_1.TapeOperationMode.Load&&this.hostVm.executeCycleOptions.fastTapeMode&&this.tapeFilePlayer&&this.tapeFilePlayer.playPhase!==PlayPhase_1.PlayPhase.Completed&&this._cpu.pc===this.loadBytesRoutineAddress){if(this.fastLoadFromTzx()){this._loadCompleted.trigger();}}};TapeDevice.prototype.setTapeMode=function(){if(this._memoryDevice.getSelectedRomIndex()!==this.hostVm.romConfiguration.spectrum48RomIndex){return;}switch(this._currentMode){case TapeOperationMode_1.TapeOperationMode.Passive:if(this._cpu.pc===this.loadBytesRoutineAddress){this.enterLoadMode();}else if(this._cpu.pc===this.saveBytesRoutineAddress){this.enterSaveMode();}return;case TapeOperationMode_1.TapeOperationMode.Save:if(this._cpu.pc===exports.ERROR_ROM_ADDRESS||(this._cpu.tacts-this._lastMicBitActivityTact)>exports.SAVE_STOP_SILENCE){this.leaveSaveMode();}return;case TapeOperationMode_1.TapeOperationMode.Load:if((!this._tapePlayer||this._tapePlayer.eof)||this._cpu.pc===exports.ERROR_ROM_ADDRESS){this.leaveLoadMode();this._loadCompleted.trigger();}return;}};TapeDevice.prototype.fastLoadFromTzx=function(){if(!this.tapeFilePlayer.currentBlock.supportsPlayback||this.tapeFilePlayer.playPhase===PlayPhase_1.PlayPhase.Completed){return false;}var regs=this.hostVm.cpu;regs.af=regs._af_;var isVerify=(regs.af&0o177401)===0o177400;var data=this.tapeFilePlayer.currentBlock.data;if(data[(0x75bcd15-0O726746425)]!==regs.a){regs.a=regs.a^regs.l;regs.f&=FlagsResetMask_1.FlagsResetMask.Z;regs.f&=FlagsResetMask_1.FlagsResetMask.C;regs.pc=this.loadBytesInvalidHeaderAddress;this.tapeFilePlayer.nextBlock(this._cpu.tacts);return true;}var curIndex=(0O57060516-0xbc614d);var memory=this._memoryDevice;regs.h=regs.a;while(regs.de>(0x75bcd15-0O726746425)){regs.l=data[curIndex];if(isVerify&&regs.l!==memory.read(regs.ix)){regs.a=memory.read(regs.ix)^regs.l;regs.f&=FlagsResetMask_1.FlagsResetMask.Z;regs.f&=FlagsResetMask_1.FlagsResetMask.C;regs.pc=this.loadBytesInvalidHeaderAddress;return true;}memory.write(regs.ix,regs.l);regs.h^=regs.l;curIndex++;regs.ix++;regs.de--;}if(curIndex>data.length-(0O57060516-0xbc614d)||regs.h!==data[curIndex]){regs.f&=FlagsResetMask_1.FlagsResetMask.C;}else{regs.f|=FlagsSetMask_1.FlagsSetMask.C;}regs.pc=this.loadBytesResumeAddress;this.tapeFilePlayer.nextBlock(this._cpu.tacts);return true;};TapeDevice.prototype.enterSaveMode=function(){this._currentMode=TapeOperationMode_1.TapeOperationMode.Save;this._savePhase=SavePhase_1.SavePhase.None;this._micBitState=true;this._lastMicBitActivityTact=this._cpu.tacts;this._pilotPulseCount=(0x75bcd15-0O726746425);this._prevDataPulse=MicPulseType_1.MicPulseType.None;this._dataBlockCount=(0x75bcd15-0O726746425);this.tapeProvider.createTapeFile();this._enteredSaveMode.trigger();};TapeDevice.prototype.leaveSaveMode=function(){this._currentMode=TapeOperationMode_1.TapeOperationMode.Passive;this.tapeProvider.finalizeTapeFile();this._leftSaveMode.trigger();};TapeDevice.prototype.enterLoadMode=function(){this._currentMode=TapeOperationMode_1.TapeOperationMode.Load;this._enteredLoadMode.trigger();var contentReader=this.tapeProvider.getTapeContent();if(!contentReader.HasContent){return;}this._tapePlayer=new CommonTapeFilePlayer_1.CommonTapeFilePlayer(contentReader);this._tapePlayer.readContent();this._tapePlayer.initPlay(this._cpu.tacts);this.hostVm.beeperDevice.setTapeOverride(true);};TapeDevice.prototype.leaveLoadMode=function(){this._currentMode=TapeOperationMode_1.TapeOperationMode.Passive;this._tapePlayer=new CommonTapeFilePlayer_1.CommonTapeFilePlayer(new BinaryReader_1.BinaryReader(new Buffer("")));this.tapeProvider.reset();this.hostVm.beeperDevice.setTapeOverride(false);this._leftLoadMode.trigger();};TapeDevice.prototype.getEarBit=function(cpuTicks){if(this._currentMode!==TapeOperationMode_1.TapeOperationMode.Load){return true;}var earBit=this._tapePlayer.getEarBit(cpuTicks);this._beeperDevice.processEarBitValue(true,earBit);return earBit;};Object.defineProperty(TapeDevice.prototype,"isInLoadMode",{get:function(){return this._currentMode===TapeOperationMode_1.TapeOperationMode.Load;},enumerable:true,configurable:true});TapeDevice.prototype.processMicBit=function(micBit){if(this._currentMode!==TapeOperationMode_1.TapeOperationMode.Save||this._micBitState===micBit){return;}var length=this._cpu.tacts-this._lastMicBitActivityTact;var pulse=MicPulseType_1.MicPulseType.None;if(length>=TapeDataBlockPlayer_1.BIT_0_PL-exports.SAVE_PULSE_TOLERANCE&&length<=TapeDataBlockPlayer_1.BIT_0_PL+exports.SAVE_PULSE_TOLERANCE){pulse=MicPulseType_1.MicPulseType.Bit0;}else if(length>=TapeDataBlockPlayer_1.BIT_1_PL-exports.SAVE_PULSE_TOLERANCE&&length<=TapeDataBlockPlayer_1.BIT_1_PL+exports.SAVE_PULSE_TOLERANCE){pulse=MicPulseType_1.MicPulseType.Bit1;}else if(length>=TapeDataBlockPlayer_1.PILOT_PL-exports.SAVE_PULSE_TOLERANCE&&length<=TapeDataBlockPlayer_1.PILOT_PL+exports.SAVE_PULSE_TOLERANCE){pulse=MicPulseType_1.MicPulseType.Pilot;}else if(length>=TapeDataBlockPlayer_1.SYNC_1_PL-exports.SAVE_PULSE_TOLERANCE&&length<=TapeDataBlockPlayer_1.SYNC_1_PL+exports.SAVE_PULSE_TOLERANCE){pulse=MicPulseType_1.MicPulseType.Sync1;}else if(length>=TapeDataBlockPlayer_1.SYNC_2_PL-exports.SAVE_PULSE_TOLERANCE&&length<=TapeDataBlockPlayer_1.SYNC_2_PL+exports.SAVE_PULSE_TOLERANCE){pulse=MicPulseType_1.MicPulseType.Sync2;}else if(length>=TapeDataBlockPlayer_1.TERM_SYNC-exports.SAVE_PULSE_TOLERANCE&&length<=TapeDataBlockPlayer_1.TERM_SYNC+exports.SAVE_PULSE_TOLERANCE){pulse=MicPulseType_1.MicPulseType.TermSync;}else if(length<TapeDataBlockPlayer_1.SYNC_1_PL-exports.SAVE_PULSE_TOLERANCE){pulse=MicPulseType_1.MicPulseType.TooShort;}else if(length>TapeDataBlockPlayer_1.PILOT_PL+(15658734^0O73567354)*exports.SAVE_PULSE_TOLERANCE){pulse=MicPulseType_1.MicPulseType.TooLong;}this._micBitState=micBit;this._lastMicBitActivityTact=this._cpu.tacts;var nextPhase=SavePhase_1.SavePhase.Error;switch(this._savePhase){case SavePhase_1.SavePhase.None:if(pulse===MicPulseType_1.MicPulseType.TooShort||pulse===MicPulseType_1.MicPulseType.TooLong){nextPhase=SavePhase_1.SavePhase.None;}else if(pulse===MicPulseType_1.MicPulseType.Pilot){this._pilotPulseCount=(0O57060516-0xbc614d);nextPhase=SavePhase_1.SavePhase.Pilot;}break;case SavePhase_1.SavePhase.Pilot:if(pulse===MicPulseType_1.MicPulseType.Pilot){this._pilotPulseCount++;nextPhase=SavePhase_1.SavePhase.Pilot;}else if(pulse===MicPulseType_1.MicPulseType.Sync1&&this._pilotPulseCount>=exports.MIN_PILOT_PULSE_COUNT){nextPhase=SavePhase_1.SavePhase.Sync1;}break;case SavePhase_1.SavePhase.Sync1:if(pulse===MicPulseType_1.MicPulseType.Sync2){nextPhase=SavePhase_1.SavePhase.Sync2;}break;case SavePhase_1.SavePhase.Sync2:if(pulse===MicPulseType_1.MicPulseType.Bit0||pulse===MicPulseType_1.MicPulseType.Bit1){this._prevDataPulse=pulse;nextPhase=SavePhase_1.SavePhase.Data;this._bitOffset=(0x75bcd15-0O726746425);this._dataByte=(0x75bcd15-0O726746425);this._dataLength=(0x75bcd15-0O726746425);this._dataBuffer=new Uint8Array(exports.DATA_BUFFER_LENGTH);}break;case SavePhase_1.SavePhase.Data:if(pulse===MicPulseType_1.MicPulseType.Bit0||pulse===MicPulseType_1.MicPulseType.Bit1){if(this._prevDataPulse===MicPulseType_1.MicPulseType.None){this._prevDataPulse=pulse;nextPhase=SavePhase_1.SavePhase.Data;}else if(this._prevDataPulse===pulse){nextPhase=SavePhase_1.SavePhase.Data;this._prevDataPulse=MicPulseType_1.MicPulseType.None;this._bitOffset++;this._dataByte=this._dataByte*(15658734^0O73567354)+(pulse===MicPulseType_1.MicPulseType.Bit0?(0x75bcd15-0O726746425):(0O57060516-0xbc614d));if(this._bitOffset===(0O347010110&0x463A71D)){this._dataBuffer[this._dataLength++]=this._dataByte;this._dataByte=(0x75bcd15-0O726746425);this._bitOffset=(0x75bcd15-0O726746425);}}}else if(pulse===MicPulseType_1.MicPulseType.TermSync){nextPhase=SavePhase_1.SavePhase.None;this._dataBlockCount++;var dataBlock=new TzxStandardSpeedDataBlock_1.TzxStandardSpeedDataBlock();dataBlock.data=this._dataBuffer,dataBlock.dataLength=this._dataLength;if(this._dataBlockCount===(0O57060516-0xbc614d)&&this._dataLength===0o23){var sb="";for(var i=(15658734^0O73567354);i<=0o13;i++){sb+=String.fromCharCode(this._dataBuffer[i]);}this.tapeProvider.setName(sb.trim());}this.tapeProvider.saveTapeBlock(dataBlock);}break;}this._savePhase=nextPhase;};Object.defineProperty(TapeDevice.prototype,"currentMode",{get:function(){return this._currentMode;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"tapeFilePlayer",{get:function(){return this._tapePlayer;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"lastMicBitActivityTact",{get:function(){return this._lastMicBitActivityTact;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"micBitState",{get:function(){return this._micBitState;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"savePhase",{get:function(){return this._savePhase;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"pilotPulseCount",{get:function(){return this._pilotPulseCount;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"bitOffset",{get:function(){return this._bitOffset;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"dataByte",{get:function(){return this._dataByte;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"dataLength",{get:function(){return this._dataLength;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"dataBuffer",{get:function(){return this._dataBuffer;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"prevDataPulse",{get:function(){return this._prevDataPulse;},enumerable:true,configurable:true});Object.defineProperty(TapeDevice.prototype,"dataBlockCount",{get:function(){return this._dataBlockCount;},enumerable:true,configurable:true});return TapeDevice;}(TapeDeviceType_1.TapeDeviceType));exports.TapeDevice=TapeDevice;}).call(this,require("buffer").Buffer)},{"../../cpu/FlagsResetMask":17,"../../cpu/FlagsSetMask":18,"../../cpu/NoopZ80Cpu":20,"../../machine/NoopSpectrumVm":159,"../../utils/BinaryReader":170,"../../utils/LiteEvent":173,"../beeper/NoopBeeperDevice":34,"../memory/NoopMemoryDevice":56,"../rom/SpectrumRomDevice":82,"./CommonTapeFilePlayer":98,"./MicPulseType":99,"./PlayPhase":102,"./SavePhase":104,"./TapeDataBlockPlayer":106,"./TapeDeviceType":109,"./TapeOperationMode":110,"./tzx/TzxStandardSpeedDataBlock":148,"buffer":176}],108:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceInfoBase_1=require("../DeviceInfoBase");var TapeDevice_1=require("./TapeDevice");var NoopTapeProvider_1=require("./NoopTapeProvider");var TapeDeviceInfo=(function(_super){__extends(TapeDeviceInfo,_super);function TapeDeviceInfo(provider){return _super.call(this,provider,undefined,new TapeDevice_1.TapeDevice(provider?provider:new NoopTapeProvider_1.NoopTapeProvider()))||this;}return TapeDeviceInfo;}(DeviceInfoBase_1.DeviceInfoBase));exports.TapeDeviceInfo=TapeDeviceInfo;},{"../DeviceInfoBase":28,"./NoopTapeProvider":101,"./TapeDevice":107}],109:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var DeviceTypeBase_1=require("../../abstraction/DeviceTypeBase");var DeviceTypes_1=require("../DeviceTypes");var TapeDeviceType=(function(_super){__extends(TapeDeviceType,_super);function TapeDeviceType(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(TapeDeviceType.prototype,"key",{get:function(){return DeviceTypes_1.DT_TAPE;},enumerable:true,configurable:true});return TapeDeviceType;}(DeviceTypeBase_1.DeviceTypeBase));exports.TapeDeviceType=TapeDeviceType;},{"../../abstraction/DeviceTypeBase":13,"../DeviceTypes":29}],110:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var TapeOperationMode;(function(TapeOperationMode){TapeOperationMode[TapeOperationMode["Passive"]=(0x75bcd15-0O726746425)]="Passive";TapeOperationMode[TapeOperationMode["Save"]=(0O57060516-0xbc614d)]="Save";TapeOperationMode[TapeOperationMode["Load"]=(15658734^0O73567354)]="Load";})(TapeOperationMode=exports.TapeOperationMode||(exports.TapeOperationMode={}));},{}],111:[function(require,module,exports){(function(Buffer){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var BinaryReader_1=require("../../utils/BinaryReader");var NoopSpectrumVm_1=require("../../machine/NoopSpectrumVm");var SpectNetConfig_1=require("../../../config/SpectNetConfig");var TapeSets_1=require("./TapeSets");var TapeProvider=(function(){function TapeProvider(){this.hostVm=new NoopSpectrumVm_1.NoopSpectrumVm();}TapeProvider.prototype.reset=function(){};TapeProvider.prototype.onAttachedToVm=function(hostVm){this.hostVm=hostVm;};TapeProvider.prototype.getTapeContent=function(){var config=SpectNetConfig_1.defaultSpectNetConfig;var buffer=new Buffer(TapeSets_1.zxSpectrumTapeSets[config.defaultTape]);return new BinaryReader_1.BinaryReader(buffer);};TapeProvider.prototype.createTapeFile=function(){};TapeProvider.prototype.setName=function(name){};TapeProvider.prototype.saveTapeBlock=function(block){};TapeProvider.prototype.finalizeTapeFile=function(){};return TapeProvider;}());exports.TapeProvider=TapeProvider;}).call(this,require("buffer").Buffer)},{"../../../config/SpectNetConfig":1,"../../machine/NoopSpectrumVm":159,"../../utils/BinaryReader":170,"./TapeSets":112,"buffer":176}],112:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.zxSpectrumTapeSets={"pac-man":[0o132,0o130,0o124,0o141,0o160,0o145,0o41,0o32,(0O57060516-0xbc614d),0o12,0o60,0o34,0o103,0o162,0o145,0o141,0o164,0o145,0o144,0o40,0o167,0o151,0o164,0o150,0o40,0o122,0o141,0o155,0o163,0o157,0o146,0o164,0o40,0o115,0o141,0o153,0o145,0o124,0o132,0o130,0o20,0o363,(0O334664274-0x37368B9),0o23,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,0o101,0o103,0o55,0o115,0o101,0o116,0o40,0o40,0o40,0o231,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o65,(0x75bcd15-0O726746425),0o260,0o20,0o164,(0x9D8DE4-0O47306735),0o233,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o61,(0x75bcd15-0O726746425),0o371,0o300,0o50,0o276,0o62,0o63,0o66,0o63,0o65,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o123,0o134,(0x75bcd15-0O726746425),0o53,0o62,0o65,0o66,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o52,0o276,0o62,0o63,0o66,0o63,0o66,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o124,0o134,(0x75bcd15-0O726746425),0o53,0o71,0o61,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o133,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o51,0o15,0o252,0o373,0o146,0o235,0o363,0o56,0o335,0o211,0o211,0o200,0o174,0o207,0o373,0o240,0o210,0o166,0o376,0o211,0o160,0o65,0o115,0o41,0o266,0o66,0o266,0o266,0o240,0o226,0o66,0o363,0o56,0o247,0o230,0o67,0o313,0o231,0o137,0o366,0o363,0o355,0o126,0o375,0o124,0o375,0o135,(1011010-0O3666474),0o45,0o353,0o21,0o31,(0x75bcd15-0O726746425),0o31,0o136,0o43,0o126,0o335,0o142,0o335,0o153,0o335,0o176,0o177,0o41,0o65,(0x75bcd15-0O726746425),0o31,0o345,0o256,0o167,0o43,0o20,0o373,0o246,0o300,0o167,0o335,0o256,0o177,0o335,0o167,0o177,0o335,0o43,0o20,0o366,0o335,0o31,0o343,0o67,0o335,0o351,0o333,0o376,0o37,0o346,0o40,0o117,0o277,0o335,0o351,0o140,0o20,0o124,0o275,(15658734^0O73567354),0o100,0o246,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o370,0o277,0o377,0o377,0o361,0o177,0o370,0o200,0o377,0o377,0o301,0o207,0o377,0o40,0o77,0o360,0o34,(0x75bcd15-0O726746425),0o177,0o360,0o60,0o377,0o377,0o377,0o377,0o377,0o377,0o372,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o377,0o77,0o377,0o377,0o373,0o377,0o377,0o20,0o377,0o307,0o377,0o317,0o377,0o77,0o377,0o377,0o362,0o177,0o377,0o377,0o361,0o377,0o361,(0x75bcd15-0O726746425),0o177,0o377,0o377,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o371,0o177,0o302,0o177,0o370,0o217,0o371,0o377,0o304,0o377,0o377,0o371,(0x9D8DE4-0O47306735),0o377,0o47,0o377,0o377,0o205,0o377,0o310,0o37,0o374,0o377,0o377,0o374,0o100,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,0o370,0o377,0o370,0o377,0o377,0o377,0o370,0o377,0o307,0o377,0o27,0o377,0o77,0o377,0o377,0o371,0o177,0o377,0o377,0o364,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o374,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o376,(0O57060516-0xbc614d),0o376,(0O57060516-0xbc614d),0o377,0o340,0o177,(0O57060516-0xbc614d),0o377,0o341,0o341,0o341,0o377,0o340,0o177,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o343,0o376,0o77,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o370,0o177,0o377,0o377,0o361,0o177,0o370,0o200,0o377,0o377,0o360,0o107,0o377,0o41,0o377,0o376,(0O334664274-0x37368B9),0o203,0o377,0o376,(0O347010110&0x463A71D),0o377,0o377,0o376,0o177,0o377,0o377,0o342,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o377,0o20,0o177,0o370,0o203,0o377,0o377,0o20,0o377,0o305,0o377,0o317,0o377,0o77,0o376,0o177,0o342,0o377,0o377,0o377,0o371,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o367,0o377,0o342,0o177,0o370,0o237,0o366,0o77,0o342,0o377,0o377,0o361,(0x9D8DE4-0O47306735),0o377,0o41,0o377,0o377,0o303,0o377,0o310,0o37,0o374,0o377,0o377,0o374,0o100,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,0o370,0o177,0o370,0o377,0o377,0o377,0o370,0o377,0o307,0o377,0o27,0o377,0o77,0o377,0o377,0o372,0o177,0o377,0o377,0o364,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o376,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o377,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,0o360,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o201,0o377,0o201,0o377,0o340,0o377,0o301,0o377,0o341,0o341,0o341,0o377,0o340,0o377,0o300,(0x75bcd15-0O726746425),0o301,0o374,0o37,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o374,0o177,0o377,0o377,0o361,0o377,0o374,0o100,0o377,0o377,0o374,0o47,0o377,0o47,0o377,0o377,0o302,0o217,0o377,0o377,0o204,0o377,0o377,0o376,0o177,0o377,0o377,0o342,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o377,(0O347010110&0x463A71D),0o177,0o370,0o203,0o377,0o377,0o20,0o377,0o305,0o377,0o327,0o377,0o77,0o374,0o107,0o342,0o377,0o362,0o177,0o370,0o377,0o363,0o377,0o300,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o370,0o77,0o342,0o177,0o370,0o237,0o370,0o77,0o342,0o377,0o377,0o370,0o207,0o377,0o40,0o377,0o377,0o341,0o377,0o304,0o37,0o375,0o377,0o377,0o375,0o200,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o210,(0x9D8DE4-0O47306735),0o374,0o177,0o370,0o377,0o220,(0x9D8DE4-0O47306735),0o374,0o377,0o307,0o377,0o217,0o377,0o77,0o377,0o377,0o362,0o77,0o377,0o377,0o350,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o377,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o377,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,0o300,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o301,0o377,0o301,0o377,0o341,0o377,0o361,0o377,0o341,0o361,0o341,0o377,0o341,0o377,0o360,(0x75bcd15-0O726746425),0o310,0o370,0o237,0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o374,0o177,0o377,0o377,0o361,0o377,0o374,0o100,0o377,0o377,0o376,0o27,0o377,0o57,0o377,0o377,0o374,0o237,0o377,0o377,0o304,0o377,0o377,0o376,0o177,0o377,0o377,0o342,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o374,0o377,0o210,0o177,0o370,0o207,0o375,0o377,0o210,0o377,0o307,0o377,0o327,0o377,0o77,0o374,0o70,0o356,0o377,0o364,0o177,0o370,0o377,0o374,(0x75bcd15-0O726746425),0o300,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o377,0o377,0o341,0o177,0o370,0o237,0o377,0o377,0o342,0o377,0o377,0o370,0o207,0o377,0o43,0o17,0o377,0o361,0o377,0o344,0o77,0o375,0o377,0o377,0o376,(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o220,(0x9D8DE4-0O47306735),0o374,0o177,0o370,0o377,0o220,(0x9D8DE4-0O47306735),0o374,0o377,0o307,0o377,0o217,0o377,0o77,0o377,0o377,0o364,0o77,0o377,0o377,0o360,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o377,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o343,0o341,0o343,0o341,0o377,0o341,0o343,0o361,0o377,0o341,0o361,0o341,0o377,0o341,0o343,0o360,(0x75bcd15-0O726746425),0o344,0o161,0o77,0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o374,0o77,0o377,0o377,0o361,0o377,0o374,0o100,0o377,0o377,0o377,0o27,0o377,0o77,0o377,0o377,0o370,0o277,0o377,0o377,0o342,0o377,0o377,0o376,0o177,0o377,0o377,0o342,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o374,0o377,0o210,0o177,0o370,0o207,0o375,0o377,0o210,0o377,0o331,0o377,0o247,0o377,0o77,0o376,(0x9D8DE4-0O47306735),0o61,0o377,0o344,0o77,0o374,0o377,0o377,0o377,0o100,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o361,0o177,0o370,0o277,0o377,0o377,0o361,0o377,0o337,0o374,0o107,0o377,0o54,(0O57060516-0xbc614d),0o377,0o361,0o377,0o342,0o77,0o371,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o220,(0x9D8DE4-0O47306735),0o374,0o177,0o370,0o377,0o220,(0x9D8DE4-0O47306735),0o374,0o377,0o305,0o377,0o307,0o377,0o77,0o377,0o377,0o350,0o37,0o377,0o377,0o300,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o376,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o341,0o341,0o341,0o341,0o340,(0O57060516-0xbc614d),0o340,0o361,0o340,(0O57060516-0xbc614d),0o371,0o340,0o36,(0O57060516-0xbc614d),0o340,0o360,(0x75bcd15-0O726746425),0o360,0o160,0o177,0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o376,0o77,0o377,0o377,0o361,0o377,0o376,0o40,0o377,0o377,0o377,0o217,0o377,0o77,0o377,0o377,0o371,0o77,0o377,0o377,0o342,0o377,0o377,0o376,0o177,0o377,0o377,0o342,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o374,0o377,0o204,0o177,0o370,0o207,0o375,0o377,0o210,0o377,0o347,0o377,0o307,0o377,0o77,0o377,0o300,0o301,0o377,0o350,0o77,0o374,0o377,0o377,0o374,0o100,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o361,0o177,0o370,0o277,0o377,0o377,0o361,0o377,0o337,0o374,0o107,0o377,0o56,(0x75bcd15-0O726746425),0o377,0o371,0o377,0o363,0o377,0o372,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o20,(0O334664274-0x37368B9),0o376,0o177,0o371,0o377,0o20,(0O334664274-0x37368B9),0o376,0o377,0o305,0o377,0o307,0o377,0o47,0o377,0o377,0o360,0o17,0o377,0o377,0o200,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o377,0o377,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o343,0o341,0o343,0o341,0o340,(0O57060516-0xbc614d),0o370,0o61,0o340,(0O57060516-0xbc614d),0o371,0o340,0o36,(0O57060516-0xbc614d),0o370,0o60,(0x75bcd15-0O726746425),0o374,0o371,0o377,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o377,0o207,0o377,0o377,0o376,0o17,0o377,(0x75bcd15-0O726746425),0o37,0o377,0o370,(0x75bcd15-0O726746425),0o377,0o340,(0O334664274-0x37368B9),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o376,(0x75bcd15-0O726746425),0o37,0o377,0o377,0o357,0o377,0o377,0o376,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o376,0o77,0o377,0o377,0o361,0o377,0o376,0o40,0o377,0o377,0o377,0o217,0o377,0o77,0o377,0o377,0o361,0o177,0o377,0o377,0o362,0o377,0o377,0o376,0o377,0o377,0o377,0o342,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o370,0o377,0o304,0o177,0o370,0o217,0o371,0o177,0o304,0o377,0o377,0o377,0o207,0o377,0o77,0o377,0o370,0o61,0o377,0o310,0o37,0o374,0o377,0o377,0o374,0o100,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o360,0o377,0o370,0o277,0o377,0o377,0o361,0o377,0o317,0o376,0o47,0o377,0o57,0o200,0o377,0o371,0o377,0o360,0o177,0o372,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o140,(0O334664274-0x37368B9),0o376,0o377,0o373,0o377,0o140,(0O334664274-0x37368B9),0o376,0o377,0o330,0o377,0o357,0o377,0o300,0o377,0o377,0o200,(0O334664274-0x37368B9),0o377,0o376,(0x75bcd15-0O726746425),0o377,0o366,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o366,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o377,0o377,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o301,0o377,0o301,0o377,(0O57060516-0xbc614d),0o376,(0O57060516-0xbc614d),0o377,(0O57060516-0xbc614d),0o375,0o340,0o36,(0O57060516-0xbc614d),0o376,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o377,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,(1011010-0O3666474),0o230,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o15,0o60,(1011010-0O3666474),0o200,0o140,(0x75bcd15-0O726746425),0o66,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o340,0o14,(0x75bcd15-0O726746425),0o340,(0x75bcd15-0O726746425),0o30,(0O57060516-0xbc614d),0o300,0o140,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o160,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o376,0o77,0o377,0o377,0o367,0o377,0o376,0o40,0o377,0o377,0o377,0o317,0o377,0o77,0o377,0o377,0o361,0o177,0o377,0o377,0o361,0o377,0o377,0o377,0o177,0o377,0o377,0o354,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o371,0o177,0o304,0o177,0o370,0o217,0o371,0o177,0o304,0o377,0o377,0o377,(0x9D8DE4-0O47306735),0o377,0o57,0o377,0o376,0o11,0o377,0o310,0o37,0o374,0o377,0o377,0o374,0o100,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,0o370,0o377,0o370,0o377,0o377,0o377,0o370,0o377,0o317,0o376,0o47,0o377,0o77,0o361,0o377,0o371,0o177,0o377,0o377,0o362,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o200,(0O334664274-0x37368B9),0o377,0o177,0o375,0o377,0o200,(0O334664274-0x37368B9),0o377,0o377,0o340,0o377,0o367,0o377,(0x75bcd15-0O726746425),0o37,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o360,(0x75bcd15-0O726746425),0o377,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o377,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o201,0o377,0o201,0o377,(0x75bcd15-0O726746425),0o377,0o201,0o377,(0O57060516-0xbc614d),0o375,0o340,0o36,(0x75bcd15-0O726746425),0o377,0o200,(0x75bcd15-0O726746425),0o377,0o377,0o377,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o376,(0O57060516-0xbc614d),0o377,(0O57060516-0xbc614d),0o377,(0x75bcd15-0O726746425),0o77,0o341,0o377,(0O57060516-0xbc614d),0o377,0o340,0o36,(0x75bcd15-0O726746425),0o77,0o340,(0x75bcd15-0O726746425),0o377,0o377,0o377,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o277,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o376,0o14,(0x75bcd15-0O726746425),0o15,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o177,0o201,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o30,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o35,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),(1011010-0O3666474),0o60,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o375,0o77,0o377,0o377,0o377,0o376,0o100,0o77,0o40,(0x75bcd15-0O726746425),0o77,0o377,0o377,0o377,0o377,0o40,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o376,0o30,0o37,0o377,0o371,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o362,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o376,0o67,0o371,0o77,0o377,0o377,0o377,0o377,(0O57060516-0xbc614d),0o377,0o344,(0O334664274-0x37368B9),0o377,0o377,0o377,0o377,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o37,0o376,0o100,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o377,0o375,(0x9D8DE4-0O47306735),0o377,0o377,0o376,0o30,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o206,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o377,0o377,0o320,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o363,0o377,0o41,0o377,0o377,0o377,0o377,0o376,0o30,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,(0O334664274-0x37368B9),0o377,0o77,0o362,(0x9D8DE4-0O47306735),0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o377,(0O57060516-0xbc614d),0o377,(0x75bcd15-0O726746425),0o17,0o361,0o377,(0O57060516-0xbc614d),0o357,0o340,0o36,(0x75bcd15-0O726746425),0o17,0o360,(0x75bcd15-0O726746425),0o377,0o377,0o377,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o377,0o377,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o377,0o302,(0x75bcd15-0O726746425),0o14,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o377,0o370,0o60,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o206,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o171,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o310,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o214,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o371,0o77,0o377,0o377,0o377,0o377,0o100,0o177,0o240,(0x75bcd15-0O726746425),0o177,0o377,0o377,0o377,0o377,0o220,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o207,0o377,0o377,0o371,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o372,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o217,0o371,0o77,0o377,0o377,0o377,0o377,(0O57060516-0xbc614d),0o377,0o344,(0O334664274-0x37368B9),0o377,0o377,0o377,0o377,0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o37,0o376,0o100,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o377,0o374,0o207,0o377,0o377,0o377,0o206,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o344,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o377,0o377,0o310,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o363,0o377,0o241,0o377,0o377,0o377,0o377,0o377,0o220,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,(0x9D8DE4-0O47306735),0o377,0o77,0o372,(0x9D8DE4-0O47306735),0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o357,0o201,0o340,(0O57060516-0xbc614d),0o203,0o361,0o340,(0O57060516-0xbc614d),0o357,0o340,0o36,(0O57060516-0xbc614d),0o203,0o360,(0x75bcd15-0O726746425),0o177,0o377,0o377,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o377,0o377,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o377,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o377,0o361,(0x75bcd15-0O726746425),0o14,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o341,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o310,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o343,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o371,0o77,0o377,0o377,0o377,0o377,0o100,0o177,0o220,(0x75bcd15-0O726746425),0o177,0o377,0o377,0o377,0o377,0o220,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o341,0o377,0o377,0o371,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o371,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o347,0o371,0o77,0o377,0o377,0o377,0o376,(0O334664274-0x37368B9),0o377,0o364,(0O334664274-0x37368B9),0o377,0o377,0o377,0o377,0o200,(0x75bcd15-0O726746425),0o160,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o77,0o377,0o100,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o377,0o374,0o207,0o377,0o377,0o377,0o341,0o200,(0O334664274-0x37368B9),0o370,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o377,0o377,0o310,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o363,0o377,0o221,0o377,0o377,0o377,0o377,0o377,0o340,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,(0x9D8DE4-0O47306735),0o377,0o77,0o371,(0x9D8DE4-0O47306735),0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o357,0o201,0o340,(0O57060516-0xbc614d),0o340,0o361,0o340,(0O57060516-0xbc614d),0o347,0o340,0o36,(0O57060516-0xbc614d),0o340,0o360,(0x75bcd15-0O726746425),0o170,0o376,0o77,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o377,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o36,0o200,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o377,0o377,0o302,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o370,0o140,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o371,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o350,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o370,0o300,(0x9D8DE4-0O47306735),0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o377,0o377,0o100,0o177,0o220,(0x75bcd15-0O726746425),0o377,0o377,0o377,0o377,0o377,0o310,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o371,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o377,0o377,0o374,(0O334664274-0x37368B9),0o377,0o362,(0O334664274-0x37368B9),0o377,0o377,0o377,0o376,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o214,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o77,0o377,0o40,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o377,0o376,0o207,0o377,0o377,0o377,0o370,0o140,(0O57060516-0xbc614d),0o340,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0O57060516-0xbc614d),0o377,0o377,0o350,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o363,0o377,0o220,0o377,0o377,0o377,0o377,0o377,0o300,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,(0x9D8DE4-0O47306735),0o377,0o77,0o371,(0x9D8DE4-0O47306735),0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o347,0o301,0o377,0o341,0o370,0o361,0o377,0o341,0o347,0o340,0o36,(0O57060516-0xbc614d),0o370,0o360,(0x75bcd15-0O726746425),0o140,0o70,0o17,0o274,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o377,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o377,0o377,0o377,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o377,0o374,0o200,0o36,0o100,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o377,0o377,0o361,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o376,0o30,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o371,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o344,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o376,0o60,(0x9D8DE4-0O47306735),0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o377,0o377,0o100,0o377,0o320,(0x75bcd15-0O726746425),0o377,0o377,0o377,0o377,0o377,0o320,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o17,0o375,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o377,0o377,0o370,(0O334664274-0x37368B9),0o377,0o362,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o370,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o350,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o77,0o377,0o40,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o377,0o376,0o103,0o377,0o377,0o377,0o376,0o30,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0O57060516-0xbc614d),0o377,0o377,0o344,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o363,0o377,0o320,0o377,0o377,0o377,0o377,0o377,0o300,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,0o17,0o377,0o77,0o375,(0x9D8DE4-0O47306735),0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,0o300,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o347,0o301,0o377,0o341,0o377,0o361,0o377,0o341,0o343,0o340,0o36,(0O57060516-0xbc614d),0o377,0o360,(0x75bcd15-0O726746425),0o107,(0O57060516-0xbc614d),0o301,0o334,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o377,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o34,0o374,0o374,0o374,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o377,0o374,0o200,0o36,0o100,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o370,0o200,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o206,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o371,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o344,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o214,(0x9D8DE4-0O47306735),0o371,0o77,0o377,0o377,0o377,0o377,0o200,0o377,0o310,(0O57060516-0xbc614d),0o377,0o377,0o377,0o377,0o377,0o340,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o17,0o374,0o200,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o377,0o377,0o360,(0x9D8DE4-0O47306735),0o377,0o372,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o340,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o360,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o177,0o377,0o240,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o377,0o376,0o103,0o377,0o377,0o377,0o377,0o206,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0O57060516-0xbc614d),0o377,0o377,0o344,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o363,0o377,0o310,0o177,0o377,0o377,0o377,0o377,0o200,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,0o17,0o377,0o77,0o374,0o207,0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,0o377,0o360,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o343,0o341,0o377,0o340,0o177,0o341,0o377,0o341,0o343,0o340,0o36,(0x75bcd15-0O726746425),0o177,0o340,(0x75bcd15-0O726746425),0o177,0o307,0o361,0o336,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o376,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o170,0o170,0o170,0o140,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o377,0o377,0o377,0o200,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o160,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o77,0o377,0o377,0o377,0o376,0o200,0o77,0o100,(0x75bcd15-0O726746425),0o17,0o377,0o377,0o377,0o374,0o100,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o341,0o200,(0O57060516-0xbc614d),0o377,0o371,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o364,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o343,(0x9D8DE4-0O47306735),0o371,0o77,0o377,0o377,0o377,0o376,0o200,0o377,0o310,(0O57060516-0xbc614d),0o377,0o377,0o377,0o377,0o377,0o200,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o17,0o374,0o200,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o377,0o377,0o300,(0x9D8DE4-0O47306735),0o377,0o371,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o200,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o340,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o177,0o377,0o220,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o103,0o377,0o377,0o377,0o377,0o341,0o200,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0O334664274-0x37368B9),0o377,0o377,0o364,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o363,0o377,0o310,0o177,0o377,0o377,0o377,0o377,0o200,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,0o17,0o377,0o77,0o374,0o207,0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o374,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o343,0o341,0o377,0o340,0o37,0o301,0o377,0o341,0o341,0o340,0o36,(0x75bcd15-0O726746425),0o37,0o300,(0x75bcd15-0O726746425),0o77,0o377,0o377,0o336,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o60,0o60,0o60,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o160,(0x75bcd15-0O726746425),0o11,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o340,0o36,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o140,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),(15658734^0O73567354),0o300,(0x75bcd15-0O726746425),(15658734^0O73567354),(0O334664274-0x37368B9),0o77,0o377,0o377,0o377,0o376,0o100,0o77,0o40,(0x75bcd15-0O726746425),0o37,0o377,0o377,0o377,0o376,0o40,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o370,0o140,(0x9D8DE4-0O47306735),0o377,0o371,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o362,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o370,0o307,0o371,0o77,0o377,0o377,0o377,0o376,0o201,0o377,0o350,(0O57060516-0xbc614d),0o377,0o377,0o377,0o377,0o376,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o37,0o376,0o200,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o377,0o376,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,(0x9D8DE4-0O47306735),0o377,0o377,0o376,0o140,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o230,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0x75bcd15-0O726746425),0o177,0o377,0o220,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o377,0o43,0o377,0o377,0o377,0o377,0o370,0o140,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o377,0o377,0o371,(0O334664274-0x37368B9),0o377,0o377,0o362,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o363,0o377,0o350,0o77,0o377,0o377,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,0o37,0o377,0o77,0o376,0o207,0o376,0o177,0o377,0o371,0o77,0o377,0o362,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o363,0o377,0o344,0o37,0o377,0o377,0o377,0o376,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,0o37,0o377,0o77,0o376,0o107,0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o376,(0x75bcd15-0O726746425),(15658734^0O73567354),0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o135,(0x75bcd15-0O726746425),(15658734^0O73567354),0o362,0o117,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o362,0o117,0o135,(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o362,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o377,0o363,0o377,0o344,0o17,0o377,0o377,0o377,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,0o37,0o377,0o77,0o376,0o107,0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(15658734^0O73567354),0o372,0o137,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),0o100,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o376,0o74,0o174,0o76,(0x75bcd15-0O726746425),0o30,0o74,0o74,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o372,0o137,0o135,(0x75bcd15-0O726746425),(15658734^0O73567354),0o342,0o107,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),0o100,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o74,0o102,0o74,0o74,(0x75bcd15-0O726746425),0o30,0o74,0o74,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o342,0o107,0o135,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o362,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o363,0o377,0o364,(0x9D8DE4-0O47306735),0o377,0o377,0o377,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,0o77,0o377,0o77,0o377,0o107,0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o47,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o345,(0x75bcd15-0O726746425),(15658734^0O73567354),0o372,0o137,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o70,0o170,0o104,0o34,(0x75bcd15-0O726746425),0o74,0o100,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o20,0o102,0o102,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o50,0o102,0o102,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o372,0o137,0o135,(0x75bcd15-0O726746425),(15658734^0O73567354),0o342,0o107,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o70,0o170,0o104,0o34,(0x75bcd15-0O726746425),0o74,0o100,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o142,0o102,0o146,0o102,0o102,(0x75bcd15-0O726746425),0o50,0o102,0o102,0o106,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o342,0o107,0o135,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o362,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o363,0o377,0o362,(0O334664274-0x37368B9),0o377,0o377,0o377,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,0o77,0o377,0o77,0o377,0o47,0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o117,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o311,(0x75bcd15-0O726746425),(15658734^0O73567354),0o372,0o137,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o104,0o104,0o104,0o40,0o60,0o104,0o170,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o20,0o102,0o102,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o102,0o74,0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o372,0o137,0o135,(0x75bcd15-0O726746425),(15658734^0O73567354),0o306,0o143,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o104,0o104,0o104,0o40,0o60,0o104,0o170,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o122,0o102,0o132,0o100,0o102,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o102,0o74,0o112,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o306,0o143,0o131,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o362,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o363,0o377,0o362,(0x75bcd15-0O726746425),0o377,0o377,0o377,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,0o77,0o377,0o77,0o377,0o47,0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o237,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o225,(0x75bcd15-0O726746425),(15658734^0O73567354),0o372,0o137,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o104,0o104,0o104,0o40,0o20,0o104,0o104,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,0o20,0o176,0o174,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o76,0o102,(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o372,0o137,0o135,(0x75bcd15-0O726746425),(15658734^0O73567354),0o206,0o141,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o104,0o104,0o104,0o40,0o20,0o104,0o104,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o112,0o176,0o102,0o100,0o102,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o76,0o102,0o122,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o206,0o141,0o122,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o362,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o363,0o377,0o372,(0x75bcd15-0O726746425),0o77,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o371,0o177,0o377,0o77,0o377,0o247,0o376,0o177,0o377,0o371,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o55,(0x75bcd15-0O726746425),(15658734^0O73567354),0o372,0o137,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o104,0o170,0o74,0o40,0o20,0o74,0o104,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o20,0o102,0o104,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(15658734^0O73567354),0o102,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o372,0o137,0o135,(0x75bcd15-0O726746425),(15658734^0O73567354),0o216,0o161,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o104,0o170,0o74,0o40,0o20,0o74,0o104,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o106,0o102,0o102,0o102,0o102,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(15658734^0O73567354),0o102,0o142,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o216,0o161,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o364,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o363,0o377,0o374,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o372,0o177,0o377,0o77,0o377,0o247,0o376,0o177,0o377,0o372,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o335,(0x75bcd15-0O726746425),(15658734^0O73567354),0o372,0o137,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o70,0o100,(0x5E30A78-0O570605164),0o40,0o70,(0x5E30A78-0O570605164),0o104,0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o20,0o102,0o102,0o76,(0x75bcd15-0O726746425),0o76,0o74,0o74,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o372,0o137,0o135,(0x75bcd15-0O726746425),(15658734^0O73567354),0o236,0o171,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o70,0o100,(0x5E30A78-0O570605164),0o40,0o70,(0x5E30A78-0O570605164),0o104,0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o102,0o102,0o74,0o74,(0x75bcd15-0O726746425),0o76,0o74,0o74,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o236,0o171,0o110,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o377,0o370,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o363,0o377,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o377,0o371,0o377,0o347,0o377,0o374,0o177,0o377,0o77,0o377,0o307,0o376,0o177,0o377,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o135,(0x75bcd15-0O726746425),(15658734^0O73567354),0o362,0o117,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o362,0o117,0o135,(0x75bcd15-0O726746425),(15658734^0O73567354),0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,(0O507646144^0x51F4C61),0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o106,0o106,0o106,0o106,0o106,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),0o103,0o103,0o103,0o103,0o103,0o103,0o103,0o103,(0O57060516-0xbc614d),0o106,0o106,0o106,0o106,0o106,0o106,0o106,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),0o102,0o102,0o102,0o102,0o102,0o102,(0O57060516-0xbc614d),(0O57060516-0xbc614d),0o106,0o106,0o106,0o116,0o106,0o106,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o102,0o172,0o172,0o172,0o102,0o102,0o102,0o102,(0O57060516-0xbc614d),(0O57060516-0xbc614d),0o106,0o106,0o106,0o106,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o102,0o102,0o102,0o102,0o102,0o102,(0O57060516-0xbc614d),0o102,(0O57060516-0xbc614d),(0O57060516-0xbc614d),0o106,0o106,0o106,0o106,0o106,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),0o102,0o102,0o102,0o102,0o102,0o102,0o102,0o102,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o105,0o105,0o105,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o117,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o335,0o156,(0O334664274-0x37368B9),0o335,0o146,(0x5E30A78-0O570605164),0o247,0o355,0o122,0o311,0o305,0o345,0o315,0o216,(15658734^0O73567354),0o76,0o377,0o273,0o50,(15658734^0O73567354),0o30,0o366,0o257,0o62,0o26,0o150,0o341,0o301,0o311,0o315,0o361,0o133,0o72,0o356,0o147,0o376,(0x75bcd15-0O726746425),0o312,0o205,0o141,0o303,0o226,0o141,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o31,0o150,0o353,(0O57060516-0xbc614d),0o24,(0x75bcd15-0O726746425),0o335,0o41,0o227,0o134,0o315,(0x75bcd15-0O726746425),0o133,0o70,0o24,0o305,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o335,0o11,0o341,0o247,0o355,0o102,0o330,0o345,0o301,0o315,(0x75bcd15-0O726746425),0o133,0o70,(15658734^0O73567354),0o30,0o354,0o41,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o247,0o355,0o102,0o325,0o335,0o345,0o341,0o345,0o50,(0O347010110&0x463A71D),0o41,0o252,0o134,0o21,0o257,0o134,0o355,0o270,0o315,0o145,0o174,(0O57060516-0xbc614d),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o315,0o233,0o150,0o41,0o356,0o140,(1011010-0O3666474),0o20,0o315,0o150,0o141,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o12,0o315,0o233,0o150,0o41,0o376,0o140,(1011010-0O3666474),0o130,0o315,0o150,0o141,(0O57060516-0xbc614d),0o16,0o20,0o305,0o315,0o233,0o150,(1011010-0O3666474),(0O334664274-0x37368B9),0o76,0o77,0o327,0o20,0o373,0o301,0o315,0o233,0o150,0o76,0o101,0o365,0o327,0o361,0o305,0o365,0o315,0o216,(15658734^0O73567354),0o76,(0x5E30A78-0O570605164),0o273,0o341,0o40,0o11,0o174,0o75,0o376,0o100,0o40,(15658734^0O73567354),0o76,0o132,0o147,0o76,0o23,0o273,0o174,0o40,(0x9D8DE4-0O47306735),0o74,0o376,0o133,0o40,(15658734^0O73567354),0o76,0o101,0o147,0o301,0o325,0o345,0o315,0o233,0o150,0o341,0o321,0o174,0o327,0o315,0o361,0o133,0o72,0o26,0o150,0o313,0o177,0o304,0o12,0o133,0o76,0o41,0o273,0o174,0o40,0o303,0o341,0o167,0o43,0o345,0o257,0o313,0o377,0o62,0o26,0o150,0o14,0o76,0o21,0o271,0o76,0o101,0o40,0o261,0o341,0o321,0o163,0o43,0o162,0o311,0o305,(1011010-0O3666474),0o100,0o305,(1011010-0O3666474),0o377,0o305,0o301,0o20,0o374,0o301,0o20,0o366,0o301,0o311,0o377,(0x75bcd15-0O726746425),0o34,0o40,0o377,(0x75bcd15-0O726746425),0o36,0o15,0o15,0o43,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o20,0o26,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),0o13,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o76,0o12,0o275,0o320,0o207,0o275,0o330,0o41,0o131,0o154,0o301,0o345,0o311,0o350,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o100,(0x75bcd15-0O726746425),0o377,0o314,(0O57060516-0xbc614d),0o176,0o135,0o176,0o135,(0x75bcd15-0O726746425),0o226,0o32,0o377,0o376,0o377,(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o313,0o134,0o314,0o134,0o266,0o134,0o266,0o134,0o313,0o134,0o332,0o134,0o312,0o134,0o314,0o134,0o323,0o134,0o331,0o134,0o331,(0x75bcd15-0O726746425),0o333,0o134,0o333,0o134,0o333,0o134,0o55,0o222,0o134,0o30,(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o376,0o377,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o340,0o302,0o266,0o32,0o335,0o377,0o174,0o136,0o220,0o130,0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o41,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o41,0o27,0o100,0o100,0o340,0o120,0o41,0o26,0o41,0o27,(0O334664274-0x37368B9),0o100,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o131,0o117,0o125,0o364,(0O57060516-0xbc614d),0o131,0o117,0o125,0o220,(0O57060516-0xbc614d),0o131,0o117,0o125,0o54,(0O57060516-0xbc614d),0o131,0o117,0o125,0o310,(0x75bcd15-0O726746425),0o131,0o117,0o125,0o144,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o201,0o135,0o377,0o377,0o364,0o11,0o250,0o20,0o113,0o364,0o11,0o304,0o25,0o123,0o201,0o17,0o304,0o25,0o122,0o364,0o11,0o304,0o25,0o120,0o200,0o200,0o371,0o300,0o62,0o71,0o65,0o70,0o62,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o216,0o163,(0x75bcd15-0O726746425),0o15,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o216,0o163,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o64,0o62,0o65,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o51,0o100,(0x75bcd15-0O726746425),0o15,0o200,(0O334664274-0x37368B9),0o115,0o57,0o103,0o117,0o104,0o105,0o40,0o40,0o40,0o40,0o51,0o100,(0x75bcd15-0O726746425),0o100,0o133,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o51,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o145,0o134,(0x75bcd15-0O726746425),0o53,0o62,0o65,0o66,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o52,0o276,0o62,0o63,0o66,0o65,0o64,0o340,0o127,0o161,(1011010-0O3666474),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o134,(1011010-0O3666474),(0O334664274-0x37368B9),0o333,(15658734^0O73567354),0o333,(15658734^0O73567354),0o333,(15658734^0O73567354),0o324,0o377,(0O347010110&0x463A71D),0o100,0o333,(15658734^0O73567354),0o363,0o15,0o316,0o13,0o360,0o120,0o333,(15658734^0O73567354),0o115,(0x75bcd15-0O726746425),0o370,0o123,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o316,0o13,0o375,0o120,(0x5E30A78-0O570605164),0o27,0o334,0o12,0o333,(15658734^0O73567354),0o115,(0x75bcd15-0O726746425),0o261,0o63,0o363,0o134,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o363,0o15,(1011010-0O3666474),(0O334664274-0x37368B9),0o300,0o127,0o161,0o16,0o363,0o15,0o333,(15658734^0O73567354),0o333,(15658734^0O73567354),0o115,(0x75bcd15-0O726746425),0o333,0o134,0o216,(0O57060516-0xbc614d),0o53,0o55,0o124,0o216,0o77,(0O507646144^0x51F4C61),0o224,0o163,(0O334664274-0x37368B9),0o23,0o12,0o157,0o50,0o103,0o51,0o40,0o101,0o124,0o101,0o122,0o111,0o54,0o40,0o111,0o116,0o103,0o56,0o40,0o101,0o114,0o114,0o40,0o122,0o111,0o107,0o110,0o124,0o123,0o40,0o122,0o105,0o123,0o105,0o122,0o126,0o105,0o104,0o56,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o301,0o315,0o372,0o174,0o76,0o74,0o62,0o67,0o134,0o41,0o132,0o141,(1011010-0O3666474),0o16,0o315,0o150,0o141,0o315,0o372,0o135,0o303,0o27,0o161,0o333,0o37,0o127,0o313,0o102,0o72,0o363,0o147,0o304,0o333,0o135,0o313,0o112,0o304,0o342,0o135,0o313,0o122,0o304,0o351,0o135,0o313,0o132,0o304,0o360,0o135,0o311,0o376,0o50,0o310,0o76,0o70,0o30,0o23,0o376,0o45,0o310,0o76,0o65,0o30,0o14,0o376,0o46,0o310,0o76,0o66,0o30,(0O507646144^0x51F4C61),0o376,0o47,0o310,0o76,0o67,0o301,0o62,(0O347010110&0x463A71D),0o134,0o311,(1011010-0O3666474),0o12,0o315,0o361,0o133,0o20,0o373,0o315,0o145,0o174,0o76,0o74,0o62,0o67,0o134,0o76,0o106,0o62,0o215,0o134,0o315,0o55,0o133,0o76,0o100,0o62,0o215,0o134,0o311,0o345,0o315,0o27,0o170,0o305,0o315,0o262,0o163,0o301,0o15,0o315,0o163,0o153,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o72,0o153,0o170,0o376,0o113,0o50,0o11,0o376,0o114,0o50,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o30,(0O334664274-0x37368B9),(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o365,0o315,0o271,0o150,0o361,0o327,0o341,0o311,0o376,0o340,0o40,(0x5E30A78-0O570605164),0o76,0o42,0o30,0o62,0o376,0o350,0o40,(0x5E30A78-0O570605164),0o76,0o43,0o30,0o52,0o376,0o360,0o40,(0x5E30A78-0O570605164),0o76,0o44,0o30,0o42,0o376,0o370,0o40,(0x5E30A78-0O570605164),0o76,0o115,0o30,0o32,0o376,0o230,0o40,(0x5E30A78-0O570605164),0o76,0o116,0o30,0o22,0o376,0o240,0o40,(0x5E30A78-0O570605164),0o76,0o55,0o30,0o12,0o376,0o320,0o40,(0x5E30A78-0O570605164),0o76,0o56,0o30,(15658734^0O73567354),0o76,0o57,0o303,0o64,0o170,0o305,0o315,0o103,0o136,0o315,0o161,0o171,0o355,0o113,0o360,0o147,0o315,0o233,0o150,0o76,0o40,0o365,0o327,0o361,0o327,0o301,0o311,0o106,0o345,0o315,0o221,0o150,0o341,0o376,0o114,0o300,0o72,0o226,0o136,0o167,0o311,0o72,0o226,0o136,0o376,(0x75bcd15-0O726746425),0o40,(0x5E30A78-0O570605164),0o76,0o106,0o30,(0O57060516-0xbc614d),0o257,0o62,0o226,0o136,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o41,0o201,0o130,0o315,0o227,0o136,(0O57060516-0xbc614d),0o35,(0x5E30A78-0O570605164),0o41,0o235,0o130,0o315,0o227,0o136,(0O57060516-0xbc614d),(0O57060516-0xbc614d),0o21,0o41,0o41,0o132,0o315,0o227,0o136,(0O57060516-0xbc614d),0o35,0o21,0o41,0o75,0o132,0o315,0o227,0o136,0o311,(1011010-0O3666474),0o77,0o315,0o150,0o141,0o303,0o62,0o140,(15658734^0O73567354),0o273,0o132,0o60,0o137,0o356,0o75,0o310,(0x75bcd15-0O726746425),0o26,0o23,(0x75bcd15-0O726746425),0o20,(0O507646144^0x51F4C61),0o123,0o105,0o114,0o105,0o103,0o124,0o40,0o72,0o40,0o61,0o40,0o55,0o40,0o113,0o105,0o131,0o102,0o117,0o101,0o122,0o104,0o40,0o103,0o117,0o116,0o124,0o122,0o117,0o114,0o123,0o40,0o40,0o26,0o24,0o11,0o20,(0O507646144^0x51F4C61),0o62,0o40,0o55,0o40,0o113,0o105,0o115,0o120,0o123,0o124,0o117,0o116,0o40,0o112,0o117,0o131,0o123,0o124,0o111,0o103,0o113,0o26,0o26,(0x75bcd15-0O726746425),(1011010-0O3666474),(1011010-0O3666474),0o20,(0x9D8DE4-0O47306735),0o40,0o40,0o120,0o122,0o105,0o123,0o123,0o40,0o47,0o123,0o47,0o40,0o124,0o117,0o40,0o123,0o124,0o101,0o122,0o124,0o40,0o124,0o110,0o105,0o40,0o107,0o101,0o115,0o105,0o40,0o26,(0x75bcd15-0O726746425),0o12,0o20,(1011010-0O3666474),0o120,0o117,0o111,0o116,0o124,0o123,0o40,0o124,0o101,0o102,0o114,0o105,0o26,(15658734^0O73567354),(0O507646144^0x51F4C61),0o20,(0O334664274-0x37368B9),0o104,0o117,0o124,0o372,0o20,(1011010-0O3666474),0o220,0o366,0o61,0o60,0o26,(0x5E30A78-0O570605164),(0O507646144^0x51F4C61),0o20,(0O334664274-0x37368B9),0o120,0o117,0o127,0o105,0o122,0o40,0o120,0o111,0o114,0o114,0o40,0o362,0o20,(1011010-0O3666474),0o221,0o20,(1011010-0O3666474),0o366,0o65,0o60,0o26,(1011010-0O3666474),(0O507646144^0x51F4C61),0o20,(0O334664274-0x37368B9),0o103,0o110,0o105,0o122,0o122,0o131,0o367,0o20,(15658734^0O73567354),0o240,0o20,(1011010-0O3666474),0o365,0o61,0o60,0o60,0o26,(0O347010110&0x463A71D),(0O507646144^0x51F4C61),0o20,(0O334664274-0x37368B9),0o123,0o124,0o122,0o101,0o127,0o102,0o105,0o122,0o122,0o131,0o363,0o20,(15658734^0O73567354),0o241,0o20,(1011010-0O3666474),0o365,0o63,0o60,0o60,0o26,0o12,(0O507646144^0x51F4C61),0o20,(0O334664274-0x37368B9),0o117,0o122,0o101,0o116,0o107,0o105,0o367,0o20,(1011010-0O3666474),0o242,0o365,0o20,(1011010-0O3666474),0o65,0o60,0o60,0o26,0o14,(0O507646144^0x51F4C61),0o20,(0O334664274-0x37368B9),0o101,0o120,0o120,0o114,0o105,0o370,0o20,(15658734^0O73567354),0o243,0o365,0o20,(1011010-0O3666474),0o67,0o60,0o60,0o26,0o16,(0O507646144^0x51F4C61),0o20,(0O334664274-0x37368B9),0o114,0o111,0o115,0o105,0o371,0o20,(0x5E30A78-0O570605164),0o244,0o364,0o20,(1011010-0O3666474),0o61,0o60,0o60,0o60,0o26,0o20,(0O507646144^0x51F4C61),0o20,(0O334664274-0x37368B9),0o127,0o110,0o111,0o123,0o124,0o114,0o105,0o40,0o40,0o40,0o363,0o20,(0O507646144^0x51F4C61),0o230,0o364,0o20,(1011010-0O3666474),0o62,0o60,0o60,0o60,0o26,0o22,(0O507646144^0x51F4C61),0o20,(0O334664274-0x37368B9),0o102,0o105,0o114,0o114,0o371,0o20,(1011010-0O3666474),0o231,0o364,0o20,(1011010-0O3666474),0o63,0o60,0o60,0o60,0o26,0o24,(0O507646144^0x51F4C61),0o20,(0O334664274-0x37368B9),0o113,0o105,0o131,0o372,0o20,(0O507646144^0x51F4C61),0o237,0o364,0o20,(1011010-0O3666474),0o65,0o60,0o60,0o60,0o41,0o50,0o137,(1011010-0O3666474),0o45,0o315,0o150,0o141,(1011010-0O3666474),0o62,0o305,0o41,0o151,0o132,0o21,0o211,0o151,0o72,(0O347010110&0x463A71D),0o134,0o376,0o123,0o312,0o251,0o135,0o376,0o61,0o314,0o205,0o141,0o376,0o62,0o314,0o226,0o141,0o315,0o35,0o133,0o301,0o20,0o341,0o311,0o315,0o177,0o160,0o76,0o330,0o62,0o120,0o160,0o41,0o125,0o151,0o42,0o326,0o151,0o76,0o74,0o62,0o67,0o134,0o315,0o145,0o174,0o311,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o20,(1011010-0O3666474),0o124,0o117,0o104,0o101,0o131,0o47,0o123,0o40,0o107,0o122,0o105,0o101,0o124,0o105,0o123,0o124,0o40,0o123,0o103,0o117,0o122,0o105,0o123,0o26,0o14,0o11,0o113,0o105,0o131,0o40,0o106,0o125,0o116,0o103,0o124,0o111,0o117,0o116,0o123,0o26,0o15,0o11,0o224,0o362,0o47,0o65,0o47,0o40,0o117,0o122,0o40,0o47,0o117,0o47,0o26,0o16,0o11,0o225,0o362,0o47,0o70,0o47,0o40,0o117,0o122,0o40,0o47,0o120,0o47,0o26,0o17,0o11,0o226,0o362,0o47,0o67,0o47,0o40,0o117,0o122,0o40,0o47,0o121,0o47,0o26,0o20,0o11,0o227,0o362,0o47,0o66,0o47,0o40,0o117,0o122,0o40,0o47,0o101,0o47,0o26,0o21,0o11,0o110,0o117,0o114,0o104,0o72,0o40,0o47,0o110,0o47,0o40,0o113,0o105,0o131,0o103,0o117,0o116,0o107,0o122,0o101,0o124,0o125,0o114,0o101,0o124,0o111,0o117,0o116,0o123,0o41,0o131,0o117,0o125,0o122,0o40,0o123,0o103,0o117,0o122,0o105,0o40,0o111,0o123,0o40,0o111,0o116,0o40,0o124,0o117,0o104,0o101,0o131,0o47,0o123,0o40,0o124,0o117,0o120,0o40,0o65,0o72,0o55,0o120,0o122,0o105,0o123,0o123,0o40,0o224,0o40,0o101,0o116,0o104,0o40,0o225,0o40,0o124,0o117,0o40,0o123,0o105,0o114,0o105,0o103,0o124,0o40,0o111,0o116,0o111,0o124,0o111,0o101,0o114,0o123,0o124,0o110,0o105,0o116,0o40,0o120,0o122,0o105,0o123,0o123,0o40,0o47,0o105,0o116,0o124,0o105,0o122,0o47,0o40,0o113,0o105,0o131,0o72,0o55,0o40,0o40,0o40,0o40,0o26,0o13,0o13,0o20,(0x9D8DE4-0O47306735),0o107,0o101,0o115,0o105,0o40,0o117,0o126,0o105,0o122,0o305,0o176,0o376,0o360,0o70,0o12,0o326,0o360,0o107,0o76,0o40,0o327,0o20,0o373,0o30,(0O57060516-0xbc614d),0o327,0o43,0o301,0o20,0o353,0o311,(1011010-0O3666474),0o25,0o167,0o43,0o20,0o374,0o311,0o152,0o257,0o62,0o356,0o147,0o76,0o150,0o315,0o176,0o141,0o153,0o76,0o105,0o315,0o176,0o141,0o311,0o152,0o62,0o356,0o147,0o76,0o105,0o315,0o176,0o141,0o153,0o76,0o150,0o315,0o176,0o141,0o311,0o41,0o50,0o137,(1011010-0O3666474),0o45,0o315,0o150,0o141,(1011010-0O3666474),0o62,0o305,0o72,(0O347010110&0x463A71D),0o134,0o376,0o123,0o312,0o251,0o135,0o315,0o361,0o133,0o301,0o20,0o361,0o311,0o123,0o103,0o117,0o122,0o105,0o76,0o60,0o60,0o60,0o60,0o60,0o60,0o40,0o40,0o40,0o40,0o110,0o111,0o55,0o123,0o103,0o117,0o122,0o105,0o76,0o60,0o60,0o60,0o60,0o60,0o60,0o40,0o142,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o153,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o143,0o40,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o40,0o141,0o113,0o142,0o140,0o140,0o143,0o113,0o142,0o140,0o140,0o140,0o140,0o140,0o143,0o113,0o141,0o113,0o142,0o140,0o140,0o140,0o140,0o140,0o143,0o113,0o142,0o140,0o140,0o143,0o113,0o141,0o40,0o141,0o114,0o144,0o140,0o140,0o145,0o113,0o144,0o140,0o140,0o140,0o140,0o140,0o145,0o113,0o151,0o113,0o144,0o140,0o140,0o140,0o140,0o140,0o145,0o113,0o144,0o140,0o140,0o145,0o114,0o141,0o40,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o40,0o141,0o113,0o146,0o140,0o140,0o147,0o113,0o142,0o143,0o113,0o146,0o140,0o140,0o140,0o140,0o153,0o140,0o140,0o140,0o140,0o147,0o113,0o142,0o143,0o113,0o146,0o140,0o140,0o147,0o113,0o141,0o40,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o40,0o144,0o140,0o140,0o140,0o140,0o143,0o113,0o141,0o154,0o140,0o140,0o140,0o140,0o147,0o40,0o151,0o40,0o146,0o140,0o140,0o140,0o140,0o155,0o141,0o113,0o142,0o140,0o140,0o140,0o140,0o145,0o40,0o40,0o40,0o40,0o40,0o40,0o141,0o113,0o141,0o141,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o141,0o141,0o113,0o141,0o40,0o40,0o40,0o40,0o40,0o40,0o146,0o140,0o140,0o140,0o140,0o145,0o113,0o144,0o145,0o40,0o142,0o140,0o140,0o140,0o52,0o52,0o52,0o140,0o140,0o140,0o143,0o40,0o144,0o145,0o113,0o144,0o140,0o140,0o140,0o140,0o147,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o113,0o40,0o40,0o40,0o141,0o40,0o51,0o40,0o51,0o40,0o51,0o40,0o51,0o40,0o141,0o40,0o40,0o40,0o113,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o146,0o140,0o140,0o140,0o140,0o143,0o113,0o142,0o143,0o40,0o144,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o145,0o40,0o142,0o143,0o113,0o142,0o140,0o140,0o140,0o140,0o147,0o40,0o40,0o40,0o40,0o40,0o40,0o141,0o113,0o141,0o141,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o141,0o141,0o113,0o141,0o40,0o40,0o40,0o40,0o40,0o40,0o142,0o140,0o140,0o140,0o140,0o145,0o113,0o144,0o145,0o40,0o146,0o140,0o140,0o140,0o140,0o153,0o140,0o140,0o140,0o140,0o147,0o40,0o144,0o145,0o113,0o144,0o140,0o140,0o140,0o140,0o143,0o40,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o40,0o141,0o113,0o146,0o140,0o140,0o143,0o113,0o146,0o140,0o140,0o140,0o140,0o140,0o147,0o113,0o151,0o113,0o146,0o140,0o140,0o140,0o140,0o140,0o147,0o113,0o142,0o140,0o140,0o147,0o113,0o141,0o40,0o141,0o114,0o113,0o113,0o113,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o45,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o113,0o113,0o113,0o114,0o141,0o40,0o154,0o140,0o140,0o147,0o113,0o151,0o113,0o142,0o143,0o113,0o146,0o140,0o140,0o140,0o140,0o153,0o140,0o140,0o140,0o140,0o147,0o113,0o142,0o143,0o113,0o151,0o113,0o146,0o140,0o140,0o155,0o40,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o40,0o141,0o113,0o146,0o140,0o140,0o140,0o140,0o152,0o152,0o140,0o140,0o140,0o140,0o147,0o113,0o151,0o113,0o146,0o140,0o140,0o140,0o140,0o152,0o152,0o140,0o140,0o140,0o140,0o147,0o113,0o141,0o40,0o141,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o113,0o141,0o40,0o144,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o140,0o145,0o40,0o40,0o161,0o40,0o161,0o40,0o161,0o40,0o161,0o40,0o161,0o40,0o161,0o40,0o161,0o40,0o40,0o133,0o134,0o135,0o136,0o137,0o123,0o124,0o132,0o132,0o132,0o132,0o132,0o132,0o132,0o132,0o40,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o107,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o107,0o101,0o106,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o106,0o101,0o107,0o101,0o106,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o106,0o101,0o107,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o107,0o101,0o106,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o106,0o101,0o107,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o107,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o107,0o107,0o107,0o107,0o107,0o107,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o107,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o102,0o102,0o102,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o106,0o106,0o106,0o106,0o101,0o101,0o104,0o104,0o102,0o102,0o103,0o103,0o106,0o106,0o101,0o101,0o101,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o107,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o107,0o107,0o107,0o107,0o107,0o107,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o107,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o107,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o107,0o101,0o106,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o106,0o101,0o107,0o101,0o106,0o106,0o106,0o106,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o106,0o106,0o106,0o106,0o101,0o107,0o101,0o101,0o101,0o101,0o106,0o101,0o106,0o101,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o101,0o106,0o101,0o106,0o101,0o101,0o101,0o101,0o107,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o107,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o106,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o106,0o101,0o107,0o101,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o101,0o100,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,0o101,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o102,0o106,0o102,0o104,0o105,0o106,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,(0x75bcd15-0O726746425),0o17,0o21,0o45,0o45,0o16,0o13,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o40,(15658734^0O73567354),(0x75bcd15-0O726746425),0o14,0o13,(0O57060516-0xbc614d),0o377,(0x75bcd15-0O726746425),0o40,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o20,0o13,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o40,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o22,0o13,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o40,(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o345,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o21,0o45,0o45,0o16,0o13,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o40,(15658734^0O73567354),(0x75bcd15-0O726746425),0o14,0o13,(0O57060516-0xbc614d),0o377,(0x75bcd15-0O726746425),0o40,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o20,0o13,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o40,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o22,0o13,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o40,(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o343,0o32,(0x75bcd15-0O726746425),0o32,0o24,(0x75bcd15-0O726746425),0o364,(0O57060516-0xbc614d),0o76,0o74,0o62,0o67,0o134,0o76,(15658734^0O73567354),0o315,(0O57060516-0xbc614d),0o26,(0O57060516-0xbc614d),0o40,(0x75bcd15-0O726746425),0o21,0o300,0o141,0o315,0o74,0o40,0o76,0o174,0o62,0o67,0o134,(0O57060516-0xbc614d),0o340,(15658734^0O73567354),0o21,0o340,0o141,0o315,0o74,0o40,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o41,0o300,0o144,0o21,(0x75bcd15-0O726746425),0o130,0o355,0o260,0o311,0o52,0o66,0o134,0o21,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o31,0o171,0o17,0o17,0o17,0o346,0o340,0o250,0o137,0o171,0o346,0o30,0o356,0o100,0o127,(1011010-0O3666474),0o140,0o305,0o325,0o345,0o32,0o256,0o50,(0x5E30A78-0O570605164),0o74,0o40,0o30,0o75,0o117,(1011010-0O3666474),(0x9D8DE4-0O47306735),0o24,0o43,0o32,0o256,0o251,0o40,0o15,0o20,0o367,0o301,0o301,0o301,0o76,0o200,0o220,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o30,0o12,0o341,0o21,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o31,0o321,0o301,0o20,0o325,0o110,0o311,0o305,0o120,0o131,0o103,0o112,0o315,0o115,0o150,0o301,0o311,0o305,0o335,0o345,0o76,(15658734^0O73567354),0o315,(0O57060516-0xbc614d),0o26,0o335,0o341,0o301,0o76,0o26,0o327,0o170,0o327,0o171,0o327,0o311,0o315,0o60,0o162,0o76,0o166,0o167,0o311,(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),0o341,0o76,0o21,0o327,0o170,0o327,0o76,0o20,0o327,0o171,0o327,0o311,0o345,(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o341,0o345,0o36,0o60,(0O57060516-0xbc614d),0o360,0o330,0o315,0o52,0o31,(0O57060516-0xbc614d),0o30,0o374,0o315,0o52,0o31,(0O57060516-0xbc614d),0o234,0o377,0o315,0o52,0o31,0o16,0o366,0o315,0o52,0o31,0o175,0o315,0o357,0o25,0o341,0o311,0o72,0o356,0o147,0o376,(0x75bcd15-0O726746425),0o304,0o300,0o135,0o72,(0O347010110&0x463A71D),0o134,0o376,0o65,0o312,(0O334664274-0x37368B9),0o153,0o376,0o66,0o312,0o14,0o153,0o376,0o67,0o312,0o25,0o153,0o376,0o70,0o312,0o36,0o153,0o376,0o117,0o312,(0O334664274-0x37368B9),0o153,0o376,0o101,0o312,0o14,0o153,0o376,0o121,0o312,0o25,0o153,0o376,0o120,0o312,0o36,0o153,0o376,0o110,0o50,(0O334664274-0x37368B9),0o303,0o217,0o153,0o52,0o170,0o134,0o72,(0O347010110&0x463A71D),0o134,0o376,0o110,0o50,0o371,0o42,0o170,0o134,0o311,0o305,(1011010-0O3666474),0o377,0o305,0o301,0o20,0o374,0o301,0o20,0o366,0o311,0o76,0o367,0o333,0o376,0o57,0o127,0o313,0o102,0o72,0o363,0o147,0o304,0o342,0o135,0o313,0o112,0o304,0o333,0o135,0o303,0o320,0o135,0o315,0o77,0o151,0o303,0o354,0o150,0o72,0o270,0o150,0o74,0o62,0o270,0o150,0o376,0o310,0o314,0o154,0o170,0o72,0o270,0o150,0o376,0o377,0o314,0o177,0o170,0o355,0o113,0o360,0o147,0o315,0o307,0o162,0o315,0o102,0o174,0o72,0o26,0o150,0o313,0o107,0o304,0o355,0o153,0o72,0o26,0o150,0o313,0o117,0o304,0o373,0o153,0o72,0o26,0o150,0o313,0o127,0o304,0o11,0o154,0o72,0o26,0o150,0o313,0o137,0o304,0o27,0o154,0o315,0o313,0o166,0o315,0o257,0o173,(1011010-0O3666474),(1011010-0O3666474),0o315,0o64,0o151,0o315,0o313,0o166,(1011010-0O3666474),(1011010-0O3666474),0o315,0o64,0o151,0o315,0o313,0o166,0o72,0o26,0o150,0o313,0o107,0o304,0o355,0o153,0o72,0o26,0o150,0o313,0o117,0o304,0o373,0o153,0o72,0o26,0o150,0o313,0o127,0o304,0o11,0o154,0o72,0o26,0o150,0o313,0o137,0o304,0o27,0o154,0o315,0o372,0o162,0o315,0o313,0o166,0o315,0o125,0o151,0o72,0o33,0o150,0o376,0o354,0o322,0o325,0o156,0o72,0o25,0o150,0o313,0o157,0o50,(0x5E30A78-0O570605164),0o76,(0x5E30A78-0O570605164),0o30,(15658734^0O73567354),0o76,(1011010-0O3666474),0o62,0o240,0o151,0o62,0o250,0o151,0o62,0o67,0o152,0o62,0o77,0o152,0o315,0o331,0o162,0o315,0o372,0o162,0o72,0o25,0o150,0o313,0o147,0o50,0o15,0o127,0o72,0o267,0o150,0o57,0o62,0o267,0o150,0o376,(0x75bcd15-0O726746425),0o172,0o40,0o35,0o313,0o107,0o304,0o355,0o153,0o72,0o25,0o150,0o313,0o117,0o304,0o373,0o153,0o72,0o25,0o150,0o313,0o127,0o304,0o11,0o154,0o72,0o25,0o150,0o313,0o137,0o304,0o27,0o154,0o315,0o244,0o136,0o315,0o313,0o166,(1011010-0O3666474),(1011010-0O3666474),0o315,0o64,0o151,0o315,0o313,0o166,(1011010-0O3666474),(1011010-0O3666474),0o315,0o64,0o151,0o315,0o313,0o166,0o72,0o26,0o150,0o313,0o107,0o304,0o355,0o153,0o72,0o26,0o150,0o313,0o117,0o304,0o373,0o153,0o72,0o26,0o150,0o313,0o127,0o304,0o11,0o154,0o72,0o26,0o150,0o313,0o137,0o304,0o27,0o154,0o315,0o155,0o165,0o315,0o372,0o162,0o315,0o120,0o172,0o52,0o170,0o134,0o345,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o247,0o355,0o102,0o341,0o70,0o60,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o11,0o247,0o355,0o102,0o72,0o25,0o150,0o60,(0x9D8DE4-0O47306735),0o313,0o357,0o62,0o25,0o150,0o30,0o36,0o313,0o267,0o313,0o257,0o313,0o247,0o313,0o307,0o62,0o25,0o150,0o41,0o24,(0x75bcd15-0O726746425),0o42,0o34,0o150,0o257,0o62,0o170,0o134,0o62,0o171,0o134,0o62,0o27,0o150,0o315,0o372,0o162,0o72,0o25,0o150,0o313,0o157,0o50,(0x5E30A78-0O570605164),0o257,0o62,0o27,0o150,0o315,0o372,0o162,0o315,0o313,0o166,0o72,0o33,0o150,0o376,0o354,0o322,0o325,0o156,0o72,0o27,0o150,0o376,0o57,0o322,0o133,0o151,0o74,0o62,0o27,0o150,0o376,0o55,0o70,(0x9D8DE4-0O47306735),0o72,0o25,0o150,0o313,0o337,0o30,0o31,0o376,0o36,0o70,(0x9D8DE4-0O47306735),0o72,0o25,0o150,0o313,0o327,0o30,0o16,0o376,0o17,0o70,0o20,0o72,0o25,0o150,0o313,0o317,(1011010-0O3666474),(0O507646144^0x51F4C61),0o315,0o64,0o151,0o62,0o25,0o150,0o303,0o133,0o151,(1011010-0O3666474),(0x9D8DE4-0O47306735),0o315,0o64,0o151,0o303,0o133,0o151,0o76,0o45,0o355,0o113,0o360,0o147,0o15,0o30,0o31,0o76,0o46,0o355,0o113,0o360,0o147,(0x5E30A78-0O570605164),0o30,0o20,0o76,0o47,0o355,0o113,0o360,0o147,(0O507646144^0x51F4C61),0o30,(0x9D8DE4-0O47306735),0o76,0o50,0o355,0o113,0o360,0o147,0o14,0o62,0o363,0o147,0o171,0o376,0o377,0o50,0o142,0o376,0o37,0o50,0o136,0o315,0o221,0o150,0o305,0o321,0o376,0o51,0o312,0o204,0o153,0o376,0o166,0o312,0o204,0o153,0o376,0o167,0o312,0o204,0o153,0o376,0o114,0o312,0o345,0o156,0o376,0o113,0o312,0o255,0o156,0o376,0o53,0o312,0o225,0o165,0o376,0o54,0o312,0o373,0o170,0o376,0o40,0o302,0o217,0o153,0o355,0o113,0o360,0o147,0o355,0o123,0o360,0o147,0o325,0o315,0o233,0o150,0o76,0o40,0o327,0o301,0o305,0o315,0o273,0o162,0o301,0o315,0o233,0o150,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o72,0o363,0o147,0o62,0o362,0o147,0o327,0o311,0o72,0o25,0o150,0o313,0o157,0o312,0o365,0o157,0o303,0o24,0o157,0o355,0o113,0o360,0o147,0o72,0o362,0o147,0o62,0o363,0o147,0o376,0o45,0o50,0o12,0o376,0o46,0o50,0o20,0o376,0o47,0o50,0o17,0o30,0o20,0o15,0o171,0o376,0o377,0o40,0o22,0o16,0o36,0o30,0o16,(0x5E30A78-0O570605164),0o30,0o13,(0O507646144^0x51F4C61),0o30,(0O347010110&0x463A71D),0o14,0o171,0o376,0o37,0o40,(15658734^0O73567354),0o16,(0x75bcd15-0O726746425),0o315,0o221,0o150,0o305,0o321,0o376,0o51,0o312,0o204,0o153,0o376,0o166,0o312,0o204,0o153,0o376,0o167,0o312,0o204,0o153,0o376,0o114,0o312,0o345,0o156,0o376,0o113,0o312,0o255,0o156,0o376,0o53,0o312,0o225,0o165,0o376,0o54,0o312,0o373,0o170,0o376,0o40,0o300,0o303,0o136,0o153,0o335,0o41,0o364,0o147,0o72,0o26,0o150,0o313,0o107,0o50,0o55,0o303,0o314,0o163,0o335,0o41,0o374,0o147,0o72,0o26,0o150,0o313,0o117,0o50,0o37,0o303,0o314,0o163,0o335,0o41,(0x5E30A78-0O570605164),0o150,0o72,0o26,0o150,0o313,0o127,0o50,0o21,0o303,0o314,0o163,0o335,0o41,0o14,0o150,0o72,0o26,0o150,0o313,0o137,0o50,(0O334664274-0x37368B9),0o303,0o314,0o163,0o335,0o156,(0x75bcd15-0O726746425),0o335,0o146,(0O57060516-0xbc614d),0o76,0o12,0o274,0o50,(15658734^0O73567354),0o74,0o274,0o314,0o161,0o160,(0x75bcd15-0O726746425),0o315,0o202,0o166,0o72,0o25,0o150,0o313,0o157,0o40,0o22,0o72,0o360,0o147,0o335,0o226,(0x75bcd15-0O726746425),0o312,0o176,0o162,0o72,0o361,0o147,0o335,0o226,(0O57060516-0xbc614d),0o312,0o231,0o162,0o72,0o170,0o134,0o313,0o137,0o40,0o125,0o335,0o116,(0x75bcd15-0O726746425),0o335,0o106,(0O57060516-0xbc614d),0o171,0o376,0o377,0o50,0o112,0o376,0o37,0o50,0o106,0o170,0o335,0o226,(15658734^0O73567354),0o107,0o315,0o221,0o150,0o127,0o72,0o362,0o147,0o272,0o172,0o312,0o15,0o155,0o376,0o114,0o312,0o15,0o155,0o376,0o113,0o312,0o15,0o155,0o376,0o40,0o312,0o15,0o155,0o376,0o51,0o312,0o15,0o155,0o376,0o166,0o312,0o15,0o155,0o376,0o167,0o312,0o15,0o155,0o376,0o53,0o312,0o15,0o155,0o376,0o54,0o312,0o15,0o155,0o376,0o52,0o40,0o11,0o335,0o146,(0O57060516-0xbc614d),0o76,0o13,0o274,0o172,0o50,0o137,0o335,0o116,(0x75bcd15-0O726746425),0o335,0o106,(0O57060516-0xbc614d),0o171,0o335,0o226,(0O334664274-0x37368B9),0o117,0o376,0o377,0o40,(15658734^0O73567354),0o16,0o36,0o376,0o37,0o40,(15658734^0O73567354),0o16,(0x75bcd15-0O726746425),0o315,0o221,0o150,0o127,0o72,0o362,0o147,0o272,0o172,0o50,0o104,0o376,0o114,0o50,0o100,0o376,0o113,0o50,0o74,0o376,0o40,0o50,0o70,0o376,0o51,0o50,0o64,0o376,0o166,0o50,0o60,0o376,0o167,0o50,0o54,0o376,0o53,0o50,0o50,0o376,0o54,0o50,0o44,0o335,0o176,(0x5E30A78-0O570605164),0o376,(0x75bcd15-0O726746425),0o50,0o13,0o335,0o176,(15658734^0O73567354),0o57,0o74,0o335,0o167,(15658734^0O73567354),0o303,0o135,0o160,0o335,0o176,(0O334664274-0x37368B9),0o57,0o74,0o335,0o167,(0O334664274-0x37368B9),0o303,0o131,0o154,0o365,0o257,0o335,0o167,(0x5E30A78-0O570605164),0o30,(1011010-0O3666474),0o365,0o76,(0O57060516-0xbc614d),0o335,0o167,(0x5E30A78-0O570605164),0o305,0o315,0o233,0o150,0o72,0o25,0o150,0o313,0o157,0o40,0o15,(1011010-0O3666474),(0x75bcd15-0O726746425),0o335,0o116,(1011010-0O3666474),0o315,0o271,0o150,0o76,0o51,0o327,0o30,0o22,0o313,0o167,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o30,(0O334664274-0x37368B9),(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o76,0o51,0o327,0o321,0o335,0o116,(0x75bcd15-0O726746425),0o335,0o106,(0O57060516-0xbc614d),0o335,0o163,(0x75bcd15-0O726746425),0o335,0o162,(0O57060516-0xbc614d),0o315,0o233,0o150,0o335,0o176,(0O507646144^0x51F4C61),0o365,0o376,0o54,0o314,0o350,0o170,0o376,0o52,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(15658734^0O73567354),(0x75bcd15-0O726746425),0o30,0o76,0o376,0o53,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o30,0o65,0o376,0o113,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o30,0o54,0o376,0o114,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o30,0o43,0o376,0o166,0o50,0o12,0o376,0o167,0o50,(1011010-0O3666474),0o376,0o51,0o50,(15658734^0O73567354),0o30,0o22,(1011010-0O3666474),(0x75bcd15-0O726746425),0o72,0o25,0o150,0o313,0o157,0o50,(0x5E30A78-0O570605164),0o16,(0O507646144^0x51F4C61),0o30,(0O347010110&0x463A71D),0o335,0o116,(0x9D8DE4-0O47306735),0o30,(0O334664274-0x37368B9),(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o361,0o327,0o361,0o335,0o167,(0O507646144^0x51F4C61),0o127,0o72,0o362,0o147,0o272,0o50,0o26,0o172,0o376,0o51,0o312,0o63,0o162,0o376,0o166,0o312,0o63,0o162,0o376,0o167,0o312,0o63,0o162,0o376,0o53,0o314,0o256,0o150,0o311,0o76,0o40,0o335,0o167,(0O507646144^0x51F4C61),0o355,0o113,0o360,0o147,0o315,0o163,0o153,0o72,0o25,0o150,0o313,0o157,0o40,(0x5E30A78-0O570605164),0o301,0o303,0o371,0o157,0o355,0o113,0o360,0o147,0o315,0o163,0o153,0o303,0o27,0o157,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o72,0o361,0o147,0o335,0o226,(0O57060516-0xbc614d),0o362,0o373,0o155,0o57,0o74,0o376,0o17,0o320,0o72,0o360,0o147,0o335,0o226,(0x75bcd15-0O726746425),0o362,0o11,0o156,0o57,0o74,0o376,0o24,0o320,0o315,0o71,0o156,0o257,0o335,0o226,(0x5E30A78-0O570605164),0o50,0o22,0o72,0o361,0o147,0o335,0o276,(0O57060516-0xbc614d),0o70,(0x5E30A78-0O570605164),0o76,0o377,0o30,(15658734^0O73567354),0o76,(0O57060516-0xbc614d),0o335,0o167,(15658734^0O73567354),0o311,0o72,0o360,0o147,0o335,0o276,(0x75bcd15-0O726746425),0o70,(0x5E30A78-0O570605164),0o76,0o377,0o30,(15658734^0O73567354),0o76,(0O57060516-0xbc614d),0o335,0o167,(0O334664274-0x37368B9),0o311,(0O57060516-0xbc614d),0o254,0o156,0o72,0o25,0o150,0o313,0o157,0o40,(1011010-0O3666474),0o257,(15658734^0O73567354),0o76,0o70,0o30,0o124,0o335,0o345,0o321,0o41,0o364,0o147,0o247,0o355,0o122,0o40,(0O347010110&0x463A71D),0o12,0o313,0o107,0o300,0o313,0o307,0o30,0o56,0o41,0o374,0o147,0o247,0o355,0o122,0o40,(0O347010110&0x463A71D),0o12,0o313,0o117,0o300,0o313,0o317,0o30,0o36,0o41,(0x5E30A78-0O570605164),0o150,0o247,0o355,0o122,0o40,(0O347010110&0x463A71D),0o12,0o313,0o127,0o300,0o313,0o327,0o30,0o16,0o41,0o14,0o150,0o247,0o355,0o122,0o40,0o27,0o12,0o313,0o137,0o300,0o313,0o337,(15658734^0O73567354),0o335,0o176,(15658734^0O73567354),0o57,0o74,0o335,0o167,(15658734^0O73567354),0o335,0o176,(0O334664274-0x37368B9),0o57,0o74,0o335,0o167,(0O334664274-0x37368B9),0o76,0o60,0o62,0o33,0o156,0o62,0o55,0o156,0o311,0o376,0o26,0o312,(0O334664274-0x37368B9),0o153,0o303,0o131,0o172,(0x75bcd15-0O726746425),0o315,0o136,0o153,0o315,0o102,0o163,0o52,0o31,0o150,0o43,0o345,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o233,0o150,0o341,0o315,0o304,0o150,0o42,0o31,0o150,0o315,0o135,0o171,0o72,0o33,0o150,0o74,0o376,0o354,0o60,(0x5E30A78-0O570605164),0o62,0o33,0o150,0o311,0o301,0o257,0o62,0o33,0o150,(0O57060516-0xbc614d),0o50,(0x75bcd15-0O726746425),0o21,0o360,0o147,0o41,0o300,0o147,0o355,0o260,0o311,0o315,0o136,0o153,0o315,0o231,0o163,0o41,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o42,0o170,0o134,0o72,0o25,0o150,0o313,0o347,0o313,0o357,0o62,0o25,0o150,0o76,0o24,0o62,0o34,0o150,0o52,0o31,0o150,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o11,0o303,0o267,0o156,(1011010-0O3666474),0o24,0o315,0o361,0o133,0o20,0o373,0o303,0o161,0o174,0o315,0o136,0o153,0o335,0o41,0o364,0o147,0o72,0o26,0o150,(1011010-0O3666474),(0x5E30A78-0O570605164),0o305,0o313,0o57,0o365,0o70,0o24,0o355,0o113,0o360,0o147,0o335,0o156,(0x75bcd15-0O726746425),0o335,0o146,(0O57060516-0xbc614d),0o247,0o355,0o102,0o335,0o345,0o314,0o114,0o157,0o335,0o341,(0O57060516-0xbc614d),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o335,0o11,0o361,0o301,0o20,0o335,0o72,0o26,0o150,0o313,0o277,0o62,0o26,0o150,0o311,0o335,0o345,0o341,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o11,0o176,0o365,0o376,0o54,0o314,0o376,0o170,0o361,0o376,0o113,0o40,0o34,0o72,0o26,0o150,0o313,0o177,0o40,0o25,0o313,0o377,0o62,0o26,0o150,0o72,0o33,0o150,0o74,0o62,0o33,0o150,0o345,0o52,0o31,0o150,0o43,0o42,0o31,0o150,0o341,0o76,0o40,0o167,0o335,0o345,0o52,0o34,0o150,0o345,0o315,0o27,0o136,0o301,0o11,0o42,0o34,0o150,0o52,0o31,0o150,0o11,0o345,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o233,0o150,0o341,0o42,0o31,0o150,0o315,0o304,0o150,0o315,0o135,0o171,0o321,0o41,0o364,0o147,0o247,0o355,0o122,0o40,(0x9D8DE4-0O47306735),0o72,0o26,0o150,0o313,0o307,0o30,0o52,0o41,0o374,0o147,0o247,0o355,0o122,0o40,(0x9D8DE4-0O47306735),0o72,0o26,0o150,0o313,0o317,0o30,0o33,0o41,(0x5E30A78-0O570605164),0o150,0o247,0o355,0o122,0o40,(0x9D8DE4-0O47306735),0o72,0o26,0o150,0o313,0o327,0o30,0o14,0o41,0o14,0o150,0o247,0o355,0o122,0o300,0o72,0o26,0o150,0o313,0o337,0o62,0o26,0o150,0o311,0o41,0o364,0o147,0o345,0o116,0o43,0o106,0o315,0o221,0o150,0o41,0o362,0o147,0o276,0o341,0o310,(0O57060516-0xbc614d),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o11,0o30,0o355,0o301,0o315,0o136,0o153,0o315,0o21,0o165,0o345,0o41,0o364,0o147,(1011010-0O3666474),(0x5E30A78-0O570605164),0o305,0o116,0o43,0o106,0o345,0o315,0o233,0o150,0o341,0o43,0o43,0o43,0o43,0o176,0o376,0o114,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o30,0o22,0o376,0o52,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(15658734^0O73567354),(0x75bcd15-0O726746425),0o30,0o11,0o376,0o113,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o50,(15658734^0O73567354),0o76,0o40,0o365,0o315,0o271,0o150,0o361,0o327,0o43,0o43,0o43,0o301,0o20,0o313,0o341,0o315,0o125,0o163,(0O57060516-0xbc614d),0o50,(0x75bcd15-0O726746425),0o41,0o300,0o147,0o21,0o360,0o147,0o355,0o260,0o72,0o30,0o150,0o75,0o75,0o62,0o30,0o150,0o376,0o341,0o330,(1011010-0O3666474),(0x75bcd15-0O726746425),0o46,0o132,0o157,0o160,0o315,0o372,0o162,0o303,0o177,0o160,0o335,0o176,(0x5E30A78-0O570605164),0o74,0o335,0o167,(0x5E30A78-0O570605164),0o376,(0x5E30A78-0O570605164),0o332,0o131,0o154,0o76,(0O57060516-0xbc614d),0o335,0o167,(15658734^0O73567354),0o303,(15658734^0O73567354),0o155,0o76,0o12,0o275,0o320,0o207,0o275,0o330,0o41,0o131,0o154,0o343,0o311,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o315,0o266,0o162,0o355,0o113,0o360,0o147,0o315,0o233,0o150,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o76,0o45,0o62,0o362,0o147,0o62,0o363,0o147,0o327,0o315,0o230,0o166,(1011010-0O3666474),(15658734^0O73567354),0o305,(1011010-0O3666474),0o240,0o315,0o64,0o151,0o301,0o20,0o367,0o315,0o263,0o166,0o303,0o133,0o151,0o41,0o300,0o147,0o21,0o360,0o147,(0O57060516-0xbc614d),0o56,(0x75bcd15-0O726746425),0o355,0o260,0o311,0o257,0o62,0o270,0o150,0o74,0o62,0o35,0o161,0o76,0o360,0o62,0o243,0o170,0o41,0o211,0o170,0o42,0o241,0o170,0o41,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o42,0o164,0o152,0o42,0o354,0o156,0o41,0o160,0o177,0o42,0o264,0o162,0o315,0o266,0o162,0o315,0o254,0o160,0o315,0o40,0o150,0o315,(0O347010110&0x463A71D),0o170,0o315,0o245,0o170,0o315,0o230,0o166,0o315,0o102,0o166,0o315,0o263,0o166,0o257,0o62,0o170,0o134,0o62,0o171,0o134,0o41,0o24,(0x75bcd15-0O726746425),0o42,0o34,0o150,0o76,0o45,0o62,0o362,0o147,0o62,0o363,0o147,0o315,0o133,0o151,0o76,0o377,0o62,0o66,0o151,0o72,0o30,0o150,0o376,0o341,0o60,(0O347010110&0x463A71D),0o311,0o301,0o41,0o256,0o174,0o345,0o311,(0O57060516-0xbc614d),0o315,(0x9D8DE4-0O47306735),0o174,(1011010-0O3666474),0o27,0o315,0o104,0o16,0o72,0o35,0o161,0o57,0o74,0o62,0o35,0o161,0o376,(0O57060516-0xbc614d),0o314,0o163,0o172,0o41,0o160,0o177,0o42,0o264,0o162,0o315,0o266,0o162,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o315,0o233,0o150,(0O57060516-0xbc614d),0o340,(15658734^0O73567354),0o21,0o340,0o141,0o315,0o74,0o40,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o41,0o300,0o144,0o21,(0x75bcd15-0O726746425),0o130,0o355,0o260,0o315,(0O347010110&0x463A71D),0o170,0o315,0o245,0o170,0o315,0o230,0o166,(1011010-0O3666474),(15658734^0O73567354),0o305,(1011010-0O3666474),0o240,0o315,0o64,0o151,0o301,0o20,0o367,0o315,0o263,0o166,0o52,0o164,0o152,(0O57060516-0xbc614d),0o360,(0O347010110&0x463A71D),0o247,0o355,0o102,0o322,0o362,0o160,0o52,0o164,0o152,(0O57060516-0xbc614d),0o100,(0x75bcd15-0O726746425),0o11,0o42,0o164,0o152,0o42,0o354,0o156,0o303,0o362,0o160,0o335,0o345,0o321,0o325,0o325,0o341,(0O57060516-0xbc614d),0o60,(0x75bcd15-0O726746425),0o247,0o355,0o102,(0O57060516-0xbc614d),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o355,0o260,0o321,0o41,0o364,0o147,0o247,0o355,0o122,0o40,0o26,0o72,0o25,0o150,0o313,0o157,0o50,(0O507646144^0x51F4C61),0o313,0o207,0o62,0o25,0o150,0o72,0o26,0o150,0o313,0o207,0o62,0o26,0o150,0o30,0o114,0o41,0o374,0o147,0o247,0o355,0o122,0o40,0o22,0o72,0o25,0o150,0o313,0o217,0o62,0o25,0o150,0o72,0o26,0o150,0o313,0o217,0o62,0o26,0o150,0o30,0o62,0o41,(0x5E30A78-0O570605164),0o150,0o247,0o355,0o122,0o40,0o22,0o72,0o25,0o150,0o313,0o227,0o62,0o25,0o150,0o72,0o26,0o150,0o313,0o227,0o62,0o26,0o150,0o30,0o30,0o41,0o14,0o150,0o247,0o355,0o122,0o40,0o20,0o72,0o25,0o150,0o313,0o237,0o62,0o25,0o150,0o72,0o26,0o150,0o313,0o237,0o62,0o26,0o150,0o257,0o62,0o27,0o150,0o72,0o25,0o150,0o57,0o74,0o365,0o321,0o313,0o143,0o310,0o257,0o62,0o170,0o134,0o62,0o171,0o134,0o74,0o62,0o25,0o150,0o41,0o24,(0x75bcd15-0O726746425),0o42,0o34,0o150,0o41,0o304,0o147,0o21,0o364,0o147,(0O57060516-0xbc614d),0o40,(0x75bcd15-0O726746425),0o355,0o260,0o311,0o62,0o24,0o150,0o41,0o364,0o147,0o335,0o345,0o321,0o345,0o247,0o355,0o122,0o341,0o50,0o20,0o345,0o136,0o43,0o126,0o335,0o156,(0x75bcd15-0O726746425),0o335,0o146,(0O57060516-0xbc614d),0o247,0o355,0o122,0o341,0o50,(1011010-0O3666474),(0O57060516-0xbc614d),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o11,0o30,0o340,0o72,0o24,0o150,0o376,(0x75bcd15-0O726746425),0o40,0o26,0o43,0o43,0o335,0o176,(15658734^0O73567354),0o57,0o74,0o167,0o43,0o335,0o176,(0O334664274-0x37368B9),0o57,0o74,0o167,0o43,0o43,0o176,0o335,0o167,(0O507646144^0x51F4C61),0o311,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o11,0o176,0o335,0o167,(0O507646144^0x51F4C61),0o303,0o126,0o165,0o72,0o361,0o147,0o335,0o226,(0O57060516-0xbc614d),0o335,0o176,(15658734^0O73567354),0o70,(0O347010110&0x463A71D),0o376,(0O57060516-0xbc614d),0o312,0o122,0o154,0o303,0o131,0o154,0o376,0o377,0o312,0o122,0o154,0o303,0o131,0o154,0o72,0o360,0o147,0o335,0o226,(0x75bcd15-0O726746425),0o335,0o176,(0O334664274-0x37368B9),0o70,(0O347010110&0x463A71D),0o376,(0O57060516-0xbc614d),0o312,0o122,0o154,0o303,0o256,0o154,0o376,0o377,0o312,0o122,0o154,0o303,0o256,0o154,0o160,0o177,0o41,0o160,0o177,0o30,(0O334664274-0x37368B9),0o41,0o220,0o177,0o21,0o50,0o175,(0O57060516-0xbc614d),0o40,(0x75bcd15-0O726746425),0o355,0o260,0o311,0o305,0o315,0o266,0o162,0o301,0o303,0o163,0o153,0o72,0o213,0o172,0o37,0o70,0o341,0o30,0o344,0o260,0o177,0o52,0o327,0o162,0o345,0o21,0o110,0o175,(0O57060516-0xbc614d),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o305,0o355,0o260,0o301,0o341,0o11,0o345,0o21,0o300,0o177,0o247,0o355,0o122,0o341,0o40,(0O334664274-0x37368B9),0o41,0o260,0o177,0o42,0o327,0o162,0o311,0o41,0o364,0o147,0o72,0o26,0o150,(1011010-0O3666474),(0x5E30A78-0O570605164),0o305,0o313,0o57,0o365,0o70,0o61,0o116,0o43,0o106,0o345,0o315,0o233,0o150,0o341,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o11,(1011010-0O3666474),(0x75bcd15-0O726746425),0o72,0o25,0o150,0o313,0o157,0o40,(0O334664274-0x37368B9),0o116,0o30,0o12,0o313,0o167,0o40,(0x5E30A78-0O570605164),0o16,(0O507646144^0x51F4C61),0o30,(15658734^0O73567354),0o16,(0x9D8DE4-0O47306735),0o345,0o315,0o271,0o150,0o341,0o76,0o51,0o327,0o43,0o43,0o361,0o301,0o20,0o312,0o311,(0O57060516-0xbc614d),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o11,0o361,0o301,0o20,0o301,0o311,0o21,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o41,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(1011010-0O3666474),(0O334664274-0x37368B9),0o305,0o325,0o315,0o265,(0O334664274-0x37368B9),0o45,0o321,0o301,0o20,0o366,0o311,0o345,0o355,0o113,0o360,0o147,0o315,0o233,0o150,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o76,0o164,0o327,0o76,(0O347010110&0x463A71D),0o327,(1011010-0O3666474),0o100,0o315,0o64,0o151,0o76,0o170,(1011010-0O3666474),(0O347010110&0x463A71D),0o305,0o365,0o327,0o315,0o72,0o167,0o76,(0O347010110&0x463A71D),0o327,0o361,0o74,0o301,0o20,0o362,0o76,0o40,0o327,0o76,(0O347010110&0x463A71D),0o327,0o315,0o257,0o167,0o341,0o53,0o176,0o327,0o311,0o61,0o176,0o135,0o315,(0x75bcd15-0O726746425),0o200,0o303,0o12,0o157,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),(15658734^0O73567354),0o305,0o41,0o350,(0x75bcd15-0O726746425),0o21,0o40,(0x75bcd15-0O726746425),0o315,0o265,(0O334664274-0x37368B9),0o41,0o30,(0O57060516-0xbc614d),0o21,0o40,(0x75bcd15-0O726746425),0o315,0o265,(0O334664274-0x37368B9),0o301,0o20,0o352,0o311,0o41,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o21,0o11,(0x75bcd15-0O726746425),(1011010-0O3666474),0o25,0o305,0o325,0o345,0o315,0o265,(0O334664274-0x37368B9),0o341,0o321,0o23,(0O57060516-0xbc614d),0o30,(0x75bcd15-0O726746425),0o355,0o102,0o301,0o20,0o357,0o311,0o257,0o335,0o226,(0x5E30A78-0O570605164),0o40,0o27,0o335,0o176,0o320,0o335,0o276,(0x75bcd15-0O726746425),0o70,(0x5E30A78-0O570605164),0o76,0o377,0o30,(15658734^0O73567354),0o76,(0O57060516-0xbc614d),0o335,0o167,(0O334664274-0x37368B9),0o62,0o24,0o150,0o303,0o104,0o164,0o335,0o176,0o321,0o335,0o276,(0O57060516-0xbc614d),0o70,(0x5E30A78-0O570605164),0o76,0o377,0o30,(15658734^0O73567354),0o76,(0O57060516-0xbc614d),0o335,0o167,(15658734^0O73567354),0o62,0o24,0o150,0o335,0o116,(0x75bcd15-0O726746425),0o335,0o106,(0O57060516-0xbc614d),0o171,0o376,0o377,0o50,0o74,0o376,0o37,0o50,0o70,0o170,0o335,0o226,(15658734^0O73567354),0o107,0o315,0o221,0o150,0o127,0o72,0o362,0o147,0o272,0o172,0o312,0o243,0o164,0o376,0o114,0o312,0o264,0o164,0o376,0o113,0o312,0o264,0o164,0o376,0o40,0o312,0o264,0o164,0o376,0o51,0o50,0o163,0o376,0o167,0o50,0o157,0o376,0o166,0o50,0o153,0o376,0o52,0o50,0o147,0o376,0o53,0o50,0o164,0o376,0o54,0o50,0o137,0o335,0o116,(0x75bcd15-0O726746425),0o335,0o106,(0O57060516-0xbc614d),0o171,0o335,0o226,(0O334664274-0x37368B9),0o117,0o376,0o377,0o40,(15658734^0O73567354),0o16,0o36,0o376,0o37,0o40,(15658734^0O73567354),0o16,(0x75bcd15-0O726746425),0o315,0o221,0o150,0o127,0o72,0o362,0o147,0o272,0o172,0o50,0o105,0o376,0o113,0o50,0o121,0o376,0o114,0o50,0o115,0o376,0o40,0o50,0o111,0o376,0o51,0o50,0o65,0o376,0o167,0o50,0o61,0o376,0o166,0o50,0o55,0o376,0o53,0o50,0o71,0o376,0o54,0o50,0o45,0o335,0o176,(0x5E30A78-0O570605164),0o376,(0x75bcd15-0O726746425),0o50,0o13,0o335,0o176,(15658734^0O73567354),0o57,0o74,0o335,0o167,(15658734^0O73567354),0o303,0o375,0o163,0o335,0o176,(0O334664274-0x37368B9),0o57,0o74,0o335,0o167,(0O334664274-0x37368B9),0o303,0o375,0o163,0o365,0o257,0o335,0o167,(0x5E30A78-0O570605164),0o305,0o30,0o43,0o365,0o76,(0O57060516-0xbc614d),0o335,0o167,(0x5E30A78-0O570605164),0o305,0o30,0o32,0o365,0o257,0o335,0o167,(0x5E30A78-0O570605164),0o30,(1011010-0O3666474),0o365,0o76,(0O57060516-0xbc614d),0o335,0o167,(0x5E30A78-0O570605164),0o305,0o315,0o233,0o150,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o76,0o53,0o327,0o321,0o335,0o116,(0x75bcd15-0O726746425),0o335,0o106,(0O57060516-0xbc614d),0o335,0o163,(0x75bcd15-0O726746425),0o335,0o162,(0O57060516-0xbc614d),0o315,0o233,0o150,0o335,0o176,(0O507646144^0x51F4C61),0o365,0o376,0o54,0o314,0o357,0o170,0o376,0o52,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(15658734^0O73567354),(0x75bcd15-0O726746425),0o30,0o70,0o376,0o113,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o30,0o57,0o376,0o114,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o30,0o46,0o376,0o51,0o50,(0O347010110&0x463A71D),0o376,0o167,0o50,(0x5E30A78-0O570605164),0o376,0o166,0o40,0o23,0o361,0o30,0o34,0o315,0o253,0o136,0o315,0o337,0o157,0o303,0o341,0o167,0o335,0o116,(0x9D8DE4-0O47306735),(1011010-0O3666474),(0x75bcd15-0O726746425),0o30,(0x9D8DE4-0O47306735),0o361,0o76,0o40,0o365,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o361,0o327,0o355,0o113,0o360,0o147,0o315,0o163,0o153,0o361,0o376,0o51,0o312,0o60,0o162,0o376,0o167,0o312,0o60,0o162,0o376,0o166,0o312,0o60,0o162,0o376,0o53,0o312,0o60,0o162,0o127,0o72,0o362,0o147,0o272,0o172,0o40,(15658734^0O73567354),0o76,0o40,0o335,0o167,(0O507646144^0x51F4C61),0o335,0o156,(0x75bcd15-0O726746425),0o335,0o146,(0O57060516-0xbc614d),0o335,0o116,0o320,0o335,0o106,0o321,0o247,0o355,0o102,0o314,0o211,0o161,0o257,0o62,0o24,0o150,0o311,0o72,0o171,0o134,0o376,(0O347010110&0x463A71D),0o70,0o30,0o376,0o11,0o60,0o24,0o72,0o170,0o134,0o376,0o300,0o70,0o15,0o72,0o25,0o150,0o313,0o167,0o40,0o11,0o313,0o367,0o62,0o25,0o150,0o311,0o72,0o25,0o150,0o313,0o267,0o62,0o25,0o150,0o311,0o315,0o136,0o153,0o335,0o41,0o364,0o147,(1011010-0O3666474),(0x5E30A78-0O570605164),0o305,0o355,0o113,0o360,0o147,0o335,0o156,(0x75bcd15-0O726746425),0o335,0o146,(0O57060516-0xbc614d),0o247,0o355,0o102,0o40,0o30,0o335,0o176,(0O507646144^0x51F4C61),0o376,0o113,0o40,0o14,0o72,0o26,0o150,0o313,0o177,0o40,(0O507646144^0x51F4C61),0o313,0o377,0o62,0o26,0o150,0o76,0o40,0o335,0o167,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o335,0o11,0o301,0o20,0o320,0o72,0o26,0o150,0o313,0o177,0o310,0o313,0o277,0o62,0o26,0o150,0o303,0o260,0o156,0o152,(1011010-0O3666474),0o24,0o46,(0O334664274-0x37368B9),0o47,0o76,(0x5E30A78-0O570605164),0o35,0o152,(1011010-0O3666474),0o24,0o46,(0O334664274-0x37368B9),0o151,0o76,(0x5E30A78-0O570605164),0o72,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o14,(1011010-0O3666474),0o25,0o367,(15658734^0O73567354),0o52,0o377,(0O334664274-0x37368B9),0o37,0o14,(1011010-0O3666474),0o25,0o367,(15658734^0O73567354),0o157,0o377,(0O334664274-0x37368B9),0o76,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o152,(1011010-0O3666474),0o24,0o46,(0O334664274-0x37368B9),0o47,0o76,(0x5E30A78-0O570605164),0o35,0o152,(1011010-0O3666474),0o24,0o46,(0O334664274-0x37368B9),0o151,0o76,(0x5E30A78-0O570605164),0o72,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o307,(0x5E30A78-0O570605164),0o32,0o200,(0x5E30A78-0O570605164),0o34,0o76,(0x5E30A78-0O570605164),0o35,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o76,(0x5E30A78-0O570605164),0o35,0o377,(0O334664274-0x37368B9),0o37,0o304,(0O334664274-0x37368B9),0o41,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o304,(0O334664274-0x37368B9),0o41,0o214,(0O334664274-0x37368B9),0o43,0o130,(0O334664274-0x37368B9),0o45,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o46,(0O334664274-0x37368B9),0o151,0o335,0o41,0o334,0o165,(1011010-0O3666474),0o42,0o305,0o335,0o156,(0x75bcd15-0O726746425),0o335,0o146,(0O57060516-0xbc614d),0o335,0o136,(15658734^0O73567354),0o26,(0x75bcd15-0O726746425),0o335,0o345,0o174,0o265,0o40,(1011010-0O3666474),0o103,0o315,0o64,0o151,0o30,(0O334664274-0x37368B9),0o315,0o265,(0O334664274-0x37368B9),0o301,(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o305,0o41,0o30,0o166,0o247,0o355,0o102,0o170,0o70,(0O507646144^0x51F4C61),(1011010-0O3666474),0o15,0o315,0o64,0o151,0o376,0o171,0o324,0o215,0o172,0o335,0o341,0o301,0o20,0o310,0o311,0o252,0o315,0o360,0o155,0o72,0o25,0o150,0o313,0o157,0o300,0o335,0o116,(0x75bcd15-0O726746425),0o335,0o106,(0O57060516-0xbc614d),0o170,0o376,0o13,0o300,0o303,0o101,0o172,(0O57060516-0xbc614d),0o15,0o15,0o315,0o233,0o150,(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o21,0o303,0o166,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o74,0o40,0o76,0o65,0o62,(0O347010110&0x463A71D),0o134,0o311,(0O57060516-0xbc614d),0o15,0o15,0o315,0o233,0o150,(1011010-0O3666474),(1011010-0O3666474),0o305,0o76,0o40,0o327,0o301,0o20,0o371,0o311,0o125,0o126,0o127,0o130,0o131,0o41,0o32,0o167,0o72,0o26,0o150,0o376,(0x75bcd15-0O726746425),0o302,0o215,0o171,0o72,0o25,0o150,0o313,0o157,0o300,0o335,0o52,0o311,0o166,0o335,0o156,(0x75bcd15-0O726746425),0o335,0o146,(0O57060516-0xbc614d),0o26,(0x75bcd15-0O726746425),0o335,0o136,(15658734^0O73567354),0o335,0o43,0o335,0o43,0o335,0o43,0o335,0o345,0o315,0o265,(0O334664274-0x37368B9),0o301,0o41,0o70,0o167,0o247,0o355,0o102,0o40,(0x9D8DE4-0O47306735),0o41,(0O347010110&0x463A71D),0o167,0o42,0o311,0o166,0o311,0o355,0o103,0o311,0o166,0o311,0o46,(0O334664274-0x37368B9),(15658734^0O73567354),0o313,(15658734^0O73567354),(15658734^0O73567354),0o172,(15658734^0O73567354),(0O334664274-0x37368B9),0o61,(15658734^0O73567354),(0O334664274-0x37368B9),0o360,(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o270,(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o204,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),0o126,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),0o55,(0O57060516-0xbc614d),(1011010-0O3666474),0o126,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),0o204,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),0o270,(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o360,(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o61,(15658734^0O73567354),(0O334664274-0x37368B9),0o172,(15658734^0O73567354),(0O334664274-0x37368B9),0o313,(15658734^0O73567354),(15658734^0O73567354),0o157,0o167,0o335,0o52,0o70,0o167,(1011010-0O3666474),(0x5E30A78-0O570605164),0o305,0o335,0o156,(0x75bcd15-0O726746425),0o335,0o146,(0O57060516-0xbc614d),0o21,0o25,(0x75bcd15-0O726746425),0o335,0o43,0o335,0o43,0o335,0o345,0o315,0o265,(0O334664274-0x37368B9),0o335,0o341,0o301,0o20,0o350,0o335,0o345,0o321,0o41,0o257,0o167,0o247,0o355,0o122,0o40,(0x9D8DE4-0O47306735),0o41,0o157,0o167,0o42,0o70,0o167,0o311,0o355,0o123,0o70,0o167,0o311,0o20,(15658734^0O73567354),0o354,(0O57060516-0xbc614d),0o342,(0O57060516-0xbc614d),0o373,(0O57060516-0xbc614d),0o61,(15658734^0O73567354),0o154,(15658734^0O73567354),0o215,(15658734^0O73567354),0o177,(15658734^0O73567354),0o124,(15658734^0O73567354),0o54,(15658734^0O73567354),0o40,(15658734^0O73567354),0o75,(15658734^0O73567354),0o171,(15658734^0O73567354),0o274,(15658734^0O73567354),0o341,(15658734^0O73567354),0o321,(15658734^0O73567354),0o241,(15658734^0O73567354),0o164,(15658734^0O73567354),0o147,(15658734^0O73567354),0o207,(15658734^0O73567354),0o313,(15658734^0O73567354),0o25,(0O334664274-0x37368B9),0o76,(0O334664274-0x37368B9),0o55,(0O334664274-0x37368B9),0o367,(15658734^0O73567354),0o304,(15658734^0O73567354),0o266,(15658734^0O73567354),0o332,(15658734^0O73567354),0o46,(0O334664274-0x37368B9),0o172,(0O334664274-0x37368B9),0o250,(0O334664274-0x37368B9),0o225,(0O334664274-0x37368B9),(1011010-0O3666474),(15658734^0O73567354),0o305,0o21,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o41,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(1011010-0O3666474),(0O347010110&0x463A71D),0o305,0o325,0o345,0o315,0o265,(0O334664274-0x37368B9),0o341,0o321,0o23,(0O57060516-0xbc614d),0o140,(0x75bcd15-0O726746425),0o355,0o102,0o301,0o20,0o357,(1011010-0O3666474),(0O347010110&0x463A71D),0o305,0o325,0o345,0o315,0o265,(0O334664274-0x37368B9),0o341,0o321,0o33,(0O57060516-0xbc614d),0o140,(0x75bcd15-0O726746425),0o11,0o301,0o20,0o360,0o301,0o20,0o321,0o311,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o11,(1011010-0O3666474),(0x5E30A78-0O570605164),0o305,0o345,0o355,0o113,0o360,0o147,0o315,0o233,0o150,(1011010-0O3666474),(0x75bcd15-0O726746425),0o341,0o345,0o116,0o315,0o271,0o150,0o76,0o51,0o327,0o315,0o331,0o162,(1011010-0O3666474),0o100,0o315,0o64,0o151,0o341,0o301,0o20,0o340,0o311,0o72,0o30,0o150,0o41,0o341,0o132,0o275,0o310,(1011010-0O3666474),0o106,0o160,0o43,0o43,0o30,0o367,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o175,0o376,0o24,0o40,(0x5E30A78-0O570605164),0o76,0o72,0o30,0o22,0o376,0o50,0o40,(0x5E30A78-0O570605164),0o76,0o73,0o30,0o12,0o376,0o120,0o40,(0x5E30A78-0O570605164),0o76,0o74,0o30,(15658734^0O73567354),0o76,0o75,0o365,0o355,0o113,0o360,0o147,0o315,0o233,0o150,0o305,(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o301,0o361,0o327,0o14,0o315,0o221,0o150,0o62,0o153,0o170,0o76,0o76,0o327,0o311,0o76,(1011010-0O3666474),0o62,0o170,0o134,0o72,0o33,0o150,0o376,0o11,0o312,0o25,0o153,0o376,0o17,0o312,(0O334664274-0x37368B9),0o153,0o376,0o20,0o312,0o25,0o153,0o303,0o244,0o156,0o146,(0O57060516-0xbc614d),0o17,0o15,0o315,0o233,0o150,(1011010-0O3666474),(0x75bcd15-0O726746425),0o72,0o244,0o170,0o117,0o315,0o271,0o150,0o76,0o54,0o327,0o311,(0O57060516-0xbc614d),0o17,0o15,0o315,0o233,0o150,0o76,0o40,0o327,0o311,0o330,0o176,(15658734^0O73567354),0o340,0o176,(15658734^0O73567354),0o350,0o176,(1011010-0O3666474),0o360,0o176,(15658734^0O73567354),0o370,0o176,(0x5E30A78-0O570605164),0o230,0o176,(0O507646144^0x51F4C61),0o240,0o176,(1011010-0O3666474),0o320,0o176,(0O507646144^0x51F4C61),0o214,0o170,0o361,(15658734^0O73567354),0o315,0o276,0o171,0o335,0o52,0o241,0o170,0o335,0o345,0o341,0o21,0o241,0o170,0o247,0o355,0o122,0o50,0o36,0o335,0o156,(0x75bcd15-0O726746425),0o335,0o146,(0O57060516-0xbc614d),0o21,0o140,0o175,(0O57060516-0xbc614d),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o355,0o260,0o335,0o176,(15658734^0O73567354),0o62,0o244,0o170,0o335,0o43,0o335,0o43,0o335,0o43,0o335,0o42,0o241,0o170,0o72,0o243,0o170,0o74,0o62,0o243,0o170,(1011010-0O3666474),(0x75bcd15-0O726746425),0o376,0o360,0o330,0o46,0o132,0o157,0o160,0o74,0o30,0o366,0o341,0o41,0o244,0o155,0o345,0o30,(0O507646144^0x51F4C61),0o341,0o41,0o50,0o165,0o345,0o72,0o244,0o170,(1011010-0O3666474),(0x75bcd15-0O726746425),0o117,0o311,0o315,0o136,0o153,0o52,0o241,0o170,0o176,0o376,0o340,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o12,(0x75bcd15-0O726746425),0o30,0o71,0o376,0o350,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o36,(0x75bcd15-0O726746425),0o30,0o60,0o376,0o360,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o62,(0x75bcd15-0O726746425),0o30,0o47,0o376,0o370,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o106,(0x75bcd15-0O726746425),0o30,0o36,0o376,0o230,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o144,(0x75bcd15-0O726746425),0o30,0o25,0o376,0o240,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o310,(0x75bcd15-0O726746425),0o30,0o14,0o376,0o320,0o40,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o54,(0O57060516-0xbc614d),0o30,(0O334664274-0x37368B9),(0O57060516-0xbc614d),0o364,(0O57060516-0xbc614d),0o315,0o200,0o136,0o52,0o31,0o150,0o11,0o42,0o31,0o150,0o345,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o233,0o150,0o341,0o315,0o304,0o150,0o315,0o135,0o171,0o311,0o355,0o133,0o36,0o150,0o52,0o31,0o150,0o345,0o247,0o355,0o122,0o341,0o330,0o42,0o36,0o150,0o315,0o276,0o171,0o311,0o41,(0x75bcd15-0O726746425),0o40,0o21,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(1011010-0O3666474),(0O507646144^0x51F4C61),0o305,0o325,0o345,0o315,0o265,(0O334664274-0x37368B9),0o341,0o321,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o247,0o355,0o102,0o301,0o20,0o357,0o311,0o46,0o167,0o335,0o52,0o213,0o171,0o335,0o156,(0x75bcd15-0O726746425),0o335,0o146,(0O57060516-0xbc614d),0o335,0o136,(15658734^0O73567354),0o26,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o40,(0x75bcd15-0O726746425),0o247,0o355,0o102,0o34,0o34,0o335,0o345,0o315,0o265,(0O334664274-0x37368B9),0o301,(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o41,0o70,0o167,0o247,0o355,0o102,0o305,0o341,0o40,(0O334664274-0x37368B9),0o41,0o40,0o167,0o42,0o213,0o171,0o311,(0O57060516-0xbc614d),0o31,(0x75bcd15-0O726746425),0o315,0o233,0o150,0o52,0o36,0o150,0o315,0o304,0o150,0o311,0o307,(0x5E30A78-0O570605164),0o64,0o307,(0x5E30A78-0O570605164),0o64,0o307,(0x5E30A78-0O570605164),0o64,0o264,(0O507646144^0x51F4C61),0o26,0o152,(1011010-0O3666474),0o24,0o307,(0x5E30A78-0O570605164),0o64,0o307,(0x5E30A78-0O570605164),0o64,0o304,(0O334664274-0x37368B9),0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o307,(0x5E30A78-0O570605164),0o64,0o307,(0x5E30A78-0O570605164),0o64,0o307,(0x5E30A78-0O570605164),0o64,0o264,(0O507646144^0x51F4C61),0o26,0o152,(1011010-0O3666474),0o24,0o307,(0x5E30A78-0O570605164),0o64,0o307,(0x5E30A78-0O570605164),0o64,0o264,(0O507646144^0x51F4C61),0o54,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o307,(0x5E30A78-0O570605164),0o64,0o307,(0x5E30A78-0O570605164),0o64,0o307,(0x5E30A78-0O570605164),0o64,0o264,(0O507646144^0x51F4C61),0o26,0o152,(1011010-0O3666474),0o24,0o307,(0x5E30A78-0O570605164),0o64,0o307,(0x5E30A78-0O570605164),0o64,0o377,(0O334664274-0x37368B9),0o76,0o304,(0O334664274-0x37368B9),0o102,0o214,(0O334664274-0x37368B9),0o106,0o130,(0O334664274-0x37368B9),0o112,0o214,(0O334664274-0x37368B9),0o106,0o304,(0O334664274-0x37368B9),0o102,0o377,(0O334664274-0x37368B9),0o76,0o307,(0x5E30A78-0O570605164),0o64,0o377,(0O334664274-0x37368B9),0o76,0o307,(0x5E30A78-0O570605164),0o64,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o335,0o41,0o313,0o171,(1011010-0O3666474),0o44,0o315,0o110,0o166,0o311,0o171,0o376,(0O334664274-0x37368B9),0o70,(0O334664274-0x37368B9),0o376,0o34,0o330,0o72,0o201,0o166,0o17,0o330,0o301,0o311,0o41,0o201,0o166,0o313,0o16,0o315,0o322,0o173,0o311,0o72,(0O347010110&0x463A71D),0o134,0o376,0o123,0o302,0o217,0o153,0o41,0o125,0o151,0o42,0o326,0o151,0o76,0o330,0o62,0o120,0o160,0o301,0o301,0o41,0o252,0o135,0o345,0o311,0o76,0o377,0o62,0o212,0o172,0o41,0o40,0o16,0o42,0o213,0o172,0o315,0o67,0o172,0o76,(0O57060516-0xbc614d),0o62,0o212,0o172,0o315,0o67,0o172,0o311,(0O57060516-0xbc614d),0o40,0o16,0o315,0o317,0o162,0o315,0o331,0o162,0o72,0o212,0o172,0o376,(0O57060516-0xbc614d),0o50,0o130,0o355,0o113,0o213,0o172,0o201,0o117,0o355,0o103,0o213,0o172,0o376,0o37,0o60,0o22,0o376,0o310,0o60,0o16,0o305,0o315,0o233,0o150,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o76,0o45,0o327,0o301,0o14,0o171,0o376,0o37,0o60,0o12,0o376,0o310,0o60,(1011010-0O3666474),0o315,0o233,0o150,0o76,0o40,0o327,0o14,0o14,0o171,0o376,0o37,0o60,0o22,0o376,0o310,0o60,0o16,0o305,0o315,0o233,0o150,(0O57060516-0xbc614d),(15658734^0O73567354),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o76,0o51,0o327,0o301,0o14,0o171,0o376,0o37,0o320,0o376,0o310,0o320,0o315,0o233,0o150,0o76,0o40,0o327,0o311,0o315,0o216,0o173,0o355,0o113,0o213,0o172,0o72,0o212,0o172,0o201,0o117,0o355,0o103,0o213,0o172,0o376,0o37,0o60,0o22,0o376,0o310,0o60,0o16,0o315,0o233,0o150,0o76,0o40,0o327,(0O507646144^0x51F4C61),0o315,0o233,0o150,0o76,0o40,0o327,(0x5E30A78-0O570605164),0o14,0o171,0o376,0o37,0o60,0o41,0o376,0o310,0o60,0o35,0o305,0o315,0o233,0o150,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o76,0o101,0o327,0o301,0o305,(0O507646144^0x51F4C61),0o315,0o233,0o150,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o76,0o77,0o327,0o301,0o14,0o171,0o376,0o37,0o60,0o41,0o376,0o310,0o60,0o35,0o305,0o315,0o233,0o150,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o76,0o102,0o327,0o301,0o305,(0O507646144^0x51F4C61),0o315,0o233,0o150,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o76,0o100,0o327,0o301,0o14,0o14,0o171,0o376,0o37,0o60,0o12,0o376,0o310,0o60,(1011010-0O3666474),0o315,0o233,0o150,0o76,0o40,0o327,0o14,0o171,0o376,0o37,0o320,0o376,0o310,0o320,0o315,0o233,0o150,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o76,0o51,0o327,0o311,0o70,0o176,0o52,0o214,0o173,0o345,0o21,0o370,0o175,(0O57060516-0xbc614d),0o40,(0x75bcd15-0O726746425),0o305,0o355,0o260,0o301,0o341,0o11,0o345,0o21,0o130,0o176,0o247,0o355,0o122,0o341,0o40,(0O334664274-0x37368B9),0o41,0o370,0o175,0o42,0o214,0o173,0o311,0o72,0o25,0o150,0o313,0o157,0o310,0o72,0o26,0o150,0o376,(0x75bcd15-0O726746425),0o300,0o41,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o21,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(1011010-0O3666474),(0x5E30A78-0O570605164),0o305,0o325,0o345,0o315,0o265,(0O334664274-0x37368B9),0o341,0o321,0o44,0o33,0o301,0o20,0o363,0o311,(0x75bcd15-0O726746425),0o52,0o31,0o150,0o21,0o350,(0O334664274-0x37368B9),0o247,0o355,0o122,0o60,(0O507646144^0x51F4C61),0o257,0o62,0o321,0o173,0o311,0o72,0o321,0o173,0o376,(0x75bcd15-0O726746425),0o300,0o57,0o62,0o321,0o173,0o72,0o30,0o150,0o74,0o74,0o62,0o30,0o150,0o315,(0O347010110&0x463A71D),0o170,0o76,(0O57060516-0xbc614d),0o62,0o236,0o163,0o315,0o231,0o163,0o76,(0x75bcd15-0O726746425),0o62,0o236,0o163,0o311,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),(0x5E30A78-0O570605164),0o305,(0O57060516-0xbc614d),0o337,0o132,0o41,(0x75bcd15-0O726746425),0o130,0o305,0o345,0o176,0o376,0o101,0o40,(0O334664274-0x37368B9),0o76,(0x9D8DE4-0O47306735),0o167,0o43,0o345,0o247,0o355,0o102,0o341,0o40,0o360,(1011010-0O3666474),0o100,0o315,0o64,0o151,0o341,0o301,0o176,0o376,(0x9D8DE4-0O47306735),0o40,(0O334664274-0x37368B9),0o76,0o101,0o167,0o43,0o345,0o247,0o355,0o102,0o341,0o40,0o360,(1011010-0O3666474),0o100,0o315,0o64,0o151,0o301,0o20,0o310,0o311,0o72,0o26,0o150,0o376,(0x75bcd15-0O726746425),0o40,(1011010-0O3666474),0o76,0o377,0o62,0o66,0o151,0o311,(1011010-0O3666474),(0x5E30A78-0O570605164),0o26,0o377,0o305,0o313,0o57,0o365,0o60,(0x9D8DE4-0O47306735),0o172,0o326,0o62,0o127,0o62,0o66,0o151,0o361,0o301,0o20,0o357,0o311,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o315,0o233,0o150,(1011010-0O3666474),0o30,0o315,0o104,0o16,0o311,0o257,0o62,0o153,0o134,0o62,0o226,0o136,0o62,0o171,0o134,0o76,0o311,0o62,0o120,0o160,0o76,0o360,0o62,0o243,0o170,0o41,0o211,0o170,0o42,0o241,0o170,0o315,0o254,0o160,0o315,0o145,0o174,0o315,0o40,0o150,0o315,(0O347010110&0x463A71D),0o170,0o315,0o245,0o170,0o41,0o121,0o170,0o42,0o326,0o151,0o315,0o134,0o140,0o41,0o115,0o137,(1011010-0O3666474),0o345,0o315,0o150,0o141,0o315,0o246,0o141,0o315,0o145,0o174,0o41,0o166,0o140,(1011010-0O3666474),0o170,0o315,0o150,0o141,0o41,0o227,0o134,0o21,0o11,(15658734^0O73567354),(1011010-0O3666474),(0O507646144^0x51F4C61),0o305,0o325,0o301,0o305,0o345,0o315,0o233,0o150,(0O57060516-0xbc614d),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o315,0o271,0o150,0o341,(1011010-0O3666474),(0O334664274-0x37368B9),0o176,0o327,0o43,0o20,0o373,0o136,0o43,0o126,0o43,0o345,0o353,(1011010-0O3666474),(0x5E30A78-0O570605164),0o76,0o40,0o327,0o20,0o373,0o315,0o314,0o150,0o76,0o60,0o327,0o341,0o321,0o24,0o24,0o301,0o20,0o320,0o41,0o351,0o136,0o315,0o330,0o136,0o303,0o161,0o174,0o315,0o145,0o174,0o303,0o270,0o160,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o20,0o20,0o20,(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x5E30A78-0O570605164),0o74,(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o40,0o74,(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),0o74,(0x75bcd15-0O726746425),0o74,0o176,0o377,0o377,0o17,0o377,0o176,0o74,0o74,0o176,0o377,0o377,0o357,0o357,0o156,0o54,0o64,0o166,0o367,0o367,0o377,0o377,0o176,0o74,0o74,0o176,0o377,0o377,0o360,0o377,0o176,0o74,0o74,0o176,0o223,0o223,0o377,0o333,0o222,0o222,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o347,0o245,0o347,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o20,0o50,0o104,0o356,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o356,0o52,0o352,0o212,0o212,0o356,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o356,0o52,0o352,0o52,0o52,0o356,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o356,0o212,0o352,0o52,0o52,0o356,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o106,0o112,0o122,0o142,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o50,(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o76,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,(15658734^0O73567354),0o74,0o100,0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o14,(15658734^0O73567354),0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o30,0o50,0o110,0o176,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,0o100,0o174,(15658734^0O73567354),0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o100,0o174,0o102,0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,(15658734^0O73567354),(0x5E30A78-0O570605164),(0O347010110&0x463A71D),0o20,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o74,0o102,0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o102,0o76,(15658734^0O73567354),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o44,(0x5E30A78-0O570605164),0o74,0o40,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o50,0o50,0o74,(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o44,0o74,0o44,0o44,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o136,0o120,0o136,0o122,0o122,0o136,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o347,0o245,0o245,0o245,0o245,0o347,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o37,0o77,0o177,0o177,0o377,0o377,0o377,0o340,0o370,0o374,0o376,0o376,0o377,0o377,0o377,0o374,0o374,0o377,0o177,0o177,0o77,0o37,(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o376,0o376,0o374,0o370,0o340,(0x9D8DE4-0O47306735),0o37,0o77,0o177,0o177,0o377,0o377,0o377,0o340,0o370,0o374,0o376,0o376,0o377,0o377,0o377,0o374,0o374,0o377,0o177,0o177,0o77,0o37,(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o376,0o376,0o374,0o370,0o340,(0x9D8DE4-0O47306735),0o37,0o77,0o177,0o177,0o377,0o377,0o374,0o340,0o370,0o376,0o374,0o360,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o374,0o377,0o377,0o177,0o177,0o77,0o37,(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o360,0o374,0o376,0o370,0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o30,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o74,0o377,0o377,0o377,0o377,0o74,0o74,(0x75bcd15-0O726746425),0o74,(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o134,0o124,0o124,0o124,0o124,0o134,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o60,0o176,0o376,0o176,0o60,0o20,(0x75bcd15-0O726746425),0o20,0o30,0o374,0o376,0o374,0o30,0o20,(0x75bcd15-0O726746425),0o20,0o70,0o174,0o376,0o70,0o70,0o70,(0x75bcd15-0O726746425),0o70,0o70,0o70,0o376,0o174,0o70,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o366,0o37,0o37,0o37,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o70,0o174,0o174,0o376,0o376,0o20,(0x75bcd15-0O726746425),0o174,0o102,0o102,0o174,0o104,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,0o100,0o174,0o100,0o100,0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o102,0o102,0o176,0o102,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o170,0o104,0o102,0o102,0o104,0o170,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o202,0o104,0o50,0o20,0o20,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,0o102,0o176,0o20,0o30,0o20,0o34,(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o20,0o50,0o104,0o356,0o104,(0x75bcd15-0O726746425),0o20,0o124,0o252,0o326,0o252,0o326,0o154,0o70,(0O57060516-0xbc614d),0o72,0o174,0o376,0o376,0o376,0o174,0o70,0o20,0o20,0o174,0o376,0o376,0o376,0o174,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o70,0o174,0o376,0o174,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,(0x75bcd15-0O726746425),0o146,0o146,0o146,0o146,0o146,0o146,0o146,0o146,(0x75bcd15-0O726746425),0o37,0o77,0o160,0o140,0o143,0o147,0o146,(0x75bcd15-0O726746425),0o370,0o374,0o16,(1011010-0O3666474),0o306,0o346,0o146,0o146,0o147,0o143,0o140,0o160,0o77,0o37,(0x75bcd15-0O726746425),0o146,0o346,0o306,(1011010-0O3666474),0o16,0o374,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o177,0o140,0o140,0o177,0o77,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o374,0o376,(1011010-0O3666474),(1011010-0O3666474),0o376,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o176,0o146,0o146,0o146,0o146,0o146,0o146,0o146,0o146,0o146,0o146,0o176,0o74,(0x75bcd15-0O726746425),0o146,0o347,0o347,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o347,0o347,0o146,0o146,0o147,0o147,0o140,0o140,0o147,0o147,0o146,0o146,0o346,0o346,(1011010-0O3666474),(1011010-0O3666474),0o346,0o346,0o146,0o74,0o376,0o77,0o17,0o17,0o77,0o376,0o74,0o74,0o176,0o377,0o377,0o347,0o347,0o102,0o102,0o102,0o102,0o347,0o347,0o377,0o377,0o176,0o74,0o74,0o177,0o374,0o360,0o360,0o374,0o177,0o74,0o74,0o176,0o377,0o377,0o17,0o377,0o176,0o74,0o74,0o176,0o377,0o377,0o357,0o357,0o156,0o54,0o64,0o166,0o367,0o367,0o377,0o377,0o176,0o74,0o74,0o176,0o377,0o377,0o360,0o377,0o176,0o74,0o74,0o176,0o311,0o311,0o377,0o333,0o111,0o111,0o74,0o176,0o223,0o223,0o377,0o333,0o222,0o222,(0x75bcd15-0O726746425),0o102,0o347,0o347,0o377,0o377,0o176,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o201,0o303,0o377,0o377,0o176,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o176,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o377,0o176,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o74,0o176,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o74,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o30,0o201,0o102,0o44,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o44,0o102,0o201,0o326],"jet-set-willy":[0o132,0o130,0o124,0o141,0o160,0o145,0o41,0o32,(0O57060516-0xbc614d),0o12,0o60,0o34,0o103,0o162,0o145,0o141,0o164,0o145,0o144,0o40,0o167,0o151,0o164,0o150,0o40,0o122,0o141,0o155,0o163,0o157,0o146,0o164,0o40,0o115,0o141,0o153,0o145,0o124,0o132,0o130,0o20,(0O57060516-0xbc614d),(0O334664274-0x37368B9),0o23,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o112,0o123,0o127,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o104,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,(0x5E30A78-0O570605164),0o156,0o20,0o131,(0O334664274-0x37368B9),0o106,(0x5E30A78-0O570605164),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x5E30A78-0O570605164),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o24,(0O57060516-0xbc614d),0o21,(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),0o331,0o62,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o72,0o332,0o62,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o72,0o347,0o62,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o72,0o373,0o72,0o375,0o63,0o62,0o67,0o66,0o70,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o72,0o357,0o42,0o42,0o15,0o35,0o20,0o13,(0O334664274-0x37368B9),0o23,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o346,0o252,0o353,0o127,0o111,0o114,0o114,0o131,0o40,0o40,0o205,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o205,(0x75bcd15-0O726746425),0o341,0o20,0o124,(0O334664274-0x37368B9),0o207,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o32,(0x75bcd15-0O726746425),0o364,0o260,0o42,0o62,0o63,0o67,0o70,0o65,0o42,0o54,0o303,0o247,0o72,0o364,0o260,0o42,0o62,0o63,0o66,0o65,0o71,0o42,0o54,0o303,0o247,0o15,0o377,(15658734^0O73567354),0o11,(0x75bcd15-0O726746425),0o354,0o260,0o42,0o71,0o71,0o71,0o66,0o42,0o15,0o47,0o13,0o44,(0x75bcd15-0O726746425),0o364,0o260,0o42,0o62,0o63,0o67,0o70,0o65,0o42,0o54,0o260,0o42,0o62,0o65,0o65,0o42,0o72,0o370,0o42,0o346,0o252,0o353,0o127,0o111,0o114,0o114,0o131,0o42,0o312,0o260,0o42,0o61,0o42,0o72,0o342,0o15,0o47,0o14,0o56,(0x75bcd15-0O726746425),0o364,0o62,0o63,0o65,0o67,0o60,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o22,0o134,(0x75bcd15-0O726746425),0o54,0o61,0o66,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o72,0o357,0o42,0o42,0o252,0o72,0o357,0o42,0o42,0o257,0o72,0o371,0o300,0o63,0o63,0o67,0o71,0o62,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o204,(0x75bcd15-0O726746425),0o15,0o26,0o20,0o375,(15658734^0O73567354),0o23,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o152,0o163,0o167,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),0o33,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o200,0o226,0o20,0o144,(0O334664274-0x37368B9),(15658734^0O73567354),0o33,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o100,0o20,(0x75bcd15-0O726746425),0o100,0o100,0o20,(0x75bcd15-0O726746425),0o102,(0O347010110&0x463A71D),0o100,0o100,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o100,0o100,(0O347010110&0x463A71D),0o102,0o142,0o100,0o102,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),0o360,0o314,0o102,0o100,0o20,(0x75bcd15-0O726746425),0o102,0o100,0o20,(0x75bcd15-0O726746425),0o132,(0O347010110&0x463A71D),0o100,0o100,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o100,0o102,(0O347010110&0x463A71D),0o102,0o106,0o100,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o314,0o60,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o174,0o20,(0x75bcd15-0O726746425),0o74,0o174,0o20,(0x75bcd15-0O726746425),0o102,(0O347010110&0x463A71D),0o100,0o100,0o50,(0x75bcd15-0O726746425),0o174,0o74,0o74,0o102,(0x75bcd15-0O726746425),0o102,0o174,0o74,(0O347010110&0x463A71D),0o100,0o122,0o174,0o102,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),0o360,0o314,0o102,0o100,0o20,(0x75bcd15-0O726746425),0o102,0o100,0o20,(0x75bcd15-0O726746425),0o132,(0O347010110&0x463A71D),0o100,0o100,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o100,0o102,(0O347010110&0x463A71D),0o102,0o106,0o100,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o314,0o60,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,0o306,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o306,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),0o363,(0O334664274-0x37368B9),(15658734^0O73567354),0o174,0o20,(0x75bcd15-0O726746425),0o74,0o174,0o20,(0x75bcd15-0O726746425),0o102,(0O347010110&0x463A71D),0o100,0o100,0o50,(0x75bcd15-0O726746425),0o102,0o102,0o102,0o146,(0x75bcd15-0O726746425),0o102,0o174,0o74,(0O347010110&0x463A71D),0o100,0o122,0o174,0o102,(0x75bcd15-0O726746425),0o314,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o176,0o20,(0x75bcd15-0O726746425),0o74,0o176,0o20,(0x75bcd15-0O726746425),0o44,0o76,0o176,0o176,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o170,0o176,0o74,0o76,0o74,0o102,0o176,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o314,0o60,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o231,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,0o225,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o176,0o376,(0x75bcd15-0O726746425),0o74,0o176,0o376,(0x75bcd15-0O726746425),0o102,0o76,0o100,0o100,0o202,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o170,0o176,0o74,0o76,0o74,0o102,0o176,0o174,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),0o363,(0O334664274-0x37368B9),(15658734^0O73567354),0o174,0o20,(0x75bcd15-0O726746425),0o74,0o174,0o20,(0x75bcd15-0O726746425),0o102,(0O347010110&0x463A71D),0o100,0o100,0o50,(0x75bcd15-0O726746425),0o102,0o102,0o102,0o132,(0x75bcd15-0O726746425),0o102,0o174,0o74,(0O347010110&0x463A71D),0o100,0o122,0o174,0o102,(0x75bcd15-0O726746425),0o314,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o176,0o20,(0x75bcd15-0O726746425),0o74,0o176,0o20,(0x75bcd15-0O726746425),0o44,0o76,0o176,0o176,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o170,0o176,0o74,0o76,0o74,0o102,0o176,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o314,0o60,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o241,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,0o260,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o260,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o176,0o376,(0x75bcd15-0O726746425),0o74,0o176,0o376,(0x75bcd15-0O726746425),0o102,0o76,0o100,0o100,0o202,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o170,0o176,0o74,0o76,0o74,0o102,0o176,0o174,(0x75bcd15-0O726746425),0o300,0o300,0o303,(0O334664274-0x37368B9),0o102,0o100,0o20,(0x75bcd15-0O726746425),(15658734^0O73567354),0o100,0o20,(0x75bcd15-0O726746425),0o102,(0O347010110&0x463A71D),0o100,0o100,0o20,(0x75bcd15-0O726746425),0o174,0o102,0o102,0o102,(0x75bcd15-0O726746425),0o102,0o100,(15658734^0O73567354),(0O347010110&0x463A71D),0o116,0o112,0o100,0o174,(0x75bcd15-0O726746425),0o303,0o17,0o300,(0x75bcd15-0O726746425),0o74,0o176,0o20,(0x75bcd15-0O726746425),0o74,0o176,0o20,(0x75bcd15-0O726746425),0o44,0o76,0o176,0o176,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o170,0o176,0o74,0o76,0o74,0o102,0o176,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o314,0o60,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o241,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,0o66,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o66,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o176,0o376,(0x75bcd15-0O726746425),0o74,0o176,0o376,(0x75bcd15-0O726746425),0o102,0o76,0o100,0o100,0o202,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o170,0o176,0o74,0o76,0o74,0o102,0o176,0o174,(0x75bcd15-0O726746425),0o300,0o300,0o303,(0O334664274-0x37368B9),0o102,0o100,0o20,(0x75bcd15-0O726746425),(15658734^0O73567354),0o100,0o20,(0x75bcd15-0O726746425),0o102,(0O347010110&0x463A71D),0o100,0o100,0o20,(0x75bcd15-0O726746425),0o104,0o102,0o102,0o102,(0x75bcd15-0O726746425),0o102,0o100,(15658734^0O73567354),(0O347010110&0x463A71D),0o116,0o112,0o100,0o174,(0x75bcd15-0O726746425),0o303,0o17,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o314,0o60,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o231,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,0o206,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o206,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o100,0o20,(0x75bcd15-0O726746425),0o100,0o100,0o20,(0x75bcd15-0O726746425),0o102,(0O347010110&0x463A71D),0o100,0o100,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o100,0o100,(0O347010110&0x463A71D),0o102,0o142,0o100,0o102,(0x75bcd15-0O726746425),0o300,0o300,0o63,0o63,0o102,0o100,0o20,(0x75bcd15-0O726746425),(15658734^0O73567354),0o100,0o20,(0x75bcd15-0O726746425),0o102,(0O347010110&0x463A71D),0o100,0o100,0o20,(0x75bcd15-0O726746425),0o102,0o74,0o74,0o102,(0x75bcd15-0O726746425),0o102,0o100,(15658734^0O73567354),(0O347010110&0x463A71D),0o116,0o112,0o100,0o174,(0x75bcd15-0O726746425),0o300,0o314,0o60,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o317,0o300,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o77,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,(15658734^0O73567354),0o100,0o20,(0x75bcd15-0O726746425),0o100,0o100,0o20,(0x75bcd15-0O726746425),0o102,(0O347010110&0x463A71D),0o100,0o100,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o100,0o100,(0O347010110&0x463A71D),0o102,0o142,0o100,0o102,(0x75bcd15-0O726746425),0o300,0o300,0o63,0o63,0o102,0o100,0o20,(0x75bcd15-0O726746425),0o102,0o100,0o20,(0x75bcd15-0O726746425),0o132,(0O347010110&0x463A71D),0o100,0o100,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o100,0o102,(0O347010110&0x463A71D),0o102,0o106,0o100,0o104,(0x75bcd15-0O726746425),0o300,0o314,0o60,(0x75bcd15-0O726746425),0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o317,0o300,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o77,0o377,(0x75bcd15-0O726746425),0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,0o355,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o355,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,0o16,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,0o16,(0x75bcd15-0O726746425),0o67,0o154,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o306,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o306,0o306,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o306,0o306,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o306,0o306,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o306,0o306,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o306,0o306,(0x75bcd15-0O726746425),0o154,0o230,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o306,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,0o225,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,0o225,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,0o225,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,0o225,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,0o225,(0x75bcd15-0O726746425),0o17,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o357,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o260,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o260,0o260,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o260,0o260,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o260,0o260,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o260,0o260,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o54,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o260,0o260,(0x75bcd15-0O726746425),0o17,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o337,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o356,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o260,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o66,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o66,0o66,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o66,0o66,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o66,0o66,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o66,0o66,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o66,0o66,(0x75bcd15-0O726746425),0o17,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o337,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o66,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,0o335,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o206,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o206,0o206,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o206,0o206,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o206,0o206,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o206,0o206,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o206,0o206,(0x75bcd15-0O726746425),(15658734^0O73567354),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o156,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o333,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o206,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o300,(0x75bcd15-0O726746425),0o37,0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o300,(0x75bcd15-0O726746425),(15658734^0O73567354),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o166,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o373,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,0o167,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o355,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o355,0o355,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o355,0o355,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o355,0o355,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o355,0o355,(0x75bcd15-0O726746425),0o77,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o357,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o355,0o355,(0x75bcd15-0O726746425),(1011010-0O3666474),0o140,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o356,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o373,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o355,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o241,(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o100,0o102,0o102,0o174,0o102,(0x75bcd15-0O726746425),(15658734^0O73567354),0o102,0o100,0o20,0o102,0o176,0o174,0o100,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o76,0o102,(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o376,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o241,(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o100,0o102,0o102,0o174,0o102,(0x75bcd15-0O726746425),(15658734^0O73567354),0o102,0o100,0o20,0o102,0o176,0o174,0o100,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o76,0o102,(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o100,0o70,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o34,0o70,0o70,0o150,(0x75bcd15-0O726746425),0o70,0o70,0o70,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),0o170,(0x75bcd15-0O726746425),0o176,0o74,0o74,0o174,0o170,(0x75bcd15-0O726746425),0o74,0o74,0o176,0o376,0o102,0o74,0o174,0o176,(0x75bcd15-0O726746425),0o30,0o74,0o74,0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o231,(0x75bcd15-0O726746425),0o104,(0x75bcd15-0O726746425),0o104,(0x75bcd15-0O726746425),0o100,0o102,0o102,0o104,0o104,(0x75bcd15-0O726746425),0o102,0o102,0o100,0o20,0o132,0o102,0o104,0o100,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(15658734^0O73567354),0o102,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o170,0o104,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o40,0o104,0o104,0o124,(0x75bcd15-0O726746425),0o20,0o104,0o100,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),0o170,(0x75bcd15-0O726746425),0o176,0o74,0o74,0o174,0o170,(0x75bcd15-0O726746425),0o74,0o74,0o176,0o376,0o102,0o74,0o174,0o176,(0x75bcd15-0O726746425),0o30,0o74,0o74,0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o231,(0x75bcd15-0O726746425),0o104,(0x75bcd15-0O726746425),0o104,(0x75bcd15-0O726746425),0o100,0o102,0o102,0o104,0o104,(0x75bcd15-0O726746425),0o102,0o102,0o100,0o20,0o132,0o102,0o104,0o100,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(15658734^0O73567354),0o102,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o104,0o170,(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),0o40,0o104,0o104,0o124,(0x75bcd15-0O726746425),0o20,0o170,0o70,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o231,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o104,(0x75bcd15-0O726746425),0o100,0o102,0o102,0o102,0o104,(0x75bcd15-0O726746425),0o100,0o102,0o100,0o20,0o102,0o102,0o102,0o100,(0x75bcd15-0O726746425),0o50,0o102,0o102,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o170,(0x75bcd15-0O726746425),0o100,0o74,0o74,0o102,0o170,(0x75bcd15-0O726746425),0o74,0o74,0o100,0o20,0o44,0o102,0o102,0o176,(0x75bcd15-0O726746425),0o76,0o74,0o74,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o104,0o100,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o40,0o104,0o104,0o124,(0x75bcd15-0O726746425),0o20,0o100,(0x5E30A78-0O570605164),0o20,0o30,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o231,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o104,(0x75bcd15-0O726746425),0o100,0o102,0o102,0o102,0o104,(0x75bcd15-0O726746425),0o100,0o102,0o100,0o20,0o102,0o102,0o102,0o100,(0x75bcd15-0O726746425),0o50,0o102,0o102,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o170,(0x75bcd15-0O726746425),0o100,0o74,0o74,0o102,0o170,(0x75bcd15-0O726746425),0o74,0o74,0o100,0o20,0o44,0o102,0o102,0o176,(0x75bcd15-0O726746425),0o76,0o74,0o74,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o104,0o74,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o40,0o70,0o70,0o124,(0x75bcd15-0O726746425),0o14,0o74,0o170,0o14,0o30,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o241,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o174,0o102,0o102,0o102,0o102,(0x75bcd15-0O726746425),0o74,0o102,0o174,0o20,0o102,0o102,0o102,0o174,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o102,0o74,0o174,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o241,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o174,0o102,0o102,0o102,0o102,(0x75bcd15-0O726746425),0o74,0o102,0o174,0o20,0o102,0o102,0o102,0o174,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o102,0o74,0o174,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o115,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o115,0o115,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o115,0o115,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o115,0o115,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o115,0o115,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o115,0o115,0o126,0o125,0o125,0o126,0o126,0o126,0o126,0o126,0o126,0o127,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o120,0o125,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o115,0o115,0o126,0o124,0o124,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o127,0o127,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o115,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o107,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o127,0o126,0o127,0o126,0o127,0o126,0o127,0o127,0o127,0o127,0o127,0o126,0o127,0o127,0o127,0o127,0o127,0o127,0o127,0o127,0o126,0o127,0o127,0o127,0o127,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o127,0o126,0o127,0o126,0o127,0o126,0o127,0o127,0o127,0o127,0o127,0o126,0o127,0o127,0o127,0o127,0o127,0o127,0o127,0o127,0o126,0o127,0o127,0o127,0o127,0o126,0o126,0o126,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o70,0o302,0o20,(15658734^0O73567354),(0O334664274-0x37368B9),0o23,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o346,0o252,0o257,0o353,0o112,0o123,0o127,0o40,0o40,0o40,(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o200,0o345,0o20,0o275,0o57,(15658734^0O73567354),0o200,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o141,(0x75bcd15-0O726746425),0o142,(0x75bcd15-0O726746425),0o143,(0x75bcd15-0O726746425),0o144,(0x75bcd15-0O726746425),0o145,(0x75bcd15-0O726746425),0o146,(0x75bcd15-0O726746425),0o147,0o40,0o140,0o40,0o141,0o40,0o142,0o40,0o143,0o40,0o144,0o40,0o145,0o40,0o146,0o40,0o147,0o100,0o140,0o100,0o141,0o100,0o142,0o100,0o143,0o100,0o144,0o100,0o145,0o100,0o146,0o100,0o147,0o140,0o140,0o140,0o141,0o140,0o142,0o140,0o143,0o140,0o144,0o140,0o145,0o140,0o146,0o140,0o147,0o200,0o140,0o200,0o141,0o200,0o142,0o200,0o143,0o200,0o144,0o200,0o145,0o200,0o146,0o200,0o147,0o240,0o140,0o240,0o141,0o240,0o142,0o240,0o143,0o240,0o144,0o240,0o145,0o240,0o146,0o240,0o147,0o300,0o140,0o300,0o141,0o300,0o142,0o300,0o143,0o300,0o144,0o300,0o145,0o300,0o146,0o300,0o147,0o340,0o140,0o340,0o141,0o340,0o142,0o340,0o143,0o340,0o144,0o340,0o145,0o340,0o146,0o340,0o147,(0x75bcd15-0O726746425),0o150,(0x75bcd15-0O726746425),0o151,(0x75bcd15-0O726746425),0o152,(0x75bcd15-0O726746425),0o153,(0x75bcd15-0O726746425),0o154,(0x75bcd15-0O726746425),0o155,(0x75bcd15-0O726746425),0o156,(0x75bcd15-0O726746425),0o157,0o40,0o150,0o40,0o151,0o40,0o152,0o40,0o153,0o40,0o154,0o40,0o155,0o40,0o156,0o40,0o157,0o100,0o150,0o100,0o151,0o100,0o152,0o100,0o153,0o100,0o154,0o100,0o155,0o100,0o156,0o100,0o157,0o140,0o150,0o140,0o151,0o140,0o152,0o140,0o153,0o140,0o154,0o140,0o155,0o140,0o156,0o140,0o157,0o200,0o150,0o200,0o151,0o200,0o152,0o200,0o153,0o200,0o154,0o200,0o155,0o200,0o156,0o200,0o157,0o240,0o150,0o240,0o151,0o240,0o152,0o240,0o153,0o240,0o154,0o240,0o155,0o240,0o156,0o240,0o157,0o300,0o150,0o300,0o151,0o300,0o152,0o300,0o153,0o300,0o154,0o300,0o155,0o300,0o156,0o300,0o157,0o340,0o150,0o340,0o151,0o340,0o152,0o340,0o153,0o340,0o154,0o340,0o155,0o340,0o156,0o340,0o157,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(0O57060516-0xbc614d),(15658734^0O73567354),(15658734^0O73567354),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(15658734^0O73567354),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(15658734^0O73567354),(15658734^0O73567354),(0O334664274-0x37368B9),(15658734^0O73567354),(0O334664274-0x37368B9),(15658734^0O73567354),(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(1011010-0O3666474),(0x5E30A78-0O570605164),(1011010-0O3666474),(1011010-0O3666474),(0x5E30A78-0O570605164),(1011010-0O3666474),(0x5E30A78-0O570605164),(1011010-0O3666474),(0x5E30A78-0O570605164),(1011010-0O3666474),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(1011010-0O3666474),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o363,0o41,0o377,0o133,0o66,0o206,0o53,0o66,0o237,0o61,0o376,0o133,0o227,0o157,0o356,0o12,0o107,(0x5E30A78-0O570605164),0o140,0o313,0o14,0o116,0o175,0o251,0o254,0o161,0o43,0o313,0o174,0o40,0o366,0o311,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0O334664274-0x37368B9),(0O57060516-0xbc614d),(0O334664274-0x37368B9),(15658734^0O73567354),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(15658734^0O73567354),(0O334664274-0x37368B9),0o300,0o360,0o374,0o377,0o377,0o377,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o360,0o374,0o377,0o377,0o377,0o377,0o377,0o374,0o360,0o300,(0x75bcd15-0O726746425),0o374,0o360,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o101,0o111,0o122,0o53,0o53,0o53,0o53,0o53,0o40,0o120,0o162,0o145,0o163,0o163,0o40,0o105,0o116,0o124,0o105,0o122,0o40,0o164,0o157,0o40,0o123,0o164,0o141,0o162,0o164,0o40,0o53,0o53,0o53,0o53,0o53,0o40,0o40,0o112,0o105,0o124,0o55,0o123,0o105,0o124,0o40,0o127,0o111,0o114,0o114,0o131,0o40,0o142,0o171,0o40,0o115,0o141,0o164,0o164,0o150,0o145,0o167,0o40,0o123,0o155,0o151,0o164,0o150,0o40,0o40,0o177,0o40,0o61,0o71,0o70,0o64,0o40,0o123,0o117,0o106,0o124,0o127,0o101,0o122,0o105,0o40,0o120,0o122,0o117,0o112,0o105,0o103,0o124,0o123,0o40,0o114,0o164,0o144,0o40,0o56,0o40,0o56,0o40,0o56,0o40,0o56,0o40,0o56,0o107,0o165,0o151,0o144,0o145,0o40,0o127,0o151,0o154,0o154,0o171,0o40,0o164,0o157,0o40,0o143,0o157,0o154,0o154,0o145,0o143,0o164,0o40,0o141,0o154,0o154,0o40,0o164,0o150,0o145,0o40,0o151,0o164,0o145,0o155,0o163,0o40,0o141,0o162,0o157,0o165,0o156,0o144,0o40,0o164,0o150,0o145,0o40,0o150,0o157,0o165,0o163,0o145,0o40,0o142,0o145,0o146,0o157,0o162,0o145,0o40,0o115,0o151,0o144,0o156,0o151,0o147,0o150,0o164,0o40,0o163,0o157,0o40,0o115,0o141,0o162,0o151,0o141,0o40,0o167,0o151,0o154,0o154,0o40,0o154,0o145,0o164,0o40,0o171,0o157,0o165,0o40,0o147,0o145,0o164,0o40,0o164,0o157,0o40,0o171,0o157,0o165,0o162,0o40,0o142,0o145,0o144,0o56,0o40,0o56,0o40,0o56,0o40,0o56,0o40,0o56,0o40,0o56,0o40,0o56,0o53,0o53,0o53,0o53,0o53,0o40,0o120,0o162,0o145,0o163,0o163,0o40,0o105,0o116,0o124,0o105,0o122,0o40,0o164,0o157,0o40,0o123,0o164,0o141,0o162,0o164,0o40,0o53,0o53,0o53,0o53,0o53,0o111,0o164,0o145,0o155,0o163,0o40,0o143,0o157,0o154,0o154,0o145,0o143,0o164,0o145,0o144,0o40,0o60,0o60,0o60,0o40,0o124,0o151,0o155,0o145,0o40,0o60,0o60,0o72,0o60,0o60,0o40,0o155,0o107,0o141,0o155,0o145,0o117,0o166,0o145,0o162,0o60,0o60,0o60,0o40,0o67,0o72,0o60,0o60,0o141,0o40,0o67,0o72,0o60,0o60,0o141,0o105,0o156,0o164,0o145,0o162,0o40,0o103,0o157,0o144,0o145,0o40,0o141,0o164,0o40,0o147,0o162,0o151,0o144,0o40,0o154,0o157,0o143,0o141,0o164,0o151,0o157,0o156,0o40,0o40,0o40,0o40,0o40,0o123,0o157,0o162,0o162,0o171,0o54,0o40,0o164,0o162,0o171,0o40,0o143,0o157,0o144,0o145,0o40,0o141,0o164,0o40,0o154,0o157,0o143,0o141,0o164,0o151,0o157,0o156,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o37,0o35,0o37,0o27,0o37,0o37,0o33,0o17,0o37,0o33,0o37,0o17,0o37,0o37,0o17,0o37,0o36,0o33,0o37,0o27,0o37,0o121,0o74,0o63,0o121,0o74,0o63,0o121,0o74,0o63,0o121,0o74,0o63,0o121,0o74,0o63,0o121,0o74,0o63,0o121,0o74,0o63,0o121,0o74,0o63,0o114,0o74,0o63,0o114,0o74,0o63,0o114,0o71,0o55,0o114,0o71,0o55,0o121,0o100,0o55,0o121,0o74,0o63,0o121,0o74,0o66,0o133,0o100,0o66,0o146,0o121,0o74,0o121,0o74,0o63,0o121,0o74,0o63,0o50,0o74,0o50,0o50,0o66,0o55,0o121,0o66,0o55,0o121,0o66,0o55,0o50,0o66,0o50,0o50,0o74,0o63,0o121,0o74,0o63,0o46,0o74,0o55,0o114,0o74,0o55,0o50,0o100,0o63,0o121,0o100,0o63,0o55,0o100,0o66,0o40,0o100,0o66,0o75,0o171,0o75,0o377,0o126,0o140,0o126,0o140,0o146,0o146,0o200,0o200,0o200,0o200,0o146,0o140,0o126,0o140,0o126,0o140,0o146,0o140,0o126,0o114,0o110,0o114,0o110,0o114,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o126,0o100,0o100,0o100,0o100,0o104,0o104,0o114,0o114,0o126,0o140,0o146,0o140,0o126,0o126,0o146,0o146,0o121,0o126,0o140,0o126,0o121,0o121,0o140,0o140,0o100,0o100,0o100,0o100,0o100,0o100,0o100,0o100,0o41,(0x75bcd15-0O726746425),0o100,0o21,(0O57060516-0xbc614d),0o100,(0O57060516-0xbc614d),0o377,0o32,0o66,(0x75bcd15-0O726746425),0o355,0o260,0o303,0o312,0o207,0o205,0o315,0o303,0o206,0o312,0o312,0o207,0o335,0o41,0o253,0o205,0o315,0o303,0o206,0o312,0o312,0o207,0o303,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o21,(0x75bcd15-0O726746425),0o110,0o16,0o40,0o315,0o200,0o226,0o41,0o102,0o110,0o21,(0x75bcd15-0O726746425),0o233,0o16,(0x75bcd15-0O726746425),0o315,0o126,0o224,0o41,0o105,0o110,0o315,0o126,0o224,0o41,0o110,0o110,0o315,0o126,0o224,0o41,0o113,0o110,0o315,0o126,0o224,0o41,0o200,0o233,0o21,(0x75bcd15-0O726746425),0o131,(0O57060516-0xbc614d),0o200,(0x75bcd15-0O726746425),0o355,0o260,0o72,0o170,0o134,0o306,0o45,0o62,0o170,0o134,0o376,0o263,0o70,(15658734^0O73567354),0o326,0o264,0o157,0o46,0o236,0o176,0o205,0o62,0o344,0o205,0o115,0o36,0o57,0o34,0o171,0o376,0o22,0o70,(0O507646144^0x51F4C61),0o326,0o22,0o117,0o30,0o365,0o173,0o21,0o36,0o110,0o315,0o221,0o226,0o171,0o306,0o101,0o21,0o35,0o110,0o315,0o221,0o226,0o335,0o41,0o120,0o131,0o315,0o74,0o207,0o335,0o43,0o335,0o43,0o335,0o43,0o335,0o175,0o376,0o134,0o40,0o361,0o30,0o353,(0O57060516-0xbc614d),0o376,0o367,0o355,0o170,0o346,0o17,0o376,0o17,0o40,0o365,(1011010-0O3666474),0o277,0o355,0o170,0o313,0o107,0o40,0o66,0o72,0o131,0o131,0o346,0o177,0o376,(0x9D8DE4-0O47306735),0o50,0o55,0o326,(0O347010110&0x463A71D),0o346,0o30,0o17,0o17,0o17,0o117,0o72,0o123,0o131,0o326,(0O347010110&0x463A71D),0o346,0o30,(0x9D8DE4-0O47306735),0o261,0o117,0o72,0o126,0o131,0o326,(0O347010110&0x463A71D),0o346,0o30,0o17,0o261,0o117,0o72,0o120,0o131,0o326,(0O347010110&0x463A71D),0o346,0o30,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o341,0o261,0o41,0o344,0o205,0o276,0o311,0o335,0o313,(0x75bcd15-0O726746425),0o376,0o335,0o313,(0O57060516-0xbc614d),0o376,0o335,0o313,0o40,0o376,0o335,0o313,0o41,0o376,(0O57060516-0xbc614d),0o376,0o367,0o355,0o170,0o346,0o17,0o36,(0O347010110&0x463A71D),0o376,0o16,0o50,0o23,0o36,0o20,0o376,0o15,0o50,0o15,0o36,0o30,0o376,0o13,0o50,(0x9D8DE4-0O47306735),0o36,0o40,0o376,(0x9D8DE4-0O47306735),0o302,0o107,0o207,0o335,0o163,(0x75bcd15-0O726746425),0o335,0o163,(0O57060516-0xbc614d),0o335,0o163,0o40,0o335,0o163,0o41,(0O57060516-0xbc614d),0o30,(0x75bcd15-0O726746425),0o20,0o376,0o15,0o40,0o373,0o311,0o257,0o62,0o316,0o205,0o62,0o341,0o205,0o62,0o315,0o205,0o62,0o321,0o205,0o62,0o313,0o205,0o62,0o340,0o205,0o62,0o337,0o205,0o76,(0x9D8DE4-0O47306735),0o62,0o314,0o205,0o76,0o320,0o62,0o317,0o205,0o76,0o41,0o62,0o40,0o204,0o41,0o264,0o135,0o42,0o323,0o205,0o41,0o174,0o205,0o66,0o60,0o43,0o66,0o60,0o43,0o66,0o60,0o46,0o244,0o72,0o377,0o243,0o157,0o62,0o336,0o205,0o313,0o366,0o54,0o40,0o373,0o41,0o342,0o205,0o313,0o306,0o41,(0x75bcd15-0O726746425),0o100,0o21,(0O57060516-0xbc614d),0o100,(0O57060516-0xbc614d),0o377,0o27,0o66,(0x75bcd15-0O726746425),0o355,0o260,0o41,(0x75bcd15-0O726746425),0o230,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o355,0o260,0o41,0o140,0o132,0o21,0o141,0o132,(0O57060516-0xbc614d),0o37,(0x75bcd15-0O726746425),0o66,0o106,0o355,0o260,0o335,0o41,0o124,0o204,0o21,0o140,0o120,0o16,0o40,0o315,0o200,0o226,0o21,(0x75bcd15-0O726746425),0o130,0o32,0o267,0o50,0o106,0o376,0o323,0o50,0o102,0o376,0o11,0o50,0o76,0o376,0o55,0o50,0o72,0o376,0o44,0o50,0o66,0o16,(0x75bcd15-0O726746425),0o376,(0O347010110&0x463A71D),0o50,0o23,0o376,0o51,0o50,0o17,0o376,0o54,0o50,(0O347010110&0x463A71D),0o376,(0O507646144^0x51F4C61),0o50,(0x9D8DE4-0O47306735),0o16,0o20,0o30,(0O334664274-0x37368B9),0o76,0o45,0o22,0o173,0o346,(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o261,0o117,(1011010-0O3666474),(0x75bcd15-0O726746425),0o41,0o61,0o204,0o11,0o325,0o313,0o102,0o26,0o100,0o50,(15658734^0O73567354),0o26,0o110,(1011010-0O3666474),(0O347010110&0x463A71D),0o315,0o233,0o226,0o321,0o23,0o172,0o376,0o132,0o302,0o104,0o210,(0O57060516-0xbc614d),0o37,(0x75bcd15-0O726746425),0o363,0o257,0o355,0o130,0o263,0o20,0o373,0o346,0o40,0o40,(0O507646144^0x51F4C61),0o76,(0O57060516-0xbc614d),0o62,0o316,0o205,0o41,0o373,0o205,0o315,0o242,0o226,0o302,0o374,0o210,0o257,0o62,0o344,0o205,0o315,0o353,0o212,0o41,0o140,0o132,0o21,0o141,0o132,(0O57060516-0xbc614d),0o37,(0x75bcd15-0O726746425),0o66,0o117,0o355,0o260,0o72,0o344,0o205,0o335,0o41,0o124,0o204,0o137,0o26,(0x75bcd15-0O726746425),0o335,0o31,0o21,0o140,0o120,0o16,0o40,0o315,0o200,0o226,0o72,0o344,0o205,0o346,0o37,0o306,0o62,0o315,0o336,0o226,(0O57060516-0xbc614d),0o376,0o257,0o355,0o170,0o346,(0O57060516-0xbc614d),0o376,(0O57060516-0xbc614d),0o40,0o16,0o72,0o344,0o205,0o74,0o376,0o340,0o62,0o344,0o205,0o40,0o274,0o303,0o23,0o210,0o41,0o205,0o205,0o21,0o177,0o205,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o355,0o260,0o41,(0x75bcd15-0O726746425),0o232,0o21,(0x75bcd15-0O726746425),0o132,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o355,0o260,0o72,0o40,0o204,0o366,0o300,0o147,0o56,(0x75bcd15-0O726746425),0o21,(0x75bcd15-0O726746425),0o200,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o355,0o260,0o335,0o41,0o360,0o200,0o21,(0x75bcd15-0O726746425),0o201,0o76,(0O347010110&0x463A71D),0o335,0o156,(0x75bcd15-0O726746425),0o313,0o275,0o46,0o24,0o51,0o51,0o51,(0O57060516-0xbc614d),(15658734^0O73567354),(0x75bcd15-0O726746425),0o355,0o260,0o335,0o116,(0O57060516-0xbc614d),0o161,(0O57060516-0xbc614d),(1011010-0O3666474),(0x75bcd15-0O726746425),0o355,0o260,0o335,0o43,0o335,0o43,0o75,0o40,0o341,0o41,0o317,0o205,0o21,0o327,0o205,(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),0o355,0o260,0o315,0o63,0o215,0o41,(0x75bcd15-0O726746425),0o120,0o21,(0O57060516-0xbc614d),0o120,(0O57060516-0xbc614d),0o377,(0x9D8DE4-0O47306735),0o66,(0x75bcd15-0O726746425),0o355,0o260,0o335,0o41,0o200,0o200,0o16,0o40,0o21,(0x75bcd15-0O726746425),0o120,0o315,0o200,0o226,0o335,0o41,0o124,0o205,0o21,0o140,0o120,0o16,0o40,0o315,0o200,0o226,0o72,0o336,0o200,0o16,0o376,0o355,0o171,0o257,0o62,0o326,0o205,0o303,0o255,0o211,0o72,0o314,0o205,0o41,0o240,0o120,0o267,0o310,0o107,0o16,(0x75bcd15-0O726746425),0o345,0o305,0o72,0o341,0o205,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o346,0o140,0o137,0o26,0o235,0o315,0o126,0o224,0o301,0o341,0o43,0o43,0o20,0o350,0o311,0o315,0o213,0o211,0o41,(0x75bcd15-0O726746425),0o136,0o21,(0x75bcd15-0O726746425),0o134,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(15658734^0O73567354),0o355,0o260,0o41,(0x75bcd15-0O726746425),0o160,0o21,(0x75bcd15-0O726746425),0o140,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o20,0o355,0o260,0o315,0o300,0o220,0o72,0o337,0o205,0o376,(0O334664274-0x37368B9),0o304,0o323,0o215,0o72,0o317,0o205,0o376,0o341,0o324,0o260,0o224,0o72,0o337,0o205,0o376,(0O334664274-0x37368B9),0o304,0o310,0o225,0o72,0o337,0o205,0o376,(15658734^0O73567354),0o314,0o204,0o225,0o315,0o64,0o225,0o315,0o276,0o221,0o315,0o371,0o224,0o315,0o321,0o223,0o41,(0x75bcd15-0O726746425),0o140,0o21,(0x75bcd15-0O726746425),0o100,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o20,0o355,0o260,0o72,0o337,0o205,0o346,(15658734^0O73567354),0o17,0o41,0o322,0o205,0o266,0o167,0o72,0o315,0o205,0o267,0o50,0o25,0o75,0o62,0o315,0o205,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o346,0o70,0o41,(0x75bcd15-0O726746425),0o134,0o21,(0O57060516-0xbc614d),0o134,(0O57060516-0xbc614d),0o377,(0O57060516-0xbc614d),0o167,0o355,0o260,0o41,(0x75bcd15-0O726746425),0o134,0o21,(0x75bcd15-0O726746425),0o130,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(15658734^0O73567354),0o355,0o260,0o335,0o41,0o177,0o205,0o21,0o171,0o120,0o16,(1011010-0O3666474),0o315,0o200,0o226,0o335,0o41,0o174,0o205,0o21,0o160,0o120,0o16,(0O334664274-0x37368B9),0o315,0o200,0o226,0o72,0o313,0o205,0o74,0o62,0o313,0o205,0o40,0o131,0o335,0o41,0o177,0o205,0o335,0o64,(0x5E30A78-0O570605164),0o335,0o176,(0x5E30A78-0O570605164),0o376,0o72,0o40,0o113,0o335,0o66,(0x5E30A78-0O570605164),0o60,0o335,0o64,(0O334664274-0x37368B9),0o335,0o176,(0O334664274-0x37368B9),0o376,0o66,0o40,0o75,0o335,0o66,(0O334664274-0x37368B9),0o60,0o335,0o176,(0x75bcd15-0O726746425),0o376,0o61,0o40,0o40,0o335,0o64,(0O57060516-0xbc614d),0o335,0o176,(0O57060516-0xbc614d),0o376,0o63,0o40,0o50,0o335,0o176,(0O507646144^0x51F4C61),0o376,0o160,0o312,0o312,0o207,0o335,0o66,(0x75bcd15-0O726746425),0o40,0o335,0o66,(0O57060516-0xbc614d),0o61,0o335,0o66,(0O507646144^0x51F4C61),0o160,0o30,0o22,0o335,0o64,(0O57060516-0xbc614d),0o335,0o176,(0O57060516-0xbc614d),0o376,0o72,0o40,(0O347010110&0x463A71D),0o335,0o66,(0O57060516-0xbc614d),0o60,0o335,0o66,(0x75bcd15-0O726746425),0o61,(0O57060516-0xbc614d),0o376,0o376,0o355,0o170,0o137,(1011010-0O3666474),0o177,0o355,0o170,0o263,0o346,(0O57060516-0xbc614d),0o312,0o312,0o207,0o72,0o340,0o205,0o74,0o62,0o340,0o205,0o50,0o15,(1011010-0O3666474),0o375,0o355,0o170,0o346,0o37,0o376,0o37,0o50,0o111,0o21,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),(15658734^0O73567354),0o355,0o170,0o346,0o37,0o376,0o37,0o40,0o54,0o34,0o40,0o363,0o24,0o40,0o360,0o72,0o343,0o205,0o376,0o12,0o304,0o353,0o212,0o30,0o346,0o41,(0x75bcd15-0O726746425),0o130,0o176,0o346,(0x9D8DE4-0O47306735),0o323,0o376,0o176,0o306,(0O334664274-0x37368B9),0o346,(0x9D8DE4-0O47306735),0o127,0o176,0o306,0o30,0o346,0o270,0o262,0o167,0o43,0o174,0o376,0o133,0o40,0o355,0o311,0o41,(0x75bcd15-0O726746425),0o232,0o21,(0x75bcd15-0O726746425),0o132,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o355,0o260,0o72,0o336,0o200,0o323,0o376,0o72,0o321,0o205,0o376,0o377,0o312,(0O57060516-0xbc614d),0o214,(1011010-0O3666474),0o277,0o41,0o342,0o205,0o355,0o170,0o346,0o37,0o376,0o37,0o50,0o12,0o313,0o106,0o40,(0O347010110&0x463A71D),0o176,0o356,(0O334664274-0x37368B9),0o167,0o30,(15658734^0O73567354),0o313,0o206,0o313,0o116,0o40,0o64,0o257,0o62,0o340,0o205,0o72,0o341,0o205,0o74,0o62,0o341,0o205,0o346,0o176,0o17,0o137,0o26,(0x75bcd15-0O726746425),0o41,0o137,0o206,0o31,0o72,0o314,0o205,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o326,0o34,0o355,0o104,0o206,0o127,0o72,0o336,0o200,0o132,(0O57060516-0xbc614d),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o323,0o376,0o35,0o40,(0O334664274-0x37368B9),0o132,0o356,0o30,0o20,0o366,0o15,0o40,0o363,(0O57060516-0xbc614d),0o376,0o357,0o355,0o170,0o313,0o117,0o302,0o227,0o213,0o346,0o20,0o356,0o20,(0x9D8DE4-0O47306735),0o127,0o72,0o343,0o205,0o376,0o12,0o302,0o227,0o213,(0O57060516-0xbc614d),0o376,0o367,0o355,0o170,0o57,0o346,0o37,0o262,0o62,0o40,0o204,0o303,0o22,0o211,0o72,0o343,0o205,0o376,0o12,0o312,0o255,0o211,0o72,0o40,0o204,0o376,0o34,0o302,0o255,0o211,0o72,0o317,0o205,0o376,0o320,0o302,0o255,0o211,0o72,0o343,0o205,(0x9D8DE4-0O47306735),0o137,0o26,(0x75bcd15-0O726746425),0o335,0o41,0o347,0o205,0o335,0o31,(0O57060516-0xbc614d),0o376,0o373,0o355,0o170,0o346,0o37,0o335,0o276,(0x75bcd15-0O726746425),0o50,0o22,0o376,0o37,0o312,0o255,0o211,0o335,0o276,0o376,0o312,0o255,0o211,0o257,0o62,0o343,0o205,0o303,0o255,0o211,(1011010-0O3666474),0o337,0o355,0o170,0o346,0o37,0o335,0o276,(0O57060516-0xbc614d),0o50,0o22,0o376,0o37,0o312,0o255,0o211,0o335,0o276,0o377,0o312,0o255,0o211,0o257,0o62,0o343,0o205,0o303,0o255,0o211,0o72,0o343,0o205,0o74,0o62,0o343,0o205,0o303,0o255,0o211,0o76,0o107,0o41,(0x75bcd15-0O726746425),0o130,0o21,(0O57060516-0xbc614d),0o130,(0O57060516-0xbc614d),0o377,(0O57060516-0xbc614d),0o167,0o355,0o260,0o137,0o57,0o346,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o366,(0x9D8DE4-0O47306735),0o127,0o113,0o313,0o11,0o313,0o11,0o313,0o11,0o366,0o20,0o257,0o323,0o376,0o356,0o30,0o102,0o20,0o376,0o15,0o40,0o366,0o173,0o75,0o376,0o77,0o40,0o320,0o41,0o314,0o205,0o176,0o267,0o312,0o112,0o214,0o65,0o41,0o327,0o205,0o21,0o317,0o205,(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),0o355,0o260,0o303,0o22,0o211,0o41,(0x75bcd15-0O726746425),0o100,0o21,(0O57060516-0xbc614d),0o100,(0O57060516-0xbc614d),0o377,0o17,0o66,(0x75bcd15-0O726746425),0o355,0o260,0o257,0o62,0o344,0o205,0o21,0o100,0o235,0o41,0o217,0o110,0o16,(0x75bcd15-0O726746425),0o315,0o126,0o224,0o21,0o140,0o234,0o41,0o317,0o110,0o16,(0x75bcd15-0O726746425),0o315,0o126,0o224,0o72,0o344,0o205,0o117,(1011010-0O3666474),0o202,0o12,0o366,0o17,0o157,(0O334664274-0x37368B9),0o12,0o326,0o40,0o147,0o21,0o100,0o234,0o16,(0x75bcd15-0O726746425),0o315,0o126,0o224,0o72,0o344,0o205,0o57,0o137,0o257,(0O57060516-0xbc614d),0o100,(0x75bcd15-0O726746425),0o323,0o376,0o356,0o30,0o103,0o20,0o376,0o15,0o40,0o366,0o41,(0x75bcd15-0O726746425),0o130,0o21,(0O57060516-0xbc614d),0o130,(0O57060516-0xbc614d),0o377,(0O57060516-0xbc614d),0o72,0o344,0o205,0o346,0o14,(0x9D8DE4-0O47306735),0o366,0o107,0o167,0o355,0o260,0o346,0o372,0o366,(15658734^0O73567354),0o62,0o317,0o131,0o62,0o320,0o131,0o62,0o357,0o131,0o62,0o360,0o131,0o72,0o344,0o205,0o306,(0x5E30A78-0O570605164),0o62,0o344,0o205,0o376,0o304,0o40,0o246,0o335,0o41,0o164,0o205,0o16,(0x5E30A78-0O570605164),0o21,0o312,0o100,0o315,0o200,0o226,0o335,0o41,0o170,0o205,0o16,(0x5E30A78-0O570605164),0o21,0o322,0o100,0o315,0o200,0o226,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o26,(1011010-0O3666474),0o20,0o376,0o171,0o346,(0x9D8DE4-0O47306735),0o366,0o100,0o62,0o312,0o130,0o74,0o346,(0x9D8DE4-0O47306735),0o366,0o100,0o62,0o313,0o130,0o74,0o346,(0x9D8DE4-0O47306735),0o366,0o100,0o62,0o314,0o130,0o74,0o346,(0x9D8DE4-0O47306735),0o366,0o100,0o62,0o315,0o130,0o74,0o346,(0x9D8DE4-0O47306735),0o366,0o100,0o62,0o322,0o130,0o74,0o346,(0x9D8DE4-0O47306735),0o366,0o100,0o62,0o323,0o130,0o74,0o346,(0x9D8DE4-0O47306735),0o366,0o100,0o62,0o324,0o130,0o74,0o346,(0x9D8DE4-0O47306735),0o366,0o100,0o62,0o325,0o130,0o15,0o40,0o273,0o25,0o40,0o270,0o303,0o312,0o207,0o315,0o153,0o215,0o335,0o41,(0x75bcd15-0O726746425),0o136,0o76,0o160,0o62,0o135,0o215,0o315,0o113,0o215,0o335,0o41,(0x75bcd15-0O726746425),0o137,0o76,0o170,0o62,0o135,0o215,0o16,(0x75bcd15-0O726746425),0o131,0o335,0o176,(0x75bcd15-0O726746425),0o41,0o240,0o200,(0O57060516-0xbc614d),0o66,(0x75bcd15-0O726746425),0o355,0o261,0o113,(1011010-0O3666474),(0O347010110&0x463A71D),0o26,(0x75bcd15-0O726746425),0o176,0o22,0o43,0o24,0o20,0o372,0o335,0o43,0o14,0o302,0o115,0o215,0o311,0o41,(0x75bcd15-0O726746425),0o200,0o335,0o41,(0x75bcd15-0O726746425),0o136,0o176,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o315,0o300,0o215,0o176,0o17,0o17,0o17,0o17,0o315,0o300,0o215,0o176,0o17,0o17,0o315,0o300,0o215,0o176,0o315,0o300,0o215,0o43,0o175,0o346,0o200,0o50,0o342,0o72,0o331,0o200,0o267,0o50,0o13,0o52,0o327,0o200,0o107,0o72,0o315,0o200,0o167,0o43,0o20,0o374,0o72,0o335,0o200,0o267,0o310,0o52,0o333,0o200,0o72,0o332,0o200,0o346,(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),0o306,0o337,0o137,0o26,0o377,0o72,0o335,0o200,0o107,0o72,0o304,0o200,0o167,0o31,0o20,0o374,0o311,0o346,(0O334664274-0x37368B9),0o117,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o201,0o306,0o240,0o137,0o26,0o200,0o32,0o335,0o167,(0x75bcd15-0O726746425),0o335,0o43,0o311,0o72,0o326,0o205,0o75,0o313,0o177,0o312,0o324,0o216,0o72,0o321,0o205,0o376,(0O57060516-0xbc614d),0o40,0o123,0o72,0o325,0o205,0o346,0o376,0o326,(0O347010110&0x463A71D),0o41,0o317,0o205,0o206,0o167,0o376,0o360,0o322,0o260,0o224,0o315,0o234,0o216,0o72,0o262,0o200,0o276,0o312,0o274,0o216,0o43,0o276,0o312,0o274,0o216,0o72,0o325,0o205,0o74,0o62,0o325,0o205,0o326,(0O347010110&0x463A71D),0o362,0o21,0o216,0o355,0o104,0o74,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o127,0o16,0o40,0o72,0o336,0o200,0o323,0o376,0o356,0o30,0o102,0o20,0o376,0o15,0o40,0o366,0o72,0o325,0o205,0o376,0o22,0o312,0o260,0o216,0o376,0o20,0o50,(0O507646144^0x51F4C61),0o376,0o15,0o302,0o274,0o217,0o72,0o317,0o205,0o346,0o16,0o40,0o45,0o52,0o323,0o205,0o21,0o100,(0x75bcd15-0O726746425),0o31,0o313,0o114,0o302,0o322,0o224,0o72,0o273,0o200,0o276,0o50,0o23,0o43,0o72,0o273,0o200,0o276,0o50,0o14,0o72,0o240,0o200,0o276,0o53,0o302,0o324,0o216,0o276,0o302,0o324,0o216,0o72,0o321,0o205,0o376,(0O57060516-0xbc614d),0o312,0o274,0o217,0o41,0o320,0o205,0o313,0o216,0o72,0o321,0o205,0o267,0o312,0o266,0o216,0o74,0o376,0o20,0o40,(15658734^0O73567354),0o76,0o14,0o62,0o321,0o205,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o127,0o16,0o40,0o72,0o336,0o200,0o323,0o376,0o356,0o30,0o102,0o20,0o376,0o15,0o40,0o366,0o72,0o317,0o205,0o306,(0O347010110&0x463A71D),0o62,0o317,0o205,0o346,0o360,0o157,0o257,0o313,0o25,0o316,0o134,0o147,0o72,0o323,0o205,0o346,0o37,0o265,0o157,0o42,0o323,0o205,0o311,0o76,(1011010-0O3666474),0o62,0o321,0o205,0o311,0o76,(15658734^0O73567354),0o62,0o321,0o205,0o311,0o72,0o317,0o205,0o306,0o20,0o346,0o360,0o62,0o317,0o205,0o315,0o234,0o216,0o76,(15658734^0O73567354),0o62,0o321,0o205,0o41,0o320,0o205,0o313,0o216,0o311,0o36,0o377,0o72,0o326,0o205,0o75,0o313,0o177,0o50,0o34,0o72,0o321,0o205,0o376,0o14,0o322,0o267,0o220,0o257,0o62,0o321,0o205,0o72,0o315,0o200,0o276,0o50,(0x5E30A78-0O570605164),0o43,0o276,0o40,(1011010-0O3666474),0o72,0o326,0o200,0o326,(0O334664274-0x37368B9),0o137,(0O57060516-0xbc614d),0o376,0o337,0o355,0o170,0o346,0o37,0o366,0o40,0o243,0o137,0o72,0o337,0o205,0o346,(15658734^0O73567354),0o17,0o253,0o137,(0O57060516-0xbc614d),0o376,0o373,0o355,0o170,0o346,0o37,0o313,(0x9D8DE4-0O47306735),0o366,(0O57060516-0xbc614d),0o243,0o137,(1011010-0O3666474),0o347,0o355,0o170,0o17,0o366,0o367,0o243,0o137,(1011010-0O3666474),0o357,0o355,0o170,0o366,0o373,0o243,0o137,0o355,0o170,0o17,0o366,0o373,0o243,0o137,0o72,0o316,0o205,0o267,0o50,0o12,(0O57060516-0xbc614d),0o37,(0x75bcd15-0O726746425),0o355,0o170,0o346,(0O334664274-0x37368B9),0o57,0o243,0o137,0o16,(0x75bcd15-0O726746425),0o173,0o346,0o52,0o376,0o52,0o50,(1011010-0O3666474),0o16,(0x5E30A78-0O570605164),0o257,0o62,0o340,0o205,0o173,0o346,0o25,0o376,0o25,0o50,(1011010-0O3666474),0o313,0o331,0o257,0o62,0o340,0o205,0o72,0o320,0o205,0o201,0o117,(1011010-0O3666474),(0x75bcd15-0O726746425),0o41,0o41,0o204,0o11,0o176,0o62,0o320,0o205,(0O57060516-0xbc614d),0o376,0o176,0o355,0o170,0o346,0o37,0o376,0o37,0o40,0o27,(1011010-0O3666474),0o357,0o355,0o170,0o313,0o107,0o50,0o17,0o72,0o316,0o205,0o267,0o50,0o66,(0O57060516-0xbc614d),0o37,(0x75bcd15-0O726746425),0o355,0o170,0o313,0o147,0o50,0o55,0o72,0o337,0o205,0o313,0o117,0o40,0o46,0o257,0o62,0o325,0o205,0o62,0o340,0o205,0o74,0o62,0o321,0o205,0o72,0o326,0o205,0o75,0o313,0o177,0o40,0o23,0o76,0o360,0o62,0o326,0o205,0o72,0o317,0o205,0o346,0o360,0o62,0o317,0o205,0o41,0o320,0o205,0o313,0o316,0o311,0o72,0o320,0o205,0o346,(15658734^0O73567354),0o310,0o72,0o326,0o205,0o75,0o313,0o177,0o310,0o72,0o320,0o205,0o346,(0O57060516-0xbc614d),0o312,0o102,0o220,0o72,0o322,0o205,0o267,0o50,(0O507646144^0x51F4C61),0o75,0o62,0o322,0o205,0o311,0o72,0o321,0o205,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o376,(0x75bcd15-0O726746425),0o40,0o44,0o52,0o323,0o205,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o72,0o332,0o200,0o75,0o366,0o241,0o356,0o340,0o137,0o26,(0x75bcd15-0O726746425),0o31,0o72,0o304,0o200,0o276,0o40,0o14,(0O57060516-0xbc614d),0o40,(0x75bcd15-0O726746425),0o72,0o332,0o200,0o267,0o40,(0O334664274-0x37368B9),(0O57060516-0xbc614d),0o340,0o377,0o52,0o323,0o205,0o175,0o346,0o37,0o312,0o212,0o224,0o11,0o53,0o21,0o40,(0x75bcd15-0O726746425),0o31,0o72,0o262,0o200,0o276,0o310,0o72,0o317,0o205,0o313,0o51,0o201,0o107,0o346,0o17,0o50,0o11,0o72,0o262,0o200,0o31,0o276,0o310,0o267,0o355,0o122,0o267,0o355,0o122,0o42,0o323,0o205,0o170,0o62,0o317,0o205,0o76,(0O334664274-0x37368B9),0o62,0o322,0o205,0o311,0o72,0o322,0o205,0o376,(0O334664274-0x37368B9),0o50,(0O507646144^0x51F4C61),0o74,0o62,0o322,0o205,0o311,0o72,0o321,0o205,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o267,0o40,0o41,0o52,0o323,0o205,0o72,0o332,0o200,0o75,0o366,0o235,0o356,0o277,0o137,0o26,(0x75bcd15-0O726746425),0o31,0o72,0o304,0o200,0o276,0o40,0o14,(0O57060516-0xbc614d),0o40,(0x75bcd15-0O726746425),0o72,0o332,0o200,0o267,0o50,(0O334664274-0x37368B9),(0O57060516-0xbc614d),0o340,0o377,0o52,0o323,0o205,0o11,0o43,0o43,0o175,0o346,0o37,0o312,0o236,0o224,0o21,0o40,(0x75bcd15-0O726746425),0o72,0o262,0o200,0o31,0o276,0o310,0o72,0o317,0o205,0o313,0o51,0o201,0o107,0o346,0o17,0o50,0o11,0o72,0o262,0o200,0o31,0o276,0o310,0o267,0o355,0o122,0o72,0o262,0o200,0o267,0o355,0o122,0o276,0o310,0o53,0o42,0o323,0o205,0o257,0o62,0o322,0o205,0o170,0o62,0o317,0o205,0o311,0o341,0o341,0o76,0o377,0o62,0o321,0o205,0o303,0o365,0o211,0o335,0o41,(0x75bcd15-0O726746425),0o201,0o335,0o176,(0x75bcd15-0O726746425),0o376,0o377,0o310,0o346,(0O334664274-0x37368B9),0o312,0o266,0o221,0o376,(0O57060516-0xbc614d),0o312,0o63,0o221,0o376,(15658734^0O73567354),0o312,0o177,0o221,0o335,0o313,(0x75bcd15-0O726746425),0o176,0o50,0o40,0o335,0o176,(0O57060516-0xbc614d),0o313,0o177,0o50,0o17,0o326,(15658734^0O73567354),0o376,0o224,0o60,0o61,0o326,(15658734^0O73567354),0o376,0o200,0o40,0o53,0o257,0o30,0o50,0o306,(15658734^0O73567354),0o376,0o22,0o60,0o42,0o306,(15658734^0O73567354),0o30,0o36,0o335,0o176,(0O57060516-0xbc614d),0o313,0o177,0o40,0o17,0o326,(15658734^0O73567354),0o376,0o24,0o60,0o21,0o326,(15658734^0O73567354),0o267,0o40,0o14,0o76,0o200,0o30,(0O347010110&0x463A71D),0o306,(15658734^0O73567354),0o376,0o222,0o60,(15658734^0O73567354),0o306,(15658734^0O73567354),0o335,0o167,(0O57060516-0xbc614d),0o346,0o177,0o335,0o276,(0x9D8DE4-0O47306735),0o302,0o266,0o221,0o335,0o176,(0x75bcd15-0O726746425),0o356,0o200,0o335,0o167,(0x75bcd15-0O726746425),0o303,0o266,0o221,0o335,0o313,(0x75bcd15-0O726746425),0o176,0o40,0o43,0o335,0o176,(0x75bcd15-0O726746425),0o326,0o40,0o346,0o177,0o335,0o167,(0x75bcd15-0O726746425),0o376,0o140,0o70,0o157,0o335,0o176,(15658734^0O73567354),0o346,0o37,0o335,0o276,(1011010-0O3666474),0o50,(0O507646144^0x51F4C61),0o335,0o65,(15658734^0O73567354),0o30,0o140,0o335,0o66,(0x75bcd15-0O726746425),0o201,0o30,0o132,0o335,0o176,(0x75bcd15-0O726746425),0o306,0o40,0o366,0o200,0o335,0o167,(0x75bcd15-0O726746425),0o376,0o240,0o60,0o114,0o335,0o176,(15658734^0O73567354),0o346,0o37,0o335,0o276,(0x9D8DE4-0O47306735),0o50,(0O507646144^0x51F4C61),0o335,0o64,(15658734^0O73567354),0o30,0o75,0o335,0o66,(0x75bcd15-0O726746425),0o141,0o30,0o67,0o335,0o176,(0x75bcd15-0O726746425),0o356,(0O347010110&0x463A71D),0o335,0o167,(0x75bcd15-0O726746425),0o346,0o30,0o50,(0O347010110&0x463A71D),0o335,0o176,(0x75bcd15-0O726746425),0o306,0o40,0o335,0o167,(0x75bcd15-0O726746425),0o335,0o176,(0O334664274-0x37368B9),0o335,0o206,(0x5E30A78-0O570605164),0o335,0o167,(0O334664274-0x37368B9),0o335,0o276,(0x9D8DE4-0O47306735),0o60,0o15,0o335,0o276,(1011010-0O3666474),0o50,(15658734^0O73567354),0o60,0o16,0o335,0o176,(1011010-0O3666474),0o335,0o167,(0O334664274-0x37368B9),0o335,0o176,(0x5E30A78-0O570605164),0o355,0o104,0o335,0o167,(0x5E30A78-0O570605164),0o21,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o335,0o31,0o303,0o304,0o220,0o335,0o41,(0x75bcd15-0O726746425),0o201,0o335,0o176,(0x75bcd15-0O726746425),0o376,0o377,0o310,0o346,(0x9D8DE4-0O47306735),0o312,0o263,0o223,0o376,(0O334664274-0x37368B9),0o312,0o244,0o222,0o376,(0x5E30A78-0O570605164),0o50,0o141,0o335,0o136,(0O334664274-0x37368B9),0o26,0o202,0o32,0o157,0o335,0o176,(15658734^0O73567354),0o346,0o37,0o205,0o157,0o173,(0x9D8DE4-0O47306735),0o346,(0O57060516-0xbc614d),0o366,0o134,0o147,0o21,0o37,(0x75bcd15-0O726746425),0o335,0o176,(0O57060516-0xbc614d),0o346,0o17,0o306,0o70,0o346,0o107,0o117,0o176,0o346,0o70,0o251,0o117,0o161,0o43,0o161,0o31,0o161,0o43,0o161,0o335,0o176,(0O334664274-0x37368B9),0o346,0o16,0o50,(0x5E30A78-0O570605164),0o31,0o161,0o43,0o161,0o16,(0O57060516-0xbc614d),0o335,0o176,(0O57060516-0xbc614d),0o335,0o246,(0x75bcd15-0O726746425),0o335,0o266,(15658734^0O73567354),0o346,0o340,0o137,0o335,0o126,(0O507646144^0x51F4C61),0o46,0o202,0o335,0o156,(0O334664274-0x37368B9),0o335,0o176,(15658734^0O73567354),0o346,0o37,0o266,0o43,0o146,0o157,0o315,0o126,0o224,0o302,0o267,0o220,0o303,0o263,0o223,0o335,0o313,(0x75bcd15-0O726746425),0o176,0o40,(0x9D8DE4-0O47306735),0o335,0o65,(0x5E30A78-0O570605164),0o16,0o54,0o30,(0O507646144^0x51F4C61),0o335,0o64,(0x5E30A78-0O570605164),0o16,0o364,0o335,0o176,(0x5E30A78-0O570605164),0o271,0o40,0o23,(0O57060516-0xbc614d),0o200,(15658734^0O73567354),0o72,0o336,0o200,0o323,0o376,0o356,0o30,0o20,0o376,0o101,0o15,0o40,0o366,0o303,0o263,0o223,0o346,0o340,0o302,0o263,0o223,0o335,0o136,(15658734^0O73567354),0o26,0o202,0o32,0o335,0o206,(0x5E30A78-0O570605164),0o157,0o173,0o346,0o200,(0x9D8DE4-0O47306735),0o366,0o134,0o147,0o335,0o66,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o176,0o346,(0x9D8DE4-0O47306735),0o376,(0x9D8DE4-0O47306735),0o40,(0O334664274-0x37368B9),0o335,0o65,(0O507646144^0x51F4C61),0o176,0o366,(0x9D8DE4-0O47306735),0o167,0o23,0o32,0o147,0o45,0o335,0o176,(1011010-0O3666474),0o167,0o44,0o176,0o335,0o246,(0O507646144^0x51F4C61),0o302,0o267,0o220,0o66,0o377,0o44,0o335,0o176,(1011010-0O3666474),0o167,0o303,0o263,0o223,0o375,0o41,(0x75bcd15-0O726746425),0o202,0o335,0o66,0o11,(0x75bcd15-0O726746425),0o335,0o176,(15658734^0O73567354),0o335,0o167,(0O334664274-0x37368B9),0o335,0o66,(0O507646144^0x51F4C61),0o200,0o375,0o176,(0x75bcd15-0O726746425),0o335,0o206,(0O334664274-0x37368B9),0o157,0o375,0o146,(0O57060516-0xbc614d),0o72,0o326,0o205,0o267,0o40,0o20,0o335,0o176,(0O507646144^0x51F4C61),0o246,0o50,0o102,0o335,0o176,0o11,0o62,0o326,0o205,0o335,0o313,0o13,0o306,0o335,0o276,0o11,0o40,0o63,0o335,0o313,0o13,0o106,0o50,0o55,0o335,0o106,(0O334664274-0x37368B9),0o335,0o176,(0O507646144^0x51F4C61),0o16,(0O57060516-0xbc614d),0o376,(0x5E30A78-0O570605164),0o70,0o17,0o16,(0x75bcd15-0O726746425),0o376,0o20,0o70,0o11,(0O507646144^0x51F4C61),0o16,(0O334664274-0x37368B9),0o376,0o100,0o70,(15658734^0O73567354),0o16,(15658734^0O73567354),0o355,0o103,0o322,0o205,0o375,0o175,0o326,0o20,0o62,0o317,0o205,0o345,0o315,0o234,0o216,0o341,0o30,(0x75bcd15-0O726746425),0o335,0o176,(0O507646144^0x51F4C61),0o266,0o167,0o335,0o176,0o11,0o335,0o206,(0O57060516-0xbc614d),0o157,0o313,0o375,0o46,0o203,0o136,0o26,(0x75bcd15-0O726746425),0o375,0o31,0o313,0o275,0o176,0o267,0o50,0o47,0o107,0o335,0o313,(0O57060516-0xbc614d),0o176,0o50,0o21,0o335,0o313,(0O507646144^0x51F4C61),(1011010-0O3666474),0o335,0o313,(0O507646144^0x51F4C61),0o106,0o50,(0O334664274-0x37368B9),0o335,0o65,(0O334664274-0x37368B9),0o20,0o361,0o30,0o17,0o335,0o313,(0O507646144^0x51F4C61),0o16,0o335,0o313,(0O507646144^0x51F4C61),0o176,0o50,(0O334664274-0x37368B9),0o335,0o64,(0O334664274-0x37368B9),0o20,0o361,0o335,0o176,0o11,0o335,0o276,(0x5E30A78-0O570605164),0o50,(1011010-0O3666474),0o335,0o64,0o11,0o303,0o266,0o222,0o72,0o326,0o205,0o313,0o177,0o50,0o12,0o74,0o62,0o326,0o205,0o335,0o313,0o13,0o206,0o30,0o104,0o335,0o313,0o13,0o106,0o50,0o76,0o72,0o320,0o205,0o313,0o117,0o50,0o67,0o17,0o335,0o256,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o346,(15658734^0O73567354),0o75,0o41,0o326,0o205,0o206,0o167,0o72,0o353,0o200,0o117,0o72,0o40,0o204,0o271,0o40,(0x9D8DE4-0O47306735),0o176,0o376,0o14,0o60,(15658734^0O73567354),0o66,0o14,0o176,0o335,0o276,(0x5E30A78-0O570605164),0o70,0o22,0o50,0o20,0o66,0o360,0o72,0o317,0o205,0o346,0o370,0o62,0o317,0o205,0o257,0o62,0o321,0o205,0o30,(0x75bcd15-0O726746425),0o21,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o335,0o31,0o303,0o302,0o221,0o167,0o72,0o240,0o200,0o346,0o370,0o266,0o167,0o21,0o37,(0x75bcd15-0O726746425),0o43,0o167,0o31,0o167,0o43,0o167,0o31,0o167,0o43,0o167,0o311,0o46,0o244,0o72,0o377,0o243,0o157,0o116,0o313,0o271,0o72,0o40,0o204,0o366,0o100,0o271,0o40,0o160,0o176,(0x9D8DE4-0O47306735),0o346,(0O57060516-0xbc614d),0o306,0o134,0o127,0o44,0o136,0o45,0o32,0o346,(0x9D8DE4-0O47306735),0o376,(0x9D8DE4-0O47306735),0o40,0o75,0o335,0o41,0o174,0o205,0o335,0o64,(15658734^0O73567354),0o335,0o176,(15658734^0O73567354),0o376,0o72,0o40,(0O347010110&0x463A71D),0o335,0o66,(15658734^0O73567354),0o60,0o335,0o53,0o30,0o356,0o72,0o336,0o200,0o16,0o200,0o323,0o376,0o356,0o30,0o137,0o76,0o220,0o221,0o107,0o173,0o20,0o376,0o15,0o15,0o40,0o360,0o72,0o336,0o205,0o74,0o62,0o336,0o205,0o40,(0O507646144^0x51F4C61),0o76,(0O57060516-0xbc614d),0o62,0o337,0o205,0o313,0o266,0o30,0o42,0o72,0o313,0o205,0o205,0o346,(0O334664274-0x37368B9),0o306,(0O334664274-0x37368B9),0o117,0o32,0o346,0o370,0o261,0o22,0o176,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o346,(0O347010110&0x463A71D),0o306,0o140,0o127,0o345,0o41,0o341,0o200,(1011010-0O3666474),(0O347010110&0x463A71D),0o315,0o233,0o226,0o341,0o54,0o40,0o202,0o311,(1011010-0O3666474),0o20,0o313,0o101,0o32,0o50,(0x5E30A78-0O570605164),0o246,0o300,0o32,0o266,0o167,0o54,0o23,0o313,0o101,0o32,0o50,(0x5E30A78-0O570605164),0o246,0o300,0o32,0o266,0o167,0o55,0o44,0o23,0o174,0o346,(0x9D8DE4-0O47306735),0o40,0o20,0o174,0o326,(0O347010110&0x463A71D),0o147,0o175,0o306,0o40,0o157,0o346,0o340,0o40,(0x5E30A78-0O570605164),0o174,0o306,(0O347010110&0x463A71D),0o147,0o20,0o320,0o257,0o311,0o72,0o351,0o200,0o62,0o40,0o204,0o72,0o323,0o205,0o366,0o37,0o346,0o376,0o62,0o323,0o205,0o341,0o303,0o22,0o211,0o72,0o352,0o200,0o62,0o40,0o204,0o72,0o323,0o205,0o346,0o340,0o62,0o323,0o205,0o341,0o303,0o22,0o211,0o72,0o353,0o200,0o62,0o40,0o204,0o72,0o323,0o205,0o346,0o37,0o306,0o240,0o62,0o323,0o205,0o76,0o135,0o62,0o324,0o205,0o76,0o320,0o62,0o317,0o205,0o257,0o62,0o321,0o205,0o341,0o303,0o22,0o211,0o72,0o354,0o200,0o62,0o40,0o204,0o257,0o62,0o317,0o205,0o72,0o321,0o205,0o376,0o13,0o60,(0O507646144^0x51F4C61),0o76,(15658734^0O73567354),0o62,0o321,0o205,0o72,0o323,0o205,0o346,0o37,0o62,0o323,0o205,0o76,0o134,0o62,0o324,0o205,0o341,0o303,0o22,0o211,0o52,0o327,0o200,0o174,0o346,(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o306,0o160,0o147,0o135,0o124,0o72,0o331,0o200,0o267,0o310,0o107,0o72,0o326,0o200,0o267,0o40,0o23,0o176,0o313,(0x9D8DE4-0O47306735),0o313,(0x9D8DE4-0O47306735),0o44,0o44,0o116,0o313,0o11,0o313,0o11,0o22,0o161,0o54,0o34,0o20,0o372,0o311,0o176,0o313,0o17,0o313,0o17,0o44,0o44,0o116,0o313,(0O57060516-0xbc614d),0o313,(0O57060516-0xbc614d),0o30,0o353,0o72,0o40,0o204,0o376,0o43,0o40,0o137,0o72,0o337,0o205,0o267,0o40,0o65,0o72,0o313,0o205,0o346,(15658734^0O73567354),0o17,0o17,0o17,0o17,0o366,0o200,0o137,0o72,0o317,0o205,0o376,0o320,0o50,(0O347010110&0x463A71D),0o36,0o300,0o376,0o300,0o60,(15658734^0O73567354),0o36,0o340,0o26,0o234,0o41,0o156,0o150,0o16,(0O57060516-0xbc614d),0o315,0o126,0o224,0o302,0o267,0o220,0o41,0o105,0o105,0o42,0o156,0o135,0o41,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o42,0o216,0o135,0o311,0o72,0o323,0o205,0o346,0o37,0o376,(1011010-0O3666474),0o320,0o76,(15658734^0O73567354),0o62,0o337,0o205,0o311,0o72,0o40,0o204,0o376,0o41,0o300,0o72,0o323,0o205,0o376,0o274,0o300,0o257,0o62,0o313,0o205,0o76,(0O334664274-0x37368B9),0o62,0o337,0o205,0o311,0o72,0o40,0o204,0o376,0o41,0o300,0o72,0o313,0o205,0o346,(0O57060516-0xbc614d),0o17,0o17,0o17,0o137,0o72,0o337,0o205,0o376,(0O334664274-0x37368B9),0o40,(15658734^0O73567354),0o313,0o363,0o26,0o246,0o335,0o41,0o320,0o202,(0O57060516-0xbc614d),0o34,0o20,0o315,0o150,0o226,0o41,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o42,0o274,0o135,0o42,0o334,0o135,0o311,0o52,0o323,0o205,(1011010-0O3666474),(0x75bcd15-0O726746425),0o72,0o332,0o200,0o346,(0O57060516-0xbc614d),0o306,0o100,0o137,0o26,(0x75bcd15-0O726746425),0o31,0o72,0o304,0o200,0o276,0o40,0o32,0o72,0o321,0o205,0o267,0o40,0o24,0o72,0o322,0o205,0o346,(0O334664274-0x37368B9),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o107,0o72,0o332,0o200,0o346,(0O57060516-0xbc614d),0o75,0o356,0o14,0o250,0o346,0o14,0o107,0o52,0o323,0o205,0o21,0o37,(0x75bcd15-0O726746425),0o16,0o17,0o315,0o36,0o226,0o43,0o315,0o36,0o226,0o31,0o315,0o36,0o226,0o43,0o315,0o36,0o226,0o72,0o317,0o205,0o200,0o117,0o31,0o315,0o36,0o226,0o43,0o315,0o36,0o226,0o30,0o31,0o72,0o240,0o200,0o276,0o40,0o13,0o171,0o346,0o17,0o50,(1011010-0O3666474),0o72,0o240,0o200,0o366,(0x9D8DE4-0O47306735),0o167,0o72,0o273,0o200,0o276,0o312,0o266,0o220,0o311,0o72,0o317,0o205,0o200,0o335,0o46,0o202,0o335,0o157,0o72,0o320,0o205,0o346,(0O57060516-0xbc614d),0o17,0o137,0o72,0o322,0o205,0o346,(0O334664274-0x37368B9),0o17,0o17,0o17,0o263,0o137,0o26,0o235,0o72,0o40,0o204,0o376,0o35,0o40,(1011010-0O3666474),0o26,0o266,0o173,0o356,0o200,0o137,(1011010-0O3666474),0o20,0o72,0o323,0o205,0o346,0o37,0o117,0o335,0o176,(0x75bcd15-0O726746425),0o335,0o146,(0O57060516-0xbc614d),0o261,0o157,0o32,0o266,0o167,0o43,0o23,0o32,0o266,0o167,0o335,0o43,0o335,0o43,0o23,0o20,0o351,0o311,0o335,0o176,(0x75bcd15-0O726746425),0o315,0o221,0o226,0o335,0o43,0o34,0o172,0o326,(0O347010110&0x463A71D),0o127,0o15,0o40,0o360,0o311,0o46,(0x9D8DE4-0O47306735),0o157,0o313,0o375,0o51,0o51,0o51,(1011010-0O3666474),(0O347010110&0x463A71D),0o176,0o22,0o43,0o24,0o20,0o372,0o311,0o176,0o376,0o377,0o310,(0O57060516-0xbc614d),0o144,(0x75bcd15-0O726746425),0o257,0o136,0o123,0o323,0o376,0o25,0o40,(0O334664274-0x37368B9),0o123,0o356,0o30,0o20,0o366,(0O347010110&0x463A71D),0o171,0o376,0o62,0o40,(15658734^0O73567354),0o313,0o23,(0O347010110&0x463A71D),0o15,0o40,0o352,0o315,0o311,0o226,0o300,0o43,0o30,0o331,0o72,0o316,0o205,0o267,0o50,(0O507646144^0x51F4C61),0o333,0o37,0o313,0o147,0o300,(0O57060516-0xbc614d),0o376,0o257,0o355,0o170,0o346,(0O57060516-0xbc614d),0o376,(0O57060516-0xbc614d),0o311,0o137,0o16,0o376,0o127,0o313,0o242,0o313,0o232,0o103,0o270,0o40,(15658734^0O73567354),0o26,0o30,0o355,0o121,0o20,0o367,0o75,0o40,0o356,0o311,0o41,(0x75bcd15-0O726746425),0o136,0o21,(0x75bcd15-0O726746425),0o130,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(15658734^0O73567354),0o355,0o260,0o41,(0x75bcd15-0O726746425),0o100,0o21,(0O57060516-0xbc614d),0o100,(0O57060516-0xbc614d),0o377,0o17,0o66,0o30,0o355,0o260,(0O57060516-0xbc614d),0o376,0o376,0o355,0o170,0o313,0o127,0o312,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o367,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o50,0o50,(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,0o323,0o323,(0x75bcd15-0O726746425),0o323,0o323,0o323,(0x75bcd15-0O726746425),0o323,0o323,0o323,(0x75bcd15-0O726746425),0o50,0o323,0o323,0o323,0o45,0o323,0o323,0o323,(0x75bcd15-0O726746425),0o323,0o323,0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,0o50,0o50,0o55,0o323,0o45,0o45,0o44,0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,0o323,0o323,(0x75bcd15-0O726746425),0o50,0o323,0o55,0o55,0o45,0o323,0o323,0o323,0o44,0o323,0o323,0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),0o50,0o50,0o55,0o323,0o45,0o45,0o44,0o44,(0x5E30A78-0O570605164),0o323,0o44,0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,0o323,0o323,0o55,0o45,0o323,0o44,0o44,(0x5E30A78-0O570605164),0o323,0o323,0o323,0o44,0o323,0o323,0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o51,0o51,0o55,0o55,0o54,0o54,(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o11,0o11,0o44,0o44,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o11,0o11,0o51,0o51,0o55,0o55,(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o11,0o11,0o44,0o44,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o323,0o11,0o323,0o51,0o323,0o55,(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),0o323,0o11,0o44,0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0O347010110&0x463A71D),0o323,0o11,0o323,0o51,0o55,0o55,0o323,0o11,0o44,0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),0o323,(0O347010110&0x463A71D),0o323,0o11,0o51,0o51,0o323,0o11,0o44,0o323,0o323,0o323,0o323,0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),0o323,(0O347010110&0x463A71D),0o11,0o11,0o323,0o11,0o44,0o44,(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o323,0o323,0o323,0o323,0o323,(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),0o323,0o323,0o323,(0O347010110&0x463A71D),0o323,0o323,0o323,0o44,(0x75bcd15-0O726746425),0o323,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,0o106,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(15658734^0O73567354),(0O334664274-0x37368B9),(0x5E30A78-0O570605164),(0O507646144^0x51F4C61),(1011010-0O3666474),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(1011010-0O3666474),(0O507646144^0x51F4C61),(0x5E30A78-0O570605164),(0O334664274-0x37368B9),(15658734^0O73567354),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o105,0o105,(1011010-0O3666474),(1011010-0O3666474),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),0o101,0o101,(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),0o103,0o103,0o104,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o105,0o105,(1011010-0O3666474),(1011010-0O3666474),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),0o101,0o101,(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),0o103,0o103,0o104,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o376,0o303,(0O334664274-0x37368B9),0o277,0o375,0o277,0o375,0o377,0o375,0o377,0o375,0o377,0o375,0o371,0o375,0o361,0o377,0o371,0o377,0o371,0o377,0o371,0o377,0o371,0o375,0o371,0o375,0o377,0o373,0o177,0o376,0o177,0o376,0o307,(0O334664274-0x37368B9),0o277,0o375,0o277,0o375,0o377,0o375,0o377,0o375,0o377,0o375,0o361,0o377,0o354,0o377,0o374,0o377,0o371,0o377,0o363,0o377,0o347,0o377,0o340,0o375,0o377,0o363,0o177,0o376,0o177,0o376,0o306,(0O334664274-0x37368B9),0o277,0o375,0o277,0o375,0o277,0o375,0o377,0o375,0o377,0o377,0o361,0o377,0o354,0o377,0o374,0o377,0o361,0o377,0o374,0o377,0o354,0o377,0o361,0o375,0o377,0o347,0o177,0o376,0o177,0o376,0o306,(0O334664274-0x37368B9),0o277,0o375,0o277,0o375,0o277,0o375,0o277,0o377,0o377,0o377,0o375,0o377,0o371,0o377,0o361,0o377,0o351,0o377,0o340,0o377,0o371,0o377,0o371,0o375,0o377,0o233,0o177,0o376,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o105,0o107,0o107,0o107,0o107,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o101,0o171,(0x75bcd15-0O726746425),0o102,0o172,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o73,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o101,0o101,(0x75bcd15-0O726746425),0o102,0o102,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o116,0o132,0o54,0o105,0o116,0o104,0o120,0o101,0o125,0o123,0o105,0o202,0o112,(1011010-0O3666474),0o11,0o111,0o116,0o103,0o11,0o105,0o243,0o112,0o14,0o11,0o112,0o122,0o11,0o116,0o132,0o54,0o120,0o101,0o125,0o123,0o105,0o304,0o112,(1011010-0O3666474),0o11,0o111,0o116,0o103,0o11,0o104,0o345,0o112,0o14,0o11,0o112,0o122,0o11,0o116,0o132,0o54,0o120,0o101,0o125,0o123,0o105,(1011010-0O3666474),0o113,0o14,0o11,0o103,0o20,0o200,0o20,0o200,0o20,0o200,0o20,0o200,0o20,0o200,0o20,0o200,0o20,0o200,0o40,0o200,0o40,0o200,0o110,0o102,0o210,0o65,0o204,0o11,0o200,(0O57060516-0xbc614d),0o200,(15658734^0O73567354),0o103,0o215,0o74,0o166,0o67,0o354,0o167,0o356,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o157,0o366,0o357,0o367,0o357,0o367,0o325,0o133,0o333,0o273,0o325,0o133,0o337,0o373,0o355,0o167,0o356,0o367,0o155,0o166,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o167,0o356,0o67,0o354,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o300,(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o100,(0O57060516-0xbc614d),0o340,(0x9D8DE4-0O47306735),0o200,0o37,0o370,0o77,0o374,0o67,0o154,0o24,0o230,0o17,0o360,0o17,0o360,0o17,0o360,(15658734^0O73567354),0o100,(15658734^0O73567354),0o100,(1011010-0O3666474),0o140,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o300,(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o100,(0O57060516-0xbc614d),0o340,(0x9D8DE4-0O47306735),0o200,0o37,0o370,0o77,0o374,0o67,0o154,0o24,0o230,0o17,0o360,0o17,0o360,0o17,0o360,(15658734^0O73567354),0o100,(1011010-0O3666474),0o100,(15658734^0O73567354),0o140,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o300,(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o100,(0O57060516-0xbc614d),0o340,(0x9D8DE4-0O47306735),0o200,0o37,0o374,0o77,0o376,0o67,0o146,0o24,0o222,0o17,0o360,0o17,0o360,0o17,0o360,(15658734^0O73567354),0o100,(15658734^0O73567354),0o100,(1011010-0O3666474),0o140,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o300,(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o100,(0O57060516-0xbc614d),0o340,(0x9D8DE4-0O47306735),0o200,0o37,0o377,0o77,0o376,0o67,0o140,0o24,0o220,0o17,0o360,0o17,0o360,0o17,0o360,(15658734^0O73567354),0o100,(15658734^0O73567354),0o100,(1011010-0O3666474),0o140,0o74,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o64,(0x75bcd15-0O726746425),0o76,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o30,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o367,(0x75bcd15-0O726746425),0o373,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o166,(0x75bcd15-0O726746425),0o156,(0x75bcd15-0O726746425),0o167,(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o37,0o200,0o15,(0x75bcd15-0O726746425),0o17,0o200,0o17,(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o33,0o200,0o33,0o200,0o33,0o200,0o35,0o200,0o17,(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o300,(0O334664274-0x37368B9),0o300,(0x9D8DE4-0O47306735),0o340,(0O334664274-0x37368B9),0o100,(0O334664274-0x37368B9),0o340,(0O334664274-0x37368B9),0o300,(0O57060516-0xbc614d),0o200,(0O334664274-0x37368B9),0o300,(0x9D8DE4-0O47306735),0o340,(0x9D8DE4-0O47306735),0o340,0o17,0o160,0o17,0o260,(0O334664274-0x37368B9),0o300,(0x9D8DE4-0O47306735),0o140,(1011010-0O3666474),0o340,(0x9D8DE4-0O47306735),0o160,(0x75bcd15-0O726746425),0o360,(0x75bcd15-0O726746425),0o360,(0O57060516-0xbc614d),0o370,(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),0o370,(0x75bcd15-0O726746425),0o360,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o360,(0O57060516-0xbc614d),0o370,(0O334664274-0x37368B9),0o374,(0x9D8DE4-0O47306735),0o376,(1011010-0O3666474),0o366,(0x75bcd15-0O726746425),0o370,(0O57060516-0xbc614d),0o332,(0O334664274-0x37368B9),0o16,(0O334664274-0x37368B9),0o214,0o17,(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o37,0o200,0o13,(0x75bcd15-0O726746425),0o37,(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o37,0o200,0o77,0o300,0o177,0o340,0o157,0o140,0o37,(0x75bcd15-0O726746425),0o133,0o200,0o160,0o300,0o61,0o300,(0O334664274-0x37368B9),0o300,(0O334664274-0x37368B9),0o300,(0x9D8DE4-0O47306735),0o340,(15658734^0O73567354),0o300,(0x9D8DE4-0O47306735),0o300,(0O334664274-0x37368B9),0o300,(0O57060516-0xbc614d),0o200,(0O334664274-0x37368B9),0o300,(0x9D8DE4-0O47306735),0o340,(0x9D8DE4-0O47306735),0o340,0o16,0o360,0o15,0o360,(0O334664274-0x37368B9),0o300,(1011010-0O3666474),0o340,(0x9D8DE4-0O47306735),0o140,0o16,0o340,(0x75bcd15-0O726746425),0o360,(0x75bcd15-0O726746425),0o360,(0O57060516-0xbc614d),0o370,(0x75bcd15-0O726746425),0o260,(0O57060516-0xbc614d),0o360,(0x75bcd15-0O726746425),0o360,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o360,(0O57060516-0xbc614d),0o330,(0O57060516-0xbc614d),0o330,(0O57060516-0xbc614d),0o330,(0O57060516-0xbc614d),0o270,(0x75bcd15-0O726746425),0o360,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o340,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o54,(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o30,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o357,(0x75bcd15-0O726746425),0o337,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o156,(0x75bcd15-0O726746425),0o166,(0x75bcd15-0O726746425),0o356,0o53,0o113,0o15,0o170,0o312,0o140,0o35,0o315,0o133,0o36,0o376,0o54,0o300,0o30,0o363,0o21,0o362,0o100,0o32,0o267,0o312,0o240,0o31,0o74,0o62,0o232,0o100,0o22,0o176,0o376,0o207,0o50,0o14,0o315,0o132,0o36,0o300,0o172,0o263,0o302,0o305,0o36,0o74,0o30,(15658734^0O73567354),0o327,0o300,0o52,0o356,0o100,0o353,0o52,0o352,0o100,0o42,0o242,0o100,0o353,0o300,0o176,0o267,0o40,(0x5E30A78-0O570605164),0o43,0o43,0o43,0o43,0o43,0o172,0o243,0o74,0o302,(0O507646144^0x51F4C61),0o37,0o72,0o335,0o100,0o75,0o312,0o276,0o35,0o303,(0O507646144^0x51F4C61),0o37,0o315,0o34,0o53,0o300,0o267,0o312,0o112,0o36,0o75,0o207,0o137,0o376,0o55,0o70,(15658734^0O73567354),0o36,0o46,0o303,0o242,0o31,0o21,0o12,(0x75bcd15-0O726746425),0o325,0o50,0o27,0o315,0o117,0o36,0o353,0o343,0o50,0o21,0o353,0o317,0o54,0o353,0o52,0o344,0o100,0o353,0o50,(1011010-0O3666474),0o315,0o132,0o36,0o302,0o227,0o31,0o353,0o174,0o265,0o312,0o112,0o36,0o42,0o344,0o100,0o62,0o341,0o100,0o341,0o42,0o342,0o100,0o301,0o303,0o63,0o32,0o315,0o67,0o43,0o176,0o376,0o54,0o314,0o170,0o35,0o376,0o312,0o314,0o170,0o35,0o53,0o345,0o315,0o224,0o11,0o341,0o50,(0x9D8DE4-0O47306735),0o327,0o332,0o302,0o36,0o303,0o137,0o35,0o26,(0O57060516-0xbc614d),0o315,(0O507646144^0x51F4C61),0o37,0o267,0o310,0o327,0o376,0o225,0o40,0o366,0o25,0o40,0o363,0o30,0o350,0o76,(0O57060516-0xbc614d),0o62,0o234,0o100,0o303,0o174,0o40,0o315,0o312,0o101,0o376,0o43,0o40,(1011010-0O3666474),0o315,0o204,(15658734^0O73567354),0o62,0o234,0o100,0o53,0o327,0o314,0o376,0o40,0o312,0o151,0o41,0o366,0o40,0o376,0o140,0o40,0o33,0o315,(0O57060516-0xbc614d),0o53,0o376,(0x5E30A78-0O570605164),0o322,0o112,0o36,0o345,0o41,(0x75bcd15-0O726746425),0o74,0o31,0o42,0o40,0o100,0o173,0o346,0o77,0o62,0o246,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o42,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),0o203,0o66,(15658734^0O73567354),0o44,(0x75bcd15-0O726746425),0o200,(15658734^0O73567354),0o277,0o120,0o320,(15658734^0O73567354),0o52,(0x75bcd15-0O726746425),0o240,(0x5E30A78-0O570605164),0o277,0o130,0o320,0o22,0o46,(0x75bcd15-0O726746425),0o140,(0O347010110&0x463A71D),0o277,0o140,0o300,(15658734^0O73567354),0o45,(0x75bcd15-0O726746425),0o100,0o14,0o277,0o100,0o300,(15658734^0O73567354),0o45,(0x75bcd15-0O726746425),0o100,0o12,0o277,0o100,0o260,(15658734^0O73567354),0o145,(0x75bcd15-0O726746425),0o144,0o364,0o277,0o40,0o240,(15658734^0O73567354),0o152,(0x75bcd15-0O726746425),0o200,(1011010-0O3666474),0o277,0o46,0o260,(15658734^0O73567354),0o53,(0x75bcd15-0O726746425),0o240,(0x5E30A78-0O570605164),0o277,0o200,0o340,0o22,0o155,(0x75bcd15-0O726746425),0o140,(0O347010110&0x463A71D),0o276,0o20,0o320,0o22,0o146,(0x75bcd15-0O726746425),0o300,0o366,0o277,0o160,0o300,(0O57060516-0xbc614d),0o144,(0x75bcd15-0O726746425),0o160,(0O57060516-0xbc614d),0o276,0o23,0o35,(0O57060516-0xbc614d),0o344,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o274,(0x75bcd15-0O726746425),0o11,0o22,0o154,(0x75bcd15-0O726746425),0o60,0o14,0o271,(0x75bcd15-0O726746425),0o300,0o22,0o47,(0x75bcd15-0O726746425),0o20,(0x5E30A78-0O570605164),0o260,(0x75bcd15-0O726746425),0o40,(15658734^0O73567354),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o140,(15658734^0O73567354),0o272,(0x75bcd15-0O726746425),0o260,(15658734^0O73567354),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o140,(15658734^0O73567354),0o272,(0x75bcd15-0O726746425),0o260,0o22,0o44,(0x75bcd15-0O726746425),0o200,(15658734^0O73567354),0o272,0o40,0o320,(15658734^0O73567354),0o12,(0x75bcd15-0O726746425),0o40,(15658734^0O73567354),0o234,0o40,0o140,(0O57060516-0xbc614d),0o352,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o274,(0x75bcd15-0O726746425),0o12,0o201,0o343,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o274,0o16,0o35,(0O57060516-0xbc614d),0o344,(0x75bcd15-0O726746425),0o260,(0O57060516-0xbc614d),0o274,0o20,0o35,(0O57060516-0xbc614d),0o346,(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o274,(0O507646144^0x51F4C61),0o35,(0O57060516-0xbc614d),0o355,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o274,(0x75bcd15-0O726746425),0o12,(0O57060516-0xbc614d),0o353,(0x75bcd15-0O726746425),0o160,(0x75bcd15-0O726746425),0o274,0o16,0o27,(0O57060516-0xbc614d),0o352,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o266,(0O507646144^0x51F4C61),0o36,0o22,0o152,(0x75bcd15-0O726746425),0o220,0o374,0o262,0o200,0o320,(0O57060516-0xbc614d),0o346,(0x75bcd15-0O726746425),0o260,(0x75bcd15-0O726746425),0o274,0o14,0o35,0o22,0o145,(0x75bcd15-0O726746425),0o60,(0x5E30A78-0O570605164),0o262,(0x75bcd15-0O726746425),0o200,0o22,0o345,(0x75bcd15-0O726746425),0o100,0o374,0o255,(0x75bcd15-0O726746425),0o200,0o22,0o43,(0x75bcd15-0O726746425),0o220,(0x5E30A78-0O570605164),0o267,0o100,0o240,(0O57060516-0xbc614d),0o345,(0x75bcd15-0O726746425),0o320,(0O57060516-0xbc614d),0o270,(0x75bcd15-0O726746425),0o36,(0O57060516-0xbc614d),0o343,(0x75bcd15-0O726746425),0o260,(0x75bcd15-0O726746425),0o270,0o20,0o32,0o201,0o345,(0x75bcd15-0O726746425),0o320,(0O57060516-0xbc614d),0o270,0o16,0o30,0o201,0o352,(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),0o270,0o17,0o27,0o201,0o145,(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),0o257,0o12,0o36,(0O57060516-0xbc614d),0o352,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o274,(0O347010110&0x463A71D),0o30,(0O57060516-0xbc614d),0o156,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o256,(15658734^0O73567354),(0x9D8DE4-0O47306735),(0O57060516-0xbc614d),0o145,(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o257,0o14,0o22,0o22,0o105,(0x75bcd15-0O726746425),0o160,(0x5E30A78-0O570605164),0o272,0o140,0o300,0o22,0o146,(0x75bcd15-0O726746425),0o226,(15658734^0O73567354),0o272,0o220,0o300,0o22,0o113,(0x75bcd15-0O726746425),0o220,0o372,0o272,0o140,0o256,(15658734^0O73567354),0o112,(0x75bcd15-0O726746425),0o260,(0x5E30A78-0O570605164),0o272,0o220,0o270,0o22,0o112,(0x75bcd15-0O726746425),0o100,(0x5E30A78-0O570605164),0o272,(0x75bcd15-0O726746425),0o320,0o22,0o105,(0x75bcd15-0O726746425),0o260,(0O347010110&0x463A71D),0o272,(0x75bcd15-0O726746425),0o320,(0O57060516-0xbc614d),0o146,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o273,(0x75bcd15-0O726746425),0o23,(0O57060516-0xbc614d),0o156,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o273,0o21,0o36,(15658734^0O73567354),0o53,(0x75bcd15-0O726746425),0o100,(1011010-0O3666474),0o267,0o20,0o320,0o22,0o46,(0x75bcd15-0O726746425),0o300,(0x5E30A78-0O570605164),0o267,(0x75bcd15-0O726746425),0o320,0o22,0o44,(0x75bcd15-0O726746425),0o200,0o370,0o267,(0x75bcd15-0O726746425),0o320,0o22,0o52,(0x75bcd15-0O726746425),0o60,(15658734^0O73567354),0o267,(0x75bcd15-0O726746425),0o240,(0O57060516-0xbc614d),0o343,(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),0o265,(0x9D8DE4-0O47306735),0o26,(0O57060516-0xbc614d),0o353,(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),0o265,(0x5E30A78-0O570605164),0o16,(0O57060516-0xbc614d),0o346,(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),0o275,(0x75bcd15-0O726746425),0o30,0o201,0o147,(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),0o273,(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o201,0o344,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o275,(0x75bcd15-0O726746425),(1011010-0O3666474),0o201,0o143,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o273,(0x75bcd15-0O726746425),0o11,0o22,0o147,(0x75bcd15-0O726746425),0o100,(0x5E30A78-0O570605164),0o255,0o40,0o320,(0O57060516-0xbc614d),0o144,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o271,(0x75bcd15-0O726746425),0o33,0o204,(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),0o202,(0x75bcd15-0O726746425),0o201,0o146,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o255,0o20,0o36,(15658734^0O73567354),0o145,(0x75bcd15-0O726746425),0o140,(15658734^0O73567354),0o271,(0x75bcd15-0O726746425),0o160,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o343,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o264,(0x75bcd15-0O726746425),0o33,0o201,0o346,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o264,(0x5E30A78-0O570605164),0o33,(0O57060516-0xbc614d),0o344,(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),0o264,(15658734^0O73567354),0o33,0o201,0o346,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o264,0o30,0o36,(0O57060516-0xbc614d),0o343,(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o256,0o25,0o36,(0x5E30A78-0O570605164),(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o34,(0x75bcd15-0O726746425),0o101,(0x75bcd15-0O726746425),0o22,0o145,(0x75bcd15-0O726746425),0o100,0o374,0o234,(0x75bcd15-0O726746425),0o240,0o22,0o43,(0x75bcd15-0O726746425),0o40,(15658734^0O73567354),0o234,(0x75bcd15-0O726746425),0o320,0o22,(1011010-0O3666474),(0x75bcd15-0O726746425),0o220,(1011010-0O3666474),0o234,(0x75bcd15-0O726746425),0o300,0o22,0o152,(0x75bcd15-0O726746425),0o200,0o370,0o234,0o20,0o320,0o201,0o344,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o264,(0x5E30A78-0O570605164),0o24,0o201,0o346,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o264,0o14,0o34,0o41,0o352,(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),0o264,0o11,0o24,0o201,0o347,(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),0o264,0o26,0o33,0o41,0o346,(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),0o264,(0O507646144^0x51F4C61),0o14,0o101,0o351,(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),0o264,0o13,0o22,0o141,0o344,(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),0o264,0o20,0o27,(0O57060516-0xbc614d),0o342,(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),0o264,0o27,0o36,(15658734^0O73567354),0o43,(0x75bcd15-0O726746425),0o204,(0x5E30A78-0O570605164),0o260,0o160,0o260,(15658734^0O73567354),0o46,(0x75bcd15-0O726746425),0o214,(0x5E30A78-0O570605164),0o260,0o160,0o260,(15658734^0O73567354),0o51,(0x75bcd15-0O726746425),0o224,(0x5E30A78-0O570605164),0o260,0o160,0o260,(15658734^0O73567354),0o44,(0x75bcd15-0O726746425),0o234,(0x5E30A78-0O570605164),0o260,0o160,0o260,(15658734^0O73567354),0o42,(0x75bcd15-0O726746425),0o244,(0x5E30A78-0O570605164),0o260,0o160,0o260,(15658734^0O73567354),0o45,(0x75bcd15-0O726746425),0o254,(0x5E30A78-0O570605164),0o260,0o160,0o260,(0O57060516-0xbc614d),0o346,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o265,0o23,0o36,(15658734^0O73567354),0o46,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o260,0o120,0o160,0o201,0o143,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o256,(0x75bcd15-0O726746425),0o13,(0O57060516-0xbc614d),0o146,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o276,0o15,0o25,(0O57060516-0xbc614d),0o147,(0O57060516-0xbc614d),0o140,(0x75bcd15-0O726746425),0o267,0o14,0o30,0o201,0o142,(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),0o271,(15658734^0O73567354),(1011010-0O3666474),(0O57060516-0xbc614d),0o344,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o257,(0x75bcd15-0O726746425),0o36,(0O57060516-0xbc614d),0o346,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o274,0o11,0o21,(15658734^0O73567354),0o152,(0x75bcd15-0O726746425),0o220,0o374,0o254,(0x75bcd15-0O726746425),0o300,0o22,0o145,(0x75bcd15-0O726746425),0o100,(0O347010110&0x463A71D),0o254,(0x75bcd15-0O726746425),0o300,0o201,0o146,(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),0o257,(0x9D8DE4-0O47306735),0o24,(0O57060516-0xbc614d),0o144,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o255,(0x9D8DE4-0O47306735),0o21,0o22,0o144,(0x75bcd15-0O726746425),0o200,0o376,0o254,0o160,0o240,(15658734^0O73567354),0o153,(0x75bcd15-0O726746425),0o140,(0x5E30A78-0O570605164),0o253,0o120,0o240,0o22,0o145,(0x75bcd15-0O726746425),0o230,(15658734^0O73567354),0o253,0o120,0o240,(0O57060516-0xbc614d),0o143,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o264,(0x75bcd15-0O726746425),0o17,(0O57060516-0xbc614d),0o346,(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),0o274,(0x75bcd15-0O726746425),0o12,(0O57060516-0xbc614d),0o146,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o276,0o26,0o36,(0O57060516-0xbc614d),0o152,(0x75bcd15-0O726746425),0o260,(0x75bcd15-0O726746425),0o256,0o21,0o36,0o201,0o144,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o276,0o22,0o26,0o201,0o143,(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),0o273,0o13,0o22,(0O57060516-0xbc614d),0o346,(0x75bcd15-0O726746425),0o160,(0x75bcd15-0O726746425),0o274,0o11,0o36,(0O57060516-0xbc614d),0o143,(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),0o256,0o21,0o36,(0O57060516-0xbc614d),0o143,(0x75bcd15-0O726746425),0o260,(0x75bcd15-0O726746425),0o265,(0x75bcd15-0O726746425),0o13,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o255,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o262,0o262,0o262,0o262,0o270,0o270,0o270,0o270,0o253,0o253,0o253,0o253,0o237,0o222,0o17,0o20,0o21,0o274,0o273,0o272,0o45,0o45,0o245,0o33,0o271,0o272,0o34,0o242,0o31,0o31,0o231,0o231,0o263,0o26,0o226,0o50,0o214,0o14,0o14,0o211,(0x9D8DE4-0O47306735),0o56,0o56,0o46,0o225,0o225,0o225,0o225,0o225,0o16,0o12,0o225,0o225,0o16,0o15,0o15,0o54,0o23,0o203,0o203,0o203,0o61,0o61,0o61,0o261,0o261,0o261,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o235,0o236,0o241,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o31,0o52,0o64,0o70,0o311,0o263,0o173,0o106,0o37,0o31,0o34,0o26,0o144,0o231,0o237,0o237,0o237,0o32,0o315,0o266,0o74,0o320,0o246,0o335,0o67,0o266,0o172,0o42,0o103,0o250,(1011010-0O3666474),0o146,0o307,0o311,0o42,0o363,0o263,0o160,0o226,0o145,0o357,0o152,0o235,0o111,0o221,0o222,0o224,0o226,0o227,0o132,0o213,0o231,0o233,0o172,0o302,0o45,0o222,0o142,0o141,0o104,0o147,0o234,0o344,0o374,0o102,0o134,0o244,0o223,0o224,0o225,0o226,0o227,0o230,0o231,0o232,0o233,0o234,0o235,0o236,0o26,0o72,0o310,0o267,(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o77,(0x75bcd15-0O726746425),0o17,0o60,0o17,0o14,0o17,(0O334664274-0x37368B9),0o17,(0x75bcd15-0O726746425),0o317,(0x75bcd15-0O726746425),0o57,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o77,0o370,0o77,0o360,0o77,0o356,0o37,0o337,0o37,0o333,0o17,0o373,0o17,0o373,(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o77,(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o17,0o77,0o357,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o77,0o370,0o77,0o360,0o77,0o356,0o37,0o337,0o37,0o333,0o17,0o373,0o17,0o373,(0O334664274-0x37368B9),0o257,(0O57060516-0xbc614d),0o277,(0O57060516-0xbc614d),0o217,(0O57060516-0xbc614d),0o217,0o177,0o217,0o177,0o217,0o107,0o317,0o17,0o317,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o77,0o370,0o77,0o360,0o77,0o356,0o37,0o337,0o37,0o333,0o17,0o373,0o17,0o373,(0x75bcd15-0O726746425),0o17,(0x5E30A78-0O570605164),0o77,0o36,0o57,0o73,0o57,0o135,0o217,0o16,0o217,(0x9D8DE4-0O47306735),0o317,0o17,0o317,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o77,0o370,0o77,0o360,0o77,0o356,0o37,0o337,0o37,0o333,0o17,0o373,0o17,0o373,0o200,0o200,0o200,0o200,0o214,0o217,0o217,0o217,0o217,0o217,0o200,0o200,0o277,0o217,0o217,0o217,0o205,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o277,0o277,0o277,0o277,0o277,0o277,0o277,0o277,0o277,0o217,0o263,0o260,0o260,0o200,0o205,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o177,0o377,0o177,0o377,0o174,0o77,0o174,0o77,0o177,0o377,0o177,0o377,0o177,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o110,(0O57060516-0xbc614d),0o54,(0x5E30A78-0O570605164),0o274,0o22,0o376,0o113,0o376,0o56,0o177,0o274,0o77,0o376,0o174,0o377,0o362,0o177,0o311,0o177,0o45,0o74,0o224,0o62,0o120,0o11,0o100,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o340,0o17,0o360,0o27,0o350,0o17,0o360,0o26,0o150,0o16,0o160,0o26,0o150,0o17,0o360,0o27,0o350,0o17,0o360,0o27,0o350,(0O347010110&0x463A71D),0o20,0o27,0o350,0o20,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o22,(0x75bcd15-0O726746425),0o64,0o200,0o75,0o40,0o177,0o110,0o177,0o322,0o376,0o164,0o374,0o75,0o76,0o177,0o117,0o377,0o223,0o376,0o244,0o376,0o51,0o74,0o12,0o114,(15658734^0O73567354),0o220,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(15658734^0O73567354),0o42,(15658734^0O73567354),0o251,0o124,0o250,0o330,0o161,0o164,0o42,0o332,0o73,0o256,0o56,0o253,0o44,0o371,0o40,0o333,0o40,0o330,(0O57060516-0xbc614d),0o124,(15658734^0O73567354),0o212,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(0O57060516-0xbc614d),0o164,(0x75bcd15-0O726746425),0o330,0o121,0o124,0o122,0o372,0o43,0o336,0o347,0o253,0o36,0o371,0o30,0o331,(0O347010110&0x463A71D),0o331,0o11,0o124,(1011010-0O3666474),0o212,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(15658734^0O73567354),(0O334664274-0x37368B9),0o216,(0x75bcd15-0O726746425),0o370,(0O57060516-0xbc614d),0o124,(15658734^0O73567354),0o332,(0O334664274-0x37368B9),0o376,0o21,0o213,0o113,0o251,0o53,0o373,0o226,0o370,0o154,0o330,(0O507646144^0x51F4C61),0o124,(15658734^0O73567354),0o212,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(15658734^0O73567354),(0O57060516-0xbc614d),0o164,(0x75bcd15-0O726746425),0o330,0o121,0o124,0o122,0o372,0o43,0o336,0o347,0o253,0o36,0o371,0o30,0o331,(0O347010110&0x463A71D),0o331,0o11,0o124,(1011010-0O3666474),0o212,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,(0x5E30A78-0O570605164),0o256,0o354,0o273,0o175,0o340,(0x9D8DE4-0O47306735),0o275,0o265,0o240,(0x5E30A78-0O570605164),0o73,0o174,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o35,0o260,0o40,(0x5E30A78-0O570605164),0o73,0o174,0o242,0o104,0o375,0o267,0o240,(0x5E30A78-0O570605164),0o73,0o334,0o40,(0x5E30A78-0O570605164),0o40,(0x5E30A78-0O570605164),0o67,0o264,0o240,(0x5E30A78-0O570605164),0o373,0o177,0o240,(0x5E30A78-0O570605164),0o75,0o264,0o40,(0x5E30A78-0O570605164),0o33,0o170,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o75,0o264,0o242,0o104,0o273,0o175,0o340,(0x9D8DE4-0O47306735),0o275,0o265,0o267,0o354,0o40,(0x5E30A78-0O570605164),0o40,(0x5E30A78-0O570605164),0o72,0o334,0o75,0o275,0o340,(0x9D8DE4-0O47306735),0o73,0o165,0o40,(0x5E30A78-0O570605164),0o75,0o274,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o33,0o160,0o40,(0x5E30A78-0O570605164),0o75,0o275,0o242,0o105,0o373,0o167,0o240,(0O507646144^0x51F4C61),0o75,0o355,0o40,(0x5E30A78-0O570605164),0o40,(0x5E30A78-0O570605164),0o73,0o165,0o240,(0O507646144^0x51F4C61),0o375,0o277,0o240,(0O507646144^0x51F4C61),0o73,0o165,0o40,(0x5E30A78-0O570605164),0o35,0o270,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o73,0o164,0o44,0o204,0o75,0o275,0o340,(0x9D8DE4-0O47306735),0o73,0o165,0o56,0o354,0o40,(0x5E30A78-0O570605164),0o17,0o360,0o27,0o350,0o30,0o30,0o67,0o314,0o50,0o44,0o123,0o222,0o144,0o112,0o251,0o53,0o252,0o53,0o152,0o112,0o151,0o222,0o44,0o44,0o63,0o314,0o30,0o30,0o27,0o350,0o17,0o360,(0x75bcd15-0O726746425),0o340,(0x9D8DE4-0O47306735),0o360,0o70,0o30,0o163,0o314,0o144,0o46,0o111,0o223,0o122,0o113,0o324,0o53,0o325,0o52,0o324,0o312,0o322,0o22,0o111,0o344,0o44,0o14,0o23,0o364,(0O347010110&0x463A71D),0o170,(0x9D8DE4-0O47306735),0o200,(0O57060516-0xbc614d),0o200,(0x9D8DE4-0O47306735),0o340,0o30,0o30,0o163,0o316,0o244,0o45,0o311,0o225,0o322,0o125,0o324,0o125,0o324,0o225,0o322,0o45,0o311,0o311,0o344,0o23,0o163,0o346,0o30,0o30,(0x9D8DE4-0O47306735),0o340,(0O57060516-0xbc614d),0o200,(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o340,0o37,0o334,0o60,0o46,0o147,0o222,0o310,0o112,0o323,0o52,0o324,0o253,0o124,0o53,0o122,0o113,0o111,0o223,0o44,0o46,0o63,0o314,0o50,0o30,0o37,0o360,(0O57060516-0xbc614d),0o340,0o14,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o36,(0x75bcd15-0O726746425),0o22,(0x75bcd15-0O726746425),0o63,(0x75bcd15-0O726746425),0o77,(0x75bcd15-0O726746425),0o163,0o200,0o141,0o200,0o141,0o200,0o300,0o300,0o300,0o300,0o200,0o100,0o200,0o100,(0O347010110&0x463A71D),0o100,(0O347010110&0x463A71D),0o100,0o14,0o300,(0x5E30A78-0O570605164),0o200,(0x9D8DE4-0O47306735),0o200,(0x9D8DE4-0O47306735),0o200,0o14,0o300,0o34,0o340,0o73,0o160,0o60,0o60,0o140,0o30,0o140,0o30,0o100,(0O347010110&0x463A71D),0o300,0o14,0o200,(0x5E30A78-0O570605164),0o200,(0x5E30A78-0O570605164),(15658734^0O73567354),0o20,(15658734^0O73567354),0o20,(0O334664274-0x37368B9),0o60,(0O57060516-0xbc614d),0o40,(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o340,(0O334664274-0x37368B9),0o60,(0x9D8DE4-0O47306735),0o70,0o16,0o334,0o14,0o14,0o30,(1011010-0O3666474),0o30,(1011010-0O3666474),0o20,(15658734^0O73567354),0o60,(0O334664274-0x37368B9),0o40,(0O57060516-0xbc614d),0o40,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o170,(0x75bcd15-0O726746425),0o110,(0x75bcd15-0O726746425),0o314,(0x75bcd15-0O726746425),0o374,(0O57060516-0xbc614d),0o316,(0O57060516-0xbc614d),0o206,(0O57060516-0xbc614d),0o206,(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0O334664274-0x37368B9),(15658734^0O73567354),(0O57060516-0xbc614d),(15658734^0O73567354),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o376,0o100,(15658734^0O73567354),0o377,0o377,0o336,0o173,0o300,(0O334664274-0x37368B9),0o300,(0O334664274-0x37368B9),0o336,0o173,0o377,0o377,0o100,(15658734^0O73567354),0o177,0o376,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),0o35,(0x75bcd15-0O726746425),0o66,0o200,0o147,0o100,0o303,0o240,0o161,0o320,0o270,0o150,0o134,0o64,0o54,0o72,0o26,0o35,0o13,0o216,(0O507646144^0x51F4C61),0o303,(15658734^0O73567354),0o346,(0O57060516-0xbc614d),0o154,(0x75bcd15-0O726746425),0o270,(0x75bcd15-0O726746425),0o120,(0x9D8DE4-0O47306735),0o340,0o37,0o370,0o24,0o50,0o26,0o150,0o26,0o150,0o26,0o150,0o26,0o150,0o24,0o50,0o24,0o50,0o26,0o150,0o26,0o150,0o26,0o150,0o26,0o150,0o24,0o50,0o37,0o370,(0x9D8DE4-0O47306735),0o340,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o270,(0O57060516-0xbc614d),0o154,(15658734^0O73567354),0o346,(0O507646144^0x51F4C61),0o303,0o13,0o216,0o26,0o35,0o54,0o72,0o134,0o64,0o270,0o150,0o161,0o320,0o303,0o240,0o147,0o100,0o66,0o200,0o35,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o231,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),0o201,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o30,(0x75bcd15-0O726746425),0o44,(0x75bcd15-0O726746425),0o44,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),0o201,(0x75bcd15-0O726746425),0o347,(0x75bcd15-0O726746425),0o245,(0x75bcd15-0O726746425),0o303,(0x75bcd15-0O726746425),0o245,(0x75bcd15-0O726746425),0o347,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o37,0o200,0o46,0o100,0o71,0o300,0o60,0o300,0o37,0o200,0o11,(0x75bcd15-0O726746425),0o20,0o200,0o40,0o100,0o100,0o40,0o200,0o20,0o340,0o160,0o240,0o120,0o300,0o60,0o240,0o120,0o340,0o160,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o340,0o11,0o220,0o16,0o160,0o16,0o160,(1011010-0O3666474),0o140,0o33,0o330,0o140,(1011010-0O3666474),0o200,(0O57060516-0xbc614d),0o340,(0x9D8DE4-0O47306735),0o240,(0O507646144^0x51F4C61),0o300,(0O334664274-0x37368B9),0o240,(0O507646144^0x51F4C61),0o340,(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o370,(15658734^0O73567354),0o144,(0O334664274-0x37368B9),0o234,(0O334664274-0x37368B9),0o14,(0O57060516-0xbc614d),0o370,(0x75bcd15-0O726746425),0o220,(0O57060516-0xbc614d),(0O347010110&0x463A71D),(15658734^0O73567354),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(15658734^0O73567354),(0O347010110&0x463A71D),(0O57060516-0xbc614d),0o16,(0x9D8DE4-0O47306735),0o12,(0O507646144^0x51F4C61),0o14,(0O334664274-0x37368B9),0o12,(0O507646144^0x51F4C61),0o16,(0x9D8DE4-0O47306735),0o14,(0x75bcd15-0O726746425),0o22,(0x75bcd15-0O726746425),0o41,0o20,0o22,0o40,0o214,0o100,0o122,0o200,0o57,(0x75bcd15-0O726746425),0o57,(0x75bcd15-0O726746425),0o137,0o200,0o137,0o200,0o137,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o300,0o135,0o200,0o135,0o200,0o377,0o300,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(15658734^0O73567354),0o203,(0x5E30A78-0O570605164),0o114,0o310,0o43,0o20,0o24,0o240,0o13,0o300,0o13,0o300,0o27,0o340,0o27,0o340,0o27,0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o360,0o33,0o260,0o33,0o260,0o77,0o360,0o200,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o40,(0O57060516-0xbc614d),0o21,0o342,(0O347010110&0x463A71D),0o304,(0O507646144^0x51F4C61),0o50,(15658734^0O73567354),0o360,(15658734^0O73567354),0o360,(0O507646144^0x51F4C61),0o370,(0O507646144^0x51F4C61),0o370,(0O507646144^0x51F4C61),0o370,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o374,0o13,0o164,0o13,0o164,0o17,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o60,(0x5E30A78-0O570605164),0o314,(15658734^0O73567354),0o61,(0O57060516-0xbc614d),0o112,(0x75bcd15-0O726746425),0o274,(0x75bcd15-0O726746425),0o274,(0O57060516-0xbc614d),0o176,(0O57060516-0xbc614d),0o176,(0O57060516-0xbc614d),0o176,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,(15658734^0O73567354),0o355,(15658734^0O73567354),0o355,(0O334664274-0x37368B9),0o377,0o70,(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o155,0o200,0o104,0o100,0o154,0o100,0o174,0o40,0o174,(0x75bcd15-0O726746425),0o174,0o14,0o174,0o62,0o374,0o314,0o377,0o60,0o374,0o300,0o177,(0x75bcd15-0O726746425),0o154,(0x75bcd15-0O726746425),0o70,(0x75bcd15-0O726746425),0o16,0o140,0o37,0o224,0o37,(0O347010110&0x463A71D),0o33,0o40,0o21,0o120,0o33,0o120,0o37,0o240,0o37,0o240,0o177,0o100,0o337,0o100,0o337,0o200,0o237,0o200,0o177,(0x75bcd15-0O726746425),0o37,(0x75bcd15-0O726746425),0o33,(0x75bcd15-0O726746425),0o16,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o200,(0x9D8DE4-0O47306735),0o300,(0x9D8DE4-0O47306735),0o340,(1011010-0O3666474),0o330,(0x5E30A78-0O570605164),0o104,0o16,0o304,0o177,0o302,0o357,0o300,0o357,0o300,0o217,0o300,0o167,0o300,(0x9D8DE4-0O47306735),0o300,(0x9D8DE4-0O47306735),0o300,(0x9D8DE4-0O47306735),0o300,(1011010-0O3666474),0o300,(0O334664274-0x37368B9),0o200,(0x75bcd15-0O726746425),0o340,(0O57060516-0xbc614d),0o360,(0O57060516-0xbc614d),0o360,(0O57060516-0xbc614d),0o262,(0O57060516-0xbc614d),0o25,(0O57060516-0xbc614d),0o265,(0O57060516-0xbc614d),0o372,(0O57060516-0xbc614d),0o372,(0x9D8DE4-0O47306735),0o364,0o15,0o364,0o15,0o370,0o11,0o370,(0x9D8DE4-0O47306735),0o360,(0O57060516-0xbc614d),0o360,(0O57060516-0xbc614d),0o260,(0x75bcd15-0O726746425),0o340,0o14,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o57,(0x75bcd15-0O726746425),0o57,(0x75bcd15-0O726746425),0o117,0o200,0o137,0o200,0o137,0o200,0o237,0o300,0o277,0o300,0o275,0o300,0o272,0o300,0o275,0o100,0o132,0o200,0o135,0o200,0o77,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o160,(0O334664274-0x37368B9),0o230,0o14,0o170,0o63,0o370,0o107,0o360,0o137,0o360,0o277,0o360,0o276,0o240,0o275,0o140,0o132,0o300,0o135,0o100,0o77,0o200,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o300,0o34,0o170,0o41,0o374,0o117,0o376,0o137,0o376,0o237,0o377,0o277,0o357,0o137,0o126,0o137,0o256,0o43,0o124,0o37,0o370,(0O334664274-0x37368B9),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,(0x75bcd15-0O726746425),0o27,0o300,0o27,0o360,0o23,0o374,0o13,0o376,0o13,0o376,0o13,0o327,(0O507646144^0x51F4C61),0o353,(0O507646144^0x51F4C61),0o327,(15658734^0O73567354),0o352,(15658734^0O73567354),0o176,(0O57060516-0xbc614d),0o214,(0x75bcd15-0O726746425),0o160,(0x9D8DE4-0O47306735),0o300,0o30,0o60,0o43,0o210,0o104,0o104,0o210,0o42,0o220,0o23,0o220,0o23,0o210,0o42,0o104,0o104,0o43,0o210,0o30,0o60,(0x9D8DE4-0O47306735),0o300,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o200,(0x9D8DE4-0O47306735),0o300,0o30,0o60,0o40,(0O347010110&0x463A71D),0o103,0o204,0o204,0o102,0o210,0o43,0o210,0o43,0o204,0o102,0o103,0o204,0o40,(0O347010110&0x463A71D),0o30,0o60,(0x9D8DE4-0O47306735),0o300,0o17,0o200,0o35,0o320,(0O347010110&0x463A71D),0o340,(0x5E30A78-0O570605164),0o100,(0x9D8DE4-0O47306735),0o300,0o37,0o360,0o76,0o170,0o174,0o74,0o176,0o174,0o377,0o376,0o377,0o376,0o360,(0x75bcd15-0O726746425),0o377,0o200,0o177,0o360,0o177,0o374,0o77,0o370,0o37,0o360,(0x9D8DE4-0O47306735),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o300,0o37,0o360,0o74,0o370,0o170,0o174,0o174,0o374,0o377,0o200,0o374,(0x75bcd15-0O726746425),0o360,(0x75bcd15-0O726746425),0o370,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o177,0o200,0o77,0o340,0o37,0o360,(0x9D8DE4-0O47306735),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o300,(0O347010110&0x463A71D),0o40,0o12,0o240,(0O347010110&0x463A71D),0o40,0o13,0o240,0o20,0o20,0o45,0o110,0o12,0o240,0o75,0o170,0o106,0o304,(0x9D8DE4-0O47306735),0o300,(15658734^0O73567354),0o200,(0O507646144^0x51F4C61),0o100,0o17,0o340,0o24,0o200,(0O347010110&0x463A71D),0o300,(0x9D8DE4-0O47306735),0o300,(0O347010110&0x463A71D),0o40,0o12,0o240,(0O347010110&0x463A71D),0o40,0o71,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o100,0o12,0o240,0o35,0o160,0o26,0o320,0o27,0o320,0o12,0o240,(0O507646144^0x51F4C61),0o100,0o17,0o340,(15658734^0O73567354),0o120,(1011010-0O3666474),0o40,(0O57060516-0xbc614d),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o200,0o105,0o221,(0O57060516-0xbc614d),0o200,0o211,0o242,0o105,0o221,(0O57060516-0xbc614d),0o200,0o315,0o263,0o315,0o263,0o315,0o263,0o315,0o263,0o43,0o304,0o22,0o110,0o15,0o260,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o200,0o211,0o242,(0O57060516-0xbc614d),0o200,0o105,0o221,0o211,0o242,(0O57060516-0xbc614d),0o200,0o315,0o263,0o315,0o263,0o315,0o263,0o315,0o263,0o43,0o304,0o22,0o110,0o15,0o260,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o377,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o122,0o200,0o300,0o300,0o63,(0x75bcd15-0O726746425),0o263,0o100,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o55,(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,0o77,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o15,0o40,0o44,(0x75bcd15-0O726746425),0o14,0o320,0o14,0o360,0o50,(0x75bcd15-0O726746425),0o15,0o40,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,0o17,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o320,(0x75bcd15-0O726746425),0o100,0o13,0o64,(0O334664274-0x37368B9),0o60,0o14,0o14,(0O507646144^0x51F4C61),0o50,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0O334664274-0x37368B9),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o54,(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0O334664274-0x37368B9),0o314,(15658734^0O73567354),0o314,(0x75bcd15-0O726746425),0o11,(0O57060516-0xbc614d),0o54,(0x75bcd15-0O726746425),0o100,(0O57060516-0xbc614d),0o200,(15658734^0O73567354),0o100,(0O507646144^0x51F4C61),0o300,0o13,0o300,0o13,0o300,0o27,0o300,0o27,0o300,0o26,0o100,0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o17,0o300,(0O347010110&0x463A71D),0o100,0o23,0o40,0o23,0o40,(0O347010110&0x463A71D),0o100,0o17,0o300,(0x9D8DE4-0O47306735),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o200,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o16,(0x75bcd15-0O726746425),0o13,(0x75bcd15-0O726746425),0o13,0o200,0o13,0o300,0o13,0o300,0o13,0o340,0o17,0o340,0o11,0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o140,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o334,(0x75bcd15-0O726746425),0o274,(0O57060516-0xbc614d),0o176,(0O57060516-0xbc614d),0o176,(0x75bcd15-0O726746425),0o274,(0x75bcd15-0O726746425),0o274,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o37,0o200,0o77,0o300,0o177,0o321,0o377,0o137,0o377,0o237,0o377,0o317,0o377,0o323,0o377,0o337,0o374,0o377,0o360,0o377,0o340,0o177,0o300,0o77,0o200,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0O57060516-0xbc614d),0o330,(0O334664274-0x37368B9),0o234,(0x9D8DE4-0O47306735),0o117,0o37,0o327,0o377,0o333,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o217,0o376,(0x9D8DE4-0O47306735),0o374,(0O334664274-0x37368B9),0o370,(0x75bcd15-0O726746425),0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o200,(0x9D8DE4-0O47306735),0o300,0o217,0o300,0o337,0o340,0o333,0o361,0o127,0o377,0o217,0o377,0o337,0o377,0o337,0o377,0o377,0o377,0o374,0o177,0o370,0o77,0o160,0o77,(0x75bcd15-0O726746425),0o37,(0x75bcd15-0O726746425),0o16,(0x75bcd15-0O726746425),0o70,(0x75bcd15-0O726746425),0o376,(0O57060516-0xbc614d),0o377,0o203,0o377,0o307,0o377,0o337,0o377,0o137,0o377,0o233,0o377,0o307,0o377,0o337,0o377,0o337,0o307,0o377,(0O57060516-0xbc614d),0o376,(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o300,0o16,0o360,0o35,0o370,0o76,0o374,0o123,0o316,0o145,0o246,0o244,0o47,0o161,0o217,0o277,0o367,0o125,0o357,0o156,0o166,0o123,0o312,0o70,0o34,0o26,0o170,0o13,0o360,(15658734^0O73567354),0o300,(0O334664274-0x37368B9),0o300,0o15,0o360,0o32,0o370,0o77,0o374,0o121,0o214,0o144,0o46,0o305,0o247,0o263,0o317,0o135,0o273,0o252,0o167,0o137,0o372,0o162,0o116,0o70,0o34,0o34,0o70,0o13,0o360,(15658734^0O73567354),0o300,(0O334664274-0x37368B9),0o300,0o13,0o360,0o25,0o170,0o77,0o374,0o120,0o14,0o145,0o246,0o307,0o347,0o361,0o217,0o276,0o177,0o335,0o367,0o54,0o72,0o132,0o136,0o54,0o74,0o26,0o170,0o13,0o360,(0O334664274-0x37368B9),0o300,(0O334664274-0x37368B9),0o300,0o15,0o360,0o32,0o370,0o77,0o374,0o121,0o214,0o144,0o46,0o305,0o247,0o263,0o317,0o135,0o273,0o252,0o167,0o137,0o372,0o162,0o116,0o70,0o34,0o34,0o70,0o13,0o360,(15658734^0O73567354),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,(0x75bcd15-0O726746425),0o25,(0x75bcd15-0O726746425),0o52,0o200,0o27,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o37,0o200,0o77,0o200,0o177,(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),0o177,(0x75bcd15-0O726746425),0o157,(0x75bcd15-0O726746425),0o177,(0x75bcd15-0O726746425),0o30,(0x75bcd15-0O726746425),0o70,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o200,(0O507646144^0x51F4C61),0o100,0o12,0o240,(0O507646144^0x51F4C61),0o300,0o177,0o300,(0O507646144^0x51F4C61),0o200,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o340,0o17,0o340,0o37,0o300,0o12,0o200,0o37,0o300,0o33,0o300,0o37,0o300,0o30,0o200,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o340,(0O57060516-0xbc614d),0o120,(15658734^0O73567354),0o250,(0O57060516-0xbc614d),0o160,0o17,0o360,(0O57060516-0xbc614d),0o140,(0x75bcd15-0O726746425),0o300,(0O57060516-0xbc614d),0o370,(0O334664274-0x37368B9),0o370,(0x9D8DE4-0O47306735),0o360,(15658734^0O73567354),0o240,(0x9D8DE4-0O47306735),0o360,(1011010-0O3666474),0o360,(0x9D8DE4-0O47306735),0o360,(1011010-0O3666474),0o60,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o70,(0x75bcd15-0O726746425),0o124,(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),0o134,(0O57060516-0xbc614d),0o374,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o376,(0O57060516-0xbc614d),0o374,(0x75bcd15-0O726746425),0o250,(0O57060516-0xbc614d),0o374,(0O57060516-0xbc614d),0o274,(0O57060516-0xbc614d),0o374,(0O57060516-0xbc614d),0o30,(0x75bcd15-0O726746425),0o70,0o34,(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),0o125,(0x75bcd15-0O726746425),0o72,(0x75bcd15-0O726746425),0o77,0o200,0o32,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o177,(0x75bcd15-0O726746425),0o77,0o200,0o25,(0x75bcd15-0O726746425),0o77,0o200,0o75,0o200,0o77,0o200,0o30,0o200,0o34,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),0o12,0o200,0o25,0o100,0o16,0o200,0o17,0o360,(1011010-0O3666474),0o200,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o37,0o200,0o37,0o300,0o17,0o340,(0O507646144^0x51F4C61),0o100,0o17,0o340,0o17,0o140,0o17,0o340,0o14,0o140,(1011010-0O3666474),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o300,(15658734^0O73567354),0o240,(0O507646144^0x51F4C61),0o120,(0O334664274-0x37368B9),0o240,(0O334664274-0x37368B9),0o376,(0O57060516-0xbc614d),0o240,(0x75bcd15-0O726746425),0o300,(0x9D8DE4-0O47306735),0o340,(0x9D8DE4-0O47306735),0o360,(0O334664274-0x37368B9),0o370,(0O57060516-0xbc614d),0o120,(0O334664274-0x37368B9),0o370,(0O334664274-0x37368B9),0o330,(0O334664274-0x37368B9),0o370,(0O57060516-0xbc614d),0o30,(0x75bcd15-0O726746425),0o34,(0x75bcd15-0O726746425),0o160,(0x75bcd15-0O726746425),0o250,(0O57060516-0xbc614d),0o124,(0x75bcd15-0O726746425),0o350,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),0o150,(0x75bcd15-0O726746425),0o60,(0O57060516-0xbc614d),0o370,(0O57060516-0xbc614d),0o374,(0x75bcd15-0O726746425),0o376,(0x75bcd15-0O726746425),0o124,(0x75bcd15-0O726746425),0o376,(0x75bcd15-0O726746425),0o366,(0x75bcd15-0O726746425),0o376,(0x75bcd15-0O726746425),0o30,(0x75bcd15-0O726746425),0o34,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),0o77,(0x75bcd15-0O726746425),0o37,(0x75bcd15-0O726746425),0o15,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o200,0o17,0o300,(0x9D8DE4-0O47306735),0o100,(0O334664274-0x37368B9),0o100,0o117,0o100,(0x9D8DE4-0O47306735),0o100,(0O334664274-0x37368B9),0o40,0o17,0o40,0o207,0o40,(0x75bcd15-0O726746425),0o140,(0O334664274-0x37368B9),0o360,(0O57060516-0xbc614d),0o320,(0x75bcd15-0O726746425),0o320,(0O334664274-0x37368B9),0o320,(0O57060516-0xbc614d),0o320,(0x75bcd15-0O726746425),0o310,(0O334664274-0x37368B9),0o310,(0O57060516-0xbc614d),0o310,(0x75bcd15-0O726746425),0o310,0o13,0o310,0o41,0o310,(0x75bcd15-0O726746425),0o310,0o13,0o304,(0O57060516-0xbc614d),0o304,0o40,0o304,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,(0x75bcd15-0O726746425),0o374,(0x75bcd15-0O726746425),0o164,(0x75bcd15-0O726746425),0o64,(0x75bcd15-0O726746425),0o364,(0x75bcd15-0O726746425),0o164,(0O57060516-0xbc614d),0o66,(0x75bcd15-0O726746425),0o372,(15658734^0O73567354),0o172,(0x75bcd15-0O726746425),0o72,(0x5E30A78-0O570605164),0o372,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o37,0o200,0o27,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o27,0o200,0o27,(0x75bcd15-0O726746425),0o46,0o20,0o47,0o200,0o47,(0O347010110&0x463A71D),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o340,(0O507646144^0x51F4C61),0o300,(0O507646144^0x51F4C61),0o200,(0O507646144^0x51F4C61),0o340,(0O507646144^0x51F4C61),0o300,0o11,0o200,0o11,0o340,0o11,0o320,0o11,0o200,0o11,0o350,0o11,0o302,0o11,0o200,0o21,0o350,0o21,0o300,0o21,0o202,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,(0O57060516-0xbc614d),0o370,(0O57060516-0xbc614d),0o160,(0O57060516-0xbc614d),0o140,(0O57060516-0xbc614d),0o170,(0O57060516-0xbc614d),0o160,(15658734^0O73567354),0o140,(15658734^0O73567354),0o170,(15658734^0O73567354),0o160,(15658734^0O73567354),0o141,(15658734^0O73567354),0o170,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o23,0o100,0o27,0o200,0o77,0o300,0o125,0o100,0o372,0o240,0o375,0o100,0o37,0o240,(0O347010110&0x463A71D),0o200,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o320,(0O507646144^0x51F4C61),0o340,0o17,0o360,0o26,0o260,0o75,0o120,0o76,0o250,(0x9D8DE4-0O47306735),0o120,(15658734^0O73567354),0o250,(15658734^0O73567354),0o124,(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o64,(0O57060516-0xbc614d),0o170,(0O334664274-0x37368B9),0o374,(0O507646144^0x51F4C61),0o124,0o17,0o252,0o17,0o324,(0O57060516-0xbc614d),0o372,(0x75bcd15-0O726746425),0o210,(0O57060516-0xbc614d),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),0o25,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),0o25,(0x75bcd15-0O726746425),0o253,(0x75bcd15-0O726746425),0o126,(0x75bcd15-0O726746425),0o353,(0O57060516-0xbc614d),0o125,(0O334664274-0x37368B9),0o353,(0O334664274-0x37368B9),0o377,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o42,(0x75bcd15-0O726746425),0o42,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o250,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o250,(0x75bcd15-0O726746425),0o325,(0x75bcd15-0O726746425),0o152,(0x75bcd15-0O726746425),0o327,(0x75bcd15-0O726746425),0o252,0o200,0o327,0o300,0o377,0o300,0o176,(0x75bcd15-0O726746425),0o104,(0x75bcd15-0O726746425),0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o54,0o100,0o36,0o200,0o77,0o300,0o52,0o240,0o125,0o360,0o53,0o360,0o137,0o200,0o21,(0x75bcd15-0O726746425),0o40,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o13,0o20,(0x9D8DE4-0O47306735),0o240,0o17,0o360,0o15,0o150,0o12,0o274,0o25,0o174,0o12,0o340,0o25,0o100,0o52,0o100,0o24,(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o310,(0O57060516-0xbc614d),0o350,(0O334664274-0x37368B9),0o374,(15658734^0O73567354),0o252,(0O507646144^0x51F4C61),0o137,(15658734^0O73567354),0o277,(0O507646144^0x51F4C61),0o370,(0O57060516-0xbc614d),0o20,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,0o25,0o120,0o12,0o240,(0O507646144^0x51F4C61),0o102,(0O507646144^0x51F4C61),0o105,(0O507646144^0x51F4C61),0o105,(0x9D8DE4-0O47306735),0o302,0o15,0o142,0o17,0o343,0o74,0o177,0o173,0o277,0o357,0o343,0o256,0o342,0o107,0o302,0o316,0o300,0o300,0o340,0o300,(0x75bcd15-0O726746425),0o312,0o240,0o325,0o120,0o312,0o240,0o105,0o100,0o105,0o102,0o247,0o305,0o315,0o145,0o157,0o342,0o174,0o172,0o72,0o277,0o17,0o357,0o16,0o343,(0x9D8DE4-0O47306735),0o302,(1011010-0O3666474),0o342,0o16,(15658734^0O73567354),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o200,(0O507646144^0x51F4C61),0o300,0o13,0o240,0o25,0o100,0o27,0o140,0o27,0o140,0o37,0o340,0o23,0o220,0o55,0o150,0o57,0o170,0o57,0o170,0o57,0o170,0o57,0o170,0o257,0o171,0o177,0o376,(0x75bcd15-0O726746425),0o300,(0O57060516-0xbc614d),0o40,(0O57060516-0xbc614d),0o160,(15658734^0O73567354),0o350,(0O507646144^0x51F4C61),0o120,(0O507646144^0x51F4C61),0o330,(0O507646144^0x51F4C61),0o330,(0x9D8DE4-0O47306735),0o370,0o11,0o310,0o26,0o264,0o27,0o274,0o27,0o274,0o27,0o274,0o27,0o274,0o227,0o275,0o177,0o376,0o166,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o156,(0x75bcd15-0O726746425),0o166,(0x75bcd15-0O726746425),0o156,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o166,(0x75bcd15-0O726746425),0o156,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o166,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o156,(0x75bcd15-0O726746425),0o166,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o156,(0x75bcd15-0O726746425),0o35,0o200,0o52,(0x75bcd15-0O726746425),0o47,0o140,0o121,0o260,0o113,0o320,0o220,0o200,0o252,0o350,0o224,0o270,0o221,0o200,0o252,0o330,0o221,(0x75bcd15-0O726746425),0o125,(0x75bcd15-0O726746425),0o113,0o260,0o53,0o140,0o44,(0x75bcd15-0O726746425),0o35,0o200,(0O334664274-0x37368B9),0o300,0o14,0o60,0o20,0o230,0o62,0o24,0o150,0o202,0o100,0o52,0o265,0o21,0o310,0o105,0o244,0o221,0o232,(0O507646144^0x51F4C61),0o110,0o102,0o125,0o12,0o50,0o124,0o22,0o210,0o15,0o160,(0O334664274-0x37368B9),0o300,(0O57060516-0xbc614d),0o270,(0x75bcd15-0O726746425),0o124,(1011010-0O3666474),0o344,0o15,0o212,0o13,0o322,(0O57060516-0xbc614d),0o11,0o27,0o125,0o35,0o51,(0O57060516-0xbc614d),0o211,0o33,0o125,(0x75bcd15-0O726746425),0o211,(0x75bcd15-0O726746425),0o252,0o15,0o322,(1011010-0O3666474),0o324,(0x75bcd15-0O726746425),0o44,(0O57060516-0xbc614d),0o270,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o70,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o360,(0x75bcd15-0O726746425),0o370,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o76,(0x75bcd15-0O726746425),0o176,(0x75bcd15-0O726746425),0o237,(0x75bcd15-0O726746425),0o37,(0x75bcd15-0O726746425),0o37,0o300,0o16,0o300,0o30,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o24,0o200,0o74,(0x75bcd15-0O726746425),0o16,(0x75bcd15-0O726746425),0o77,(0x75bcd15-0O726746425),0o17,0o200,0o37,0o200,0o57,0o300,0o17,0o300,(0x9D8DE4-0O47306735),0o360,(0O334664274-0x37368B9),0o260,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o200,(0O334664274-0x37368B9),0o200,0o15,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o200,(0x9D8DE4-0O47306735),0o300,0o13,0o340,(0x9D8DE4-0O47306735),0o340,0o11,0o360,(0O57060516-0xbc614d),0o360,(0O57060516-0xbc614d),0o374,(0x75bcd15-0O726746425),0o354,(0O57060516-0xbc614d),0o200,(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o160,(0x75bcd15-0O726746425),0o240,(0O57060516-0xbc614d),0o340,(0x75bcd15-0O726746425),0o160,(0O57060516-0xbc614d),0o370,(0x75bcd15-0O726746425),0o170,(0O57060516-0xbc614d),0o374,(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),0o177,(0x75bcd15-0O726746425),0o73,(0x75bcd15-0O726746425),0o360,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o26,(0x75bcd15-0O726746425),0o36,(0x75bcd15-0O726746425),0o76,(0x75bcd15-0O726746425),0o154,(0x75bcd15-0O726746425),0o236,(0x75bcd15-0O726746425),0o77,(0x75bcd15-0O726746425),0o77,(0x75bcd15-0O726746425),0o77,(0x75bcd15-0O726746425),0o177,(0x75bcd15-0O726746425),0o126,(0x75bcd15-0O726746425),0o34,(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o200,(0O347010110&0x463A71D),0o100,0o23,0o40,0o23,0o40,0o27,0o240,0o23,0o40,0o37,0o340,0o33,0o140,0o47,0o220,0o17,0o300,0o17,0o300,0o17,0o300,0o17,0o300,0o35,0o200,(0O334664274-0x37368B9),0o200,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o300,(0O57060516-0xbc614d),0o240,(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o360,(0x75bcd15-0O726746425),0o330,(0O57060516-0xbc614d),0o344,(0O334664274-0x37368B9),0o360,(0O334664274-0x37368B9),0o360,(0O334664274-0x37368B9),0o360,(0O334664274-0x37368B9),0o370,(0O57060516-0xbc614d),0o250,(0x75bcd15-0O726746425),0o340,(0O57060516-0xbc614d),0o200,(0x75bcd15-0O726746425),0o110,(0x75bcd15-0O726746425),0o204,(0O57060516-0xbc614d),0o62,(0O57060516-0xbc614d),(15658734^0O73567354),(0O57060516-0xbc614d),0o172,(0O57060516-0xbc614d),0o172,(0O57060516-0xbc614d),0o376,(0O57060516-0xbc614d),0o266,(15658734^0O73567354),0o171,(0x75bcd15-0O726746425),0o374,(0x75bcd15-0O726746425),0o374,(0x75bcd15-0O726746425),0o374,(0x75bcd15-0O726746425),0o374,(0x75bcd15-0O726746425),0o156,(0x75bcd15-0O726746425),0o160,(0x75bcd15-0O726746425),0o40,0o74,(0x75bcd15-0O726746425),0o156,(0x75bcd15-0O726746425),0o247,(0x75bcd15-0O726746425),0o245,(0x75bcd15-0O726746425),0o167,(0x75bcd15-0O726746425),0o243,(0x75bcd15-0O726746425),0o142,(0x75bcd15-0O726746425),0o54,(0x75bcd15-0O726746425),0o64,(0x75bcd15-0O726746425),0o106,(0x75bcd15-0O726746425),0o305,(0x75bcd15-0O726746425),0o356,(0x75bcd15-0O726746425),0o245,(0x75bcd15-0O726746425),0o345,(0x75bcd15-0O726746425),0o166,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o260,(0O57060516-0xbc614d),0o110,(0O334664274-0x37368B9),0o374,(0x75bcd15-0O726746425),0o104,(15658734^0O73567354),0o14,(15658734^0O73567354),0o174,0o65,0o330,0o106,0o360,0o305,(0x75bcd15-0O726746425),0o356,(0x75bcd15-0O726746425),0o245,(0x75bcd15-0O726746425),0o345,(0x75bcd15-0O726746425),0o166,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o64,0o64,0o106,0o106,0o305,0o305,0o356,0o356,0o245,0o245,0o345,0o345,0o166,0o166,0o74,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o33,0o200,0o76,0o100,0o60,0o100,0o42,(0x75bcd15-0O726746425),0o77,0o300,0o22,0o264,0o15,0o106,(0x75bcd15-0O726746425),0o305,(0x75bcd15-0O726746425),0o356,(0x75bcd15-0O726746425),0o245,(0x75bcd15-0O726746425),0o345,(0x75bcd15-0O726746425),0o166,(0x75bcd15-0O726746425),0o74,(0O334664274-0x37368B9),0o300,(1011010-0O3666474),0o140,0o15,0o360,0o32,0o330,0o65,0o134,0o40,(0x5E30A78-0O570605164),0o177,0o376,0o327,0o165,0o262,0o47,0o327,0o165,0o177,0o376,0o25,0o170,0o45,0o244,(15658734^0O73567354),0o100,0o21,0o210,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o300,(1011010-0O3666474),0o140,0o15,0o360,0o32,0o270,0o65,0o134,0o40,(0x5E30A78-0O570605164),0o177,0o376,0o256,0o353,0o344,0o115,0o256,0o353,0o177,0o376,0o25,0o170,0o12,0o120,(0O57060516-0xbc614d),0o200,(0x5E30A78-0O570605164),0o40,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o300,(1011010-0O3666474),0o140,0o15,0o360,0o32,0o330,0o65,0o134,0o40,(0x5E30A78-0O570605164),0o177,0o376,0o355,0o333,0o250,0o223,0o355,0o333,0o177,0o376,0o25,0o170,0o45,0o244,(15658734^0O73567354),0o100,0o21,0o210,(0x5E30A78-0O570605164),0o40,(0O334664274-0x37368B9),0o300,(1011010-0O3666474),0o140,0o15,0o360,0o32,0o350,0o65,0o134,0o40,(0x5E30A78-0O570605164),0o177,0o376,0o333,0o267,0o311,0o25,0o333,0o267,0o177,0o376,0o25,0o170,0o12,0o102,0o101,0o220,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o21,0o104,(0x9D8DE4-0O47306735),0o340,0o17,0o360,0o337,0o373,0o77,0o374,0o37,0o370,0o37,0o370,0o61,0o214,0o152,0o126,0o261,0o215,0o236,0o371,0o15,0o360,0o35,0o270,0o66,0o154,0o131,0o232,0o214,0o61,(0x9D8DE4-0O47306735),0o340,(0x9D8DE4-0O47306735),0o340,0o17,0o360,0o37,0o370,0o377,0o377,0o37,0o370,0o37,0o370,0o61,0o214,0o52,0o124,0o161,0o216,0o236,0o371,0o215,0o361,0o35,0o270,0o62,0o114,0o130,0o32,0o114,0o62,(0x9D8DE4-0O47306735),0o340,(0x9D8DE4-0O47306735),0o340,0o17,0o360,0o37,0o370,0o337,0o373,0o77,0o374,0o37,0o370,0o61,0o214,0o52,0o124,0o60,0o214,0o135,0o372,0o215,0o261,0o232,0o131,0o22,0o110,0o30,0o30,0o54,0o64,0o307,0o343,(0x9D8DE4-0O47306735),0o340,0o217,0o361,0o137,0o372,0o77,0o374,0o37,0o370,0o21,0o210,0o56,0o164,0o52,0o124,0o161,0o216,0o136,0o372,0o215,0o361,0o35,0o270,0o22,0o110,0o170,0o36,0o214,0o61,(0x9D8DE4-0O47306735),0o340,0o25,(0O334664274-0x37368B9),0o52,0o276,0o25,0o136,0o112,0o250,0o65,0o134,0o212,0o256,0o155,0o134,0o231,0o371,0o156,0o277,0o335,0o143,0o56,0o111,0o131,0o201,(0x5E30A78-0O570605164),0o202,0o53,0o306,0o22,0o374,0o14,0o375,0o100,0o250,0o375,0o124,0o172,0o250,0o25,0o122,0o72,0o254,0o165,0o121,0o72,0o266,0o237,0o231,0o375,0o166,0o306,0o273,0o222,0o164,0o201,0o232,0o101,0o40,0o143,0o324,0o77,0o110,0o277,0o60,0o375,0o277,0o277,0o357,0o352,0o327,0o252,0o105,0o150,0o324,0o110,0o204,0o100,(0x5E30A78-0O570605164),0o100,(0O57060516-0xbc614d),0o120,(0x75bcd15-0O726746425),0o22,0o12,0o100,0o14,0o52,0o42,0o24,0o250,0o40,0o204,0o24,0o50,(0O507646144^0x51F4C61),0o40,0o375,0o277,0o377,0o373,0o254,0o327,0o252,0o321,0o52,0o124,0o202,0o104,0o102,(0O57060516-0xbc614d),(0O347010110&0x463A71D),(0x5E30A78-0O570605164),0o112,0o20,0o42,0o202,(0O347010110&0x463A71D),0o250,0o24,(0x5E30A78-0O570605164),0o12,0o220,(0O57060516-0xbc614d),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o66,0o200,0o177,0o100,0o176,0o200,0o375,(0x75bcd15-0O726746425),0o376,0o200,0o377,0o200,0o377,(0x75bcd15-0O726746425),0o125,(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o15,0o240,0o37,0o320,0o37,0o240,0o77,0o100,0o77,0o240,0o77,0o340,0o77,0o300,0o65,0o100,0o52,0o200,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o12,0o200,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,(0O334664274-0x37368B9),0o150,(0x9D8DE4-0O47306735),0o364,(0x9D8DE4-0O47306735),0o350,0o17,0o320,0o17,0o350,0o17,0o370,0o17,0o360,(0O507646144^0x51F4C61),0o120,0o12,0o240,(0O57060516-0xbc614d),0o100,(15658734^0O73567354),0o240,0o11,0o100,(0x75bcd15-0O726746425),0o200,(0O57060516-0xbc614d),0o100,(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o332,(0O57060516-0xbc614d),0o375,(0O57060516-0xbc614d),0o372,(0O334664274-0x37368B9),0o364,(0O334664274-0x37368B9),0o372,(0O334664274-0x37368B9),0o376,(0O334664274-0x37368B9),0o374,(0O334664274-0x37368B9),0o124,(15658734^0O73567354),0o250,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o250,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o40,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o52,0o200,0o125,0o100,0o53,0o200,0o104,0o100,0o257,0o240,0o137,0o100,0o40,0o200,0o125,0o100,0o52,0o200,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o76,(0x75bcd15-0O726746425),0o101,(0x75bcd15-0O726746425),0o201,(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),0o25,0o100,0o52,0o240,0o25,0o300,0o42,0o40,0o137,0o120,0o52,0o240,0o20,0o100,0o52,0o240,0o25,0o100,(15658734^0O73567354),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),0o16,(0x75bcd15-0O726746425),0o21,0o200,0o40,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(15658734^0O73567354),0o250,(0O507646144^0x51F4C61),0o124,(0O334664274-0x37368B9),0o250,(0x5E30A78-0O570605164),0o104,0o13,0o352,(0O507646144^0x51F4C61),0o364,(15658734^0O73567354),(0O347010110&0x463A71D),(0O507646144^0x51F4C61),0o124,(15658734^0O73567354),0o250,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o160,(0O57060516-0xbc614d),0o210,(15658734^0O73567354),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,(0O57060516-0xbc614d),0o124,(15658734^0O73567354),0o252,(0O57060516-0xbc614d),0o324,(15658734^0O73567354),0o42,(0O507646144^0x51F4C61),0o175,(15658734^0O73567354),0o372,(0O57060516-0xbc614d),0o124,(15658734^0O73567354),0o252,(0O57060516-0xbc614d),0o124,(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),0o174,(0x75bcd15-0O726746425),0o202,(0x75bcd15-0O726746425),0o201,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o157,0o100,0o273,0o200,0o165,0o100,0o32,0o200,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0O57060516-0xbc614d),0o100,(15658734^0O73567354),0o200,(0O57060516-0xbc614d),0o120,0o66,0o240,0o135,0o160,0o67,0o340,(0O334664274-0x37368B9),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o364,0o31,0o270,0o57,0o124,0o31,0o250,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o75,(0O334664274-0x37368B9),0o176,(0O507646144^0x51F4C61),0o327,(0O334664274-0x37368B9),0o152,(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o274,(0x75bcd15-0O726746425),0o176,0o300,0o353,0o240,0o126,0o300,0o50,(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o57,(0x75bcd15-0O726746425),0o35,0o230,0o52,0o364,0o25,0o230,0o12,(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(15658734^0O73567354),0o200,(0O57060516-0xbc614d),0o100,0o12,0o200,(0O507646144^0x51F4C61),0o154,0o16,0o272,(0x9D8DE4-0O47306735),0o354,(0O334664274-0x37368B9),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o366,(0O57060516-0xbc614d),0o335,(15658734^0O73567354),0o256,(0O57060516-0xbc614d),0o130,(0x75bcd15-0O726746425),0o240,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o324,(0x75bcd15-0O726746425),0o56,(0x75bcd15-0O726746425),0o72,(0x75bcd15-0O726746425),0o72,(0x75bcd15-0O726746425),0o132,(0x75bcd15-0O726746425),0o135,(0x75bcd15-0O726746425),0o117,(0x75bcd15-0O726746425),0o103,(0x75bcd15-0O726746425),0o41,0o200,0o42,(0x75bcd15-0O726746425),0o36,(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),0o23,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(1011010-0O3666474),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),0o77,(0x75bcd15-0O726746425),0o13,0o200,0o16,0o200,0o16,0o200,0o37,(0x75bcd15-0O726746425),0o27,0o200,0o21,0o300,0o20,0o140,(0O347010110&0x463A71D),0o100,(0O347010110&0x463A71D),0o200,(0x9D8DE4-0O47306735),0o200,(15658734^0O73567354),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o200,0o13,0o300,(0O507646144^0x51F4C61),0o100,0o12,0o340,(0O334664274-0x37368B9),0o240,(0O334664274-0x37368B9),0o240,(0O507646144^0x51F4C61),0o240,(0O507646144^0x51F4C61),0o320,(0x5E30A78-0O570605164),0o360,(0x5E30A78-0O570605164),0o60,(15658734^0O73567354),0o30,(15658734^0O73567354),0o40,(0O57060516-0xbc614d),0o340,(0O57060516-0xbc614d),0o100,(1011010-0O3666474),0o60,(0O57060516-0xbc614d),0o100,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o260,(0O334664274-0x37368B9),0o120,(0x75bcd15-0O726746425),0o270,(0x75bcd15-0O726746425),0o350,(0x75bcd15-0O726746425),0o350,(0O57060516-0xbc614d),0o150,(0O57060516-0xbc614d),0o164,(0O57060516-0xbc614d),0o74,(0O57060516-0xbc614d),0o14,(0x75bcd15-0O726746425),0o206,(0x75bcd15-0O726746425),0o210,(0x75bcd15-0O726746425),0o170,(0x75bcd15-0O726746425),0o45,(0x75bcd15-0O726746425),0o42,(0x75bcd15-0O726746425),0o164,(1011010-0O3666474),(0x75bcd15-0O726746425),0o15,(0x75bcd15-0O726746425),0o12,0o300,0o35,(0x75bcd15-0O726746425),0o27,(0x75bcd15-0O726746425),0o27,(0x75bcd15-0O726746425),0o26,0o200,0o56,0o200,0o74,0o200,0o60,0o200,0o141,(0x75bcd15-0O726746425),0o21,(0x75bcd15-0O726746425),0o36,(0x75bcd15-0O726746425),0o244,(0x75bcd15-0O726746425),0o104,(0x75bcd15-0O726746425),0o56,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o200,(0O334664274-0x37368B9),0o320,(15658734^0O73567354),0o240,(0x9D8DE4-0O47306735),0o120,(0O507646144^0x51F4C61),0o300,(0O507646144^0x51F4C61),0o300,(0O507646144^0x51F4C61),0o240,0o13,0o240,0o17,0o40,0o14,0o40,0o30,0o100,(0x5E30A78-0O570605164),0o100,(0x9D8DE4-0O47306735),0o200,(15658734^0O73567354),0o200,0o14,0o140,(15658734^0O73567354),0o200,(0x75bcd15-0O726746425),0o140,(0x75bcd15-0O726746425),0o360,(0x75bcd15-0O726746425),0o374,(0O57060516-0xbc614d),0o320,(0O57060516-0xbc614d),0o160,(0O57060516-0xbc614d),0o160,(0x75bcd15-0O726746425),0o370,(0O57060516-0xbc614d),0o350,(0O334664274-0x37368B9),0o210,(1011010-0O3666474),(0O347010110&0x463A71D),(15658734^0O73567354),0o20,(0O57060516-0xbc614d),0o20,(0O57060516-0xbc614d),0o340,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o340,(0x75bcd15-0O726746425),0o30,(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),0o53,(0x75bcd15-0O726746425),0o164,(0x75bcd15-0O726746425),0o134,(0x75bcd15-0O726746425),0o134,(0x75bcd15-0O726746425),0o132,(0x75bcd15-0O726746425),0o272,(0x75bcd15-0O726746425),0o362,(0x75bcd15-0O726746425),0o302,(0O57060516-0xbc614d),0o204,(0x75bcd15-0O726746425),0o104,(0x75bcd15-0O726746425),0o170,(0x75bcd15-0O726746425),0o120,(0O57060516-0xbc614d),0o220,(0x75bcd15-0O726746425),0o170,0o14,(0x75bcd15-0O726746425),0o22,(0x75bcd15-0O726746425),0o41,(0x75bcd15-0O726746425),0o55,(0x75bcd15-0O726746425),0o41,(0x75bcd15-0O726746425),0o22,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o36,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o67,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o15,0o100,0o254,0o100,0o100,0o200,0o56,(0x75bcd15-0O726746425),0o16,0o300,0o35,0o240,0o37,(0x75bcd15-0O726746425),0o37,0o340,0o37,(0x75bcd15-0O726746425),0o35,0o240,0o16,0o300,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,0o300,(0x75bcd15-0O726746425),0o40,0o53,(0x75bcd15-0O726746425),0o43,0o120,0o20,0o140,(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0O347010110&0x463A71D),(1011010-0O3666474),0o30,(0x9D8DE4-0O47306735),0o70,0o17,0o374,(0x9D8DE4-0O47306735),0o70,(1011010-0O3666474),0o330,(0x5E30A78-0O570605164),0o310,(0x75bcd15-0O726746425),0o300,(0O57060516-0xbc614d),0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o320,(0x5E30A78-0O570605164),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o324,0o12,0o300,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0O334664274-0x37368B9),0o260,(0x75bcd15-0O726746425),0o334,(0O57060516-0xbc614d),0o156,(0x75bcd15-0O726746425),0o76,(0O57060516-0xbc614d),0o376,(0x75bcd15-0O726746425),0o76,(0O57060516-0xbc614d),0o156,(0x75bcd15-0O726746425),0o334,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o170,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o270,(0O57060516-0xbc614d),(15658734^0O73567354),(15658734^0O73567354),0o261,(0x75bcd15-0O726746425),0o65,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o334,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o340,0o37,0o270,0o75,0o354,0o177,0o376,0o175,0o366,0o373,0o367,0o373,0o367,0o177,0o356,0o177,0o336,0o77,0o374,0o37,0o370,(0x9D8DE4-0O47306735),0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o200,(0x9D8DE4-0O47306735),0o340,0o15,0o160,0o37,0o370,0o77,0o374,0o77,0o364,0o175,0o376,0o173,0o366,0o73,0o354,0o77,0o334,0o37,0o70,0o17,0o360,(0x9D8DE4-0O47306735),0o340,(0O57060516-0xbc614d),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o200,(0x9D8DE4-0O47306735),0o340,0o17,0o360,0o36,0o370,0o37,0o170,0o77,0o174,0o73,0o374,0o67,0o364,0o67,0o374,0o77,0o354,0o77,0o354,0o37,0o330,0o37,0o70,0o17,0o360,(0x9D8DE4-0O47306735),0o340,(0O57060516-0xbc614d),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o200,(0x9D8DE4-0O47306735),0o340,0o17,0o360,0o36,0o270,0o77,0o374,0o77,0o364,0o173,0o376,0o167,0o366,0o67,0o354,0o77,0o334,0o37,0o70,0o17,0o360,(0x9D8DE4-0O47306735),0o340,(0O57060516-0xbc614d),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o243,0o140,0o123,0o140,0o51,0o300,0o26,0o240,0o13,0o340,(0x9D8DE4-0O47306735),0o160,(15658734^0O73567354),0o250,(0O507646144^0x51F4C61),0o324,(15658734^0O73567354),0o52,(0O334664274-0x37368B9),0o345,(0O334664274-0x37368B9),0o342,(0O334664274-0x37368B9),0o141,(0O334664274-0x37368B9),0o142,(0x9D8DE4-0O47306735),0o160,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o60,0o126,0o60,0o251,0o300,0o126,0o240,0o13,0o340,(1011010-0O3666474),0o60,(0O334664274-0x37368B9),0o350,(0O507646144^0x51F4C61),0o324,(15658734^0O73567354),0o52,(0O334664274-0x37368B9),0o344,(0O334664274-0x37368B9),0o352,0o27,0o144,0o16,0o140,(0x5E30A78-0O570605164),0o160,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o140,(0O334664274-0x37368B9),0o140,(0O57060516-0xbc614d),0o300,0o36,0o240,0o53,0o340,0o126,0o264,0o243,0o152,0o105,0o325,0o202,0o42,(0O334664274-0x37368B9),0o341,(0O334664274-0x37368B9),0o342,(0O334664274-0x37368B9),0o140,(0O334664274-0x37368B9),0o140,(0x9D8DE4-0O47306735),0o160,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o60,0o126,0o60,0o251,0o300,0o126,0o240,0o13,0o340,(0x9D8DE4-0O47306735),0o364,(15658734^0O73567354),0o52,(0O507646144^0x51F4C61),0o325,(15658734^0O73567354),0o42,(0O334664274-0x37368B9),0o341,(0O334664274-0x37368B9),0o340,(0O334664274-0x37368B9),0o164,(0O334664274-0x37368B9),0o70,(0x9D8DE4-0O47306735),0o20,(15658734^0O73567354),(0x5E30A78-0O570605164),(0O507646144^0x51F4C61),0o16,0o12,0o204,0o25,0o304,0o27,0o104,0o53,0o344,0o57,0o340,0o22,0o104,(0O347010110&0x463A71D),0o202,(0x9D8DE4-0O47306735),0o54,0o25,0o120,0o52,0o244,0o125,0o104,0o252,0o204,0o105,(0x75bcd15-0O726746425),0o35,0o300,(15658734^0O73567354),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o12,0o204,0o25,0o316,0o27,0o104,0o53,0o344,0o57,0o344,0o22,0o104,(0O347010110&0x463A71D),0o200,(0x9D8DE4-0O47306735),(0x5E30A78-0O570605164),0o25,0o122,0o52,0o254,0o125,0o100,0o252,0o204,0o105,(0x5E30A78-0O570605164),0o35,0o304,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x9D8DE4-0O47306735),(1011010-0O3666474),0o57,0o244,0o137,0o324,0o60,0o144,0o102,0o24,0o62,0o140,0o37,0o304,(0O347010110&0x463A71D),0o202,(0x9D8DE4-0O47306735),0o54,0o25,0o120,0o52,0o244,0o125,0o104,0o252,0o204,0o105,(0x75bcd15-0O726746425),0o14,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),0o57,0o244,0o120,0o126,0o42,0o44,0o122,0o124,0o77,0o344,0o27,0o104,(0O347010110&0x463A71D),0o200,(0x9D8DE4-0O47306735),(0x5E30A78-0O570605164),0o25,0o122,0o52,0o254,0o125,0o100,0o252,0o204,0o105,(0x5E30A78-0O570605164),0o31,0o204,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o214,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o125,0o125,0o125,0o125,0o125,0o125,0o125,0o125,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o117,0o146,0o146,0o40,0o114,0o151,0o143,0o145,0o156,0o143,0o145,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o377,0o336,0o154,0o210,0o22,0o100,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o26,0o42,0o377,0o210,0o377,0o42,0o377,0o210,0o377,(0O507646144^0x51F4C61),0o370,0o210,0o236,0o275,0o275,0o236,0o210,0o370,(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o103,0o63,0o377,0o63,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o63,0o137,0o14,(0O57060516-0xbc614d),0o327,0o137,(0x5E30A78-0O570605164),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o240,0o30,0o30,0o74,0o176,0o142,0o142,0o142,0o176,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o212,0o14,0o35,0o54,0o47,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),0o52,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o377,0o352,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o252,0o377,0o352,0o245,0o125,0o125,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o102,0o162,0o151,0o144,0o147,0o145,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o377,0o377,0o375,0o273,0o326,0o162,0o140,0o100,0o106,0o42,0o167,0o42,0o210,0o42,0o167,0o42,0o210,0o57,(0O334664274-0x37368B9),0o204,0o110,0o60,(0O334664274-0x37368B9),0o204,0o110,0o60,(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o14,0o15,0o62,0o67,0o302,0o310,0o54,(0O57060516-0xbc614d),0o100,(0x5E30A78-0O570605164),0o106,0o117,0o171,0o360,0o371,(0O57060516-0xbc614d),0o354,0o137,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o307,0o137,(0O334664274-0x37368B9),(0x5E30A78-0O570605164),0o100,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,(0O347010110&0x463A71D),0o25,0o24,0o16,0o214,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o317,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o257,0o377,0o77,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o320,0o134,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o100,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,0o20,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o125,0o125,0o125,0o125,0o125,0o125,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o125,0o156,0o144,0o145,0o162,0o40,0o164,0o150,0o145,0o40,0o115,0o145,0o147,0o141,0o124,0o162,0o145,0o145,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o327,0o263,0o165,0o155,0o134,0o30,(0O347010110&0x463A71D),(0x5E30A78-0O570605164),0o102,0o275,0o252,0o135,0o242,0o363,0o12,(1011010-0O3666474),(0O57060516-0xbc614d),0o106,0o111,0o152,0o73,0o72,0o374,0o36,0o153,0o350,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o200,0o240,0o201,0o102,0o44,0o30,0o74,0o30,0o74,0o303,(0O334664274-0x37368B9),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o20,0o52,0o16,0o32,0o33,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o12,0o252,0o252,0o252,0o60,0o303,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,(0O347010110&0x463A71D),(0O57060516-0xbc614d),0o130,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,0o11,(0x75bcd15-0O726746425),0o12,0o252,0o252,0o252,0o60,0o303,(0O347010110&0x463A71D),0o24,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,0o11,(0x75bcd15-0O726746425),0o32,0o252,0o252,0o252,0o60,0o303,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,(0O334664274-0x37368B9),0o11,0o100,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o125,0o125,0o125,0o125,0o125,0o125,0o40,0o40,0o101,0o164,0o40,0o164,0o150,0o145,0o40,0o106,0o157,0o157,0o164,0o40,0o157,0o146,0o40,0o164,0o150,0o145,0o40,0o115,0o145,0o147,0o141,0o124,0o162,0o145,0o145,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o360,0o371,0o277,0o37,0o14,0o20,0o50,0o104,0o26,0o253,0o253,0o255,0o252,0o252,0o256,0o125,0o125,(1011010-0O3666474),0o156,0o164,0o70,0o36,0o156,0o164,0o70,0o36,(0x9D8DE4-0O47306735),0o300,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o217,0o137,(0O334664274-0x37368B9),(15658734^0O73567354),0o300,0o240,0o100,0o240,0o134,0o42,0o41,0o42,0o24,(0O347010110&0x463A71D),(0x5E30A78-0O570605164),(15658734^0O73567354),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),(15658734^0O73567354),(0x9D8DE4-0O47306735),(0O507646144^0x51F4C61),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o65,0o11,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o124,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o252,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o252,0o245,0o125,0o125,0o132,0o125,0o125,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o104,0o162,0o151,0o166,0o145,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o252,0o125,0o252,0o377,0o377,0o125,0o252,0o125,0o15,0o160,(0x9D8DE4-0O47306735),0o167,0o167,(0x75bcd15-0O726746425),0o73,0o13,0o175,0o104,0o24,0o52,0o24,0o11,0o152,0o234,(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O507646144^0x51F4C61),0o300,0o100,0o160,0o160,0o14,0o164,0o167,(0O507646144^0x51F4C61),0o102,0o173,(0x75bcd15-0O726746425),0o355,(0x75bcd15-0O726746425),0o252,0o125,0o252,0o125,(0O57060516-0xbc614d),0o240,0o137,(15658734^0O73567354),(0x75bcd15-0O726746425),0o311,0o137,(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),0o300,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0O334664274-0x37368B9),(1011010-0O3666474),0o55,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o25,0o22,0o26,0o25,0o27,(0O347010110&0x463A71D),0o30,0o24,0o44,0o217,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o250,0o25,0o124,0o20,0o101,0o124,0o25,0o125,0o250,0o52,0o250,0o40,0o202,0o250,0o52,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o250,0o40,0o202,0o250,0o52,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o250,0o40,0o202,0o250,0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o250,0o40,0o202,0o250,0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o240,0o12,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o123,0o145,0o143,0o165,0o162,0o151,0o164,0o171,0o40,0o107,0o165,0o141,0o162,0o144,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o377,0o377,0o252,0o125,0o252,0o125,0o252,0o125,0o15,0o16,0o306,0o225,0o260,0o66,0o206,0o300,0o355,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o340,0o100,0o40,0o20,0o16,(0x5E30A78-0O570605164),(15658734^0O73567354),(0O57060516-0xbc614d),0o102,0o157,(0x75bcd15-0O726746425),0o267,(0x75bcd15-0O726746425),0o252,0o125,0o252,0o125,(0O57060516-0xbc614d),0o275,0o137,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o350,0o136,(0O347010110&0x463A71D),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o23,(0x5E30A78-0O570605164),0o12,(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o216,(0O334664274-0x37368B9),0o213,(0O334664274-0x37368B9),0o227,(0x5E30A78-0O570605164),0o221,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o25,(0x5E30A78-0O570605164),0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o104,0o103,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o104,0o124,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o104,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o25,(0x5E30A78-0O570605164),0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,0o14,0o60,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o24,0o25,(0x5E30A78-0O570605164),0o20,0o240,(0O57060516-0xbc614d),0o105,0o21,0o21,(0x5E30A78-0O570605164),0o21,0o20,0o240,(0O57060516-0xbc614d),0o21,0o21,0o24,(0x5E30A78-0O570605164),0o21,0o20,0o240,(0O57060516-0xbc614d),0o61,0o21,0o21,(0x5E30A78-0O570605164),0o25,0o20,0o240,(0O57060516-0xbc614d),(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o21,(0x5E30A78-0O570605164),0o21,0o25,0o240,(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o14,0o63,0o14,0o63,0o14,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o105,0o156,0o164,0o162,0o141,0o156,0o143,0o145,0o40,0o164,0o157,0o40,0o110,0o141,0o144,0o145,0o163,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o64,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o243,0o240,0o24,0o202,0o120,0o12,0o101,0o50,(0O507646144^0x51F4C61),0o143,0o273,0o273,0o70,0o273,0o273,0o273,0o203,0o273,0o62,0o277,0o134,0o130,0o60,0o50,0o130,0o110,0o60,(0x9D8DE4-0O47306735),0o100,0o100,0o20,0o20,(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0O57060516-0xbc614d),(0O57060516-0xbc614d),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o307,0o137,(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o202,0o21,0o244,0o22,0o303,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o124,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o124,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o251,0o124,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o103,0o165,0o143,0o153,0o157,0o157,0o47,0o163,0o40,0o116,0o145,0o163,0o164,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0O334664274-0x37368B9),0o311,0o330,0o60,0o66,0o43,(0O57060516-0xbc614d),0o26,0o377,0o140,0o16,0o360,(0O334664274-0x37368B9),0o74,0o307,0o70,(1011010-0O3666474),0o302,0o64,0o13,0o104,0o210,0o13,0o60,(0O347010110&0x463A71D),(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o215,0o137,(15658734^0O73567354),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o30,0o251,0o333,0o176,0o176,0o74,0o132,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o47,0o220,0o157,(0O507646144^0x51F4C61),0o74,0o244,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0O57060516-0xbc614d),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o11,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o32,0o252,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o250,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,0o11,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,(0O347010110&0x463A71D),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,0o11,(0x75bcd15-0O726746425),0o12,0o252,0o252,0o252,0o60,0o303,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o111,0o156,0o163,0o151,0o144,0o145,0o40,0o164,0o150,0o145,0o40,0o115,0o145,0o147,0o141,0o124,0o162,0o165,0o156,0o153,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o365,0o372,0o277,0o37,0o46,0o24,0o42,0o20,0o26,0o253,0o253,0o255,0o252,0o252,0o256,0o125,0o125,(1011010-0O3666474),0o156,0o164,0o70,0o36,0o156,0o164,0o70,0o36,(0x9D8DE4-0O47306735),0o100,(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o373,0o136,(0O334664274-0x37368B9),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o11,(0x9D8DE4-0O47306735),0o14,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o11,(15658734^0O73567354),0o11,(0O507646144^0x51F4C61),0o11,(0O347010110&0x463A71D),0o30,(1011010-0O3666474),0o54,0o54,0o26,0o33,0o57,0o223,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o375,0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o77,0o300,(0O507646144^0x51F4C61),0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,0o277,0o73,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o360,0o73,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o117,0o156,0o40,0o141,0o40,0o102,0o162,0o141,0o156,0o143,0o150,0o40,0o117,0o166,0o145,0o162,0o40,0o164,0o150,0o145,0o40,0o104,0o162,0o151,0o166,0o145,0o40,0o40,0o40,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o37,0o363,0o341,0o140,0o60,0o54,0o100,0o200,0o112,0o11,0o22,0o12,0o37,0o344,(0O347010110&0x463A71D),(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o14,0o102,0o51,0o124,0o46,0o207,0o43,0o52,(0x5E30A78-0O570605164),0o17,(0O507646144^0x51F4C61),(15658734^0O73567354),(0x5E30A78-0O570605164),(0O347010110&0x463A71D),0o120,0o40,0o100,0o200,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o116,0o137,(0x5E30A78-0O570605164),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o74,0o117,0o103,0o202,0o206,0o344,0o374,0o12,(0O347010110&0x463A71D),0o15,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o11,0o36,0o33,0o207,0o75,0o23,0o76,0o16,0o74,0o104,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o106,0o162,0o157,0o156,0o164,0o40,0o104,0o157,0o157,0o162,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o107,0o377,0o252,0o167,0o252,0o167,0o252,0o125,0o252,0o72,0o40,0o20,0o16,0o301,0o60,0o11,0o306,0o40,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o57,0o300,0o100,0o260,0o120,0o254,0o124,0o253,0o125,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o342,0o137,(15658734^0O73567354),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,0o34,0o34,0o36,0o33,0o77,0o170,0o377,0o13,0o11,(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o300,0o60,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o110,0o141,0o154,0o154,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o107,0o377,0o252,0o167,0o252,0o167,0o252,0o125,0o252,0o72,0o40,0o20,0o16,0o301,0o60,0o11,0o306,0o40,0o104,0o210,0o251,0o251,0o273,0o277,0o277,0o277,0o136,(0x9D8DE4-0O47306735),0o300,0o300,0o60,0o60,0o14,0o14,(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o245,0o137,(1011010-0O3666474),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o131,0o312,0o32,0o23,0o137,0o23,0o105,0o104,0o74,0o26,0o377,(0x75bcd15-0O726746425),0o131,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o124,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o124,(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,0o363,0o310,0o20,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o317,0o77,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o60,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o130,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o162,0o145,0o145,0o40,0o124,0o157,0o160,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o252,0o125,0o252,0o130,0o60,0o20,0o20,(0O347010110&0x463A71D),0o26,0o245,0o50,0o122,0o125,0o125,0o111,0o242,0o265,0o102,0o211,0o112,0o22,0o64,0o30,0o64,0o122,0o221,(0x9D8DE4-0O47306735),0o100,(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o317,0o137,(15658734^0O73567354),(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o36,0o55,0o67,0o173,0o155,0o136,0o270,0o300,0o15,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,(0x9D8DE4-0O47306735),0o56,0o210,0o32,0o30,0o105,0o204,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o112,0o252,0o252,0o252,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o177,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o100,0o37,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o120,(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o117,0o165,0o164,0o40,0o157,0o156,0o40,0o141,0o40,0o154,0o151,0o155,0o142,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0O57060516-0xbc614d),0o36,(1011010-0O3666474),0o172,0o32,0o350,0o150,0o240,0o102,(0x9D8DE4-0O47306735),0o377,0o374,0o70,0o30,0o20,0o40,(0x75bcd15-0O726746425),(15658734^0O73567354),(0O57060516-0xbc614d),0o201,(1011010-0O3666474),0o130,0o40,0o100,0o210,0o202,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o140,0o270,0o276,0o135,0o132,0o65,0o52,0o25,0o12,0o14,(0x75bcd15-0O726746425),0o11,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o55,0o114,0o31,0o23,0o130,0o24,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o22,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(15658734^0O73567354),0o252,(1011010-0O3666474),0o252,(1011010-0O3666474),0o252,0o12,0o252,(1011010-0O3666474),0o252,0o16,0o252,0o16,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o252,0o16,0o252,0o16,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o252,0o16,0o252,0o16,0o252,0o200,(0x75bcd15-0O726746425),0o22,0o252,0o16,0o252,0o16,0o252,0o240,(0x75bcd15-0O726746425),0o100,0o252,0o16,0o252,0o16,0o252,0o250,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,(0x5E30A78-0O570605164),0o12,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o122,0o145,0o163,0o143,0o165,0o145,0o40,0o105,0o163,0o155,0o145,0o162,0o145,0o154,0o144,0o141,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o27,(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o14,0o14,0o61,0o62,0o304,0o310,(0x5E30A78-0O570605164),0o356,(0x75bcd15-0O726746425),0o273,(0x75bcd15-0O726746425),0o356,(0x75bcd15-0O726746425),0o273,(0x75bcd15-0O726746425),0o125,0o321,0o342,0o304,0o310,0o321,0o342,0o304,0o310,0o27,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o26,0o361,0o252,0o370,0o252,(0x75bcd15-0O726746425),0o356,(0x75bcd15-0O726746425),0o273,(0O57060516-0xbc614d),0o230,0o136,(0x5E30A78-0O570605164),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o111,0o111,0o111,0o111,0o111,0o111,0o377,0o17,0o54,0o24,0o47,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o304,(15658734^0O73567354),0o314,0o15,(0O507646144^0x51F4C61),0o17,0o230,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o102,0o244,0o52,0o244,0o52,0o102,0o252,0o252,0o302,0o254,0o52,0o254,0o52,0o302,0o252,0o252,0o302,0o254,0o52,0o254,0o52,0o302,0o252,0o252,0o302,0o254,0o52,0o254,0o52,0o302,0o252,0o252,0o302,0o254,0o52,0o254,0o52,0o302,0o252,0o252,0o302,0o254,0o52,0o254,0o52,0o302,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o111,0o47,0o155,0o40,0o163,0o165,0o162,0o145,0o40,0o111,0o47,0o166,0o145,0o40,0o163,0o145,0o145,0o156,0o40,0o164,0o150,0o151,0o163,0o40,0o142,0o145,0o146,0o157,0o162,0o145,0o56,0o56,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,0o200,0o100,0o40,0o120,0o110,0o124,0o122,0o125,0o123,0o146,0o146,0o146,(0x75bcd15-0O726746425),0o146,0o146,0o146,0o146,0o114,0o121,0o125,0o124,0o125,0o25,0o125,0o105,0o125,0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o44,0o30,0o54,0o136,0o136,0o347,0o146,0o20,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o205,(0O334664274-0x37368B9),0o213,(0O507646144^0x51F4C61),0o223,(15658734^0O73567354),0o231,0o15,(1011010-0O3666474),0o105,0o144,0o74,0o124,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o252,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o252,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o252,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o252,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o252,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o252,0o177,0o377,0o377,0o377,0o377,0o376,0o252,0o40,0o40,0o127,0o145,0o40,0o155,0o165,0o163,0o164,0o40,0o160,0o145,0o162,0o146,0o157,0o162,0o155,0o40,0o141,0o40,0o121,0o165,0o151,0o162,0o153,0o141,0o146,0o154,0o145,0o145,0o147,0o40,(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o70,0o63,0o273,0o335,0o314,0o125,0o231,0o335,0o356,0o15,0o47,0o366,(0x75bcd15-0O726746425),0o334,0o321,(0x5E30A78-0O570605164),0o167,0o200,0o105,0o100,0o344,0o116,0o104,0o104,0o104,0o356,0o377,(0x9D8DE4-0O47306735),0o200,0o100,0o40,0o60,0o250,0o144,0o42,0o21,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o44,0o137,(0O57060516-0xbc614d),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o44,0o30,0o54,0o136,0o136,0o347,0o146,0o21,0o17,0o62,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o15,(0O347010110&0x463A71D),(0O57060516-0xbc614d),0o20,0o74,0o204,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o102,0o244,0o52,0o244,0o52,0o102,0o252,0o252,0o302,0o254,0o52,0o254,0o52,0o302,0o252,0o252,0o302,0o254,0o52,0o254,0o52,0o302,0o252,0o252,0o302,0o254,0o52,0o254,0o52,0o302,0o252,0o252,0o302,0o254,0o52,0o254,0o52,0o302,0o252,0o252,0o302,0o254,0o52,0o254,0o52,0o302,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o125,0o160,0o40,0o157,0o156,0o40,0o164,0o150,0o145,0o40,0o102,0o141,0o164,0o164,0o154,0o145,0o155,0o145,0o156,0o164,0o163,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o200,0o300,0o340,0o260,0o220,0o224,0o326,0o167,0o16,(0x75bcd15-0O726746425),0o177,0o177,0o143,0o153,0o143,0o177,0o177,0o40,0o112,0o52,0o32,0o110,0o154,0o152,0o51,0o210,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o50,0o252,0o12,(0x75bcd15-0O726746425),0o125,0o125,0o125,0o377,(0x75bcd15-0O726746425),0o55,0o137,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o44,0o30,0o54,0o136,0o136,0o347,0o146,0o22,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o205,(0O334664274-0x37368B9),0o213,(0x5E30A78-0O570605164),0o223,(0O507646144^0x51F4C61),0o231,0o105,0o204,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o320,0o252,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,0o220,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,0o260,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,0o260,0o12,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o117,0o156,0o40,0o164,0o150,0o145,0o40,0o122,0o157,0o157,0o146,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o104,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o200,0o300,0o340,0o320,0o130,0o234,0o336,0o315,0o46,0o21,0o370,(0x9D8DE4-0O47306735),(0O347010110&0x463A71D),0o360,0o17,0o320,0o77,0o106,0o125,0o231,0o335,0o314,0o125,0o231,0o335,0o314,(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o360,0o360,0o360,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0O57060516-0xbc614d),0o356,0o137,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(15658734^0O73567354),(0O507646144^0x51F4C61),0o12,0o124,0o50,0o60,0o110,0o60,0o21,0o22,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o42,0o26,(0O57060516-0xbc614d),0o20,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o240,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o300,0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o32,0o245,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o120,(0O507646144^0x51F4C61),0o125,0o125,0o125,0o125,0o125,0o132,0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o106,0o157,0o162,0o147,0o157,0o164,0o164,0o145,0o156,0o40,0o101,0o142,0o142,0o145,0o171,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o377,0o377,0o362,0o44,0o100,(15658734^0O73567354),(0x75bcd15-0O726746425),0o210,0o35,0o104,0o252,0o21,0o104,0o21,0o252,0o104,0o21,0o102,0o30,0o74,0o176,0o231,0o231,0o176,0o102,0o74,(0x9D8DE4-0O47306735),0o200,0o100,0o340,0o60,0o250,0o324,0o42,0o211,0o17,0o160,0o125,(0x75bcd15-0O726746425),0o273,0o252,0o252,0o252,0o252,(0x75bcd15-0O726746425),0o344,0o136,0o32,(0x75bcd15-0O726746425),0o304,0o137,(15658734^0O73567354),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o44,0o333,0o333,0o44,0o30,0o30,0o30,0o61,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o112,(0O347010110&0x463A71D),0o113,0o20,0o114,0o13,0o115,0o30,0o116,(0x9D8DE4-0O47306735),0o117,0o14,0o120,0o22,0o121,0o30,0o240,0o100,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o100,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o100,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o132,0o12,0o252,0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o25,0o125,0o125,0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o102,0o141,0o154,0o154,0o162,0o157,0o157,0o155,0o40,0o105,0o141,0o163,0o164,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o252,0o125,0o42,0o104,0o42,0o104,0o42,0o104,0o17,0o104,0o104,0o377,0o21,0o21,0o377,0o125,0o252,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o201,0o201,0o102,0o44,0o30,0o30,0o30,0o347,0o25,0o13,0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o23,0o154,0o52,(0O507646144^0x51F4C61),0o50,(0x9D8DE4-0O47306735),0o51,0o53,0o25,0o30,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o125,0o125,0o125,0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o125,0o125,0o125,0o125,0o125,0o125,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o102,0o141,0o154,0o154,0o162,0o157,0o157,0o155,0o40,0o127,0o145,0o163,0o164,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o62,0o252,0o250,0o255,0o257,0o40,0o252,0o125,0o125,0o43,0o21,0o42,0o210,0o21,0o104,0o210,0o42,0o104,0o102,0o50,0o124,0o252,0o124,0o250,0o124,0o24,0o56,(0x9D8DE4-0O47306735),0o300,0o300,0o60,0o260,0o14,0o14,(0O334664274-0x37368B9),0o13,0o106,0o377,0o377,0o377,0o252,0o125,0o30,0o30,0o30,(0O57060516-0xbc614d),0o260,0o137,0o14,(0x75bcd15-0O726746425),0o243,0o137,(0x5E30A78-0O570605164),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),0o256,0o256,0o242,0o102,0o102,0o356,0o26,0o24,0o33,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o41,0o30,0o50,0o16,0o52,(1011010-0O3666474),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o225,0o125,0o125,0o120,(0x75bcd15-0O726746425),0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o245,0o125,0o205,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o100,0o240,(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o124,0o157,0o40,0o164,0o150,0o145,0o40,0o113,0o151,0o164,0o143,0o150,0o145,0o156,0o163,0o40,0o40,0o40,0o40,0o115,0o141,0o151,0o156,0o40,0o123,0o164,0o141,0o151,0o162,0o167,0o141,0o171,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o15,0o377,0o377,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o72,(0x75bcd15-0O726746425),0o25,0o277,0o25,(0x75bcd15-0O726746425),0o121,0o373,0o121,0o115,0o30,0o132,0o275,0o31,0o176,0o231,0o44,0o44,0o17,0o300,0o200,0o60,0o40,0o14,(0O347010110&0x463A71D),(0O334664274-0x37368B9),(15658734^0O73567354),0o153,0o360,0o252,0o170,0o377,0o252,0o125,0o252,0o125,(0x75bcd15-0O726746425),0o16,0o137,(15658734^0O73567354),(0x75bcd15-0O726746425),0o177,0o137,0o14,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o240,0o360,0o370,0o374,0o172,0o45,(15658734^0O73567354),0o27,0o25,0o34,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o132,(0x5E30A78-0O570605164),0o133,0o20,0o134,0o226,0o135,(0x5E30A78-0O570605164),0o136,0o226,0o137,0o13,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o124,0o25,0o101,0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o124,0o25,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o124,0o25,0o101,0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o25,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o113,0o151,0o164,0o143,0o150,0o145,0o156,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o376,(0O57060516-0xbc614d),0o175,0o205,0o201,0o201,0o201,(0O57060516-0xbc614d),0o115,0o102,0o245,0o132,0o44,0o44,0o132,0o245,0o102,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o107,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o326,0o137,(0x9D8DE4-0O47306735),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o100,0o240,0o30,0o26,0o11,(0O347010110&0x463A71D),(0x5E30A78-0O570605164),0o30,0o26,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,(0O334664274-0x37368B9),0o61,0o11,0o62,0o17,0o60,0o24,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o20,(0O507646144^0x51F4C61),0o124,0o25,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o25,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o25,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o25,(0O507646144^0x51F4C61),0o124,0o25,0o252,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o127,0o145,0o163,0o164,0o40,0o157,0o146,0o40,0o113,0o151,0o164,0o143,0o150,0o145,0o156,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o377,0o275,0o245,0o245,0o245,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o42,0o11,0o102,0o220,0o44,0o11,0o102,0o220,0o44,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o107,0o300,0o100,0o260,0o120,0o254,0o124,0o253,0o125,0o102,0o360,0o125,0o252,0o125,0o125,0o252,0o52,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o226,0o137,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),0o310,0o137,(0x9D8DE4-0O47306735),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o31,0o27,0o36,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o61,0o11,0o62,0o16,0o61,0o24,0o60,0o33,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o124,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o125,0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,0o12,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o125,0o125,0o125,0o125,0o125,0o125,0o132,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o103,0o157,0o154,0o144,0o40,0o123,0o164,0o157,0o162,0o145,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o15,0o377,0o377,0o125,0o252,0o125,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o42,0o222,0o122,0o112,0o111,0o51,0o45,0o244,0o222,0o117,0o40,0o42,0o24,0o330,0o33,0o50,0o104,(0x5E30A78-0O570605164),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o160,0o214,0o162,0o372,0o357,0o255,0o45,0o41,0o64,0o30,0o37,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o66,0o20,0o67,(0x5E30A78-0O570605164),0o70,(0O334664274-0x37368B9),0o71,(0O347010110&0x463A71D),(0O57060516-0xbc614d),0o20,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x5E30A78-0O570605164),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o244,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o20,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x5E30A78-0O570605164),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o100,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o105,0o141,0o163,0o164,0o40,0o127,0o141,0o154,0o154,0o40,0o102,0o141,0o163,0o145,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o133,0o244,0o244,0o125,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o46,0o131,0o45,0o46,0o331,0o51,0o326,0o124,0o226,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o33,(0x75bcd15-0O726746425),0o40,0o24,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o140,(0O334664274-0x37368B9),0o55,0o47,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o200,0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o200,0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o200,0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o200,0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o32,0o252,0o252,0o252,0o252,0o252,0o252,0o240,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o240,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o103,0o150,0o141,0o160,0o145,0o154,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o15,0o111,0o111,0o111,0o111,0o111,0o111,0o111,0o111,0o26,0o250,0o45,(0x75bcd15-0O726746425),0o45,0o250,0o100,0o335,0o100,0o102,0o50,0o124,0o252,0o125,0o252,0o50,0o50,0o50,(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),0o12,0o275,0o377,(0x75bcd15-0O726746425),0o252,0o125,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o261,0o137,(0x9D8DE4-0O47306735),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o60,0o70,0o154,0o306,0o306,0o154,0o20,0o34,0o32,0o41,0o25,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o231,0o21,0o273,0o22,0o332,0o147,0o14,0o144,(1011010-0O3666474),0o146,0o221,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o200,0o14,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o26,0o201,0o125,0o125,0o125,0o125,0o125,0o125,0o102,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o200,0o60,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),(15658734^0O73567354),0o225,0o120,(0x75bcd15-0O726746425),0o125,(0x75bcd15-0O726746425),0o125,0o100,(15658734^0O73567354),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o200,(0O507646144^0x51F4C61),0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o200,0o60,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o252,0o240,0o252,0o252,0o250,0o52,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o163,0o164,0o141,0o151,0o162,0o143,0o141,0o163,0o145,0o56,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o106,0o377,0o252,0o125,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o273,0o273,0o70,0o273,0o273,0o273,0o203,0o273,(15658734^0O73567354),0o30,0o251,0o333,0o176,0o176,0o74,0o132,(0O347010110&0x463A71D),(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o14,0o14,0o60,0o60,0o300,0o300,(0O507646144^0x51F4C61),0o210,0o251,0o251,0o273,0o277,0o277,0o277,0o136,(0O57060516-0xbc614d),0o332,0o137,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o324,0o137,0o11,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,0o52,0o24,0o11,0o152,0o234,(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o35,0o33,0o42,0o26,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o73,0o20,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o100,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o12,0o252,0o250,(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o116,0o151,0o147,0o150,0o164,0o155,0o141,0o162,0o145,0o40,0o122,0o157,0o157,0o155,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o377,0o245,0o122,0o44,0o102,0o42,0o100,(0x5E30A78-0O570605164),0o63,(0x75bcd15-0O726746425),0o52,0o124,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o242,0o105,(0x75bcd15-0O726746425),0o105,0o102,0o231,0o146,0o241,0o237,0o201,0o146,0o132,(0x9D8DE4-0O47306735),0o200,0o300,0o240,0o360,0o370,0o134,0o272,(15658734^0O73567354),0o245,0o377,0o132,0o377,0o377,0o252,0o125,0o252,0o125,(0x75bcd15-0O726746425),0o373,0o136,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o311,0o137,(0O334664274-0x37368B9),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o254,0o256,(0O57060516-0xbc614d),0o255,0o255,(15658734^0O73567354),0o254,0o130,0o36,0o34,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o106,0o210,0o107,0o313,0o110,0o116,0o111,0o321,0o106,0o224,0o107,0o227,0o110,0o234,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o224,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o201,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o202,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o40,0o202,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o40,0o202,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o132,0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o132,0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o132,0o252,0o252,0o252,0o125,0o125,0o125,0o125,0o132,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o102,0o141,0o156,0o171,0o141,0o156,0o40,0o124,0o162,0o145,0o145,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o110,(0x75bcd15-0O726746425),0o242,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o106,(0x75bcd15-0O726746425),0o223,0o26,0o112,0o51,0o45,0o111,0o222,0o244,0o45,0o224,0o16,0o245,0o132,0o245,0o132,0o245,0o132,0o245,0o132,(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o144,0o137,(0O347010110&0x463A71D),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o70,0o105,0o202,0o202,0o202,0o104,0o70,0o37,0o35,0o44,0o30,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o144,0o212,0o145,0o215,0o146,0o20,0o130,0o26,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o125,0o125,0o125,0o125,0o125,0o124,0o252,0o252,0o125,0o125,0o125,0o125,0o125,0o122,0o252,0o252,0o125,0o125,0o125,0o125,0o125,0o112,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o123,0o167,0o151,0o155,0o155,0o151,0o156,0o147,0o40,0o120,0o157,0o157,0o154,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o51,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o72,0o104,0o104,0o273,0o104,0o104,0o104,0o273,0o104,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o57,(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o17,0o17,0o77,0o77,0o377,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o331,0o137,(0O334664274-0x37368B9),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o160,0o40,0o40,0o120,0o120,0o210,0o210,0o210,0o66,0o36,0o45,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o116,0o14,(0O57060516-0xbc614d),0o20,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,0o32,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o112,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o12,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o20,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o244,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x5E30A78-0O570605164),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o110,0o141,0o154,0o146,0o167,0o141,0o171,0o40,0o165,0o160,0o40,0o164,0o150,0o145,0o40,0o105,0o141,0o163,0o164,0o40,0o127,0o141,0o154,0o154,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o377,0o377,0o132,0o231,0o275,0o132,0o74,0o132,0o17,0o63,0o21,0o104,0o314,0o63,0o21,0o104,0o314,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o200,0o300,0o340,0o160,0o270,0o34,0o116,0o307,(0x9D8DE4-0O47306735),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o353,0o136,(1011010-0O3666474),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o41,(0x75bcd15-0O726746425),0o46,0o32,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o46,(0x5E30A78-0O570605164),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o252,0o252,0o252,0o240,0o300,(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o25,0o125,0o125,0o120,0o132,0o245,0o125,0o125,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,0o14,0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,0o124,0o25,0o125,0o132,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o125,0o125,0o132,(0x75bcd15-0O726746425),0o50,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),0o353,(0x75bcd15-0O726746425),0o60,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o154,0o151,0o164,0o164,0o154,0o145,0o40,0o162,0o157,0o157,0o155,0o56,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o377,0o375,0o273,0o326,0o162,0o140,0o100,0o26,0o104,0o104,0o377,0o21,0o21,0o377,0o125,0o252,(0x5E30A78-0O570605164),0o30,0o132,0o275,0o31,0o176,0o231,0o44,0o44,(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o14,0o14,0o61,0o62,0o304,0o310,(0O507646144^0x51F4C61),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),0o210,0o120,0o40,0o20,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),0o350,0o137,0o12,(0O57060516-0xbc614d),0o27,0o137,(0O507646144^0x51F4C61),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o74,0o30,0o275,0o347,0o347,0o275,0o30,0o74,0o42,0o40,0o47,0o33,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o132,(0x5E30A78-0O570605164),(15658734^0O73567354),0o216,0o130,0o24,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o12,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o125,(0O507646144^0x51F4C61),0o125,0o120,0o12,0o225,0o132,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),0o12,0o240,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o250,(0x75bcd15-0O726746425),0o12,0o245,0o125,(0O507646144^0x51F4C61),0o100,(15658734^0O73567354),0o240,(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o200,(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o245,0o125,(0O507646144^0x51F4C61),(1011010-0O3666474),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o125,0o125,0o125,0o101,0o125,0o125,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o157,0o160,0o40,0o163,0o164,0o141,0o151,0o162,0o143,0o141,0o163,0o145,0o56,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,0o377,0o377,0o245,0o130,0o44,0o102,0o40,(0x75bcd15-0O726746425),0o15,0o42,0o167,0o42,0o210,0o42,0o167,0o42,0o210,(0O334664274-0x37368B9),0o20,0o20,0o20,0o124,0o70,0o326,0o70,0o124,(0O507646144^0x51F4C61),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o14,0o15,0o62,0o67,0o302,0o310,0o26,0o360,0o146,0o360,0o146,(0x75bcd15-0O726746425),0o231,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o356,0o137,(0x9D8DE4-0O47306735),(0O57060516-0xbc614d),0o157,0o137,(0x9D8DE4-0O47306735),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o270,0o276,0o135,0o132,0o65,0o52,0o25,(0x75bcd15-0O726746425),0o43,0o41,0o50,0o34,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o20,0o17,0o230,(0O347010110&0x463A71D),(0O347010110&0x463A71D),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o254,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,0o125,0o125,0o125,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o251,0o125,0o125,0o125,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o115,0o141,0o163,0o164,0o145,0o162,0o40,0o102,0o145,0o144,0o162,0o157,0o157,0o155,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o377,0o153,0o265,(0x75bcd15-0O726746425),0o255,(0x75bcd15-0O726746425),0o112,(0x75bcd15-0O726746425),0o63,(0x75bcd15-0O726746425),0o121,0o373,0o121,(0x75bcd15-0O726746425),0o252,0o277,0o252,0o107,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o174,0o376,0o177,0o76,(0x9D8DE4-0O47306735),0o300,0o100,0o260,(0x75bcd15-0O726746425),0o254,(0x75bcd15-0O726746425),0o123,(0x75bcd15-0O726746425),0o51,0o125,0o125,0o125,0o125,0o121,0o137,0o100,0o252,(0O57060516-0xbc614d),0o202,0o137,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o322,0o137,(15658734^0O73567354),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o44,0o42,0o51,0o35,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o240,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o24,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o100,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o24,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0O334664274-0x37368B9),0o125,0o120,(0x75bcd15-0O726746425),0o245,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o244,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o40,0o40,0o40,0o40,0o101,0o40,0o142,0o151,0o164,0o40,0o157,0o146,0o40,0o164,0o162,0o145,0o145,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o255,0o122,0o51,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o36,0o326,0o153,0o146,0o333,0o151,0o153,0o331,0o155,(15658734^0O73567354),0o25,(0x75bcd15-0O726746425),0o252,0o125,0o252,(0x75bcd15-0O726746425),0o25,0o12,0o104,(0O334664274-0x37368B9),(0O347010110&0x463A71D),0o44,0o20,0o100,0o40,0o200,0o200,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o64,0o137,(15658734^0O73567354),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o45,0o43,0o52,0o36,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o150,(15658734^0O73567354),0o145,(0x9D8DE4-0O47306735),0o105,0o222,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o45,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o117,0o162,0o141,0o156,0o147,0o145,0o162,0o171,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o245,0o112,0o44,(15658734^0O73567354),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),0o26,0o25,0o125,0o125,0o44,0o45,0o125,0o111,0o42,(1011010-0O3666474),0o202,0o101,0o76,0o152,0o267,0o31,0o45,0o104,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(15658734^0O73567354),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o20,0o40,0o100,0o200,0o46,0o306,0o252,0o250,0o52,0o131,0o44,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o134,0o137,(0x5E30A78-0O570605164),(0O57060516-0xbc614d),0o240,0o137,0o16,(1011010-0O3666474),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o24,0o56,0o125,0o52,0o105,0o52,0o24,0o70,0o44,0o53,0o37,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o141,0o224,0o33,0o211,0o74,0o204,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o245,(0x75bcd15-0O726746425),0o132,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o241,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o112,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o241,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o132,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o100,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0O57060516-0xbc614d),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o120,0o162,0o151,0o145,0o163,0o164,0o163,0o47,0o40,0o110,0o157,0o154,0o145,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o125,0o125,0o135,0o327,0o160,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o42,0o21,0o104,0o210,0o42,0o21,0o104,0o210,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o277,0o277,0o273,0o261,0o273,0o273,0o277,0o277,0o47,(0x75bcd15-0O726746425),0o74,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o204,0o21,0o246,0o22,0o305,0o45,0o26,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,0o12,(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o52,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o250,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o50,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o50,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o252,0o52,0o212,0o242,0o250,0o252,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,(0O334664274-0x37368B9),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o105,0o155,0o145,0o162,0o147,0o145,0o156,0o143,0o171,0o40,0o107,0o145,0o156,0o145,0o162,0o141,0o164,0o157,0o162,0o40,0o40,0o40,0o40,0o40,0o40,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o57,0o146,0o146,0o146,0o146,0o146,0o146,0o146,0o146,0o63,0o277,0o25,(0x75bcd15-0O726746425),0o121,0o373,0o121,(0x75bcd15-0O726746425),0o25,0o15,0o377,0o77,(0O334664274-0x37368B9),0o37,0o177,0o37,(0O334664274-0x37368B9),0o77,0o17,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o26,0o252,0o124,0o252,0o124,0o50,0o20,0o50,0o20,(0x75bcd15-0O726746425),0o151,0o137,0o16,(0O57060516-0xbc614d),0o122,0o137,(1011010-0O3666474),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o50,0o46,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o32,(0O347010110&0x463A71D),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o352,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o225,0o124,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,0o250,0o325,0o25,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o201,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o120,0o220,0o250,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0O507646144^0x51F4C61),0o120,0o201,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o120,0o220,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o12,0o120,0o201,0o200,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o22,0o120,0o220,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o120,(0O57060516-0xbc614d),0o200,0o20,(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(15658734^0O73567354),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o200,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o224,(0O57060516-0xbc614d),0o220,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o162,0o40,0o112,0o157,0o156,0o145,0o163,0o40,0o167,0o151,0o154,0o154,0o40,0o156,0o145,0o166,0o145,0o162,0o40,0o142,0o145,0o154,0o151,0o145,0o166,0o145,0o40,0o164,0o150,0o151,0o163,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o376,0o125,0o52,0o252,0o125,0o252,0o252,0o377,0o37,0o21,0o104,0o42,0o210,0o21,0o104,0o42,0o210,0o103,(0O57060516-0xbc614d),(0x5E30A78-0O570605164),0o42,(0O347010110&0x463A71D),0o21,0o104,0o42,0o210,(0O507646144^0x51F4C61),0o100,0o220,0o44,0o110,0o22,0o44,0o11,(15658734^0O73567354),0o46,0o245,(0x75bcd15-0O726746425),0o245,(0x75bcd15-0O726746425),0o252,0o377,0o377,0o125,(0x75bcd15-0O726746425),0o340,0o137,0o40,(0x75bcd15-0O726746425),0o130,0o137,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o360,0o360,0o170,0o270,0o114,0o62,0o15,(0O334664274-0x37368B9),0o51,0o47,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o33,0o222,0o13,0o12,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o225,0o126,0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o244,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o244,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o244,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o244,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o300,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o145,0o225,0o226,0o125,0o225,0o126,0o131,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o101,0o164,0o164,0o151,0o143,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o26,0o316,0o377,(0x75bcd15-0O726746425),0o347,(0x75bcd15-0O726746425),0o177,(0x75bcd15-0O726746425),0o373,0o36,0o356,0o21,0o154,0o222,0o21,0o311,0o42,0o234,0o104,0o44,0o22,0o104,0o252,0o125,0o252,0o133,0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o360,0o252,0o74,0o252,0o125,0o252,0o125,0o252,(0O57060516-0xbc614d),0o30,0o137,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o21,0o42,0o63,0o104,0o125,0o146,0o167,0o210,0o52,0o50,(0x75bcd15-0O726746425),0o42,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o122,(0x5E30A78-0O570605164),0o123,(1011010-0O3666474),0o124,(0O347010110&0x463A71D),0o125,0o12,0o126,0o14,0o127,0o116,0o105,0o325,0o74,0o222,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o377,0o377,0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o303,0o374,0o60,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o363,0o374,0o374,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o360,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,0o240,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o120,(0x75bcd15-0O726746425),0o240,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o124,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o125,0o156,0o144,0o145,0o162,0o40,0o164,0o150,0o145,0o40,0o122,0o157,0o157,0o146,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,0o265,0o252,0o125,0o112,0o45,0o102,(0O57060516-0xbc614d),(15658734^0O73567354),0o36,0o146,0o266,0o155,0o273,0o146,0o271,0o155,0o266,0o365,0o146,0o252,0o137,0o274,0o143,0o254,0o153,0o244,0o17,(0O57060516-0xbc614d),(15658734^0O73567354),(0x5E30A78-0O570605164),0o50,0o20,0o50,0o100,0o200,0o16,0o245,0o252,0o275,0o146,0o146,0o146,0o146,0o146,(0O57060516-0xbc614d),0o314,0o136,0o24,(0O57060516-0xbc614d),0o304,0o136,(0x9D8DE4-0O47306735),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o377,0o53,0o51,0o60,0o44,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o67,(0x5E30A78-0O570605164),0o47,0o20,0o74,0o302,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o303,0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o103,0o157,0o156,0o163,0o145,0o162,0o166,0o141,0o164,0o157,0o162,0o171,0o40,0o122,0o157,0o157,0o146,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o254,0o123,0o52,0o320,0o212,0o44,0o42,(0x5E30A78-0O570605164),(0O507646144^0x51F4C61),0o367,0o357,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o146,0o146,(0x75bcd15-0O726746425),0o103,0o332,0o325,0o177,0o56,0o21,0o37,0o12,0o33,(0x9D8DE4-0O47306735),(0O57060516-0xbc614d),(15658734^0O73567354),(0x5E30A78-0O570605164),0o20,(0O347010110&0x463A71D),0o40,0o100,0o200,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o272,0o137,(1011010-0O3666474),(0O57060516-0xbc614d),0o354,0o137,0o11,(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o30,0o370,0o74,0o176,0o140,0o140,0o176,(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),0o45,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o152,0o24,0o75,0o30,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o222,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o222,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o222,0o200,(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o222,0o240,0o202,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o222,0o252,0o252,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o222,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o117,0o156,0o40,0o164,0o157,0o160,0o40,0o157,0o146,0o40,0o164,0o150,0o145,0o40,0o150,0o157,0o165,0o163,0o145,0o40,0o40,0o40,0o40,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o16,0o240,0o100,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o113,0o121,0o252,(0x75bcd15-0O726746425),0o252,0o25,0o252,(0x75bcd15-0O726746425),0o252,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o17,(0O57060516-0xbc614d),(0O334664274-0x37368B9),(1011010-0O3666474),0o15,0o32,0o64,0o150,0o320,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o114,0o137,(1011010-0O3666474),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o24,0o32,0o65,0o153,0o320,0o16,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o46,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o35,0o24,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o252,0o252,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o252,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),0o252,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o200,0o60,0o14,0o14,(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o125,0o156,0o144,0o145,0o162,0o40,0o164,0o150,0o145,0o40,0o104,0o162,0o151,0o166,0o145,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o377,0o377,0o245,0o130,0o44,0o102,0o40,(0x75bcd15-0O726746425),0o14,0o20,0o52,0o125,0o240,0o20,0o40,0o20,(0O347010110&0x463A71D),(0x5E30A78-0O570605164),0o30,0o30,0o24,0o42,0o42,0o125,0o21,0o50,(0x9D8DE4-0O47306735),0o200,0o100,0o240,0o120,0o250,0o124,0o252,0o125,(15658734^0O73567354),0o340,0o252,0o370,(0x75bcd15-0O726746425),0o377,0o377,0o146,0o146,(0x75bcd15-0O726746425),0o122,0o137,0o16,(0x75bcd15-0O726746425),0o315,0o137,0o14,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o201,0o144,0o315,0o17,0o141,0o332,0o63,0o32,(1011010-0O3666474),0o56,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o34,0o20,0o35,0o222,0o104,0o226,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o12,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o12,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o12,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o12,0o240,0o252,0o252,0o252,0o252,0o252,0o252,0o12,0o240,0o252,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,0o252,0o12,0o240,0o252,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,0o252,0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,0o252,0o12,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o125,0o125,0o100,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,(0x75bcd15-0O726746425),0o14,(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o60,0o52,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o162,0o145,0o145,0o40,0o122,0o157,0o157,0o164,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o377,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o146,0o231,0o44,0o44,0o167,0o210,0o215,0o162,(15658734^0O73567354),0o34,0o52,0o137,0o175,0o276,0o376,0o322,0o174,0o103,(0O334664274-0x37368B9),(15658734^0O73567354),0o15,(15658734^0O73567354),0o61,(0O347010110&0x463A71D),0o325,0o42,(0x5E30A78-0O570605164),0o356,0o252,0o70,0o377,0o377,0o20,0o20,0o70,(0x75bcd15-0O726746425),0o100,0o137,0o15,(0O57060516-0xbc614d),0o330,0o137,(1011010-0O3666474),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o35,0o42,0o136,0o276,0o174,0o70,0o20,0o55,0o57,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o36,0o204,0o50,0o15,0o43,0o23,0o37,0o131,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o133,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o66,(0x75bcd15-0O726746425),0o302,0o343,0o142,0o335,0o64,(1011010-0O3666474),0o20,0o377,0o335,0o161,0o12,0o160,0o303,0o126,0o136,(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),0o140,0o72,0o216,0o100,0o40,0o30,0o345,0o305,0o365,0o21,0o350,0o136,0o325,0o305,0o311,0o361,0o301,0o75,0o362,0o340,(0x75bcd15-0O726746425),0o341,0o311,0o301,(0x75bcd15-0O726746425),0o176,0o376,0o54,0o300,0o327,0o305,0o176,0o376,0o43,0o314,0o170,0o35,0o315,0o34,0o53,0o343,0o345,0o21,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o12,0o252,(0x75bcd15-0O726746425),0o120,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o120,(0x75bcd15-0O726746425),0o240,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o240,0o12,0o242,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o240,0o41,0o102,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o242,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o242,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o116,0o157,0o155,0o145,0o156,0o40,0o114,0o165,0o156,0o151,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o15,0o377,0o42,0o104,0o210,0o125,0o42,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o363,0o252,0o160,0o252,0o154,0o261,0o137,0o252,0o125,(1011010-0O3666474),0o125,0o242,0o125,0o230,0o34,0o52,0o105,0o212,(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o64,0o12,0o304,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o351,0o137,(0O507646144^0x51F4C61),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o22,0o22,0o22,0o22,0o22,0o22,0o22,0o22,(0x75bcd15-0O726746425),0o22,(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o150,(0O507646144^0x51F4C61),0o153,0o24,0o35,0o220,0o13,0o26,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,(15658734^0O73567354),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o125,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o250,(0x75bcd15-0O726746425),0o101,(0x75bcd15-0O726746425),0o25,0o126,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o250,(0x75bcd15-0O726746425),0o101,(0x75bcd15-0O726746425),0o125,0o126,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o250,(0x75bcd15-0O726746425),0o101,(0O57060516-0xbc614d),0o125,0o125,0o125,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o303,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o127,0o151,0o156,0o145,0o40,0o103,0o145,0o154,0o154,0o141,0o162,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o377,0o30,0o347,0o20,0o307,0o70,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o51,0o12,0o101,0o50,(0O507646144^0x51F4C61),0o240,0o24,0o202,0o120,0o106,0o44,0o44,0o44,0o132,0o333,0o275,0o303,0o176,(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o15,0o16,0o65,0o72,0o325,0o352,0o15,0o252,0o125,0o252,0o125,0o252,0o125,0o252,0o125,(0O57060516-0xbc614d),0o233,0o137,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o330,0o137,(0O334664274-0x37368B9),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o31,0o371,0o37,(0x75bcd15-0O726746425),0o31,0o377,0o37,0o63,0o23,0o64,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o64,0o20,0o100,0o31,0o101,0o11,0o102,0o23,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,0o340,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o240,0o32,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o245,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o12,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o132,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o127,0o141,0o164,0o143,0o150,0o40,0o124,0o157,0o167,0o145,0o162,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o377,0o377,0o252,0o125,0o252,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o35,0o252,0o125,0o125,0o252,0o125,0o252,0o252,0o125,0o14,0o106,0o211,0o211,0o66,0o110,0o203,0o204,0o150,0o17,(0O57060516-0xbc614d),(15658734^0O73567354),(0x5E30A78-0O570605164),(0O347010110&0x463A71D),0o20,0o40,0o100,0o200,0o15,0o366,0o377,0o347,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o214,0o136,(0O347010110&0x463A71D),(0O57060516-0xbc614d),(0x9D8DE4-0O47306735),0o137,(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o164,0o70,0o146,0o277,0o277,0o235,0o102,0o74,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o154,0o221,0o155,0o13,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o252,0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o250,(0x75bcd15-0O726746425),0o101,(0x75bcd15-0O726746425),0o100,0o52,0o252,0o252,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o252,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o152,0o252,0o252,0o250,0o21,(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),0o52,0o252,0o252,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,0o52,0o252,0o252,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o152,0o252,0o252,0o250,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o157,0o157,0o154,0o40,0o40,0o123,0o150,0o145,0o144,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o132,0o377,0o42,0o104,0o42,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o36,0o125,0o252,0o104,0o42,0o125,0o252,0o104,0o42,(1011010-0O3666474),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),(0x5E30A78-0O570605164),0o210,0o120,0o40,0o20,(0O347010110&0x463A71D),(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o14,0o14,0o60,0o60,0o300,0o300,0o104,0o340,0o252,(0x75bcd15-0O726746425),0o146,0o146,0o146,0o146,0o146,(0O57060516-0xbc614d),0o347,0o137,0o22,(0O57060516-0xbc614d),0o343,0o136,(0O347010110&0x463A71D),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o30,0o30,0o30,0o30,0o233,0o177,0o73,0o72,0o61,0o65,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o64,0o20,0o142,0o11,0o143,0o24,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o25,0o125,0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o125,0o125,0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o124,0o125,0o125,0o125,0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o125,0o125,0o125,0o125,0o125,0o125,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o102,0o141,0o143,0o153,0o40,0o123,0o164,0o141,0o151,0o162,0o167,0o141,0o171,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o103,0o377,0o104,0o104,0o377,0o21,0o21,0o377,(0x75bcd15-0O726746425),0o36,0o25,0o361,0o217,0o250,0o212,0o370,0o37,0o25,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o107,(0O334664274-0x37368B9),(0O57060516-0xbc614d),0o14,(0x5E30A78-0O570605164),0o60,0o20,0o300,0o100,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o342,0o137,0o20,(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o65,0o31,0o66,0o61,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o44,0o226,0o134,0o220,0o35,0o203,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o125,0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o102,0o141,0o143,0o153,0o40,0o104,0o157,0o157,0o162,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o377,0o377,0o252,0o125,0o252,0o125,(0x75bcd15-0O726746425),0o46,0o151,0o322,0o245,0o113,0o226,0o55,0o132,0o264,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o15,0o17,0o66,0o75,0o332,0o364,0o42,0o360,0o360,0o360,0o360,0o146,0o146,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o362,0o137,0o16,(0O57060516-0xbc614d),0o351,0o137,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o64,0o67,0o63,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o125,0o125,0o120,(0x75bcd15-0O726746425),0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o52,0o252,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o127,0o145,0o163,0o164,0o40,0o40,0o127,0o151,0o156,0o147,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o101,0o371,0o377,0o77,0o325,0o252,0o25,0o112,0o204,0o47,0o254,0o256,(0O57060516-0xbc614d),0o255,0o255,(15658734^0O73567354),0o254,0o350,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0O334664274-0x37368B9),0o14,0o14,0o60,0o60,0o300,0o300,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o360,0o137,0o20,(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o67,0o37,0o70,0o64,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o141,0o16,0o131,0o304,0o24,0o11,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o240,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),0o240,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o100,(0x75bcd15-0O726746425),0o25,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o240,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,0o240,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o11,0o125,0o125,0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o127,0o145,0o163,0o164,0o40,0o102,0o145,0o144,0o162,0o157,0o157,0o155,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o252,0o125,0o202,0o101,0o202,0o101,0o202,0o101,0o15,0o250,0o125,0o250,0o126,0o317,0o56,0o46,0o301,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o102,0o245,0o377,0o275,0o252,0o125,0o272,0o105,0o203,(0x75bcd15-0O726746425),0o172,0o136,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o66,0o71,0o65,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o36,0o213,0o63,0o116,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,0o60,0o60,0o14,0o14,(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o245,0o125,0o125,0o125,0o125,0o125,0o125,(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o120,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o245,0o125,0o125,0o125,0o125,0o125,(0O507646144^0x51F4C61),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o127,0o145,0o163,0o164,0o40,0o127,0o151,0o156,0o147,0o40,0o122,0o157,0o157,0o146,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o377,0o252,0o377,0o244,0o244,0o247,0o344,0o74,0o45,0o341,0o204,0o36,0o110,0o341,0o204,0o36,0o110,0o102,0o30,0o74,0o176,0o377,0o257,0o125,0o72,0o20,(0x9D8DE4-0O47306735),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),0o60,(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o374,0o137,(0x5E30A78-0O570605164),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o12,0o15,0o74,0o362,0o300,0o71,0o45,(0x75bcd15-0O726746425),0o66,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o64,0o23,0o34,0o24,0o74,0o124,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o25,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o320,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o14,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o60,0o20,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o14,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),0o240,0o125,0o125,(0x75bcd15-0O726746425),0o40,0o40,0o40,0o101,0o142,0o157,0o166,0o145,0o40,0o164,0o150,0o145,0o40,0o127,0o145,0o163,0o164,0o40,0o102,0o145,0o144,0o162,0o157,0o157,0o155,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),0o367,0o252,0o125,0o357,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o43,0o252,0o125,0o252,0o125,0o252,0o125,0o252,0o125,(1011010-0O3666474),0o60,0o140,0o300,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(1011010-0O3666474),0o11,0o23,(1011010-0O3666474),0o154,0o230,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o261,0o137,(0O347010110&0x463A71D),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O347010110&0x463A71D),0o20,0o40,0o41,0o22,0o254,0o100,0o40,(0x75bcd15-0O726746425),0o70,(0x75bcd15-0O726746425),0o67,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o313,0o63,0o116,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o240,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,(0x75bcd15-0O726746425),(0O507646144^0x51F4C61),0o325,0o165,0o135,0o165,0o252,0o252,(0x75bcd15-0O726746425),0o25,0o125,0o125,0o125,0o125,0o252,0o252,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o102,0o145,0o141,0o143,0o150,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o15,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o62,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o100,(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o20,(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o52,0o104,(0x75bcd15-0O726746425),0o222,0o44,0o200,0o50,0o202,0o120,0o60,0o102,0o201,0o347,0o201,0o132,0o176,0o74,0o102,0o16,(0O57060516-0xbc614d),(0O334664274-0x37368B9),(0x9D8DE4-0O47306735),0o17,0o36,0o67,0o177,0o373,0o54,0o116,0o252,(0x75bcd15-0O726746425),0o100,0o100,0o104,0o252,0o377,(0x75bcd15-0O726746425),0o340,0o137,(0O507646144^0x51F4C61),(0O57060516-0xbc614d),0o305,0o137,(0O57060516-0xbc614d),(15658734^0O73567354),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0O507646144^0x51F4C61),0o13,0o13,0o27,0o67,0o157,0o357,0o73,0o63,0o72,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o16,0o74,0o124,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o140,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,(0O334664274-0x37368B9),(0O334664274-0x37368B9),(0x75bcd15-0O726746425),0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o125,0o152,0o252,0o252,0o252,0o201,0o125,0o125,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o201,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o201,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o201,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(15658734^0O73567354),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o252,0o252,0o252,0o252,0o252,0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o131,0o141,0o143,0o150,0o164,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(1011010-0O3666474),0o273,0o335,0o335,0o356,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o75,0o273,0o167,0o356,0o335,0o273,0o167,0o356,0o335,0o102,0o176,0o277,0o277,0o156,0o54,0o54,0o255,0o377,(0x9D8DE4-0O47306735),0o200,0o100,0o40,0o20,(0O347010110&0x463A71D),(0x5E30A78-0O570605164),(15658734^0O73567354),(0O57060516-0xbc614d),0o15,0o340,0o252,0o70,(0O57060516-0xbc614d),0o203,0o307,0o174,0o20,(0x75bcd15-0O726746425),0o365,0o137,0o13,(0x75bcd15-0O726746425),0o52,0o137,(0O507646144^0x51F4C61),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o316,0o361,0o271,0o325,0o357,0o327,0o273,0o377,0o74,0o72,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o65,(0O347010110&0x463A71D),0o33,0o25,0o377,0o21,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x5E30A78-0O570605164),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o220,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o200,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o25,0o125,0o125,0o125,0o125,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o377,0o377,0o377,0o377,0o300,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o124,0o150,0o145,0o40,0o102,0o157,0o167,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,0o40,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o104,0o377,0o252,0o125,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o75,0o311,0o311,0o311,0o311,0o311,0o311,0o311,0o311,0o117,0o100,0o202,0o122,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x9D8DE4-0O47306735),0o200,0o100,0o40,0o20,(0O347010110&0x463A71D),(0x5E30A78-0O570605164),(15658734^0O73567354),(0O57060516-0xbc614d),0o16,0o377,0o252,0o252,(0x75bcd15-0O726746425),0o252,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0O57060516-0xbc614d),0o361,0o137,0o17,(0x75bcd15-0O726746425),0o320,0o137,(1011010-0O3666474),(0O507646144^0x51F4C61),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o110,0o71,0o46,0o332,0o133,0o144,0o234,0o22,(0x75bcd15-0O726746425),0o73,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o151,0o27,0o156,0o24,0o377,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o11,0o32,0o376,0o73,0o50,0o312,0o376,0o15,0o50,0o306,0o345,0o41,(0x75bcd15-0O726746425),0o170,(1011010-0O3666474),(15658734^0O73567354),0o315,0o236,0o145,0o301,0o60,(1011010-0O3666474),0o21,0o263,0o147,0o303,0o131,0o144,0o315,0o112,0o165,0o40,0o365,0o315,0o264,0o133,0o304,0o355,0o133,0o136,0o43,0o176,0o62,0o56,0o124,0o72,0o63,0o124,0o267,0o50,0o20,0o173,0o376,0o40,0o70,(0x5E30A78-0O570605164),0o376,0o45,0o70,(0x9D8DE4-0O47306735),0o72,(1011010-0O3666474),0o123,0o267,0o312,0o344,0o153,0o41,0o60,0o172,0o26,(0x75bcd15-0O726746425),0o31,0o31,0o176,0o43,0o146,0o157,0o173,0o21,0o127,0o165,0o353,0o343,0o353,0o345,0o14,0o15,0o310,0o376,0o30,0o76,(0O57060516-0xbc614d),0o52,0o64,0o124,0o320,0o345,0o365,0o52,0o101,0o124,(1011010-0O3666474),(15658734^0O73567354),0o315,0o236,0o145,0o60,0o67,0o325,0o305,0o315,0o207,0o167,0o52,0o101,0o124,0o171,0o200,0o74,0o117,0o257,0o107,0o355,0o102,0o337,0o60,0o21,0o41,0o34,0o150,0o345,0o72,0o22,0o123,0o267,0o50,(0O334664274-0x37368B9),0o315,0o161,0o167,0o341,0o303,0o222,0o127,0o42,0o101,0o124,0o301,0o321,0o305,0o161,0o353,0o23,(1011010-0O3666474),(0x75bcd15-0O726746425),0o355,0o260,0o353,0o160,0o43,0o160,0o53,0o301,0o321,0o345,0o257,0o107,(0O334664274-0x37368B9),0o355,0o102,0o72,0o76,0o124,0o376,(15658734^0O73567354),0o40,(0x9D8DE4-0O47306735),0o72,0o303,0o126,0o267,0o304,0o40,0o155,0o24,0o25,0o40,0o31,0o176,0o346,0o200,0o21,0o75,0o150,0o314,0o136,0o144,0o176,0o346,0o100,0o21,(0O507646144^0x51F4C61),0o150,0o304,0o136,0o144,0o341,0o176,0o43,0o146,0o157,0o321,0o311,0o176,0o267,0o362,0o22,0o155,0o172,0o343,0o301,0o321,0o325,0o345,0o365,0o176,0o43,0o146,0o157,0o337,0o321,0o50,0o34,0o12,0o346,0o137,0o105,0o137,0o105,0o377,0o105,0o137,0o105,0o137,0o105,0o137,0o105,0o137,0o105,0o137,0o105,0o137,0o105,0o221,0o65,0o322,0o104,0o241,0o102,0o171,0o104,0o124,(0x75bcd15-0O726746425),0o172,0o104,0o275,0o104,0o105,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o103,0o365,0o376,(0x5E30A78-0O570605164),0o117,(0x75bcd15-0O726746425),0o103,0o211,0o107,0o147,0o162,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o157,0o111,0o46,0o115,(0x75bcd15-0O726746425),0o114,(0x75bcd15-0O726746425),0o103,0o66,0o115,0o314,0o114,0o231,0o114,0o277,0o144,0o101,0o114,(0O57060516-0xbc614d),0o123,0o53,0o123,0o170,0o35,0o346,0o113,0o55,0o123,0o36,0o35,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o172,0o104,0o275,0o104,0o105,(0O57060516-0xbc614d),(0x75bcd15-0O726746425),0o103,0o365,0o376,(0x5E30A78-0O570605164),0o117,(0x75bcd15-0O726746425),0o103,0o211,0o107,0o147,0o162,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o157,0o111,0o46,0o115,(0x75bcd15-0O726746425),0o114,0o112,0o155,0o53,0o140,0o350,0o136,0o102,(0x75bcd15-0O726746425),0o50,0o140,0o112,0o155,0o16,0o137,0o54,(0x75bcd15-0O726746425),0o107,0o155,0o217,0o33,0o106,0o124,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o30,0o142,0o377,0o377,(1011010-0O3666474),0o124,0o122,0o123,0o110,0o104,0o170,0o41,0o110,0o104,0o42,0o76,0o74,0o76,0o20,0o323,0o301,(1011010-0O3666474),0o100,0o315,0o140,(0x75bcd15-0O726746425),0o41,0o200,0o200,0o42,0o76,0o74,0o76,0o14,0o323,0o301,0o343,0o343,0o333,0o317,0o376,0o120,0o40,0o337,0o257,0o323,0o316,0o76,0o20,0o323,0o317,(1011010-0O3666474),0o62,0o315,0o140,(0x75bcd15-0O726746425),0o333,0o317,0o313,0o177,0o40,0o372,0o313,0o107,0o40,0o311,0o311,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o124,0o122,0o123,0o110,0o104,0o170,0o50,0o103,0o51,0o40,0o103,0o157,0o160,0o171,0o162,0o151,0o147,0o150,0o164,0o40,0o61,0o71,0o70,0o62,0o40,0o142,0o171,0o40,0o114,0o123,0o111,0o76,(0x9D8DE4-0O47306735),0o270,0o50,0o104,0o313,0o130,0o40,(15658734^0O73567354),0o257,0o311,0o313,0o120,0o345,0o40,0o60,0o313,0o110,0o50,(0O334664274-0x37368B9),0o41,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o325,0o315,0o222,0o377,0o76,0o40,0o323,0o317,0o343,0o343,0o333,0o317,(0x9D8DE4-0O47306735),0o70,0o373,(0O57060516-0xbc614d),0o310,(0x75bcd15-0O726746425),0o355,0o262,0o333,0o317,0o17,0o41,0o201,0o377,0o70,0o106,0o321,0o325,0o172,0o375,0o276,0o11,0o76,(1011010-0O3666474),0o50,0o103,0o257,0o30,0o100,0o315,0o35,0o377,0o50,0o33,0o341,0o76,0o17,0o311,0o375,0o176,(0O334664274-0x37368B9),0o346,(0O334664274-0x37368B9),0o117,0o333,0o300,0o334,(0x9D8DE4-0O47306735),0o15,0o40,0o374,0o375,0o266,(0O334664274-0x37368B9),0o313,0o177,0o76,0o100,0o300,0o257,0o311,0o325,0o170,0o376,0o17,0o50,0o36,0o376,0o14,0o76,(0O347010110&0x463A71D),0o50,0o24,0o315,0o222,0o377,0o76,0o60,0o315,0o332,0o377,0o50,0o12,0o41,0o211,0o377,0o333,0o311,(0x9D8DE4-0O47306735),0o43,0o60,0o374,0o176,0o267,0o321,0o341,0o311,0o375,0o176,(0x9D8DE4-0O47306735),0o107,0o346,0o37,0o137,0o250,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o74,0o107,0o305,0o325,0o315,0o222,0o377,0o345,0o176,0o323,0o312,0o43,0o76,0o120,0o315,0o332,0o377,0o341,0o321,0o301,0o40,0o321,0o76,0o40,0o203,0o137,0o20,0o346,0o257,0o30,0o322,(0x9D8DE4-0O47306735),(0x5E30A78-0O570605164),(0O57060516-0xbc614d),(0O507646144^0x51F4C61),0o177,(0O347010110&0x463A71D),(15658734^0O73567354),(0O334664274-0x37368B9),0o16,0o14,0o11,0o15,0o177,(0O347010110&0x463A71D),0o12,0o13,0o345,0o152,0o46,(0x75bcd15-0O726746425),0o375,0o313,(0x5E30A78-0O570605164),0o156,0o50,(0O57060516-0xbc614d),0o51,0o375,0o176,(0x9D8DE4-0O47306735),0o325,0o127,0o346,0o37,0o137,0o34,0o113,0o252,(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o74,0o315,0o153,0o113,0o75,0o321,0o273,0o60,(0x5E30A78-0O570605164),0o57,0o203,0o137,0o43,0o171,0o315,0o172,0o113,0o127,0o375,0o176,(0x5E30A78-0O570605164),0o346,0o17,0o202,0o127,0o375,0o176,(0O334664274-0x37368B9),0o346,(0O334664274-0x37368B9),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),(0x9D8DE4-0O47306735),0o262,0o323,0o316,0o173,0o323,0o313,0o175,0o323,0o314,0o174,0o323,0o315,0o341,0o311,0o323,0o317,(0O57060516-0xbc614d),0o310,(0x75bcd15-0O726746425),0o355,0o263,0o343,0o343,0o333,0o317,(0x9D8DE4-0O47306735),0o70,0o373,0o333,0o317,0o346,(0O57060516-0xbc614d),0o311,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),0o235]};},{}],113:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TapeDataBlockPlayer_1=require("../TapeDataBlockPlayer");var PlayPhase_1=require("../PlayPhase");var PlayableDataBlockBase_1=require("../PlayableDataBlockBase");var TapDataBlock=(function(_super){__extends(TapDataBlock,_super);function TapDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.data=new Uint8Array((0x75bcd15-0O726746425));_this.pauseAfter=0o1750;return _this;}TapDataBlock.prototype.readFrom=function(reader){var length=reader.ReadUInt16();this.data=reader.ReadBytes(length);};TapDataBlock.prototype.writeTo=function(writer){writer.WriteUInt16(this.data.length);writer.WriteBytes(this.data);};Object.defineProperty(TapDataBlock.prototype,"byteIndex",{get:function(){return this._player?this._player.byteIndex:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(TapDataBlock.prototype,"bitMask",{get:function(){return this._player?this._player.bitMask:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});TapDataBlock.prototype.supportsPlayback=function(){return false;};Object.defineProperty(TapDataBlock.prototype,"playPhase",{get:function(){return this._player?this._player.playPhase:PlayPhase_1.PlayPhase.None;},enumerable:true,configurable:true});Object.defineProperty(TapDataBlock.prototype,"startTact",{get:function(){return this._player?this._player.startTact:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(TapDataBlock.prototype,"lastTact",{get:function(){return this._player?this._player.lastTact:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});TapDataBlock.prototype.initPlay=function(startTact){this._player=new TapeDataBlockPlayer_1.TapeDataBlockPlayer(this.data,this.pauseAfter);this._player.initPlay(startTact);};TapDataBlock.prototype.getEarBit=function(currentTact){return this._player?this._player.getEarBit(currentTact):false;};return TapDataBlock;}(PlayableDataBlockBase_1.PlayableDataBlockBase));exports.TapDataBlock=TapDataBlock;},{"../PlayPhase":102,"../PlayableDataBlockBase":103,"../TapeDataBlockPlayer":106}],114:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var TapDataBlock_1=require("./TapDataBlock");var TapReader=(function(){function TapReader(reader){this.majorVersion=(0x75bcd15-0O726746425);this.minorVersion=(0x75bcd15-0O726746425);this._reader=reader;this.dataBlocks=[];}TapReader.prototype.readContent=function(){try{while(this._reader.Position!==this._reader.Length){var tapBlock=new TapDataBlock_1.TapDataBlock();tapBlock.readFrom(this._reader);this.dataBlocks.push(tapBlock);}return true;}catch(_a){return false;}};return TapReader;}());exports.TapReader=TapReader;},{"./TapDataBlock":113}],115:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var Tzx3ByteDataBlockBase=(function(_super){__extends(Tzx3ByteDataBlockBase,_super);function Tzx3ByteDataBlockBase(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.lastByteUsedBits=(0x75bcd15-0O726746425);_this.dataLength=new Uint8Array((0O334664274-0x37368B9));return _this;}Tzx3ByteDataBlockBase.prototype.isValid=function(){return this.getLength()===this.data.length;};Tzx3ByteDataBlockBase.prototype.getLength=function(){return this.dataLength[(0x75bcd15-0O726746425)]+this.dataLength[(0O57060516-0xbc614d)]<<(0O347010110&0x463A71D)+this.dataLength[(15658734^0O73567354)]<<0o20;};return Tzx3ByteDataBlockBase;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.Tzx3ByteDataBlockBase=Tzx3ByteDataBlockBase;},{"./TzxDataBlockBase":123}],116:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();var __values=(this&&this.__values)||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=(0x75bcd15-0O726746425);if(m)return m.call(o);return {next:function(){if(o&&i>=o.length)o=void (0x75bcd15-0O726746425);return {value:o&&o[i++],done:!o};}};};Object.defineProperty(exports,"__esModule",{value:true});var Tzx3ByteDataBlockBase_1=require("./Tzx3ByteDataBlockBase");var TzxText_1=require("./TzxText");var TzxArchiveInfoDataBlock=(function(_super){__extends(TzxArchiveInfoDataBlock,_super);function TzxArchiveInfoDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.length=(0x75bcd15-0O726746425);_this.stringCount=(0x75bcd15-0O726746425);_this.textStrings=[];return _this;}Object.defineProperty(TzxArchiveInfoDataBlock.prototype,"blockId",{get:function(){return 0o62;},enumerable:true,configurable:true});TzxArchiveInfoDataBlock.prototype.readFrom=function(reader){this.length=reader.ReadUInt16();this.stringCount=reader.ReadByte();this.textStrings=[];for(var i=(0x75bcd15-0O726746425);i<this.stringCount;i++){var text=new TzxText_1.TzxText();text.readFrom(reader);this.textStrings[i]=text;}};TzxArchiveInfoDataBlock.prototype.writeTo=function(writer){var e_1,_a;writer.WriteByte(this.length);writer.WriteByte(this.stringCount);try{for(var _b=__values(this.textStrings),_c=_b.next();!_c.done;_c=_b.next()){var text=_c.value;text.writeTo(writer);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_1)throw e_1.error;}}};return TzxArchiveInfoDataBlock;}(Tzx3ByteDataBlockBase_1.Tzx3ByteDataBlockBase));exports.TzxArchiveInfoDataBlock=TzxArchiveInfoDataBlock;},{"./Tzx3ByteDataBlockBase":115,"./TzxText":151}],117:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxBodylessDataBlockBase=(function(_super){__extends(TzxBodylessDataBlockBase,_super);function TzxBodylessDataBlockBase(){return _super!==null&&_super.apply(this,arguments)||this;}TzxBodylessDataBlockBase.prototype.readFrom=function(reader){};TzxBodylessDataBlockBase.prototype.writeTo=function(writer){};return TzxBodylessDataBlockBase;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxBodylessDataBlockBase=TzxBodylessDataBlockBase;},{"./TzxDataBlockBase":123}],118:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDeprecatedDataBlockBase_1=require("./TzxDeprecatedDataBlockBase");var TzxC64RomTypeDataBlock=(function(_super){__extends(TzxC64RomTypeDataBlock,_super);function TzxC64RomTypeDataBlock(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(TzxC64RomTypeDataBlock.prototype,"blockId",{get:function(){return 0o26;},enumerable:true,configurable:true});TzxC64RomTypeDataBlock.prototype.readThrough=function(reader){var length=reader.ReadInt32();reader.ReadBytes(length-(0x5E30A78-0O570605164));};return TzxC64RomTypeDataBlock;}(TzxDeprecatedDataBlockBase_1.TzxDeprecatedDataBlockBase));exports.TzxC64RomTypeDataBlock=TzxC64RomTypeDataBlock;},{"./TzxDeprecatedDataBlockBase":124}],119:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDeprecatedDataBlockBase_1=require("./TzxDeprecatedDataBlockBase");var TzxC64TurboTapeDataBlock=(function(_super){__extends(TzxC64TurboTapeDataBlock,_super);function TzxC64TurboTapeDataBlock(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(TzxC64TurboTapeDataBlock.prototype,"blockId",{get:function(){return 0o27;},enumerable:true,configurable:true});TzxC64TurboTapeDataBlock.prototype.readThrough=function(reader){var length=reader.ReadInt32();reader.ReadBytes(length-(0x5E30A78-0O570605164));};return TzxC64TurboTapeDataBlock;}(TzxDeprecatedDataBlockBase_1.TzxDeprecatedDataBlockBase));exports.TzxC64TurboTapeDataBlock=TzxC64TurboTapeDataBlock;},{"./TzxDeprecatedDataBlockBase":124}],120:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxCallSequenceDataBlock=(function(_super){__extends(TzxCallSequenceDataBlock,_super);function TzxCallSequenceDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.numberOfCalls=(0x75bcd15-0O726746425);_this.blockOffsets=new Uint16Array((0x75bcd15-0O726746425));return _this;}Object.defineProperty(TzxCallSequenceDataBlock.prototype,"blockId",{get:function(){return 0o46;},enumerable:true,configurable:true});TzxCallSequenceDataBlock.prototype.readFrom=function(reader){this.numberOfCalls=reader.ReadByte();this.blockOffsets=TzxDataBlockBase_1.TzxDataBlockBase.readWords(reader,this.numberOfCalls);};TzxCallSequenceDataBlock.prototype.writeTo=function(writer){writer.WriteByte(this.numberOfCalls);TzxDataBlockBase_1.TzxDataBlockBase.writeWords(writer,this.blockOffsets);};return TzxCallSequenceDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxCallSequenceDataBlock=TzxCallSequenceDataBlock;},{"./TzxDataBlockBase":123}],121:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxCswRecordingDataBlock=(function(_super){__extends(TzxCswRecordingDataBlock,_super);function TzxCswRecordingDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.blockLength=(0x75bcd15-0O726746425);_this.pauseAfter=(0x75bcd15-0O726746425);_this.samplingRate=new Uint8Array((0x75bcd15-0O726746425));_this.compressionType=(0x75bcd15-0O726746425);_this.pulseCount=(0x75bcd15-0O726746425);return _this;}Object.defineProperty(TzxCswRecordingDataBlock.prototype,"blockId",{get:function(){return 0o30;},enumerable:true,configurable:true});TzxCswRecordingDataBlock.prototype.readFrom=function(reader){this.blockLength=reader.ReadUInt32();this.pauseAfter=reader.ReadUInt16();this.samplingRate=reader.ReadBytes((0O334664274-0x37368B9));this.compressionType=reader.ReadByte();this.pulseCount=reader.ReadUInt32();var length=this.blockLength-(0x5E30A78-0O570605164)-(0O334664274-0x37368B9)-(0O57060516-0xbc614d)-(0x5E30A78-0O570605164);this.data=reader.ReadBytes(length);};TzxCswRecordingDataBlock.prototype.writeTo=function(writer){writer.WriteUInt32(this.blockLength);writer.WriteUInt16(this.pauseAfter);writer.WriteBytes(this.samplingRate);writer.WriteByte(this.compressionType);writer.WriteUInt16(this.pulseCount);writer.WriteBytes(this.data);};TzxCswRecordingDataBlock.prototype.isValid=function(){return this.blockLength===(0x5E30A78-0O570605164)+(0O334664274-0x37368B9)+(0O57060516-0xbc614d)+(0x5E30A78-0O570605164)+this.data.length;};return TzxCswRecordingDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxCswRecordingDataBlock=TzxCswRecordingDataBlock;},{"./TzxDataBlockBase":123}],122:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var Tzx3ByteDataBlockBase_1=require("./Tzx3ByteDataBlockBase");var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxCustomInfoDataBlock=(function(_super){__extends(TzxCustomInfoDataBlock,_super);function TzxCustomInfoDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.id=new Uint8Array((0x75bcd15-0O726746425));_this.length=(0x75bcd15-0O726746425);_this.customInfo=new Uint8Array((0x75bcd15-0O726746425));return _this;}Object.defineProperty(TzxCustomInfoDataBlock.prototype,"IdText",{get:function(){return TzxDataBlockBase_1.TzxDataBlockBase.toAsciiString(this.id);},enumerable:true,configurable:true});Object.defineProperty(TzxCustomInfoDataBlock.prototype,"blockId",{get:function(){return 0o65;},enumerable:true,configurable:true});TzxCustomInfoDataBlock.prototype.readFrom=function(reader){this.id=reader.ReadBytes(0o12);this.length=reader.ReadUInt32();this.customInfo=reader.ReadBytes(this.length);};TzxCustomInfoDataBlock.prototype.writeTo=function(writer){writer.WriteBytes(this.id);writer.WriteUInt32(this.length);writer.WriteBytes(this.customInfo);};return TzxCustomInfoDataBlock;}(Tzx3ByteDataBlockBase_1.Tzx3ByteDataBlockBase));exports.TzxCustomInfoDataBlock=TzxCustomInfoDataBlock;},{"./Tzx3ByteDataBlockBase":115,"./TzxDataBlockBase":123}],123:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();var __values=(this&&this.__values)||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=(0x75bcd15-0O726746425);if(m)return m.call(o);return {next:function(){if(o&&i>=o.length)o=void (0x75bcd15-0O726746425);return {value:o&&o[i++],done:!o};}};};Object.defineProperty(exports,"__esModule",{value:true});var PlayPhase_1=require("../PlayPhase");var PlayableDataBlockBase_1=require("../PlayableDataBlockBase");var TzxDataBlockBase=(function(_super){__extends(TzxDataBlockBase,_super);function TzxDataBlockBase(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.data=new Uint8Array((0x75bcd15-0O726746425));return _this;}TzxDataBlockBase.prototype.supportsPlayback=function(){return false;};Object.defineProperty(TzxDataBlockBase.prototype,"playPhase",{get:function(){return PlayPhase_1.PlayPhase.None;},enumerable:true,configurable:true});Object.defineProperty(TzxDataBlockBase.prototype,"startTact",{get:function(){return (0x75bcd15-0O726746425);},enumerable:true,configurable:true});TzxDataBlockBase.prototype.initPlay=function(startTact){};TzxDataBlockBase.prototype.getEarBit=function(currentTact){return false;};TzxDataBlockBase.prototype.isValid=function(){return true;};TzxDataBlockBase.prototype.isDeprecated=function(){return false;};TzxDataBlockBase.readWords=function(reader,count){var result=new Uint16Array(count);var bytes=reader.ReadBytes((15658734^0O73567354)*count);for(var i=(0x75bcd15-0O726746425);i<count;i++){result[i]=(bytes[i*(15658734^0O73567354)]+bytes[i*(15658734^0O73567354)+(0O57060516-0xbc614d)]<<(0O347010110&0x463A71D));}return result;};TzxDataBlockBase.writeWords=function(writer,words){var e_1,_a;try{for(var words_1=__values(words),words_1_1=words_1.next();!words_1_1.done;words_1_1=words_1.next()){var word=words_1_1.value;writer.WriteUInt16(word);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(words_1_1&&!words_1_1.done&&(_a=words_1.return))_a.call(words_1);}finally{if(e_1)throw e_1.error;}}};TzxDataBlockBase.toAsciiString=function(bytes,offset,count){if(offset===void (0x75bcd15-0O726746425)){offset=(0x75bcd15-0O726746425);}if(count===void (0x75bcd15-0O726746425)){count=-(0O57060516-0xbc614d);}if(count<(0x75bcd15-0O726746425)){count=bytes.length-offset;}var sb="";for(var i=offset;i<count;i++){sb+=String.fromCharCode(bytes[i]);}return sb;};return TzxDataBlockBase;}(PlayableDataBlockBase_1.PlayableDataBlockBase));exports.TzxDataBlockBase=TzxDataBlockBase;},{"../PlayPhase":102,"../PlayableDataBlockBase":103}],124:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxDeprecatedDataBlockBase=(function(_super){__extends(TzxDeprecatedDataBlockBase,_super);function TzxDeprecatedDataBlockBase(){return _super!==null&&_super.apply(this,arguments)||this;}TzxDeprecatedDataBlockBase.prototype.isDeprecated=function(){return true;};TzxDeprecatedDataBlockBase.prototype.readFrom=function(reader){};TzxDeprecatedDataBlockBase.prototype.writeTo=function(writer){throw new Error("Deprecated TZX data blocks cannot be written.");};return TzxDeprecatedDataBlockBase;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxDeprecatedDataBlockBase=TzxDeprecatedDataBlockBase;},{"./TzxDataBlockBase":123}],125:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var Tzx3ByteDataBlockBase_1=require("./Tzx3ByteDataBlockBase");var TzxDirectRecordingDataBlock=(function(_super){__extends(TzxDirectRecordingDataBlock,_super);function TzxDirectRecordingDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.tactsPerSample=(0x75bcd15-0O726746425);_this.pauseAfter=(0x75bcd15-0O726746425);return _this;}Object.defineProperty(TzxDirectRecordingDataBlock.prototype,"blockId",{get:function(){return 0o25;},enumerable:true,configurable:true});TzxDirectRecordingDataBlock.prototype.readFrom=function(reader){this.tactsPerSample=reader.ReadUInt16();this.pauseAfter=reader.ReadUInt16();this.lastByteUsedBits=reader.ReadByte();this.dataLength=reader.ReadBytes((0O334664274-0x37368B9));this.data=reader.ReadBytes(this.getLength());};TzxDirectRecordingDataBlock.prototype.writeTo=function(writer){writer.WriteUInt16(this.tactsPerSample);writer.WriteUInt16(this.pauseAfter);writer.WriteByte(this.lastByteUsedBits);writer.WriteBytes(this.dataLength);writer.WriteBytes(this.data);};return TzxDirectRecordingDataBlock;}(Tzx3ByteDataBlockBase_1.Tzx3ByteDataBlockBase));exports.TzxDirectRecordingDataBlock=TzxDirectRecordingDataBlock;},{"./Tzx3ByteDataBlockBase":115}],126:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDeprecatedDataBlockBase_1=require("./TzxDeprecatedDataBlockBase");var TzxEmulationInfoDataBlock=(function(_super){__extends(TzxEmulationInfoDataBlock,_super);function TzxEmulationInfoDataBlock(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(TzxEmulationInfoDataBlock.prototype,"blockId",{get:function(){return 0o64;},enumerable:true,configurable:true});TzxEmulationInfoDataBlock.prototype.readThrough=function(reader){reader.ReadBytes((0O347010110&0x463A71D));};return TzxEmulationInfoDataBlock;}(TzxDeprecatedDataBlockBase_1.TzxDeprecatedDataBlockBase));exports.TzxEmulationInfoDataBlock=TzxEmulationInfoDataBlock;},{"./TzxDeprecatedDataBlockBase":124}],127:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxSymDef_1=require("./TzxSymDef");var TzxGeneralizedDataBlock=(function(_super){__extends(TzxGeneralizedDataBlock,_super);function TzxGeneralizedDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.blockLength=(0x75bcd15-0O726746425);_this.pauseAfter=(0x75bcd15-0O726746425);_this.totp=(0x75bcd15-0O726746425);_this.npp=(0x75bcd15-0O726746425);_this.asp=(0x75bcd15-0O726746425);_this.totd=(0x75bcd15-0O726746425);_this.npd=(0x75bcd15-0O726746425);_this.asd=(0x75bcd15-0O726746425);_this.pilotSymDef=[];_this.pilotStream=[];_this.dataSymDef=[];_this.dataStream=[];return _this;}Object.defineProperty(TzxGeneralizedDataBlock.prototype,"blockId",{get:function(){return 0o31;},enumerable:true,configurable:true});TzxGeneralizedDataBlock.prototype.readFrom=function(reader){this.blockLength=reader.ReadUInt32();this.pauseAfter=reader.ReadUInt16();this.totp=reader.ReadUInt32();this.npp=reader.ReadByte();this.asp=reader.ReadByte();this.totd=reader.ReadUInt32();this.npd=reader.ReadByte();this.asd=reader.ReadByte();this.pilotSymDef=[];for(var i=(0x75bcd15-0O726746425);i<this.asp;i++){var symDef=new TzxSymDef_1.TzxSymDef(this.npp);symDef.readFrom(reader);this.pilotSymDef[i]=symDef;}this.pilotStream=[];for(var i=(0x75bcd15-0O726746425);i<this.totp;i++){this.pilotStream[i].symbol=reader.ReadByte();this.pilotStream[i].repetitions=reader.ReadUInt16();}this.dataSymDef=[];for(var i=(0x75bcd15-0O726746425);i<this.asd;i++){var symDef=new TzxSymDef_1.TzxSymDef(this.npd);symDef.readFrom(reader);this.dataSymDef[i]=symDef;}this.dataStream=[];for(var i=(0x75bcd15-0O726746425);i<this.totd;i++){this.dataStream[i].symbol=reader.ReadByte();this.dataStream[i].repetitions=reader.ReadUInt16();}};TzxGeneralizedDataBlock.prototype.writeTo=function(writer){writer.WriteUInt32(this.blockLength);writer.WriteUInt16(this.pauseAfter);writer.WriteUInt32(this.totp);writer.WriteByte(this.npp);writer.WriteByte(this.asp);writer.WriteUInt32(this.totd);writer.WriteByte(this.npd);writer.WriteByte(this.asd);for(var i=(0x75bcd15-0O726746425);i<this.asp;i++){this.pilotSymDef[i].writeTo(writer);}for(var i=(0x75bcd15-0O726746425);i<this.totp;i++){writer.WriteByte(this.pilotStream[i].symbol);writer.WriteUInt16(this.pilotStream[i].repetitions);}for(var i=(0x75bcd15-0O726746425);i<this.asd;i++){this.dataSymDef[i].writeTo(writer);}for(var i=(0x75bcd15-0O726746425);i<this.totd;i++){writer.WriteByte(this.dataStream[i].symbol);writer.WriteUInt16(this.dataStream[i].repetitions);}};return TzxGeneralizedDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxGeneralizedDataBlock=TzxGeneralizedDataBlock;},{"./TzxDataBlockBase":123,"./TzxSymDef":150}],128:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxGlueDataBlock=(function(_super){__extends(TzxGlueDataBlock,_super);function TzxGlueDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.glue=new Uint8Array((0x75bcd15-0O726746425));return _this;}Object.defineProperty(TzxGlueDataBlock.prototype,"blockId",{get:function(){return 0o132;},enumerable:true,configurable:true});TzxGlueDataBlock.prototype.readFrom=function(reader){this.glue=reader.ReadBytes(0o11);};TzxGlueDataBlock.prototype.writeTo=function(writer){writer.WriteBytes(this.glue);};return TzxGlueDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxGlueDataBlock=TzxGlueDataBlock;},{"./TzxDataBlockBase":123}],129:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxBodylessDataBlockBase_1=require("./TzxBodylessDataBlockBase");var TzxGroupEndDataBlock=(function(_super){__extends(TzxGroupEndDataBlock,_super);function TzxGroupEndDataBlock(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(TzxGroupEndDataBlock.prototype,"blockId",{get:function(){return 0o42;},enumerable:true,configurable:true});return TzxGroupEndDataBlock;}(TzxBodylessDataBlockBase_1.TzxBodylessDataBlockBase));exports.TzxGroupEndDataBlock=TzxGroupEndDataBlock;},{"./TzxBodylessDataBlockBase":117}],130:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxGroupStartDataBlock=(function(_super){__extends(TzxGroupStartDataBlock,_super);function TzxGroupStartDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.length=(0x75bcd15-0O726746425);_this.chars=new Uint8Array((0x75bcd15-0O726746425));return _this;}Object.defineProperty(TzxGroupStartDataBlock.prototype,"groupName",{get:function(){return TzxDataBlockBase_1.TzxDataBlockBase.toAsciiString(this.chars);},enumerable:true,configurable:true});Object.defineProperty(TzxGroupStartDataBlock.prototype,"blockId",{get:function(){return 0o41;},enumerable:true,configurable:true});TzxGroupStartDataBlock.prototype.readFrom=function(reader){this.length=reader.ReadByte();this.chars=reader.ReadBytes(this.length);};TzxGroupStartDataBlock.prototype.writeTo=function(writer){writer.WriteByte(this.length);writer.WriteBytes(this.chars);};return TzxGroupStartDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxGroupStartDataBlock=TzxGroupStartDataBlock;},{"./TzxDataBlockBase":123}],131:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();var __values=(this&&this.__values)||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=(0x75bcd15-0O726746425);if(m)return m.call(o);return {next:function(){if(o&&i>=o.length)o=void (0x75bcd15-0O726746425);return {value:o&&o[i++],done:!o};}};};Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxHwInfo_1=require("./TzxHwInfo");var TzxHardwareInfoDataBlock=(function(_super){__extends(TzxHardwareInfoDataBlock,_super);function TzxHardwareInfoDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.hwCount=(0x75bcd15-0O726746425);_this.hwInfo=[];return _this;}Object.defineProperty(TzxHardwareInfoDataBlock.prototype,"blockId",{get:function(){return 0o63;},enumerable:true,configurable:true});TzxHardwareInfoDataBlock.prototype.readFrom=function(reader){this.hwCount=reader.ReadByte();this.hwInfo=[];for(var i=(0x75bcd15-0O726746425);i<this.hwCount;i++){var hw=new TzxHwInfo_1.TzxHwInfo();hw.readFrom(reader);this.hwInfo[i]=hw;}};TzxHardwareInfoDataBlock.prototype.writeTo=function(writer){var e_1,_a;writer.WriteByte(this.hwCount);try{for(var _b=__values(this.hwInfo),_c=_b.next();!_c.done;_c=_b.next()){var hw=_c.value;hw.writeTo(writer);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_1)throw e_1.error;}}};return TzxHardwareInfoDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxHardwareInfoDataBlock=TzxHardwareInfoDataBlock;},{"./TzxDataBlockBase":123,"./TzxHwInfo":133}],132:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxSignature=new Uint8Array([0o132,0o130,0o124,0o141,0o160,0o145,0o41]);var TzxHeader=(function(_super){__extends(TzxHeader,_super);function TzxHeader(majorVersion,minorVersion){if(majorVersion===void (0x75bcd15-0O726746425)){majorVersion=(0O57060516-0xbc614d);}if(minorVersion===void (0x75bcd15-0O726746425)){minorVersion=0o24;}var _this=_super.call(this)||this;_this.signature=new Uint8Array(TzxSignature);_this.eot=0o32;_this.majorVersion=majorVersion;_this.minorVersion=minorVersion;return _this;}Object.defineProperty(TzxHeader.prototype,"blockId",{get:function(){return (0x75bcd15-0O726746425);},enumerable:true,configurable:true});TzxHeader.prototype.readFrom=function(reader){this.signature=reader.ReadBytes((0x9D8DE4-0O47306735));this.eot=reader.ReadByte();this.majorVersion=reader.ReadByte();this.minorVersion=reader.ReadByte();};TzxHeader.prototype.writeTo=function(writer){writer.WriteBytes(this.signature);writer.WriteByte(this.eot);writer.WriteByte(this.majorVersion);writer.WriteByte(this.minorVersion);};TzxHeader.prototype.isValid=function(){return this._equals(this.signature,TzxSignature)&&this.eot===0o32&&this.majorVersion===(0O57060516-0xbc614d);};TzxHeader.prototype._equals=function(buf1,buf2){if(buf1.byteLength!==buf2.byteLength){return false;}var dv1=new Int8Array(buf1);var dv2=new Int8Array(buf2);for(var i=(0x75bcd15-0O726746425);i!==buf1.byteLength;i++){if(dv1[i]!==dv2[i]){return false;}}return true;};return TzxHeader;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxHeader=TzxHeader;},{"./TzxDataBlockBase":123}],133:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var TzxHwInfo=(function(){function TzxHwInfo(){this.hwType=(0x75bcd15-0O726746425);this.hwId=(0x75bcd15-0O726746425);this.tapeInfo=(0x75bcd15-0O726746425);}TzxHwInfo.prototype.readFrom=function(reader){this.hwType=reader.ReadByte();this.hwId=reader.ReadByte();this.tapeInfo=reader.ReadByte();};TzxHwInfo.prototype.writeTo=function(writer){writer.WriteByte(this.hwType);writer.WriteByte(this.hwId);writer.WriteByte(this.tapeInfo);};return TzxHwInfo;}());exports.TzxHwInfo=TzxHwInfo;},{}],134:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxJumpDataBlock=(function(_super){__extends(TzxJumpDataBlock,_super);function TzxJumpDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.jump=(0x75bcd15-0O726746425);return _this;}Object.defineProperty(TzxJumpDataBlock.prototype,"blockId",{get:function(){return 0o43;},enumerable:true,configurable:true});TzxJumpDataBlock.prototype.readFrom=function(reader){this.jump=reader.ReadInt16();};TzxJumpDataBlock.prototype.writeTo=function(writer){writer.WriteInt16(this.jump);};return TzxJumpDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxJumpDataBlock=TzxJumpDataBlock;},{"./TzxDataBlockBase":123}],135:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxBodylessDataBlockBase_1=require("./TzxBodylessDataBlockBase");var TzxLoopEndDataBlock=(function(_super){__extends(TzxLoopEndDataBlock,_super);function TzxLoopEndDataBlock(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(TzxLoopEndDataBlock.prototype,"blockId",{get:function(){return 0o45;},enumerable:true,configurable:true});return TzxLoopEndDataBlock;}(TzxBodylessDataBlockBase_1.TzxBodylessDataBlockBase));exports.TzxLoopEndDataBlock=TzxLoopEndDataBlock;},{"./TzxBodylessDataBlockBase":117}],136:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxLoopStartDataBlock=(function(_super){__extends(TzxLoopStartDataBlock,_super);function TzxLoopStartDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.loops=(0x75bcd15-0O726746425);return _this;}Object.defineProperty(TzxLoopStartDataBlock.prototype,"blockId",{get:function(){return 0o44;},enumerable:true,configurable:true});TzxLoopStartDataBlock.prototype.readFrom=function(reader){this.loops=reader.ReadUInt16();};TzxLoopStartDataBlock.prototype.writeTo=function(writer){writer.WriteUInt16(this.loops);};return TzxLoopStartDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxLoopStartDataBlock=TzxLoopStartDataBlock;},{"./TzxDataBlockBase":123}],137:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxMessageDataBlock=(function(_super){__extends(TzxMessageDataBlock,_super);function TzxMessageDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.time=(0x75bcd15-0O726746425);_this.messageLength=(0x75bcd15-0O726746425);_this.message=new Uint8Array((0x75bcd15-0O726746425));return _this;}Object.defineProperty(TzxMessageDataBlock.prototype,"messageText",{get:function(){return TzxDataBlockBase_1.TzxDataBlockBase.toAsciiString(this.message);},enumerable:true,configurable:true});Object.defineProperty(TzxMessageDataBlock.prototype,"blockId",{get:function(){return 0o61;},enumerable:true,configurable:true});TzxMessageDataBlock.prototype.readFrom=function(reader){this.time=reader.ReadByte();this.messageLength=reader.ReadByte();this.message=reader.ReadBytes(this.messageLength);};TzxMessageDataBlock.prototype.writeTo=function(writer){writer.WriteByte(this.time);writer.WriteByte(this.messageLength);writer.WriteBytes(this.message);};return TzxMessageDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxMessageDataBlock=TzxMessageDataBlock;},{"./TzxDataBlockBase":123}],138:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxPulseSequenceDataBlock=(function(_super){__extends(TzxPulseSequenceDataBlock,_super);function TzxPulseSequenceDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.pulseCount=(0x75bcd15-0O726746425);_this.pulseLengths=new Uint16Array((0x75bcd15-0O726746425));return _this;}Object.defineProperty(TzxPulseSequenceDataBlock.prototype,"blockId",{get:function(){return 0o23;},enumerable:true,configurable:true});TzxPulseSequenceDataBlock.prototype.readFrom=function(reader){this.pulseCount=reader.ReadByte();this.pulseLengths=TzxDataBlockBase_1.TzxDataBlockBase.readWords(reader,this.pulseCount);};TzxPulseSequenceDataBlock.prototype.writeTo=function(writer){writer.WriteByte(this.pulseCount);TzxDataBlockBase_1.TzxDataBlockBase.writeWords(writer,this.pulseLengths);};TzxPulseSequenceDataBlock.prototype.isValid=function(){return this.pulseCount===this.pulseLengths.length;};return TzxPulseSequenceDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxPulseSequenceDataBlock=TzxPulseSequenceDataBlock;},{"./TzxDataBlockBase":123}],139:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var Tzx3ByteDataBlockBase_1=require("./Tzx3ByteDataBlockBase");var TzxPureDataBlock=(function(_super){__extends(TzxPureDataBlock,_super);function TzxPureDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.zeroBitPulseLength=(0x75bcd15-0O726746425);_this.oneBitPulseLength=(0x75bcd15-0O726746425);_this.pauseAfter=(0x75bcd15-0O726746425);return _this;}Object.defineProperty(TzxPureDataBlock.prototype,"blockId",{get:function(){return 0o24;},enumerable:true,configurable:true});TzxPureDataBlock.prototype.readFrom=function(reader){this.zeroBitPulseLength=reader.ReadUInt16();this.oneBitPulseLength=reader.ReadUInt16();this.lastByteUsedBits=reader.ReadByte();this.pauseAfter=reader.ReadUInt16();this.dataLength=reader.ReadBytes((0O334664274-0x37368B9));this.data=reader.ReadBytes(this.getLength());};TzxPureDataBlock.prototype.writeTo=function(writer){writer.WriteUInt16(this.zeroBitPulseLength);writer.WriteUInt16(this.oneBitPulseLength);writer.WriteByte(this.lastByteUsedBits);writer.WriteUInt16(this.pauseAfter);writer.WriteBytes(this.dataLength);writer.WriteBytes(this.data);};return TzxPureDataBlock;}(Tzx3ByteDataBlockBase_1.Tzx3ByteDataBlockBase));exports.TzxPureDataBlock=TzxPureDataBlock;},{"./Tzx3ByteDataBlockBase":115}],140:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxPureToneDataBlock=(function(_super){__extends(TzxPureToneDataBlock,_super);function TzxPureToneDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.pulseLength=(0x75bcd15-0O726746425);_this.pulseCount=(0x75bcd15-0O726746425);return _this;}Object.defineProperty(TzxPureToneDataBlock.prototype,"blockId",{get:function(){return 0o22;},enumerable:true,configurable:true});TzxPureToneDataBlock.prototype.readFrom=function(reader){this.pulseLength=reader.ReadUInt16();this.pulseCount=reader.ReadUInt16();};TzxPureToneDataBlock.prototype.writeTo=function(writer){writer.WriteUInt16(this.pulseLength);writer.WriteUInt16(this.pulseCount);};return TzxPureToneDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxPureToneDataBlock=TzxPureToneDataBlock;},{"./TzxDataBlockBase":123}],141:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var TzxCswRecordingDataBlock_1=require("./TzxCswRecordingDataBlock");var TzxC64TurboTapeDataBlock_1=require("./TzxC64TurboTapeDataBlock");var TzxC64RomTypeDataBlock_1=require("./TzxC64RomTypeDataBlock");var TzxDirectRecordingDataBlock_1=require("./TzxDirectRecordingDataBlock");var TzxGeneralizedDataBlock_1=require("./TzxGeneralizedDataBlock");var TzxGroupStartDataBlock_1=require("./TzxGroupStartDataBlock");var TzxGroupEndDataBlock_1=require("./TzxGroupEndDataBlock");var TzxJumpDataBlock_1=require("./TzxJumpDataBlock");var TzxLoopStartDataBlock_1=require("./TzxLoopStartDataBlock");var TzxLoopEndDataBlock_1=require("./TzxLoopEndDataBlock");var TzxCallSequenceDataBlock_1=require("./TzxCallSequenceDataBlock");var TzxMessageDataBlock_1=require("./TzxMessageDataBlock");var TzxArchiveInfoDataBlock_1=require("./TzxArchiveInfoDataBlock");var TzxHardwareInfoDataBlock_1=require("./TzxHardwareInfoDataBlock");var TzxEmulationInfoDataBlock_1=require("./TzxEmulationInfoDataBlock");var TzxCustomInfoDataBlock_1=require("./TzxCustomInfoDataBlock");var TzxGlueDataBlock_1=require("./TzxGlueDataBlock");var TzxHeader_1=require("./TzxHeader");var TzxStandardSpeedDataBlock_1=require("./TzxStandardSpeedDataBlock");var TzxTurboSpeedDataBlock_1=require("./TzxTurboSpeedDataBlock");var TzxPureToneDataBlock_1=require("./TzxPureToneDataBlock");var TzxPulseSequenceDataBlock_1=require("./TzxPulseSequenceDataBlock");var TzxPureDataBlock_1=require("./TzxPureDataBlock");var TzxSilenceDataBlock_1=require("./TzxSilenceDataBlock");var TzxReturnFromSequenceDataBlock_1=require("./TzxReturnFromSequenceDataBlock");var TzxSelectDataBlock_1=require("./TzxSelectDataBlock");var TzxStopTheTape48DataBlock_1=require("./TzxStopTheTape48DataBlock");var TzxSetSignalLevelDataBlock_1=require("./TzxSetSignalLevelDataBlock");var TzxTextDescriptionDataBlock_1=require("./TzxTextDescriptionDataBlock");var TzxSnapshotBlock_1=require("./TzxSnapshotBlock");var DataBlockTypes=new Map([[0o20,function(){return new TzxStandardSpeedDataBlock_1.TzxStandardSpeedDataBlock();}],[0o21,function(){return new TzxTurboSpeedDataBlock_1.TzxTurboSpeedDataBlock();}],[0o22,function(){return new TzxPureToneDataBlock_1.TzxPureToneDataBlock();}],[0o23,function(){return new TzxPulseSequenceDataBlock_1.TzxPulseSequenceDataBlock();}],[0o24,function(){return new TzxPureDataBlock_1.TzxPureDataBlock();}],[0o25,function(){return new TzxDirectRecordingDataBlock_1.TzxDirectRecordingDataBlock();}],[0o26,function(){return new TzxC64RomTypeDataBlock_1.TzxC64RomTypeDataBlock();}],[0o27,function(){return new TzxC64TurboTapeDataBlock_1.TzxC64TurboTapeDataBlock();}],[0o30,function(){return new TzxCswRecordingDataBlock_1.TzxCswRecordingDataBlock();}],[0o31,function(){return new TzxGeneralizedDataBlock_1.TzxGeneralizedDataBlock();}],[0o40,function(){return new TzxSilenceDataBlock_1.TzxSilenceDataBlock();}],[0o41,function(){return new TzxGroupStartDataBlock_1.TzxGroupStartDataBlock();}],[0o42,function(){return new TzxGroupEndDataBlock_1.TzxGroupEndDataBlock();}],[0o43,function(){return new TzxJumpDataBlock_1.TzxJumpDataBlock();}],[0o44,function(){return new TzxLoopStartDataBlock_1.TzxLoopStartDataBlock();}],[0o45,function(){return new TzxLoopEndDataBlock_1.TzxLoopEndDataBlock();}],[0o46,function(){return new TzxCallSequenceDataBlock_1.TzxCallSequenceDataBlock();}],[0o47,function(){return new TzxReturnFromSequenceDataBlock_1.TzxReturnFromSequenceDataBlock();}],[0o50,function(){return new TzxSelectDataBlock_1.TzxSelectDataBlock();}],[0o52,function(){return new TzxStopTheTape48DataBlock_1.TzxStopTheTape48DataBlock();}],[0o53,function(){return new TzxSetSignalLevelDataBlock_1.TzxSetSignalLevelDataBlock();}],[0o60,function(){return new TzxTextDescriptionDataBlock_1.TzxTextDescriptionDataBlock();}],[0o61,function(){return new TzxMessageDataBlock_1.TzxMessageDataBlock();}],[0o62,function(){return new TzxArchiveInfoDataBlock_1.TzxArchiveInfoDataBlock();}],[0o63,function(){return new TzxHardwareInfoDataBlock_1.TzxHardwareInfoDataBlock();}],[0o64,function(){return new TzxEmulationInfoDataBlock_1.TzxEmulationInfoDataBlock();}],[0o65,function(){return new TzxCustomInfoDataBlock_1.TzxCustomInfoDataBlock();}],[0o100,function(){return new TzxSnapshotBlock_1.TzxSnapshotBlock();}],[0o132,function(){return new TzxGlueDataBlock_1.TzxGlueDataBlock();}]]);var TzxReader=(function(){function TzxReader(reader){this.majorVersion=(0x75bcd15-0O726746425);this.minorVersion=(0x75bcd15-0O726746425);this._reader=reader;this.dataBlocks=[];}TzxReader.prototype.readContent=function(){var header=new TzxHeader_1.TzxHeader();try{header.readFrom(this._reader);if(!header.isValid){throw new Error("Invalid TZX header");}this.majorVersion=header.majorVersion;this.minorVersion=header.minorVersion;while(this._reader.Position!==this._reader.Length){var blockType=this._reader.ReadByte();var type=DataBlockTypes.get(blockType);if(!type){throw new Error("Unkonwn TZX block type: "+blockType);}try{var block=type();if(block.isDeprecated()){block.readThrough(this._reader);}else{block.readFrom(this._reader);}this.dataBlocks.push(block);}catch(err){throw new Error("Cannot read TZX data block "+type+".");}}return true;}catch(_a){return false;}};return TzxReader;}());exports.TzxReader=TzxReader;},{"./TzxArchiveInfoDataBlock":116,"./TzxC64RomTypeDataBlock":118,"./TzxC64TurboTapeDataBlock":119,"./TzxCallSequenceDataBlock":120,"./TzxCswRecordingDataBlock":121,"./TzxCustomInfoDataBlock":122,"./TzxDirectRecordingDataBlock":125,"./TzxEmulationInfoDataBlock":126,"./TzxGeneralizedDataBlock":127,"./TzxGlueDataBlock":128,"./TzxGroupEndDataBlock":129,"./TzxGroupStartDataBlock":130,"./TzxHardwareInfoDataBlock":131,"./TzxHeader":132,"./TzxJumpDataBlock":134,"./TzxLoopEndDataBlock":135,"./TzxLoopStartDataBlock":136,"./TzxMessageDataBlock":137,"./TzxPulseSequenceDataBlock":138,"./TzxPureDataBlock":139,"./TzxPureToneDataBlock":140,"./TzxReturnFromSequenceDataBlock":142,"./TzxSelectDataBlock":144,"./TzxSetSignalLevelDataBlock":145,"./TzxSilenceDataBlock":146,"./TzxSnapshotBlock":147,"./TzxStandardSpeedDataBlock":148,"./TzxStopTheTape48DataBlock":149,"./TzxTextDescriptionDataBlock":152,"./TzxTurboSpeedDataBlock":153}],142:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxBodylessDataBlockBase_1=require("./TzxBodylessDataBlockBase");var TzxReturnFromSequenceDataBlock=(function(_super){__extends(TzxReturnFromSequenceDataBlock,_super);function TzxReturnFromSequenceDataBlock(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(TzxReturnFromSequenceDataBlock.prototype,"blockId",{get:function(){return 0o47;},enumerable:true,configurable:true});return TzxReturnFromSequenceDataBlock;}(TzxBodylessDataBlockBase_1.TzxBodylessDataBlockBase));exports.TzxReturnFromSequenceDataBlock=TzxReturnFromSequenceDataBlock;},{"./TzxBodylessDataBlockBase":117}],143:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxSelect=(function(){function TzxSelect(){this.blockOffset=(0x75bcd15-0O726746425);this.descriptionLength=(0x75bcd15-0O726746425);this.description=new Uint8Array((0x75bcd15-0O726746425));}Object.defineProperty(TzxSelect.prototype,"descriptionText",{get:function(){return TzxDataBlockBase_1.TzxDataBlockBase.toAsciiString(this.description);},enumerable:true,configurable:true});TzxSelect.prototype.readFrom=function(reader){this.blockOffset=reader.ReadUInt16();this.descriptionLength=reader.ReadByte();this.description=reader.ReadBytes(this.descriptionLength);};TzxSelect.prototype.writeTo=function(writer){writer.WriteUInt16(this.blockOffset);writer.WriteByte(this.descriptionLength);writer.WriteBytes(this.description);};return TzxSelect;}());exports.TzxSelect=TzxSelect;},{"./TzxDataBlockBase":123}],144:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();var __values=(this&&this.__values)||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=(0x75bcd15-0O726746425);if(m)return m.call(o);return {next:function(){if(o&&i>=o.length)o=void (0x75bcd15-0O726746425);return {value:o&&o[i++],done:!o};}};};Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxSelect_1=require("./TzxSelect");var TzxSelectDataBlock=(function(_super){__extends(TzxSelectDataBlock,_super);function TzxSelectDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.length=(0x75bcd15-0O726746425);_this.selectionCount=(0x75bcd15-0O726746425);_this.selections=[];return _this;}Object.defineProperty(TzxSelectDataBlock.prototype,"blockId",{get:function(){return 0o50;},enumerable:true,configurable:true});TzxSelectDataBlock.prototype.readFrom=function(reader){this.length=reader.ReadUInt16();this.selectionCount=reader.ReadByte();this.selections=[];for(var i=(0x75bcd15-0O726746425);i<this.selectionCount;i++){var selection=new TzxSelect_1.TzxSelect();selection.readFrom(reader);this.selections[i]=selection;}};TzxSelectDataBlock.prototype.writeTo=function(writer){var e_1,_a;writer.WriteUInt16(this.length);writer.WriteByte(this.selectionCount);try{for(var _b=__values(this.selections),_c=_b.next();!_c.done;_c=_b.next()){var selection=_c.value;selection.writeTo(writer);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_1)throw e_1.error;}}};return TzxSelectDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxSelectDataBlock=TzxSelectDataBlock;},{"./TzxDataBlockBase":123,"./TzxSelect":143}],145:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxSetSignalLevelDataBlock=(function(_super){__extends(TzxSetSignalLevelDataBlock,_super);function TzxSetSignalLevelDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.lenght=(0O57060516-0xbc614d);_this.signalLevel=(0x75bcd15-0O726746425);return _this;}Object.defineProperty(TzxSetSignalLevelDataBlock.prototype,"blockId",{get:function(){return 0o53;},enumerable:true,configurable:true});TzxSetSignalLevelDataBlock.prototype.readFrom=function(reader){reader.ReadUInt32();this.signalLevel=reader.ReadByte();};TzxSetSignalLevelDataBlock.prototype.writeTo=function(writer){writer.WriteUInt32(this.lenght);writer.WriteByte(this.signalLevel);};return TzxSetSignalLevelDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxSetSignalLevelDataBlock=TzxSetSignalLevelDataBlock;},{"./TzxDataBlockBase":123}],146:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxSilenceDataBlock=(function(_super){__extends(TzxSilenceDataBlock,_super);function TzxSilenceDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.duration=(0x75bcd15-0O726746425);return _this;}Object.defineProperty(TzxSilenceDataBlock.prototype,"blockId",{get:function(){return 0o40;},enumerable:true,configurable:true});TzxSilenceDataBlock.prototype.readFrom=function(reader){this.duration=reader.ReadUInt16();};TzxSilenceDataBlock.prototype.writeTo=function(writer){writer.WriteUInt16(this.duration);};return TzxSilenceDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxSilenceDataBlock=TzxSilenceDataBlock;},{"./TzxDataBlockBase":123}],147:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDeprecatedDataBlockBase_1=require("./TzxDeprecatedDataBlockBase");var TzxSnapshotBlock=(function(_super){__extends(TzxSnapshotBlock,_super);function TzxSnapshotBlock(){return _super!==null&&_super.apply(this,arguments)||this;}Object.defineProperty(TzxSnapshotBlock.prototype,"blockId",{get:function(){return 0o100;},enumerable:true,configurable:true});TzxSnapshotBlock.prototype.readThrough=function(reader){var length=reader.ReadInt32();length=length&0o77777777;reader.ReadBytes(length);};return TzxSnapshotBlock;}(TzxDeprecatedDataBlockBase_1.TzxDeprecatedDataBlockBase));exports.TzxSnapshotBlock=TzxSnapshotBlock;},{"./TzxDeprecatedDataBlockBase":124}],148:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TapeDataBlockPlayer_1=require("../TapeDataBlockPlayer");var PlayPhase_1=require("../PlayPhase");var TzxStandardSpeedDataBlock=(function(_super){__extends(TzxStandardSpeedDataBlock,_super);function TzxStandardSpeedDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.pauseAfter=0o1750;_this.dataLength=(0x75bcd15-0O726746425);return _this;}Object.defineProperty(TzxStandardSpeedDataBlock.prototype,"blockId",{get:function(){return 0o20;},enumerable:true,configurable:true});TzxStandardSpeedDataBlock.prototype.readFrom=function(reader){this.pauseAfter=reader.ReadUInt16();this.dataLength=reader.ReadUInt16();this.data=reader.ReadBytes(this.dataLength);};TzxStandardSpeedDataBlock.prototype.writeTo=function(writer){writer.WriteByte(this.blockId);writer.WriteUInt16(this.pauseAfter);writer.WriteUInt16(this.dataLength);writer.WriteBuffer(this.data,(0x75bcd15-0O726746425),this.dataLength);};Object.defineProperty(TzxStandardSpeedDataBlock.prototype,"byteIndex",{get:function(){return this._player?this._player.byteIndex:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(TzxStandardSpeedDataBlock.prototype,"bitMask",{get:function(){return this._player?this._player.bitMask:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(TzxStandardSpeedDataBlock.prototype,"playPhase",{get:function(){return this._player?this._player.playPhase:PlayPhase_1.PlayPhase.None;},enumerable:true,configurable:true});Object.defineProperty(TzxStandardSpeedDataBlock.prototype,"startTact",{get:function(){return this._player?this._player.startTact:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(TzxStandardSpeedDataBlock.prototype,"lastTact",{get:function(){return this._player?this._player.lastTact:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});TzxStandardSpeedDataBlock.prototype.initPlay=function(startTact){this._player=new TapeDataBlockPlayer_1.TapeDataBlockPlayer(this.data,this.pauseAfter);this._player.initPlay(startTact);};TzxStandardSpeedDataBlock.prototype.getEarBit=function(currentTact){return this._player?this._player.getEarBit(currentTact):false;};TzxStandardSpeedDataBlock.prototype.supportsPlayback=function(){return true;};return TzxStandardSpeedDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxStandardSpeedDataBlock=TzxStandardSpeedDataBlock;},{"../PlayPhase":102,"../TapeDataBlockPlayer":106,"./TzxDataBlockBase":123}],149:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxStopTheTape48DataBlock=(function(_super){__extends(TzxStopTheTape48DataBlock,_super);function TzxStopTheTape48DataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.lenght=(0x75bcd15-0O726746425);return _this;}Object.defineProperty(TzxStopTheTape48DataBlock.prototype,"blockId",{get:function(){return 0o52;},enumerable:true,configurable:true});TzxStopTheTape48DataBlock.prototype.readFrom=function(reader){reader.ReadUInt32();};TzxStopTheTape48DataBlock.prototype.writeTo=function(writer){writer.WriteUInt32(this.lenght);};return TzxStopTheTape48DataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxStopTheTape48DataBlock=TzxStopTheTape48DataBlock;},{"./TzxDataBlockBase":123}],150:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxSymDef=(function(){function TzxSymDef(maxPulses){this.symbolFlags=(0x75bcd15-0O726746425);this.pulseLengths=new Uint16Array(maxPulses);}TzxSymDef.prototype.readFrom=function(reader){this.symbolFlags=reader.ReadByte();this.pulseLengths=TzxDataBlockBase_1.TzxDataBlockBase.readWords(reader,this.pulseLengths.length);};TzxSymDef.prototype.writeTo=function(writer){writer.WriteByte(this.symbolFlags);TzxDataBlockBase_1.TzxDataBlockBase.writeWords(writer,this.pulseLengths);};return TzxSymDef;}());exports.TzxSymDef=TzxSymDef;},{"./TzxDataBlockBase":123}],151:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxText=(function(){function TzxText(){this.type=(0x75bcd15-0O726746425);this.length=(0x75bcd15-0O726746425);this.textBytes=new Uint8Array((0x75bcd15-0O726746425));}Object.defineProperty(TzxText.prototype,"text",{get:function(){return TzxDataBlockBase_1.TzxDataBlockBase.toAsciiString(this.textBytes);},enumerable:true,configurable:true});TzxText.prototype.readFrom=function(reader){this.type=reader.ReadByte();this.length=reader.ReadByte();this.textBytes=reader.ReadBytes(this.length);};TzxText.prototype.writeTo=function(writer){writer.WriteByte(this.type);writer.WriteByte(this.length);writer.WriteBytes(this.textBytes);};return TzxText;}());exports.TzxText=TzxText;},{"./TzxDataBlockBase":123}],152:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var TzxDataBlockBase_1=require("./TzxDataBlockBase");var TzxTextDescriptionDataBlock=(function(_super){__extends(TzxTextDescriptionDataBlock,_super);function TzxTextDescriptionDataBlock(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.descriptionLength=(0x75bcd15-0O726746425);_this.description=new Uint8Array((0x75bcd15-0O726746425));return _this;}Object.defineProperty(TzxTextDescriptionDataBlock.prototype,"descriptionText",{get:function(){return TzxDataBlockBase_1.TzxDataBlockBase.toAsciiString(this.description);},enumerable:true,configurable:true});Object.defineProperty(TzxTextDescriptionDataBlock.prototype,"blockId",{get:function(){return 0o60;},enumerable:true,configurable:true});TzxTextDescriptionDataBlock.prototype.readFrom=function(reader){this.descriptionLength=reader.ReadByte();this.description=reader.ReadBytes(this.descriptionLength);};TzxTextDescriptionDataBlock.prototype.writeTo=function(writer){writer.WriteByte(this.descriptionLength);writer.WriteBytes(this.description);};return TzxTextDescriptionDataBlock;}(TzxDataBlockBase_1.TzxDataBlockBase));exports.TzxTextDescriptionDataBlock=TzxTextDescriptionDataBlock;},{"./TzxDataBlockBase":123}],153:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var Tzx3ByteDataBlockBase_1=require("./Tzx3ByteDataBlockBase");var TapeDataBlockPlayer_1=require("../TapeDataBlockPlayer");var PlayPhase_1=require("../PlayPhase");var TzxTurboSpeedDataBlock=(function(_super){__extends(TzxTurboSpeedDataBlock,_super);function TzxTurboSpeedDataBlock(){var _this=_super.call(this)||this;_this.pilotPulseLength=0o4170;_this.sync1PulseLength=0o1233;_this.sync2PulseLength=0o1337;_this.zeroBitPulseLength=0o1527;_this.oneBitPulseLength=0o3256;_this.pilotToneLength=0o17577;_this.lastByteUsedBits=(0O347010110&0x463A71D);_this.pauseAfter=0o1750;return _this;}Object.defineProperty(TzxTurboSpeedDataBlock.prototype,"blockId",{get:function(){return 0o21;},enumerable:true,configurable:true});TzxTurboSpeedDataBlock.prototype.readFrom=function(reader){this.pilotPulseLength=reader.ReadUInt16();this.sync1PulseLength=reader.ReadUInt16();this.sync2PulseLength=reader.ReadUInt16();this.zeroBitPulseLength=reader.ReadUInt16();this.oneBitPulseLength=reader.ReadUInt16();this.pilotToneLength=reader.ReadUInt16();this.lastByteUsedBits=reader.ReadByte();this.pauseAfter=reader.ReadUInt16();this.dataLength=reader.ReadBytes((0O334664274-0x37368B9));this.data=reader.ReadBytes(this.getLength());};TzxTurboSpeedDataBlock.prototype.writeTo=function(writer){writer.WriteUInt16(this.pilotPulseLength);writer.WriteUInt16(this.sync1PulseLength);writer.WriteUInt16(this.sync2PulseLength);writer.WriteUInt16(this.zeroBitPulseLength);writer.WriteUInt16(this.oneBitPulseLength);writer.WriteUInt16(this.pilotToneLength);writer.WriteByte(this.lastByteUsedBits);writer.WriteUInt16(this.pauseAfter);writer.WriteBytes(this.dataLength);writer.WriteBytes(this.data);};Object.defineProperty(TzxTurboSpeedDataBlock.prototype,"byteIndex",{get:function(){return this._player?this._player.byteIndex:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(TzxTurboSpeedDataBlock.prototype,"bitMask",{get:function(){return this._player?this._player.bitMask:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(TzxTurboSpeedDataBlock.prototype,"playPhase",{get:function(){return this._player?this._player.playPhase:PlayPhase_1.PlayPhase.None;},enumerable:true,configurable:true});Object.defineProperty(TzxTurboSpeedDataBlock.prototype,"startTact",{get:function(){return this._player?this._player.startTact:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(TzxTurboSpeedDataBlock.prototype,"lastTact",{get:function(){return this._player?this._player.lastTact:(0x75bcd15-0O726746425);},enumerable:true,configurable:true});TzxTurboSpeedDataBlock.prototype.initPlay=function(startTact){this._player=new TapeDataBlockPlayer_1.TapeDataBlockPlayer(this.data,this.pauseAfter);this._player.pilotPulseLength=this.pilotPulseLength;this._player.sync1PulseLength=this.sync1PulseLength;this._player.sync2PulseLength=this.sync2PulseLength;this._player.zeroBitPulseLength=this.zeroBitPulseLength;this._player.oneBitPulseLength=this.oneBitPulseLength;this._player.headerPilotToneLength=this.pilotToneLength;this._player.dataPilotToneLength=this.pilotToneLength;this._player.initPlay(startTact);};TzxTurboSpeedDataBlock.prototype.getEarBit=function(currentTact){return this._player?this._player.getEarBit(currentTact):false;};TzxTurboSpeedDataBlock.prototype.supportsPlayback=function(){return true;};return TzxTurboSpeedDataBlock;}(Tzx3ByteDataBlockBase_1.Tzx3ByteDataBlockBase));exports.TzxTurboSpeedDataBlock=TzxTurboSpeedDataBlock;},{"../PlayPhase":102,"../TapeDataBlockPlayer":106,"./Tzx3ByteDataBlockBase":115}],154:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var DebugStepMode;(function(DebugStepMode){DebugStepMode[DebugStepMode["StopAtBreakpoint"]=(0x75bcd15-0O726746425)]="StopAtBreakpoint";DebugStepMode[DebugStepMode["StepInto"]=(0O57060516-0xbc614d)]="StepInto";DebugStepMode[DebugStepMode["StepOver"]=(15658734^0O73567354)]="StepOver";})(DebugStepMode=exports.DebugStepMode||(exports.DebugStepMode={}));},{}],155:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var DeviceInfoCollection=(function(){function DeviceInfoCollection(){this._coll=new Map();}DeviceInfoCollection.prototype.add=function(deviceInfo){if(deviceInfo.device){this._coll.set(deviceInfo.device.key,deviceInfo);}};DeviceInfoCollection.prototype.get=function(key){return this._coll.get(key);};return DeviceInfoCollection;}());exports.DeviceInfoCollection=DeviceInfoCollection;},{}],156:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var EmulationMode;(function(EmulationMode){EmulationMode[EmulationMode["Continuous"]=(0x75bcd15-0O726746425)]="Continuous";EmulationMode[EmulationMode["Debugger"]=(0O57060516-0xbc614d)]="Debugger";EmulationMode[EmulationMode["UntilHalt"]=(15658734^0O73567354)]="UntilHalt";EmulationMode[EmulationMode["UntilFrameEnds"]=(0O334664274-0x37368B9)]="UntilFrameEnds";EmulationMode[EmulationMode["UntilExecutionPoint"]=(0x5E30A78-0O570605164)]="UntilExecutionPoint";})(EmulationMode=exports.EmulationMode||(exports.EmulationMode={}));},{}],157:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var EmulationMode_1=require("./EmulationMode");var DebugStepMode_1=require("./DebugStepMode");var ExecuteCycleOptions=(function(){function ExecuteCycleOptions(emulationMode,debugStepMode,fastTapeMode,terminationRom,terminationPoint,fastVmMode,timeoutTacts,disableScreenRendering){if(emulationMode===void (0x75bcd15-0O726746425)){emulationMode=EmulationMode_1.EmulationMode.Continuous;}if(debugStepMode===void (0x75bcd15-0O726746425)){debugStepMode=DebugStepMode_1.DebugStepMode.StopAtBreakpoint;}if(fastTapeMode===void (0x75bcd15-0O726746425)){fastTapeMode=false;}if(terminationRom===void (0x75bcd15-0O726746425)){terminationRom=(0x75bcd15-0O726746425);}if(terminationPoint===void (0x75bcd15-0O726746425)){terminationPoint=(0x75bcd15-0O726746425);}if(fastVmMode===void (0x75bcd15-0O726746425)){fastVmMode=false;}if(timeoutTacts===void (0x75bcd15-0O726746425)){timeoutTacts=(0x75bcd15-0O726746425);}if(disableScreenRendering===void (0x75bcd15-0O726746425)){disableScreenRendering=false;}this.emulationMode=emulationMode;this.debugStepMode=debugStepMode;this.fastTapeMode=fastTapeMode;this.terminationRom=terminationRom;this.terminationPoint=terminationPoint;this.fastVmMode=fastVmMode;this.timeoutTacts=timeoutTacts;this.disableScreenRendering=disableScreenRendering;}return ExecuteCycleOptions;}());exports.ExecuteCycleOptions=ExecuteCycleOptions;},{"./DebugStepMode":154,"./EmulationMode":156}],158:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var ExecutionCompletionReason;(function(ExecutionCompletionReason){ExecutionCompletionReason[ExecutionCompletionReason["None"]=(0x75bcd15-0O726746425)]="None";ExecutionCompletionReason[ExecutionCompletionReason["Cancelled"]=(0O57060516-0xbc614d)]="Cancelled";ExecutionCompletionReason[ExecutionCompletionReason["Timeout"]=(15658734^0O73567354)]="Timeout";ExecutionCompletionReason[ExecutionCompletionReason["TerminationPointReached"]=(0O334664274-0x37368B9)]="TerminationPointReached";ExecutionCompletionReason[ExecutionCompletionReason["BreakpointReached"]=(0x5E30A78-0O570605164)]="BreakpointReached";ExecutionCompletionReason[ExecutionCompletionReason["Halted"]=(0O507646144^0x51F4C61)]="Halted";ExecutionCompletionReason[ExecutionCompletionReason["FrameCompleted"]=(1011010-0O3666474)]="FrameCompleted";ExecutionCompletionReason[ExecutionCompletionReason["Exception"]=(0x9D8DE4-0O47306735)]="Exception";})(ExecutionCompletionReason=exports.ExecutionCompletionReason||(exports.ExecutionCompletionReason={}));},{}],159:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var ScreenConfiguration_1=require("../devices/screen/ScreenConfiguration");var NoopZ80Cpu_1=require("../cpu/NoopZ80Cpu");var NoopBeeperDevice_1=require("../devices/beeper/NoopBeeperDevice");var NoopKeyboardDevice_1=require("../devices/keyboard/NoopKeyboardDevice");var NoopKeyboardProvider_1=require("../devices/keyboard/NoopKeyboardProvider");var NoopMemoryDevice_1=require("../devices/memory/NoopMemoryDevice");var MemoryConfigurationData_1=require("../devices/memory/MemoryConfigurationData");var NoopPortDevice_1=require("../devices/ports/NoopPortDevice");var NoopScreenDevice_1=require("../devices/screen/NoopScreenDevice");var ScreenConfigurationData_1=require("../devices/screen/ScreenConfigurationData");var ExecuteCycleOptions_1=require("./ExecuteCycleOptions");var ExecutionCompletionReason_1=require("./ExecutionCompletionReason");var DeviceInfoCollection_1=require("./DeviceInfoCollection");var RomConfigurationData_1=require("../devices/rom/RomConfigurationData");var NoopRomProvider_1=require("../devices/rom/NoopRomProvider");var NoopRomDevice_1=require("../devices/rom/NoopRomDevice");var NoopInterruptDevice_1=require("../devices/interrupt/NoopInterruptDevice");var NoopTapeProvider_1=require("../devices/tape/NoopTapeProvider");var RegisterDiagInfo_1=require("./RegisterDiagInfo");var LiteEvent_1=require("../utils/LiteEvent");var NoopSpectrumVm=(function(){function NoopSpectrumVm(){this.key="SpectrumVm";this.frameCount=(0x75bcd15-0O726746425);this.overflow=(0x75bcd15-0O726746425);this.frameCompleted=new LiteEvent_1.LiteEvent();this.cpu=new NoopZ80Cpu_1.NoopZ80Cpu();this.ulaIssue="3";this.baseClockFrequency=(0x75bcd15-0O726746425);this.currentFrameTact=(0x75bcd15-0O726746425);this.frameTacts=(0x75bcd15-0O726746425);this.memoryConfiguration=new MemoryConfigurationData_1.MemoryConfigurationData();this.screenConfiguration=new ScreenConfiguration_1.ScreenConfiguration(new ScreenConfigurationData_1.ScreenConfigurationData());this.contentionAccumulated=(0x75bcd15-0O726746425);this.executeCycleOptions=new ExecuteCycleOptions_1.ExecuteCycleOptions();this.executionCompletionReason=ExecutionCompletionReason_1.ExecutionCompletionReason.None;this.deviceData=new DeviceInfoCollection_1.DeviceInfoCollection();this.lastExecutionStartTact=(0x75bcd15-0O726746425);this.lastExecutionContentionValue=(0x75bcd15-0O726746425);this.romConfiguration=new RomConfigurationData_1.RomConfigurationData();this.interruptTact=(0x75bcd15-0O726746425);this.runsInMaskableInterrupt=false;this.clockMultiplier=(0x75bcd15-0O726746425);this.memoryDevice=new NoopMemoryDevice_1.NoopMemoryDevice(this);this.portDevice=new NoopPortDevice_1.NoopPortDevice(this);this.beeperDevice=new NoopBeeperDevice_1.NoopBeeperDevice(this);this.keyboardDevice=new NoopKeyboardDevice_1.NoopKeyboardDevice(this);this.keyboardProvider=new NoopKeyboardProvider_1.NoopKeyboardProvider(this);this.screenDevice=new NoopScreenDevice_1.NoopScreenDevice(this);this.romProvider=new NoopRomProvider_1.NoopRomProvider(this);this.romDevice=new NoopRomDevice_1.NoopRomDevice(this);this.interruptDevice=new NoopInterruptDevice_1.NoopInterruptDevice(this);this.tapeProvider=new NoopTapeProvider_1.NoopTapeProvider(this);}NoopSpectrumVm.prototype.reset=function(){};NoopSpectrumVm.prototype.getDeviceState=function(){};NoopSpectrumVm.prototype.restoreDeviceState=function(state){};NoopSpectrumVm.prototype.onNewFrame=function(){};NoopSpectrumVm.prototype.onFrameCompleted=function(){};NoopSpectrumVm.prototype.getDeviceInfo=function(key){return undefined;};NoopSpectrumVm.prototype.executeCycle=function(token,options){return true;};NoopSpectrumVm.prototype.getDiagInfo=function(){return new RegisterDiagInfo_1.RegisterDiagInfo();};return NoopSpectrumVm;}());exports.NoopSpectrumVm=NoopSpectrumVm;},{"../cpu/NoopZ80Cpu":20,"../devices/beeper/NoopBeeperDevice":34,"../devices/interrupt/NoopInterruptDevice":39,"../devices/keyboard/NoopKeyboardDevice":47,"../devices/keyboard/NoopKeyboardProvider":48,"../devices/memory/MemoryConfigurationData":52,"../devices/memory/NoopMemoryDevice":56,"../devices/ports/NoopPortDevice":60,"../devices/rom/NoopRomDevice":77,"../devices/rom/NoopRomProvider":78,"../devices/rom/RomConfigurationData":79,"../devices/screen/NoopScreenDevice":85,"../devices/screen/ScreenConfiguration":88,"../devices/screen/ScreenConfigurationData":89,"../devices/tape/NoopTapeProvider":101,"../utils/LiteEvent":173,"./DeviceInfoCollection":155,"./ExecuteCycleOptions":157,"./ExecutionCompletionReason":158,"./RegisterDiagInfo":160}],160:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var RegisterDiagInfo=(function(){function RegisterDiagInfo(){this.im=(0x75bcd15-0O726746425);this.if1=false;this.if2=false;this.hlt=false;this.clk=(0x75bcd15-0O726746425);this.stp=(0x75bcd15-0O726746425);this.del=(0x75bcd15-0O726746425);this.lco=(0x75bcd15-0O726746425);this.af=(0x75bcd15-0O726746425);this.bc=(0x75bcd15-0O726746425);this.de=(0x75bcd15-0O726746425);this.hl=(0x75bcd15-0O726746425);this._af_=(0x75bcd15-0O726746425);this._bc_=(0x75bcd15-0O726746425);this._de_=(0x75bcd15-0O726746425);this._hl_=(0x75bcd15-0O726746425);this.pc=(0x75bcd15-0O726746425);this.sp=(0x75bcd15-0O726746425);this.ix=(0x75bcd15-0O726746425);this.iy=(0x75bcd15-0O726746425);this.ir=(0x75bcd15-0O726746425);this.wz=(0x75bcd15-0O726746425);this.fcl=(0x75bcd15-0O726746425);this.frm=(0x75bcd15-0O726746425);this.ras=(0x75bcd15-0O726746425);this.pix="";this.con=(0x75bcd15-0O726746425);}return RegisterDiagInfo;}());exports.RegisterDiagInfo=RegisterDiagInfo;},{}],161:[function(require,module,exports){"use strict";var __extends=(this&&this.__extends)||(function(){var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||({__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;})||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p];};return extendStatics(d,b);};return function(d,b){extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};})();Object.defineProperty(exports,"__esModule",{value:true});var VmComponentProviderBase_1=require("../devices/VmComponentProviderBase");var SpectrumDebugInfoProvider=(function(_super){__extends(SpectrumDebugInfoProvider,_super);function SpectrumDebugInfoProvider(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this._breakpoints=new Set();return _this;}SpectrumDebugInfoProvider.prototype.prepareBreakpoints=function(){};SpectrumDebugInfoProvider.prototype.shouldBreakAtAddress=function(address){return this._breakpoints.has(address);};return SpectrumDebugInfoProvider;}(VmComponentProviderBase_1.VmComponentProviderBase));exports.SpectrumDebugInfoProvider=SpectrumDebugInfoProvider;},{"../devices/VmComponentProviderBase":30}],162:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var CpuConfigurationData_1=require("../cpu/CpuConfigurationData");var RomConfigurationData_1=require("../devices/rom/RomConfigurationData");var MemoryConfigurationData_1=require("../devices/memory/MemoryConfigurationData");var ScreenConfigurationData_1=require("../devices/screen/ScreenConfigurationData");var FloppyConfigurationData_1=require("../devices/floppy/FloppyConfigurationData");var SpectrumEdition=(function(){function SpectrumEdition(){this.cpu=new CpuConfigurationData_1.CpuConfigurationData();this.rom=new RomConfigurationData_1.RomConfigurationData();this.memory=new MemoryConfigurationData_1.MemoryConfigurationData();this.screen=new ScreenConfigurationData_1.ScreenConfigurationData();this.floppy=new FloppyConfigurationData_1.FloppyConfigurationData();this.ulaIssue="3";}SpectrumEdition.prototype.clone=function(){var ed=new SpectrumEdition();ed.cpu=this.cpu.clone();ed.rom=this.rom.clone();ed.memory=this.memory.clone();ed.screen=this.screen.Clone();ed.floppy=this.floppy.clone();ed.ulaIssue=this.ulaIssue;return ed;};return SpectrumEdition;}());exports.SpectrumEdition=SpectrumEdition;},{"../cpu/CpuConfigurationData":15,"../devices/floppy/FloppyConfigurationData":36,"../devices/memory/MemoryConfigurationData":52,"../devices/rom/RomConfigurationData":79,"../devices/screen/ScreenConfigurationData":89}],163:[function(require,module,exports){"use strict";var __values=(this&&this.__values)||function(o){var m=typeof Symbol==="function"&&o[Symbol.iterator],i=(0x75bcd15-0O726746425);if(m)return m.call(o);return {next:function(){if(o&&i>=o.length)o=void (0x75bcd15-0O726746425);return {value:o&&o[i++],done:!o};}};};Object.defineProperty(exports,"__esModule",{value:true});var ExecutionCompletionReason_1=require("./ExecutionCompletionReason");var ExecuteCycleOptions_1=require("./ExecuteCycleOptions");var InterruptDevice_1=require("../devices/interrupt/InterruptDevice");var KeyboardDevice_1=require("../devices/keyboard/KeyboardDevice");var BeeperDevice_1=require("../devices/beeper/BeeperDevice");var Spectrum48MemoryDevice_1=require("../devices/memory/Spectrum48MemoryDevice");var Spectrum48PortDevice_1=require("../devices/ports/Spectrum48PortDevice");var Z80Cpu_1=require("../cpu/Z80Cpu");var MemoryContentionType_1=require("../devices/memory/MemoryContentionType");var MemoryConfigurationData_1=require("../devices/memory/MemoryConfigurationData");var SpectrumRomDevice_1=require("../devices/rom/SpectrumRomDevice");var RomConfigurationData_1=require("../devices/rom/RomConfigurationData");var NoopRomProvider_1=require("../devices/rom/NoopRomProvider");var NoopRomDevice_1=require("../devices/rom/NoopRomDevice");var NoopMemoryDevice_1=require("../devices/memory/NoopMemoryDevice");var ScreenConfiguration_1=require("../devices/screen/ScreenConfiguration");var ScreenConfigurationData_1=require("../devices/screen/ScreenConfigurationData");var NoopScreenDevice_1=require("../devices/screen/NoopScreenDevice");var NoopKeyboardDevice_1=require("../devices/keyboard/NoopKeyboardDevice");var NoopKeyboardProvider_1=require("../devices/keyboard/NoopKeyboardProvider");var NoopBeeperDevice_1=require("../devices/beeper/NoopBeeperDevice");var NoopTapeDevice_1=require("../devices/tape/NoopTapeDevice");var NoopTapeProvider_1=require("../devices/tape/NoopTapeProvider");var DeviceTypes_1=require("../devices/DeviceTypes");var Spectrum48ScreenDevice_1=require("../devices/screen/Spectrum48ScreenDevice");var TapeDevice_1=require("../devices/tape/TapeDevice");var NoopScreenFrameProvider_1=require("../devices/screen/NoopScreenFrameProvider");var EmulationMode_1=require("./EmulationMode");var Z80StateFlags_1=require("../cpu/Z80StateFlags");var DebugStepMode_1=require("./DebugStepMode");var RegisterDiagInfo_1=require("./RegisterDiagInfo");var ScreenRenderingPhase_1=require("../devices/screen/ScreenRenderingPhase");var LiteEvent_1=require("../utils/LiteEvent");var SpectrumEngine=(function(){function SpectrumEngine(deviceData,ulaIssue){var e_1,_a;if(ulaIssue===void (0x75bcd15-0O726746425)){ulaIssue="3";}this._frameTacts=(0x75bcd15-0O726746425);this._frameCompleted=false;this._spectrumDevices=[];this._frameBoundDevices=[];this._cpuBoundDevices=[];this._frameCompletedEvent=new LiteEvent_1.LiteEvent();this.key="SpectrumVm";this.lastFrameStartCpuTick=(0x75bcd15-0O726746425);this.lastRenderedUlaTact=(0x75bcd15-0O726746425);this.executionCompletionReason=ExecutionCompletionReason_1.ExecutionCompletionReason.None;this.lastExecutionStartTact=(0x75bcd15-0O726746425);this.contentionAccumulated=(0x75bcd15-0O726746425);this.lastExecutionContentionValue=(0x75bcd15-0O726746425);this.executeCycleOptions=new ExecuteCycleOptions_1.ExecuteCycleOptions();this.romConfiguration=new RomConfigurationData_1.RomConfigurationData();this.romProvider=new NoopRomProvider_1.NoopRomProvider();this.romDevice=new NoopRomDevice_1.NoopRomDevice();this.memoryConfiguration=new MemoryConfigurationData_1.MemoryConfigurationData();this.memoryDevice=new NoopMemoryDevice_1.NoopMemoryDevice();this.screenConfiguration=new ScreenConfiguration_1.ScreenConfiguration(new ScreenConfigurationData_1.ScreenConfigurationData());this.screenDevice=new NoopScreenDevice_1.NoopScreenDevice();this.keyboardDevice=new NoopKeyboardDevice_1.NoopKeyboardDevice();this.keyboardProvider=new NoopKeyboardProvider_1.NoopKeyboardProvider();this.beeperDevice=new NoopBeeperDevice_1.NoopBeeperDevice();this.tapeDevice=new NoopTapeDevice_1.NoopTapeDevice();this.tapeProvider=new NoopTapeProvider_1.NoopTapeProvider();this.frameCount=(0x75bcd15-0O726746425);this.baseClockFrequency=0o15263740;this.overflow=(0x75bcd15-0O726746425);this.deviceData=deviceData;this.ulaIssue=ulaIssue==="3"?"3":"2";var nextInfo=this.getDeviceInfo(DeviceTypes_1.DT_NEXTFS);if(nextInfo&&nextInfo.device){this.nextDevice=nextInfo.device;}var memoryInfo=this.getDeviceInfo(DeviceTypes_1.DT_MEMORY);if(memoryInfo){this.memoryConfiguration=memoryInfo.configurationData;if(memoryInfo.device){this.memoryDevice=memoryInfo.device;}else{this.memoryDevice=new Spectrum48MemoryDevice_1.Spectrum48MemoryDevice();}}var portInfo=this.getDeviceInfo(DeviceTypes_1.DT_PORT);if(portInfo&&portInfo.device){this.portDevice=portInfo.device;}else{this.portDevice=new Spectrum48PortDevice_1.Spectrum48PortDevice();}var cpuConfig=this.getDeviceConfiguration(DeviceTypes_1.DT_CPU);var mult=(0O57060516-0xbc614d);if(cpuConfig){this.baseClockFrequency=cpuConfig.baseClockFrequency;mult=cpuConfig.clockMultiplier;if(mult<(0O57060516-0xbc614d)){mult=(0O57060516-0xbc614d);}else if(mult>=(15658734^0O73567354)&&mult<=(0O334664274-0x37368B9)){mult=(15658734^0O73567354);}else if(mult>=(0x5E30A78-0O570605164)&&mult<=(0x9D8DE4-0O47306735)){mult=(0x5E30A78-0O570605164);}else if(mult>(0O347010110&0x463A71D)){mult=(0O347010110&0x463A71D);}}this.clockMultiplier=mult;this.cpu=new Z80Cpu_1.Z80Cpu(this.memoryDevice,this.portDevice,cpuConfig&&cpuConfig.supportsNextOperations?cpuConfig.supportsNextOperations:false,this.nextDevice);this.cpu.useGateArrayContention=this.memoryConfiguration.contentionType===MemoryContentionType_1.MemoryContentionType.GateArray;var romInfo=this.getDeviceInfo(DeviceTypes_1.DT_ROM);if(romInfo){if(romInfo.provider){this.romProvider=romInfo.provider;}if(romInfo.device){this.romDevice=romInfo.device;}else{this.romDevice=new SpectrumRomDevice_1.SpectrumRomDevice();}this.romConfiguration=romInfo.configurationData;}else{this.romConfiguration=new RomConfigurationData_1.RomConfigurationData();}var screenInfo=this.getDeviceInfo(DeviceTypes_1.DT_SCREEN);var pixelRenderer=new NoopScreenFrameProvider_1.NoopScreenFrameProvider();if(screenInfo){if(screenInfo.provider){pixelRenderer=screenInfo.provider;}if(screenInfo.configurationData){this.screenConfiguration=new ScreenConfiguration_1.ScreenConfiguration(screenInfo.configurationData);}if(screenInfo.device){this.screenDevice=screenInfo.device;}else{this.screenDevice=new Spectrum48ScreenDevice_1.Spectrum48ScreenDevice();}}else{this.screenDevice=new Spectrum48ScreenDevice_1.Spectrum48ScreenDevice();}var beeperInfo=this.getDeviceInfo(DeviceTypes_1.DT_BEEPER);if(beeperInfo){if(beeperInfo.device){this.beeperDevice=beeperInfo.device;}else{this.beeperDevice=new BeeperDevice_1.BeeperDevice();}}var keyboardInfo=this.getDeviceInfo(DeviceTypes_1.DT_KEYBOARD);if(keyboardInfo){if(keyboardInfo.provider){this.keyboardProvider=keyboardInfo.provider;}if(keyboardInfo.device){this.keyboardDevice=keyboardInfo.device;}else{this.keyboardDevice=new KeyboardDevice_1.KeyboardDevice();}}this.interruptDevice=new InterruptDevice_1.InterruptDevice(this.interruptTact);var tapeInfo=this.getDeviceInfo(DeviceTypes_1.DT_TAPE);if(tapeInfo){if(tapeInfo.provider){this.tapeProvider=tapeInfo.provider;}if(tapeInfo.device){this.tapeDevice=tapeInfo.device;}else{this.tapeDevice=new TapeDevice_1.TapeDevice(this.tapeProvider);}}var soundInfo=this.getDeviceInfo(DeviceTypes_1.DT_SOUND);if(soundInfo){if(soundInfo.device){this.soundDevice=soundInfo.device;}}var divIdeInfo=this.getDeviceInfo(DeviceTypes_1.DT_DIVIDE);if(divIdeInfo){}var floppyInfo=this.getDeviceInfo(DeviceTypes_1.DT_FLOPPY);if(floppyInfo){this.floppyDevice=floppyInfo.device;if(floppyInfo.configurationData){this.floppyConfiguration=floppyInfo.configurationData;}}this.resetUlaTact();this._frameTacts=this.screenConfiguration.screenRenderingFrameTactCount;this.frameCount=(0x75bcd15-0O726746425);this.overflow=(0x75bcd15-0O726746425);this._frameCompleted=true;this._lastBreakpoint=undefined;this.attachProvider(this.romProvider);this.attachProvider(pixelRenderer);this.attachProvider(this.keyboardProvider);this.attachProvider(this.tapeProvider);if(this.debugInfoProvider){this.attachProvider(this.debugInfoProvider);}this._spectrumDevices.push(this.romDevice);this._spectrumDevices.push(this.memoryDevice);this._spectrumDevices.push(this.portDevice);this._spectrumDevices.push(this.screenDevice);this._spectrumDevices.push(this.beeperDevice);this._spectrumDevices.push(this.keyboardDevice);this._spectrumDevices.push(this.interruptDevice);this._spectrumDevices.push(this.tapeDevice);if(this.soundDevice){this._spectrumDevices.push(this.soundDevice);}if(this.nextDevice){this._spectrumDevices.push(this.nextDevice);}if(this.divIdeDevice){this._spectrumDevices.push(this.divIdeDevice);}if(this.floppyDevice){this._spectrumDevices.push(this.floppyDevice);}try{for(var _b=__values(this._spectrumDevices),_c=_b.next();!_c.done;_c=_b.next()){var device=_c.value;device.onAttachedToVm(this);}}catch(e_1_1){e_1={error:e_1_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_1)throw e_1.error;}}this._frameBoundDevices=[this.screenDevice,this.interruptDevice,this.keyboardDevice,this.beeperDevice];if(this.soundDevice){this._frameBoundDevices.push(this.soundDevice);}this._cpuBoundDevices=[this.tapeDevice];this.initRom(this.romDevice,this.romConfiguration);}Object.defineProperty(SpectrumEngine.prototype,"frameTacts",{get:function(){return this._frameTacts;},enumerable:true,configurable:true});Object.defineProperty(SpectrumEngine.prototype,"currentFrameTact",{get:function(){return Math.floor((this.cpu.tacts-this.lastFrameStartCpuTick)/this.clockMultiplier);},enumerable:true,configurable:true});Object.defineProperty(SpectrumEngine.prototype,"interruptTact",{get:function(){return this.screenConfiguration.interruptTact;},enumerable:true,configurable:true});SpectrumEngine.prototype.attachProvider=function(provider){provider.onAttachedToVm(this);};SpectrumEngine.prototype.getDeviceInfo=function(key){return this.deviceData.get(key);};SpectrumEngine.prototype.getDeviceConfiguration=function(key){var deviceInfo=this.deviceData.get(key);if(deviceInfo){return deviceInfo.configurationData;}return undefined;};SpectrumEngine.prototype.reset=function(){var e_2,_a;this.cpu.setResetSignal();this.resetUlaTact();this.frameCount=(0x75bcd15-0O726746425);this.overflow=(0x75bcd15-0O726746425);this.lastFrameStartCpuTick=(0x75bcd15-0O726746425);this.lastExecutionStartTact=(0x75bcd15-0O726746425);this.contentionAccumulated=(0x75bcd15-0O726746425);this.lastExecutionContentionValue=(0x75bcd15-0O726746425);this._frameCompleted=true;this.cpu.reset();this.cpu.releaseResetSignal();try{for(var _b=__values(this._spectrumDevices),_c=_b.next();!_c.done;_c=_b.next()){var device=_c.value;device.reset();}}catch(e_2_1){e_2={error:e_2_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_2)throw e_2.error;}}if(this.debugInfoProvider){this.debugInfoProvider.imminentBreakpoint=undefined;}};SpectrumEngine.prototype.getDeviceState=function(){return undefined;};SpectrumEngine.prototype.restoreDeviceState=function(state){};SpectrumEngine.prototype.onNewFrame=function(){var e_3,_a;try{for(var _b=__values(this._frameBoundDevices),_c=_b.next();!_c.done;_c=_b.next()){var device=_c.value;device.onNewFrame();}}catch(e_3_1){e_3={error:e_3_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_3)throw e_3.error;}}};SpectrumEngine.prototype.onFrameCompleted=function(){var e_4,_a;try{for(var _b=__values(this._frameBoundDevices),_c=_b.next();!_c.done;_c=_b.next()){var device=_c.value;device.overflow=this.overflow;device.onFrameCompleted();}}catch(e_4_1){e_4={error:e_4_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_4)throw e_4.error;}}};Object.defineProperty(SpectrumEngine.prototype,"frameCompleted",{get:function(){return this._frameCompletedEvent;},enumerable:true,configurable:true});SpectrumEngine.prototype.resetUlaTact=function(){this.lastRenderedUlaTact=-(0O57060516-0xbc614d);};SpectrumEngine.prototype.setDebugInfoProvider=function(provider){this.debugInfoProvider=provider;};SpectrumEngine.prototype.getDiagInfo=function(){var d=new RegisterDiagInfo_1.RegisterDiagInfo();d.af=this.cpu.af;d.bc=this.cpu.bc;d.de=this.cpu.de;d.hl=this.cpu.hl;d._af_=this.cpu._af_;d._bc_=this.cpu._bc_;d._de_=this.cpu._de_;d._hl_=this.cpu._hl_;d.sp=this.cpu.sp;d.pc=this.cpu.pc;d.ix=this.cpu.ix;d.iy=this.cpu.iy;d.ir=this.cpu.ir;d.wz=this.cpu.wz;d.im=this.cpu.interruptMode;d.if1=this.cpu.iff1;d.if2=this.cpu.iff2;d.hlt=(this.cpu.stateFlags&Z80StateFlags_1.Z80StateFlags.Halted)!==(0x75bcd15-0O726746425);d.clk=this.cpu.tacts;d.stp=this.cpu.tacts-this.lastExecutionStartTact;d.del=this.contentionAccumulated;d.lco=this.contentionAccumulated-this.lastExecutionContentionValue;d.frm=this.screenDevice.frameCount;var ulaTacts=this.screenConfiguration.screenRenderingFrameTactCount;var currentTact=this.currentFrameTact%ulaTacts;d.fcl=currentTact;d.ras=Math.floor(currentTact/this.screenConfiguration.screenLineTime);var rt=this.screenDevice.renderingTactTable[currentTact];d.con=rt.contentionDelay;switch(rt.phase){case ScreenRenderingPhase_1.ScreenRenderingPhase.None:d.pix="None";break;case ScreenRenderingPhase_1.ScreenRenderingPhase.Border:d.pix="Border";break;case ScreenRenderingPhase_1.ScreenRenderingPhase.BorderFetchPixel:d.pix="Border (fetch byte)";break;case ScreenRenderingPhase_1.ScreenRenderingPhase.BorderFetchPixelAttr:d.pix="Border (fetch attr)";break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1:d.pix="Byte #1";break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1FetchA2:d.pix="Byte #1/Fetch Attr #2";break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB1FetchB2:d.pix="Byte #1/Fetch Byte #2";break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2:d.pix="Byte #2";break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2FetchA1:d.pix="Byte #2/Fetch Attr #1";break;case ScreenRenderingPhase_1.ScreenRenderingPhase.DisplayB2FetchB1:d.pix="Byte #2/Fetch Byte #1";break;}return d;};SpectrumEngine.prototype.executeCycle=function(token,options){var e_5,_a;this.executeCycleOptions=options;this.executionCompletionReason=ExecutionCompletionReason_1.ExecutionCompletionReason.None;if(options.emulationMode!==EmulationMode_1.EmulationMode.UntilFrameEnds){this.lastExecutionStartTact=this.cpu.tacts;this.lastExecutionContentionValue=this.contentionAccumulated;}var cycleStartTact=this.cpu.tacts;var executedInstructionCount=-(0O57060516-0xbc614d);while(!token.isCancellationRequested){if(this._frameCompleted){this.lastFrameStartCpuTick=this.cpu.tacts-this.overflow;this.onNewFrame();this.lastRenderedUlaTact=this.overflow;this._frameCompleted=false;}while(!this._frameCompleted){if(!this.cpu.isInOpExecution){if(token.isCancellationRequested){this.executionCompletionReason=ExecutionCompletionReason_1.ExecutionCompletionReason.Cancelled;return false;}executedInstructionCount++;if(options.timeoutTacts>(0x75bcd15-0O726746425)&&cycleStartTact+options.timeoutTacts<this.cpu.tacts){this.executionCompletionReason=ExecutionCompletionReason_1.ExecutionCompletionReason.Timeout;return false;}if(options.emulationMode===EmulationMode_1.EmulationMode.UntilExecutionPoint){if(options.terminationPoint<0o40000){if(options.terminationRom===this.memoryDevice.getSelectedRomIndex()&&options.terminationPoint===this.cpu.pc){this.executionCompletionReason=ExecutionCompletionReason_1.ExecutionCompletionReason.TerminationPointReached;return true;}}else if(options.terminationPoint===this.cpu.pc){this.executionCompletionReason=ExecutionCompletionReason_1.ExecutionCompletionReason.TerminationPointReached;return true;}}if(options.emulationMode===EmulationMode_1.EmulationMode.Debugger){if(this.isDebugStop(options,executedInstructionCount)){this.screenDevice.onFrameCompleted();this.executionCompletionReason=ExecutionCompletionReason_1.ExecutionCompletionReason.BreakpointReached;return true;}}}this.interruptDevice.checkForInterrupt(this.currentFrameTact);this.cpu.executeCpuCycle();this._lastBreakpoint=undefined;var lastTact=this.currentFrameTact;this.screenDevice.renderScreen(this.lastRenderedUlaTact+(0O57060516-0xbc614d),lastTact);this.lastRenderedUlaTact=lastTact;if(options.emulationMode===EmulationMode_1.EmulationMode.UntilHalt&&(this.cpu.stateFlags&Z80StateFlags_1.Z80StateFlags.Halted)!==(0x75bcd15-0O726746425)){this.executionCompletionReason=ExecutionCompletionReason_1.ExecutionCompletionReason.Halted;return true;}try{for(var _b=__values(this._cpuBoundDevices),_c=_b.next();!_c.done;_c=_b.next()){var device=_c.value;device.onCpuOperationCompleted();}}catch(e_5_1){e_5={error:e_5_1};}finally{try{if(_c&&!_c.done&&(_a=_b.return))_a.call(_b);}finally{if(e_5)throw e_5.error;}}this._frameCompleted=!this.cpu.isInOpExecution&&this.currentFrameTact>=this._frameTacts;}this.frameCount++;this.onFrameCompleted();this.overflow=this.currentFrameTact%this._frameTacts;if(options.emulationMode===EmulationMode_1.EmulationMode.UntilFrameEnds||options.emulationMode===EmulationMode_1.EmulationMode.Debugger){this.executionCompletionReason=ExecutionCompletionReason_1.ExecutionCompletionReason.FrameCompleted;return true;}}this.executionCompletionReason=ExecutionCompletionReason_1.ExecutionCompletionReason.Cancelled;return false;};SpectrumEngine.prototype.isDebugStop=function(options,executedInstructionCount){if(!this.debugInfoProvider){return false;}if(options.debugStepMode===DebugStepMode_1.DebugStepMode.StepInto){return executedInstructionCount>(0x75bcd15-0O726746425);}if(options.debugStepMode===DebugStepMode_1.DebugStepMode.StopAtBreakpoint&&this.debugInfoProvider.shouldBreakAtAddress(this.cpu.pc)){if(executedInstructionCount>(0x75bcd15-0O726746425)||!this._lastBreakpoint||this._lastBreakpoint!==this.cpu.pc){this._lastBreakpoint=this.cpu.pc;return true;}}if(options.debugStepMode===DebugStepMode_1.DebugStepMode.StepOver){if(this.debugInfoProvider.imminentBreakpoint){if(this.debugInfoProvider.imminentBreakpoint===this.cpu.pc){this.debugInfoProvider.imminentBreakpoint=undefined;return true;}}else{var imminentJustCreated=false;var length_1=this.cpu.getCallInstructionLength();if(length_1>(0x75bcd15-0O726746425)){this.debugInfoProvider.imminentBreakpoint=(this.cpu.pc+length_1)&0o177777;imminentJustCreated=true;}if(executedInstructionCount>(0x75bcd15-0O726746425)&&(!this.debugInfoProvider.imminentBreakpoint||imminentJustCreated)){return true;}}}return false;};Object.defineProperty(SpectrumEngine.prototype,"hasFrameCompleted",{get:function(){return this._frameCompleted;},enumerable:true,configurable:true});SpectrumEngine.prototype.writeSpectrumMemory=function(addr,value){this.memoryDevice.write(addr,value);};SpectrumEngine.prototype.setUlaFrameTact=function(tacts){this.lastRenderedUlaTact=tacts;};SpectrumEngine.prototype.injectCodeToMemory=function(addr,code){var e_6,_a;try{for(var code_1=__values(code),code_1_1=code_1.next();!code_1_1.done;code_1_1=code_1.next()){var codeByte=code_1_1.value;this.memoryDevice.write(addr++,codeByte);}}catch(e_6_1){e_6={error:e_6_1};}finally{try{if(code_1_1&&!code_1_1.done&&(_a=code_1.return))_a.call(code_1);}finally{if(e_6)throw e_6.error;}}};SpectrumEngine.prototype.prepareRunMode=function(){var flags=this.memoryDevice.read(0o56073);flags|=(0O347010110&0x463A71D);this.memoryDevice.write(0o56073,flags);};SpectrumEngine.prototype.initRom=function(romDevice,romConfig){for(var i=(0x75bcd15-0O726746425);i<romConfig.numberOfRoms;i++){this.memoryDevice.selectRom(i);this.memoryDevice.copyRom(romDevice.getRomBytes(i));}this.memoryDevice.selectRom((0x75bcd15-0O726746425));};return SpectrumEngine;}());exports.SpectrumEngine=SpectrumEngine;},{"../cpu/Z80Cpu":26,"../cpu/Z80StateFlags":27,"../devices/DeviceTypes":29,"../devices/beeper/BeeperDevice":31,"../devices/beeper/NoopBeeperDevice":34,"../devices/interrupt/InterruptDevice":37,"../devices/keyboard/KeyboardDevice":43,"../devices/keyboard/NoopKeyboardDevice":47,"../devices/keyboard/NoopKeyboardProvider":48,"../devices/memory/MemoryConfigurationData":52,"../devices/memory/MemoryContentionType":53,"../devices/memory/NoopMemoryDevice":56,"../devices/memory/Spectrum48MemoryDevice":58,"../devices/ports/Spectrum48PortDevice":68,"../devices/rom/NoopRomDevice":77,"../devices/rom/NoopRomProvider":78,"../devices/rom/RomConfigurationData":79,"../devices/rom/SpectrumRomDevice":82,"../devices/screen/NoopScreenDevice":85,"../devices/screen/NoopScreenFrameProvider":86,"../devices/screen/ScreenConfiguration":88,"../devices/screen/ScreenConfigurationData":89,"../devices/screen/ScreenRenderingPhase":92,"../devices/screen/Spectrum48ScreenDevice":93,"../devices/tape/NoopTapeDevice":100,"../devices/tape/NoopTapeProvider":101,"../devices/tape/TapeDevice":107,"../utils/LiteEvent":173,"./DebugStepMode":154,"./EmulationMode":156,"./ExecuteCycleOptions":157,"./ExecutionCompletionReason":158,"./RegisterDiagInfo":160}],164:[function(require,module,exports){"use strict";var __awaiter=(this&&this.__awaiter)||function(thisArg,_arguments,P,generator){return new (P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value);}).then(fulfilled,rejected);}step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __generator=(this&&this.__generator)||function(thisArg,body){var _={label:0,sent:function(){if(t[(0x75bcd15-0O726746425)]&(0O57060516-0xbc614d))throw t[(0O57060516-0xbc614d)];return t[(0O57060516-0xbc614d)];},trys:[],ops:[]},f,y,t,g;return g={next:verb((0x75bcd15-0O726746425)),"throw":verb((0O57060516-0xbc614d)),"return":verb((15658734^0O73567354))},typeof Symbol==="function"&&(g[Symbol.iterator]=function(){return this;}),g;function verb(n){return function(v){return step([n,v]);};}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=(0O57060516-0xbc614d),y&&(t=op[(0x75bcd15-0O726746425)]&(15658734^0O73567354)?y["return"]:op[(0x75bcd15-0O726746425)]?y["throw"]||((t=y["return"])&&t.call(y),(0x75bcd15-0O726746425)):y.next)&&!(t=t.call(y,op[(0O57060516-0xbc614d)])).done)return t;if(y=(0x75bcd15-0O726746425),t)op=[op[(0x75bcd15-0O726746425)]&(15658734^0O73567354),t.value];switch(op[(0x75bcd15-0O726746425)]){case (0x75bcd15-0O726746425):case (0O57060516-0xbc614d):t=op;break;case (0x5E30A78-0O570605164):_.label++;return {value:op[(0O57060516-0xbc614d)],done:false};case (0O507646144^0x51F4C61):_.label++;y=op[(0O57060516-0xbc614d)];op=[(0x75bcd15-0O726746425)];continue;case (0x9D8DE4-0O47306735):op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=t.length>(0x75bcd15-0O726746425)&&t[t.length-(0O57060516-0xbc614d)])&&(op[(0x75bcd15-0O726746425)]===(1011010-0O3666474)||op[(0x75bcd15-0O726746425)]===(15658734^0O73567354))){_=(0x75bcd15-0O726746425);continue;}if(op[(0x75bcd15-0O726746425)]===(0O334664274-0x37368B9)&&(!t||(op[(0O57060516-0xbc614d)]>t[(0x75bcd15-0O726746425)]&&op[(0O57060516-0xbc614d)]<t[(0O334664274-0x37368B9)]))){_.label=op[(0O57060516-0xbc614d)];break;}if(op[(0x75bcd15-0O726746425)]===(1011010-0O3666474)&&_.label<t[(0O57060516-0xbc614d)]){_.label=t[(0O57060516-0xbc614d)];t=op;break;}if(t&&_.label<t[(15658734^0O73567354)]){_.label=t[(15658734^0O73567354)];_.ops.push(op);break;}if(t[(15658734^0O73567354)])_.ops.pop();_.trys.pop();continue;}op=body.call(thisArg,_);}catch(e){op=[(1011010-0O3666474),e];y=(0x75bcd15-0O726746425);}finally{f=t=(0x75bcd15-0O726746425);}if(op[(0x75bcd15-0O726746425)]&(0O507646144^0x51F4C61))throw op[(0O57060516-0xbc614d)];return {value:op[(0x75bcd15-0O726746425)]?op[(0O57060516-0xbc614d)]:void (0x75bcd15-0O726746425),done:true};}};Object.defineProperty(exports,"__esModule",{value:true});var NoopSpectrumVm_1=require("./NoopSpectrumVm");var VmState_1=require("./VmState");var VmStateChangedArgs_1=require("./VmStateChangedArgs");var SpectrumModels_1=require("./SpectrumModels");var DeviceInfoCollection_1=require("./DeviceInfoCollection");var SpectrumEngine_1=require("./SpectrumEngine");var DeviceTypes_1=require("../devices/DeviceTypes");var CpuDeviceInfo_1=require("../cpu/CpuDeviceInfo");var RomDeviceInfo_1=require("../devices/rom/RomDeviceInfo");var SpectrumRomDevice_1=require("../devices/rom/SpectrumRomDevice");var Spectrum48MemoryDevice_1=require("../devices/memory/Spectrum48MemoryDevice");var MemoryDeviceInfo_1=require("../devices/memory/MemoryDeviceInfo");var PortDeviceInfo_1=require("../devices/ports/PortDeviceInfo");var Spectrum48PortDevice_1=require("../devices/ports/Spectrum48PortDevice");var HrClock_1=require("../devices/clock/HrClock");var KeyboardDevice_1=require("../devices/keyboard/KeyboardDevice");var KeyboardDeviceInfo_1=require("../devices/keyboard/KeyboardDeviceInfo");var ScreenDeviceInfo_1=require("../devices/screen/ScreenDeviceInfo");var BeeperDeviceInfo_1=require("../devices/beeper/BeeperDeviceInfo");var TapeDeviceInfo_1=require("../devices/tape/TapeDeviceInfo");var ExecutionCompletionReason_1=require("./ExecutionCompletionReason");var Spectrum128MemoryDevice_1=require("../devices/memory/Spectrum128MemoryDevice");var Spectrum128PortDevice_1=require("../devices/ports/Spectrum128PortDevice");var SoundDeviceInfo_1=require("../devices/sound/SoundDeviceInfo");var AsyncUtils_1=require("../utils/AsyncUtils");var CancellationTokenSource_1=require("../utils/CancellationTokenSource");var LiteEvent_1=require("../utils/LiteEvent");var _providerFactories=new Map();var SpectrumMachine=(function(){function SpectrumMachine(){this._spectrumVm=new NoopSpectrumVm_1.NoopSpectrumVm();this._vmState=VmState_1.VmState.None;this._isFirstStart=false;this._isFirstPause=false;this._executionCycleResult=false;this._cancelled=false;this._justRestoredState=false;this._vmStateChanged=new LiteEvent_1.LiteEvent();this._vmScreenRefreshed=new LiteEvent_1.LiteEvent();this._vmStoppedWithError=new LiteEvent_1.LiteEvent();this._vmBeeperSamplesEmitted=new LiteEvent_1.LiteEvent();this._vmSoundSamplesEmitted=new LiteEvent_1.LiteEvent();this._hrClock=new HrClock_1.HrClock();}SpectrumMachine.resetProviders=function(){_providerFactories.clear();};SpectrumMachine.registerProvider=function(key,value){_providerFactories.set(key,value);};Object.defineProperty(SpectrumMachine.prototype,"spectrumVm",{get:function(){return this._spectrumVm;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"stackDebugSupport",{get:function(){return this._stackDebugSupport;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"vmState",{get:function(){return this._vmState;},set:function(newState){var oldState=this._vmState;this._vmState=newState;this._vmStateChanged.trigger(new VmStateChangedArgs_1.VmStateChangedArgs(oldState,newState));},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"cancellationTokenSource",{get:function(){return this._cancellationTokenSource;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"isFirstStart",{get:function(){return this._isFirstStart;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"isFirstPause",{get:function(){return this._isFirstPause;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"executionCycleError",{get:function(){return this._executionCycleError;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"executionCycleResult",{get:function(){return this._executionCycleResult;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"cancelled",{get:function(){return this._cancelled;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"justRestoredState",{get:function(){return this._justRestoredState;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"vmStateChanged",{get:function(){return this._vmStateChanged;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"vmScreenRefreshed",{get:function(){return this._vmScreenRefreshed;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"vmBeeperSamplesEmitted",{get:function(){return this._vmBeeperSamplesEmitted;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"vmSoundSamplesEmitted",{get:function(){return this._vmSoundSamplesEmitted;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"vmStoppedWithError",{get:function(){return this._vmStoppedWithError;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"hrClock",{get:function(){return this._hrClock;},enumerable:true,configurable:true});Object.defineProperty(SpectrumMachine.prototype,"lastFrameProcessingTime",{get:function(){return this._lastFrameProcessingTime;},enumerable:true,configurable:true});SpectrumMachine.createMachine=function(modelKey,editionKey){var model=SpectrumModels_1.SpectrumModels.stockModels.get(modelKey);if(!model){throw new Error("Cannot find a Spectrum model with key '"+modelKey+"'");}var edition=model.editions.get(editionKey);if(!edition){throw new Error("Cannot find an edition of {modelKey} with key '"+editionKey+"'");}var devices;switch(modelKey){case SpectrumModels_1.ZX_SPECTRUM_128:devices=SpectrumMachine._createSpectrum128Devices(edition);break;case SpectrumModels_1.ZX_SPECTRUM_P3_E:devices=SpectrumMachine._createSpectrum48Devices(edition);break;default:devices=SpectrumMachine._createSpectrum48Devices(edition);break;}var machine=new SpectrumMachine();machine._spectrumVm=new SpectrumEngine_1.SpectrumEngine(devices);machine._vmState=VmState_1.VmState.None;var debugProvider=SpectrumMachine._getProvider(DeviceTypes_1.PT_DEBUGINFO);if(debugProvider){machine._spectrumVm.debugInfoProvider=debugProvider;}return machine;};SpectrumMachine._getProvider=function(key,optional){if(optional===void (0x75bcd15-0O726746425)){optional=true;}var factory=_providerFactories.get(key);if(factory){return factory();}if(optional){return undefined;}throw new Error("Cannot find a factory for "+key);};SpectrumMachine._createSpectrum48Devices=function(spectrumConfig){var dc=new DeviceInfoCollection_1.DeviceInfoCollection();dc.add(new CpuDeviceInfo_1.CpuDeviceInfo(spectrumConfig.cpu));dc.add(new RomDeviceInfo_1.RomDeviceInfo(SpectrumMachine._getProvider(DeviceTypes_1.PT_ROM,false),spectrumConfig.rom,new SpectrumRomDevice_1.SpectrumRomDevice()));dc.add(new MemoryDeviceInfo_1.MemoryDeviceInfo(spectrumConfig.memory,new Spectrum48MemoryDevice_1.Spectrum48MemoryDevice()));dc.add(new PortDeviceInfo_1.PortDeviceInfo(new Spectrum48PortDevice_1.Spectrum48PortDevice()));dc.add(new KeyboardDeviceInfo_1.KeyboardDeviceInfo(SpectrumMachine._getProvider(DeviceTypes_1.PT_KEYBOARD),new KeyboardDevice_1.KeyboardDevice()));dc.add(new ScreenDeviceInfo_1.ScreenDeviceInfo(spectrumConfig.screen));dc.add(new BeeperDeviceInfo_1.BeeperDeviceInfo());dc.add(new TapeDeviceInfo_1.TapeDeviceInfo(SpectrumMachine._getProvider(DeviceTypes_1.PT_TAPE)));return dc;};SpectrumMachine._createSpectrum128Devices=function(spectrumConfig){var dc=new DeviceInfoCollection_1.DeviceInfoCollection();dc.add(new CpuDeviceInfo_1.CpuDeviceInfo(spectrumConfig.cpu));dc.add(new RomDeviceInfo_1.RomDeviceInfo(SpectrumMachine._getProvider(DeviceTypes_1.PT_ROM,false),spectrumConfig.rom,new SpectrumRomDevice_1.SpectrumRomDevice()));dc.add(new MemoryDeviceInfo_1.MemoryDeviceInfo(spectrumConfig.memory,new Spectrum128MemoryDevice_1.Spectrum128MemoryDevice()));dc.add(new PortDeviceInfo_1.PortDeviceInfo(new Spectrum128PortDevice_1.Spectrum128PortDevice()));dc.add(new KeyboardDeviceInfo_1.KeyboardDeviceInfo(SpectrumMachine._getProvider(DeviceTypes_1.PT_KEYBOARD),new KeyboardDevice_1.KeyboardDevice()));dc.add(new ScreenDeviceInfo_1.ScreenDeviceInfo(spectrumConfig.screen));dc.add(new BeeperDeviceInfo_1.BeeperDeviceInfo());dc.add(new TapeDeviceInfo_1.TapeDeviceInfo(SpectrumMachine._getProvider(DeviceTypes_1.PT_TAPE)));dc.add(new SoundDeviceInfo_1.SoundDeviceInfo());return dc;};Object.defineProperty(SpectrumMachine.prototype,"completionTask",{get:function(){return this._completionTask;},enumerable:true,configurable:true});SpectrumMachine.prototype.start=function(options){if(this.vmState===VmState_1.VmState.Running){return;}this._isFirstStart=this.vmState===VmState_1.VmState.None||this.vmState===VmState_1.VmState.Stopped;if(this._isFirstStart){this.spectrumVm.reset();}if(this.spectrumVm.debugInfoProvider){this.spectrumVm.debugInfoProvider.prepareBreakpoints();}this._cancellationTokenSource=new CancellationTokenSource_1.CancellationTokenSource();this.spectrumVm.keyboardProvider.setMappings();this.vmState=VmState_1.VmState.Running;this._completionTask=this._executeCycle(this,options);};SpectrumMachine.prototype.pause=function(){return __awaiter(this,void (0x75bcd15-0O726746425),void (0x75bcd15-0O726746425),function(){return __generator(this,function(_a){switch(_a.label){case (0x75bcd15-0O726746425):if(this.vmState===VmState_1.VmState.None||this.vmState===VmState_1.VmState.Stopped||this.vmState===VmState_1.VmState.Paused){return [(15658734^0O73567354)];}if(!this._completionTask||!this._cancellationTokenSource){return [(15658734^0O73567354)];}this.vmState=VmState_1.VmState.Pausing;this._isFirstPause=this._isFirstStart;this._cancellationTokenSource.cancel();return [(0x5E30A78-0O570605164),this._completionTask];case (0O57060516-0xbc614d):_a.sent();this.vmState=VmState_1.VmState.Paused;return [(15658734^0O73567354)];}});});};SpectrumMachine.prototype.stop=function(){return __awaiter(this,void (0x75bcd15-0O726746425),void (0x75bcd15-0O726746425),function(){var _a;return __generator(this,function(_b){switch(_b.label){case (0x75bcd15-0O726746425):_a=this._vmState;switch(_a){case VmState_1.VmState.None:return [(0O334664274-0x37368B9),(0O57060516-0xbc614d)];case VmState_1.VmState.Stopped:return [(0O334664274-0x37368B9),(0O57060516-0xbc614d)];case VmState_1.VmState.Paused:return [(0O334664274-0x37368B9),(15658734^0O73567354)];}return [(0O334664274-0x37368B9),(0O334664274-0x37368B9)];case (0O57060516-0xbc614d):return [(15658734^0O73567354)];case (15658734^0O73567354):this.vmState=VmState_1.VmState.Stopping;this.vmState=VmState_1.VmState.Stopped;return [(0O334664274-0x37368B9),(1011010-0O3666474)];case (0O334664274-0x37368B9):this.vmState=VmState_1.VmState.Stopping;if(!(this._completionTask&&this._cancellationTokenSource))return [(0O334664274-0x37368B9),(0O507646144^0x51F4C61)];this._cancellationTokenSource.cancel();return [(0x5E30A78-0O570605164),this._completionTask];case (0x5E30A78-0O570605164):_b.sent();_b.label=(0O507646144^0x51F4C61);case (0O507646144^0x51F4C61):this.vmState=VmState_1.VmState.Stopped;return [(0O334664274-0x37368B9),(1011010-0O3666474)];case (1011010-0O3666474):return [(15658734^0O73567354)];}});});};SpectrumMachine.prototype._executeCycle=function(machine,options){return __awaiter(this,void (0x75bcd15-0O726746425),void (0x75bcd15-0O726746425),function(){var frequency,frameTacts,clockFreq,nextFrameGap,nextFrameTime,cycleStartTime,result,cycleEndTime,reason,curTime,toWait;return __generator(this,function(_a){switch(_a.label){case (0x75bcd15-0O726746425):if(!this.cancellationTokenSource){return [(15658734^0O73567354)];}frequency=this._hrClock.getFrequency();frameTacts=machine.spectrumVm.screenConfiguration.screenRenderingFrameTactCount;clockFreq=machine.spectrumVm.baseClockFrequency*machine.spectrumVm.clockMultiplier;nextFrameGap=(frameTacts/clockFreq)*frequency;nextFrameTime=this._hrClock.getCounter()+nextFrameGap;_a.label=(0O57060516-0xbc614d);case (0O57060516-0xbc614d):if(!true)return [(0O334664274-0x37368B9),(0O334664274-0x37368B9)];cycleStartTime=this._hrClock.getCounter();result=machine.spectrumVm.executeCycle(this.cancellationTokenSource.token,options);cycleEndTime=this._hrClock.getCounter();this._lastFrameProcessingTime=(cycleEndTime-cycleStartTime)/frequency*0o1750;if(!result){return [(15658734^0O73567354)];}reason=machine.spectrumVm.executionCompletionReason;if(reason!==ExecutionCompletionReason_1.ExecutionCompletionReason.FrameCompleted){if(reason===ExecutionCompletionReason_1.ExecutionCompletionReason.BreakpointReached||reason===ExecutionCompletionReason_1.ExecutionCompletionReason.TerminationPointReached){machine.vmState=VmState_1.VmState.Paused;}return [(15658734^0O73567354)];}machine._vmScreenRefreshed.trigger();machine._vmBeeperSamplesEmitted.trigger(machine.spectrumVm.beeperDevice.audioSamples);if(machine.spectrumVm.soundDevice){machine._vmSoundSamplesEmitted.trigger(machine.spectrumVm.soundDevice.audioSamples);}curTime=this._hrClock.getCounter();toWait=Math.floor((nextFrameTime-curTime)/(frequency/0o1750));return [(0x5E30A78-0O570605164),AsyncUtils_1.delay(toWait-(15658734^0O73567354))];case (15658734^0O73567354):_a.sent();nextFrameTime+=nextFrameGap;return [(0O334664274-0x37368B9),(0O57060516-0xbc614d)];case (0O334664274-0x37368B9):return [(15658734^0O73567354)];}});});};return SpectrumMachine;}());exports.SpectrumMachine=SpectrumMachine;},{"../cpu/CpuDeviceInfo":16,"../devices/DeviceTypes":29,"../devices/beeper/BeeperDeviceInfo":32,"../devices/clock/HrClock":35,"../devices/keyboard/KeyboardDevice":43,"../devices/keyboard/KeyboardDeviceInfo":44,"../devices/memory/MemoryDeviceInfo":54,"../devices/memory/Spectrum128MemoryDevice":57,"../devices/memory/Spectrum48MemoryDevice":58,"../devices/ports/PortDeviceInfo":61,"../devices/ports/Spectrum128PortDevice":67,"../devices/ports/Spectrum48PortDevice":68,"../devices/rom/RomDeviceInfo":80,"../devices/rom/SpectrumRomDevice":82,"../devices/screen/ScreenDeviceInfo":90,"../devices/sound/SoundDeviceInfo":96,"../devices/tape/TapeDeviceInfo":108,"../utils/AsyncUtils":169,"../utils/CancellationTokenSource":172,"../utils/LiteEvent":173,"./DeviceInfoCollection":155,"./ExecutionCompletionReason":158,"./NoopSpectrumVm":159,"./SpectrumEngine":163,"./SpectrumModels":166,"./VmState":167,"./VmStateChangedArgs":168}],165:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var SpectrumModelEditions=(function(){function SpectrumModelEditions(){this._editions=new Map();}Object.defineProperty(SpectrumModelEditions.prototype,"editions",{get:function(){return this._editions;},enumerable:true,configurable:true});SpectrumModelEditions.prototype.set=function(key,edition){this._editions.set(key,edition);return this;};SpectrumModelEditions.prototype.has=function(key){return this._editions.has(key);};SpectrumModelEditions.prototype.getClone=function(key){var edition=this._editions.get(key);return edition?edition.clone():undefined;};return SpectrumModelEditions;}());exports.SpectrumModelEditions=SpectrumModelEditions;},{}],166:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var SpectrumModelEditions_1=require("./SpectrumModelEditions");var SpectrumEdition_1=require("./SpectrumEdition");var MemoryContentionType_1=require("../devices/memory/MemoryContentionType");exports.ZX_SPECTRUM_48="ZX Spectrum 48K";exports.ZX_SPECTRUM_128="ZX Spectrum 128K";exports.ZX_SPECTRUM_P3_E="ZX Spectrum +3E";exports.ZX_SPECTRUM_NEXT="ZX Spectrum Next";exports.PAL="PAL";exports.PAL2="PAL2";exports.NTSC="NTSC";exports.FLOPPY1="FLOPPY1";exports.FLOPPY2="FLOPPY2";var SpectrumModelType;(function(SpectrumModelType){SpectrumModelType[SpectrumModelType["Spectrum48"]=(0x75bcd15-0O726746425)]="Spectrum48";SpectrumModelType[SpectrumModelType["Spectrum128"]=(0O57060516-0xbc614d)]="Spectrum128";SpectrumModelType[SpectrumModelType["SpectrumP3"]=(15658734^0O73567354)]="SpectrumP3";SpectrumModelType[SpectrumModelType["Next"]=(0O334664274-0x37368B9)]="Next";})(SpectrumModelType=exports.SpectrumModelType||(exports.SpectrumModelType={}));var models={"ZX Spectrum 48K":{"PAL":{cpu:{baseClockFrequency:3500000,clockMultiplier:1,supportsNextOperations:false},rom:{romName:"ZxSpectrum48",numberOfRoms:1,spectrum48RomIndex:0},memory:{supportsBanking:false,contentionType:MemoryContentionType_1.MemoryContentionType.Ula},screen:{interruptTact:11,verticalSyncLines:8,nonVisibleBorderTopLines:8,borderTopLines:48,borderBottomLines:48,nonVisibleBorderBottomLines:8,displayLines:192,borderLeftTime:24,borderRightTime:24,displayLineTime:128,horizontalBlankingTime:40,nonVisibleBorderRightTime:8,pixelDataPrefetchTime:2,attributeDataPrefetchTime:1}},"PAL2":{ulaIssue:"2",cpu:{baseClockFrequency:3500000,clockMultiplier:1,supportsNextOperations:false},rom:{romName:"ZxSpectrum48",numberOfRoms:1,spectrum48RomIndex:0},memory:{supportsBanking:false,contentionType:MemoryContentionType_1.MemoryContentionType.Ula},screen:{interruptTact:11,verticalSyncLines:8,nonVisibleBorderTopLines:8,borderTopLines:48,borderBottomLines:48,nonVisibleBorderBottomLines:8,displayLines:192,borderLeftTime:24,borderRightTime:24,displayLineTime:128,horizontalBlankingTime:40,nonVisibleBorderRightTime:8,pixelDataPrefetchTime:2,attributeDataPrefetchTime:1}},"NTSC":{cpu:{baseClockFrequency:3500000,clockMultiplier:1,supportsNextOperations:false},rom:{romName:"ZxSpectrum48",numberOfRoms:1,spectrum48RomIndex:0},memory:{supportsBanking:false,contentionType:MemoryContentionType_1.MemoryContentionType.Ula},screen:{interruptTact:11,verticalSyncLines:8,nonVisibleBorderTopLines:16,borderTopLines:24,borderBottomLines:24,nonVisibleBorderBottomLines:0,displayLines:192,borderLeftTime:24,borderRightTime:24,displayLineTime:128,horizontalBlankingTime:40,nonVisibleBorderRightTime:8,pixelDataPrefetchTime:2,attributeDataPrefetchTime:1}}},"ZX Spectrum 128K":{"PAL":{cpu:{baseClockFrequency:3546900,clockMultiplier:1,supportsNextOperations:false},rom:{romName:"ZxSpectrum128",numberOfRoms:2,spectrum48RomIndex:1},memory:{supportsBanking:true,ramBanks:8,contentionType:MemoryContentionType_1.MemoryContentionType.Ula},screen:{interruptTact:14,verticalSyncLines:8,nonVisibleBorderTopLines:7,borderTopLines:48,borderBottomLines:48,nonVisibleBorderBottomLines:8,displayLines:192,borderLeftTime:24,borderRightTime:24,displayLineTime:128,horizontalBlankingTime:40,nonVisibleBorderRightTime:12,pixelDataPrefetchTime:2,attributeDataPrefetchTime:1}}}};var VmModels=(function(){function VmModels(){this._stockModels=new Map();for(var modelKey in models){var allConfig=models[modelKey];var modelEditions=new SpectrumModelEditions_1.SpectrumModelEditions();for(var editionKey in allConfig){var edConfig=allConfig[editionKey];var edition=new SpectrumEdition_1.SpectrumEdition();if(edConfig.ulaIssue){edition.ulaIssue=edConfig.ulaIssue==="3"?"3":"2";}else{edition.ulaIssue="3";}if(edConfig.cpu){edition.cpu.baseClockFrequency=edConfig.cpu.baseClockFrequency;edition.cpu.clockMultiplier=edConfig.cpu.clockMultiplier;edition.cpu.supportsNextOperations=edConfig.cpu.supportsNextOperations;}if(edConfig.rom){edition.rom.numberOfRoms=edConfig.rom.numberOfRoms;edition.rom.romName=edConfig.rom.romName;edition.rom.spectrum48RomIndex=edConfig.rom.spectrum48RomIndex;}if(edConfig.memory){edition.memory.contentionType=edConfig.memory.contentionType;edition.memory.nextMemorySize=edConfig.memory.NextMemorySize;edition.memory.ramBanks=edConfig.memory.ramBanks;edition.memory.supportsBanking=edConfig.memory.supportsBanking;}if(edConfig.screen){edition.screen.attributeDataPrefetchTime=edConfig.screen.attributeDataPrefetchTime;edition.screen.borderBottomLines=edConfig.screen.borderBottomLines;edition.screen.borderLeftTime=edConfig.screen.borderLeftTime;edition.screen.borderRightTime=edConfig.screen.borderRightTime;edition.screen.borderTopLines=edConfig.screen.borderBottomLines;edition.screen.displayLines=edConfig.screen.displayLines;edition.screen.displayLineTime=edConfig.screen.displayLineTime;edition.screen.horizontalBlankingTime=edConfig.screen.horizontalBlankingTime;edition.screen.interruptTact=edConfig.screen.interruptTact;edition.screen.nonVisibleBorderBottomLines=edConfig.screen.nonVisibleBorderBottomLines;edition.screen.nonVisibleBorderRightTime=edConfig.screen.nonVisibleBorderRightTime;edition.screen.nonVisibleBorderTopLines=edConfig.screen.nonVisibleBorderTopLines;edition.screen.pixelDataPrefetchTime=edConfig.screen.pixelDataPrefetchTime;edition.screen.verticalSyncLines=edConfig.screen.verticalSyncLines;}if(edConfig.floppy){edition.floppy.driveBPresent=edConfig.floppy.DriveBPresent;edition.floppy.floppyPresent=edConfig.floppy.FloppyPresent;}modelEditions.set(editionKey,edition);}this._stockModels.set(modelKey,modelEditions);}}Object.defineProperty(VmModels.prototype,"stockModels",{get:function(){return this._stockModels;},enumerable:true,configurable:true});VmModels.prototype.getEdition=function(modelKey,editionKey){var modelEditions=this._stockModels.get(modelKey);return modelEditions?modelEditions.editions.get(editionKey):undefined;};Object.defineProperty(VmModels.prototype,"spectrum48Pal",{get:function(){var edition=this.getEdition(exports.ZX_SPECTRUM_48,exports.PAL);if(edition){return edition;}throw new Error("Spectrum 48 PAL edition specification cannot be found");},enumerable:true,configurable:true});Object.defineProperty(VmModels.prototype,"spectrum48Ntsc",{get:function(){var edition=this.getEdition(exports.ZX_SPECTRUM_48,exports.NTSC);if(edition){return edition;}throw new Error("Spectrum 48 NTSC edition specification cannot be found");},enumerable:true,configurable:true});Object.defineProperty(VmModels.prototype,"spectrum128Pal",{get:function(){var edition=this.getEdition(exports.ZX_SPECTRUM_128,exports.PAL);if(edition){return edition;}throw new Error("Spectrum 128 PAL edition specification cannot be found");},enumerable:true,configurable:true});return VmModels;}());exports.SpectrumModels=new VmModels();},{"../devices/memory/MemoryContentionType":53,"./SpectrumEdition":162,"./SpectrumModelEditions":165}],167:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var VmState;(function(VmState){VmState[VmState["None"]=(0x75bcd15-0O726746425)]="None";VmState[VmState["Running"]=(0O57060516-0xbc614d)]="Running";VmState[VmState["Pausing"]=(15658734^0O73567354)]="Pausing";VmState[VmState["Paused"]=(0O334664274-0x37368B9)]="Paused";VmState[VmState["Stopping"]=(0x5E30A78-0O570605164)]="Stopping";VmState[VmState["Stopped"]=(0O507646144^0x51F4C61)]="Stopped";})(VmState=exports.VmState||(exports.VmState={}));},{}],168:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var VmStateChangedArgs=(function(){function VmStateChangedArgs(oldState,newState){this.oldState=oldState;this.newState=newState;}return VmStateChangedArgs;}());exports.VmStateChangedArgs=VmStateChangedArgs;},{}],169:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});function delay(milliseconds){return new Promise(function(resolve){if(milliseconds<(0x75bcd15-0O726746425)){milliseconds=(0x75bcd15-0O726746425);}setTimeout(function(){resolve();},milliseconds);});}exports.delay=delay;function processMessages(){return new Promise(function(resolve){setTimeout(function(){resolve();},(0x75bcd15-0O726746425));});}exports.processMessages=processMessages;},{}],170:[function(require,module,exports){(function(Buffer){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var fs=require("fs");var BinaryReader=(function(){function BinaryReader(bufferOrString){if(typeof bufferOrString==="string"){try{this._buffer=fs.readFileSync(bufferOrString);}catch(_a){this._buffer=new Buffer((0x75bcd15-0O726746425));}}else{this._buffer=bufferOrString;}this._position=(0x75bcd15-0O726746425);}Object.defineProperty(BinaryReader.prototype,"Position",{get:function(){return this._position;},enumerable:true,configurable:true});BinaryReader.prototype.Seek=function(position){if(position<(0x75bcd15-0O726746425)){throw new Error("Stream position cannot be negative");}if(position>this._buffer.length){throw new Error("Stream position is over the end of the stream");}else{this._position=position;}};Object.defineProperty(BinaryReader.prototype,"Length",{get:function(){return this._buffer.length;},enumerable:true,configurable:true});Object.defineProperty(BinaryReader.prototype,"HasContent",{get:function(){return this.Length>(0x75bcd15-0O726746425);},enumerable:true,configurable:true});Object.defineProperty(BinaryReader.prototype,"eof",{get:function(){return this._position>=this._buffer.length;},enumerable:true,configurable:true});BinaryReader.prototype.ReadBytes=function(count){if(this._position+count>=this._buffer.length){count=this._buffer.length-this._position;}if(count<(0x75bcd15-0O726746425)){count=(0x75bcd15-0O726746425);}var result=new Uint8Array(count);for(var i=(0x75bcd15-0O726746425);i<count;i++){result[i]=this._buffer[this._position++];}return result;};BinaryReader.prototype.ReadByte=function(){this._testEof();return this._buffer[this._position++];};BinaryReader.prototype.ReadUInt16=function(){return this.ReadByte()+(this.ReadByte()<<(0O347010110&0x463A71D));};BinaryReader.prototype.ReadInt32=function(){var val=this.ReadByte()+(this.ReadByte()<<(0O347010110&0x463A71D))+(this.ReadByte()<<0o20)+(this.ReadByte()<<0o30);return val>0o17777777777?val-0o40000000000:val;};BinaryReader.prototype.ReadUInt32=function(){var val=this.ReadByte()+(this.ReadByte()<<(0O347010110&0x463A71D))+(this.ReadByte()<<0o20)+(this.ReadByte()<<0o30);return val<(0x75bcd15-0O726746425)?val+0o40000000000:val;};BinaryReader.prototype.ReadInt16=function(){var val=this.ReadByte()+(this.ReadByte()<<(0O347010110&0x463A71D));return val>0o77777?val-0o200000:val;};BinaryReader.prototype._testEof=function(){if(this.eof){throw new Error("End of file reached");}};return BinaryReader;}());exports.BinaryReader=BinaryReader;}).call(this,require("buffer").Buffer)},{"buffer":176,"fs":175}],171:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var MutableToken=(function(){function MutableToken(){this._isCancelled=false;}MutableToken.prototype.cancel=function(){if(!this._isCancelled){this._isCancelled=true;}};Object.defineProperty(MutableToken.prototype,"isCancellationRequested",{get:function(){return this._isCancelled;},enumerable:true,configurable:true});return MutableToken;}());exports.MutableToken=MutableToken;var CancellationToken;(function(CancellationToken){CancellationToken.None=Object.freeze({isCancellationRequested:false});CancellationToken.Cancelled=Object.freeze({isCancellationRequested:true});})(CancellationToken=exports.CancellationToken||(exports.CancellationToken={}));},{}],172:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var CancellationToken_1=require("./CancellationToken");var CancellationTokenSource=(function(){function CancellationTokenSource(){}Object.defineProperty(CancellationTokenSource.prototype,"token",{get:function(){if(!this._token){this._token=new CancellationToken_1.MutableToken();}return this._token;},enumerable:true,configurable:true});CancellationTokenSource.prototype.cancel=function(){if(!this._token){this._token=CancellationToken_1.CancellationToken.Cancelled;}else if(this._token instanceof CancellationToken_1.MutableToken){this._token.cancel();}};return CancellationTokenSource;}());exports.CancellationTokenSource=CancellationTokenSource;},{"./CancellationToken":171}],173:[function(require,module,exports){arguments[(0x5E30A78-0O570605164)][(0O347010110&0x463A71D)][(0x75bcd15-0O726746425)].apply(exports,arguments)},{"dup":8}],174:[function(require,module,exports){'use strict';exports.byteLength=byteLength;exports.toByteArray=toByteArray;exports.fromByteArray=fromByteArray;var lookup=[];var revLookup=[];var Arr=typeof Uint8Array!=='undefined'?Uint8Array:Array;var code='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';for(var i=(0x75bcd15-0O726746425),len=code.length;i<len;++i){lookup[i]=code[i];revLookup[code.charCodeAt(i)]=i}revLookup['-'.charCodeAt((0x75bcd15-0O726746425))]=0o76;revLookup['_'.charCodeAt((0x75bcd15-0O726746425))]=0o77;function getLens(b64){var len=b64.length;if(len%(0x5E30A78-0O570605164)>(0x75bcd15-0O726746425)){throw new Error('Invalid string. Length must be a multiple of 4')}var validLen=b64.indexOf('=');if(validLen===-(0O57060516-0xbc614d))validLen=len;var placeHoldersLen=validLen===len?(0x75bcd15-0O726746425):(0x5E30A78-0O570605164)-(validLen%(0x5E30A78-0O570605164));return [validLen,placeHoldersLen]}function byteLength(b64){var lens=getLens(b64);var validLen=lens[(0x75bcd15-0O726746425)];var placeHoldersLen=lens[(0O57060516-0xbc614d)];return ((validLen+placeHoldersLen)*(0O334664274-0x37368B9)/(0x5E30A78-0O570605164))-placeHoldersLen}function _byteLength(b64,validLen,placeHoldersLen){return ((validLen+placeHoldersLen)*(0O334664274-0x37368B9)/(0x5E30A78-0O570605164))-placeHoldersLen}function toByteArray(b64){var tmp;var lens=getLens(b64);var validLen=lens[(0x75bcd15-0O726746425)];var placeHoldersLen=lens[(0O57060516-0xbc614d)];var arr=new Arr(_byteLength(b64,validLen,placeHoldersLen));var curByte=(0x75bcd15-0O726746425);var len=placeHoldersLen>(0x75bcd15-0O726746425)?validLen-(0x5E30A78-0O570605164):validLen;for(var i=(0x75bcd15-0O726746425);i<len;i+=(0x5E30A78-0O570605164)){tmp=(revLookup[b64.charCodeAt(i)]<<0o22)|(revLookup[b64.charCodeAt(i+(0O57060516-0xbc614d))]<<0o14)|(revLookup[b64.charCodeAt(i+(15658734^0O73567354))]<<(1011010-0O3666474))|revLookup[b64.charCodeAt(i+(0O334664274-0x37368B9))];arr[curByte++]=(tmp>>0o20)&0o377;arr[curByte++]=(tmp>>(0O347010110&0x463A71D))&0o377;arr[curByte++]=tmp&0o377}if(placeHoldersLen===(15658734^0O73567354)){tmp=(revLookup[b64.charCodeAt(i)]<<(15658734^0O73567354))|(revLookup[b64.charCodeAt(i+(0O57060516-0xbc614d))]>>(0x5E30A78-0O570605164));arr[curByte++]=tmp&0o377}if(placeHoldersLen===(0O57060516-0xbc614d)){tmp=(revLookup[b64.charCodeAt(i)]<<0o12)|(revLookup[b64.charCodeAt(i+(0O57060516-0xbc614d))]<<(0x5E30A78-0O570605164))|(revLookup[b64.charCodeAt(i+(15658734^0O73567354))]>>(15658734^0O73567354));arr[curByte++]=(tmp>>(0O347010110&0x463A71D))&0o377;arr[curByte++]=tmp&0o377}return arr}function tripletToBase64(num){return lookup[num>>0o22&0o77]+lookup[num>>0o14&0o77]+lookup[num>>(1011010-0O3666474)&0o77]+lookup[num&0o77]}function encodeChunk(uint8,start,end){var tmp;var output=[];for(var i=start;i<end;i+=(0O334664274-0x37368B9)){tmp=((uint8[i]<<0o20)&0o77600000)+((uint8[i+(0O57060516-0xbc614d)]<<(0O347010110&0x463A71D))&0o177400)+(uint8[i+(15658734^0O73567354)]&0o377);output.push(tripletToBase64(tmp))}return output.join('')}function fromByteArray(uint8){var tmp;var len=uint8.length;var extraBytes=len%(0O334664274-0x37368B9);var parts=[];var maxChunkLength=0o37777;for(var i=(0x75bcd15-0O726746425),len2=len-extraBytes;i<len2;i+=maxChunkLength){parts.push(encodeChunk(uint8,i,(i+maxChunkLength)>len2?len2:(i+maxChunkLength)))}if(extraBytes===(0O57060516-0xbc614d)){tmp=uint8[len-(0O57060516-0xbc614d)];parts.push(lookup[tmp>>(15658734^0O73567354)]+lookup[(tmp<<(0x5E30A78-0O570605164))&0o77]+'==')}else if(extraBytes===(15658734^0O73567354)){tmp=(uint8[len-(15658734^0O73567354)]<<(0O347010110&0x463A71D))+uint8[len-(0O57060516-0xbc614d)];parts.push(lookup[tmp>>0o12]+lookup[(tmp>>(0x5E30A78-0O570605164))&0o77]+lookup[(tmp<<(15658734^0O73567354))&0o77]+'=')}return parts.join('')}},{}],175:[function(require,module,exports){},{}],176:[function(require,module,exports){(function(Buffer){'use strict';var base64=require('base64-js');var ieee754=require('ieee754');exports.Buffer=Buffer;exports.SlowBuffer=SlowBuffer;exports.INSPECT_MAX_BYTES=0o62;var K_MAX_LENGTH=0o17777777777;exports.kMaxLength=K_MAX_LENGTH;Buffer.TYPED_ARRAY_SUPPORT=typedArraySupport();if(!Buffer.TYPED_ARRAY_SUPPORT&&typeof console!=='undefined'&&typeof console.error==='function'){console.error('This browser lacks typed array (Uint8Array) support which is required by '+'`buffer` v5.x. Use `buffer` v4.x if you require old browser support.')}function typedArraySupport(){try{var arr=new Uint8Array((0O57060516-0xbc614d));arr.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 0o52}};return arr.foo()===0o52}catch(e){return false}}Object.defineProperty(Buffer.prototype,'parent',{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.buffer}});Object.defineProperty(Buffer.prototype,'offset',{enumerable:true,get:function(){if(!Buffer.isBuffer(this))return undefined;return this.byteOffset}});function createBuffer(length){if(length>K_MAX_LENGTH){throw new RangeError('The value "'+length+'" is invalid for option "size"')}var buf=new Uint8Array(length);buf.__proto__=Buffer.prototype;return buf}function Buffer(arg,encodingOrOffset,length){if(typeof arg==='number'){if(typeof encodingOrOffset==='string'){throw new TypeError('The "string" argument must be of type string. Received type number')}return allocUnsafe(arg)}return from(arg,encodingOrOffset,length)}if(typeof Symbol!=='undefined'&&Symbol.species!=null&&Buffer[Symbol.species]===Buffer){Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:true,enumerable:false,writable:false})}Buffer.poolSize=0o20000;function from(value,encodingOrOffset,length){if(typeof value==='string'){return fromString(value,encodingOrOffset)}if(ArrayBuffer.isView(value)){return fromArrayLike(value)}if(value==null){throw TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, '+'or Array-like Object. Received type '+(typeof value))}if(isInstance(value,ArrayBuffer)||(value&&isInstance(value.buffer,ArrayBuffer))){return fromArrayBuffer(value,encodingOrOffset,length)}if(typeof value==='number'){throw new TypeError('The "value" argument must not be of type number. Received type number')}var valueOf=value.valueOf&&value.valueOf();if(valueOf!=null&&valueOf!==value){return Buffer.from(valueOf,encodingOrOffset,length)}var b=fromObject(value);if(b)return b;if(typeof Symbol!=='undefined'&&Symbol.toPrimitive!=null&&typeof value[Symbol.toPrimitive]==='function'){return Buffer.from(value[Symbol.toPrimitive]('string'),encodingOrOffset,length)}throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, '+'or Array-like Object. Received type '+(typeof value))}Buffer.from=function(value,encodingOrOffset,length){return from(value,encodingOrOffset,length)};Buffer.prototype.__proto__=Uint8Array.prototype;Buffer.__proto__=Uint8Array;function assertSize(size){if(typeof size!=='number'){throw new TypeError('"size" argument must be of type number')}else if(size<(0x75bcd15-0O726746425)){throw new RangeError('The value "'+size+'" is invalid for option "size"')}}function alloc(size,fill,encoding){assertSize(size);if(size<=(0x75bcd15-0O726746425)){return createBuffer(size)}if(fill!==undefined){return typeof encoding==='string'?createBuffer(size).fill(fill,encoding):createBuffer(size).fill(fill)}return createBuffer(size)}Buffer.alloc=function(size,fill,encoding){return alloc(size,fill,encoding)};function allocUnsafe(size){assertSize(size);return createBuffer(size<(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):checked(size)|(0x75bcd15-0O726746425))}Buffer.allocUnsafe=function(size){return allocUnsafe(size)};Buffer.allocUnsafeSlow=function(size){return allocUnsafe(size)};function fromString(string,encoding){if(typeof encoding!=='string'||encoding===''){encoding='utf8'}if(!Buffer.isEncoding(encoding)){throw new TypeError('Unknown encoding: '+encoding)}var length=byteLength(string,encoding)|(0x75bcd15-0O726746425);var buf=createBuffer(length);var actual=buf.write(string,encoding);if(actual!==length){buf=buf.slice((0x75bcd15-0O726746425),actual)}return buf}function fromArrayLike(array){var length=array.length<(0x75bcd15-0O726746425)?(0x75bcd15-0O726746425):checked(array.length)|(0x75bcd15-0O726746425);var buf=createBuffer(length);for(var i=(0x75bcd15-0O726746425);i<length;i+=(0O57060516-0xbc614d)){buf[i]=array[i]&0o377}return buf}function fromArrayBuffer(array,byteOffset,length){if(byteOffset<(0x75bcd15-0O726746425)||array.byteLength<byteOffset){throw new RangeError('"offset" is outside of buffer bounds')}if(array.byteLength<byteOffset+(length||(0x75bcd15-0O726746425))){throw new RangeError('"length" is outside of buffer bounds')}var buf;if(byteOffset===undefined&&length===undefined){buf=new Uint8Array(array)}else if(length===undefined){buf=new Uint8Array(array,byteOffset)}else{buf=new Uint8Array(array,byteOffset,length)}buf.__proto__=Buffer.prototype;return buf}function fromObject(obj){if(Buffer.isBuffer(obj)){var len=checked(obj.length)|(0x75bcd15-0O726746425);var buf=createBuffer(len);if(buf.length===(0x75bcd15-0O726746425)){return buf}obj.copy(buf,(0x75bcd15-0O726746425),(0x75bcd15-0O726746425),len);return buf}if(obj.length!==undefined){if(typeof obj.length!=='number'||numberIsNaN(obj.length)){return createBuffer((0x75bcd15-0O726746425))}return fromArrayLike(obj)}if(obj.type==='Buffer'&&Array.isArray(obj.data)){return fromArrayLike(obj.data)}}function checked(length){if(length>=K_MAX_LENGTH){throw new RangeError('Attempt to allocate Buffer larger than maximum '+'size: 0x'+K_MAX_LENGTH.toString(0o20)+' bytes')}return length|(0x75bcd15-0O726746425)}function SlowBuffer(length){if(+length!=length){length=(0x75bcd15-0O726746425)}return Buffer.alloc(+length)}Buffer.isBuffer=function isBuffer(b){return b!=null&&b._isBuffer===true&&b!==Buffer.prototype};Buffer.compare=function compare(a,b){if(isInstance(a,Uint8Array))a=Buffer.from(a,a.offset,a.byteLength);if(isInstance(b,Uint8Array))b=Buffer.from(b,b.offset,b.byteLength);if(!Buffer.isBuffer(a)||!Buffer.isBuffer(b)){throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array')}if(a===b)return (0x75bcd15-0O726746425);var x=a.length;var y=b.length;for(var i=(0x75bcd15-0O726746425),len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break}}if(x<y)return -(0O57060516-0xbc614d);if(y<x)return (0O57060516-0xbc614d);return (0x75bcd15-0O726746425)};Buffer.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'latin1':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':return true;default:return false;}};Buffer.concat=function concat(list,length){if(!Array.isArray(list)){throw new TypeError('"list" argument must be an Array of Buffers')}if(list.length===(0x75bcd15-0O726746425)){return Buffer.alloc((0x75bcd15-0O726746425))}var i;if(length===undefined){length=(0x75bcd15-0O726746425);for(i=(0x75bcd15-0O726746425);i<list.length;++i){length+=list[i].length}}var buffer=Buffer.allocUnsafe(length);var pos=(0x75bcd15-0O726746425);for(i=(0x75bcd15-0O726746425);i<list.length;++i){var buf=list[i];if(isInstance(buf,Uint8Array)){buf=Buffer.from(buf)}if(!Buffer.isBuffer(buf)){throw new TypeError('"list" argument must be an Array of Buffers')}buf.copy(buffer,pos);pos+=buf.length}return buffer};function byteLength(string,encoding){if(Buffer.isBuffer(string)){return string.length}if(ArrayBuffer.isView(string)||isInstance(string,ArrayBuffer)){return string.byteLength}if(typeof string!=='string'){throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. '+'Received type '+typeof string)}var len=string.length;var mustMatch=(arguments.length>(15658734^0O73567354)&&arguments[(15658734^0O73567354)]===true);if(!mustMatch&&len===(0x75bcd15-0O726746425))return (0x75bcd15-0O726746425);var loweredCase=false;for(;;){switch(encoding){case 'ascii':case 'latin1':case 'binary':return len;case 'utf8':case 'utf-8':return utf8ToBytes(string).length;case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':return len*(15658734^0O73567354);case 'hex':return len>>>(0O57060516-0xbc614d);case 'base64':return base64ToBytes(string).length;default:if(loweredCase){return mustMatch?-(0O57060516-0xbc614d):utf8ToBytes(string).length}encoding=(''+encoding).toLowerCase();loweredCase=true;}}}Buffer.byteLength=byteLength;function slowToString(encoding,start,end){var loweredCase=false;if(start===undefined||start<(0x75bcd15-0O726746425)){start=(0x75bcd15-0O726746425)}if(start>this.length){return ''}if(end===undefined||end>this.length){end=this.length}if(end<=(0x75bcd15-0O726746425)){return ''}end>>>=(0x75bcd15-0O726746425);start>>>=(0x75bcd15-0O726746425);if(end<=start){return ''}if(!encoding)encoding='utf8';while(true){switch(encoding){case 'hex':return hexSlice(this,start,end);case 'utf8':case 'utf-8':return utf8Slice(this,start,end);case 'ascii':return asciiSlice(this,start,end);case 'latin1':case 'binary':return latin1Slice(this,start,end);case 'base64':return base64Slice(this,start,end);case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(encoding+'').toLowerCase();loweredCase=true;}}}Buffer.prototype._isBuffer=true;function swap(b,n,m){var i=b[n];b[n]=b[m];b[m]=i}Buffer.prototype.swap16=function swap16(){var len=this.length;if(len%(15658734^0O73567354)!==(0x75bcd15-0O726746425)){throw new RangeError('Buffer size must be a multiple of 16-bits')}for(var i=(0x75bcd15-0O726746425);i<len;i+=(15658734^0O73567354)){swap(this,i,i+(0O57060516-0xbc614d))}return this};Buffer.prototype.swap32=function swap32(){var len=this.length;if(len%(0x5E30A78-0O570605164)!==(0x75bcd15-0O726746425)){throw new RangeError('Buffer size must be a multiple of 32-bits')}for(var i=(0x75bcd15-0O726746425);i<len;i+=(0x5E30A78-0O570605164)){swap(this,i,i+(0O334664274-0x37368B9));swap(this,i+(0O57060516-0xbc614d),i+(15658734^0O73567354))}return this};Buffer.prototype.swap64=function swap64(){var len=this.length;if(len%(0O347010110&0x463A71D)!==(0x75bcd15-0O726746425)){throw new RangeError('Buffer size must be a multiple of 64-bits')}for(var i=(0x75bcd15-0O726746425);i<len;i+=(0O347010110&0x463A71D)){swap(this,i,i+(0x9D8DE4-0O47306735));swap(this,i+(0O57060516-0xbc614d),i+(1011010-0O3666474));swap(this,i+(15658734^0O73567354),i+(0O507646144^0x51F4C61));swap(this,i+(0O334664274-0x37368B9),i+(0x5E30A78-0O570605164))}return this};Buffer.prototype.toString=function toString(){var length=this.length;if(length===(0x75bcd15-0O726746425))return '';if(arguments.length===(0x75bcd15-0O726746425))return utf8Slice(this,(0x75bcd15-0O726746425),length);return slowToString.apply(this,arguments)};Buffer.prototype.toLocaleString=Buffer.prototype.toString;Buffer.prototype.equals=function equals(b){if(!Buffer.isBuffer(b))throw new TypeError('Argument must be a Buffer');if(this===b)return true;return Buffer.compare(this,b)===(0x75bcd15-0O726746425)};Buffer.prototype.inspect=function inspect(){var str='';var max=exports.INSPECT_MAX_BYTES;str=this.toString('hex',(0x75bcd15-0O726746425),max).replace(/(.{2})/g,'$1 ').trim();if(this.length>max)str+=' ... ';return '<Buffer '+str+'>'};Buffer.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(isInstance(target,Uint8Array)){target=Buffer.from(target,target.offset,target.byteLength)}if(!Buffer.isBuffer(target)){throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. '+'Received type '+(typeof target))}if(start===undefined){start=(0x75bcd15-0O726746425)}if(end===undefined){end=target?target.length:(0x75bcd15-0O726746425)}if(thisStart===undefined){thisStart=(0x75bcd15-0O726746425)}if(thisEnd===undefined){thisEnd=this.length}if(start<(0x75bcd15-0O726746425)||end>target.length||thisStart<(0x75bcd15-0O726746425)||thisEnd>this.length){throw new RangeError('out of range index')}if(thisStart>=thisEnd&&start>=end){return (0x75bcd15-0O726746425)}if(thisStart>=thisEnd){return -(0O57060516-0xbc614d)}if(start>=end){return (0O57060516-0xbc614d)}start>>>=(0x75bcd15-0O726746425);end>>>=(0x75bcd15-0O726746425);thisStart>>>=(0x75bcd15-0O726746425);thisEnd>>>=(0x75bcd15-0O726746425);if(this===target)return (0x75bcd15-0O726746425);var x=thisEnd-thisStart;var y=end-start;var len=Math.min(x,y);var thisCopy=this.slice(thisStart,thisEnd);var targetCopy=target.slice(start,end);for(var i=(0x75bcd15-0O726746425);i<len;++i){if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i];y=targetCopy[i];break}}if(x<y)return -(0O57060516-0xbc614d);if(y<x)return (0O57060516-0xbc614d);return (0x75bcd15-0O726746425)};function bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){if(buffer.length===(0x75bcd15-0O726746425))return -(0O57060516-0xbc614d);if(typeof byteOffset==='string'){encoding=byteOffset;byteOffset=(0x75bcd15-0O726746425)}else if(byteOffset>0o17777777777){byteOffset=0o17777777777}else if(byteOffset<-0o20000000000){byteOffset=-0o20000000000}byteOffset=+byteOffset;if(numberIsNaN(byteOffset)){byteOffset=dir?(0x75bcd15-0O726746425):(buffer.length-(0O57060516-0xbc614d))}if(byteOffset<(0x75bcd15-0O726746425))byteOffset=buffer.length+byteOffset;if(byteOffset>=buffer.length){if(dir)return -(0O57060516-0xbc614d);else byteOffset=buffer.length-(0O57060516-0xbc614d)}else if(byteOffset<(0x75bcd15-0O726746425)){if(dir)byteOffset=(0x75bcd15-0O726746425);else return -(0O57060516-0xbc614d)}if(typeof val==='string'){val=Buffer.from(val,encoding)}if(Buffer.isBuffer(val)){if(val.length===(0x75bcd15-0O726746425)){return -(0O57060516-0xbc614d)}return arrayIndexOf(buffer,val,byteOffset,encoding,dir)}else if(typeof val==='number'){val=val&0o377;if(typeof Uint8Array.prototype.indexOf==='function'){if(dir){return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset)}else{return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset)}}return arrayIndexOf(buffer,[val],byteOffset,encoding,dir)}throw new TypeError('val must be string, number or Buffer')}function arrayIndexOf(arr,val,byteOffset,encoding,dir){var indexSize=(0O57060516-0xbc614d);var arrLength=arr.length;var valLength=val.length;if(encoding!==undefined){encoding=String(encoding).toLowerCase();if(encoding==='ucs2'||encoding==='ucs-2'||encoding==='utf16le'||encoding==='utf-16le'){if(arr.length<(15658734^0O73567354)||val.length<(15658734^0O73567354)){return -(0O57060516-0xbc614d)}indexSize=(15658734^0O73567354);arrLength/=(15658734^0O73567354);valLength/=(15658734^0O73567354);byteOffset/=(15658734^0O73567354)}}function read(buf,i){if(indexSize===(0O57060516-0xbc614d)){return buf[i]}else{return buf.readUInt16BE(i*indexSize)}}var i;if(dir){var foundIndex=-(0O57060516-0xbc614d);for(i=byteOffset;i<arrLength;i++){if(read(arr,i)===read(val,foundIndex===-(0O57060516-0xbc614d)?(0x75bcd15-0O726746425):i-foundIndex)){if(foundIndex===-(0O57060516-0xbc614d))foundIndex=i;if(i-foundIndex+(0O57060516-0xbc614d)===valLength)return foundIndex*indexSize}else{if(foundIndex!==-(0O57060516-0xbc614d))i-=i-foundIndex;foundIndex=-(0O57060516-0xbc614d)}}}else{if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;for(i=byteOffset;i>=(0x75bcd15-0O726746425);i--){var found=true;for(var j=(0x75bcd15-0O726746425);j<valLength;j++){if(read(arr,i+j)!==read(val,j)){found=false;break}}if(found)return i}}return -(0O57060516-0xbc614d)}Buffer.prototype.includes=function includes(val,byteOffset,encoding){return this.indexOf(val,byteOffset,encoding)!==-(0O57060516-0xbc614d)};Buffer.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,true)};Buffer.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,false)};function hexWrite(buf,string,offset,length){offset=Number(offset)||(0x75bcd15-0O726746425);var remaining=buf.length-offset;if(!length){length=remaining}else{length=Number(length);if(length>remaining){length=remaining}}var strLen=string.length;if(length>strLen/(15658734^0O73567354)){length=strLen/(15658734^0O73567354)}for(var i=(0x75bcd15-0O726746425);i<length;++i){var parsed=parseInt(string.substr(i*(15658734^0O73567354),(15658734^0O73567354)),0o20);if(numberIsNaN(parsed))return i;buf[offset+i]=parsed}return i}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length)}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length)}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length)}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length)}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length)}Buffer.prototype.write=function write(string,offset,length,encoding){if(offset===undefined){encoding='utf8';length=this.length;offset=(0x75bcd15-0O726746425)}else if(length===undefined&&typeof offset==='string'){encoding=offset;length=this.length;offset=(0x75bcd15-0O726746425)}else if(isFinite(offset)){offset=offset>>>(0x75bcd15-0O726746425);if(isFinite(length)){length=length>>>(0x75bcd15-0O726746425);if(encoding===undefined)encoding='utf8'}else{encoding=length;length=undefined}}else{throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported')}var remaining=this.length-offset;if(length===undefined||length>remaining)length=remaining;if((string.length>(0x75bcd15-0O726746425)&&(length<(0x75bcd15-0O726746425)||offset<(0x75bcd15-0O726746425)))||offset>this.length){throw new RangeError('Attempt to write outside buffer bounds')}if(!encoding)encoding='utf8';var loweredCase=false;for(;;){switch(encoding){case 'hex':return hexWrite(this,string,offset,length);case 'utf8':case 'utf-8':return utf8Write(this,string,offset,length);case 'ascii':return asciiWrite(this,string,offset,length);case 'latin1':case 'binary':return latin1Write(this,string,offset,length);case 'base64':return base64Write(this,string,offset,length);case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(''+encoding).toLowerCase();loweredCase=true;}}};Buffer.prototype.toJSON=function toJSON(){return {type:'Buffer',data:Array.prototype.slice.call(this._arr||this,(0x75bcd15-0O726746425))}};function base64Slice(buf,start,end){if(start===(0x75bcd15-0O726746425)&&end===buf.length){return base64.fromByteArray(buf)}else{return base64.fromByteArray(buf.slice(start,end))}}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;while(i<end){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=(firstByte>0o357)?(0x5E30A78-0O570605164):(firstByte>0o337)?(0O334664274-0x37368B9):(firstByte>0o277)?(15658734^0O73567354):(0O57060516-0xbc614d);if(i+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case (0O57060516-0xbc614d):if(firstByte<0o200){codePoint=firstByte}break;case (15658734^0O73567354):secondByte=buf[i+(0O57060516-0xbc614d)];if((secondByte&0o300)===0o200){tempCodePoint=(firstByte&0o37)<<(1011010-0O3666474)|(secondByte&0o77);if(tempCodePoint>0o177){codePoint=tempCodePoint}}break;case (0O334664274-0x37368B9):secondByte=buf[i+(0O57060516-0xbc614d)];thirdByte=buf[i+(15658734^0O73567354)];if((secondByte&0o300)===0o200&&(thirdByte&0o300)===0o200){tempCodePoint=(firstByte&0o17)<<0o14|(secondByte&0o77)<<(1011010-0O3666474)|(thirdByte&0o77);if(tempCodePoint>0o3777&&(tempCodePoint<0o154000||tempCodePoint>0o157777)){codePoint=tempCodePoint}}break;case (0x5E30A78-0O570605164):secondByte=buf[i+(0O57060516-0xbc614d)];thirdByte=buf[i+(15658734^0O73567354)];fourthByte=buf[i+(0O334664274-0x37368B9)];if((secondByte&0o300)===0o200&&(thirdByte&0o300)===0o200&&(fourthByte&0o300)===0o200){tempCodePoint=(firstByte&0o17)<<0o22|(secondByte&0o77)<<0o14|(thirdByte&0o77)<<(1011010-0O3666474)|(fourthByte&0o77);if(tempCodePoint>0o177777&&tempCodePoint<0o4200000){codePoint=tempCodePoint}}}}if(codePoint===null){codePoint=0o177775;bytesPerSequence=(0O57060516-0xbc614d)}else if(codePoint>0o177777){codePoint-=0o200000;res.push(codePoint>>>0o12&0o1777|0o154000);codePoint=0o156000|codePoint&0o1777}res.push(codePoint);i+=bytesPerSequence}return decodeCodePointsArray(res)}var MAX_ARGUMENTS_LENGTH=0o10000;function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints)}var res='';var i=(0x75bcd15-0O726746425);while(i<len){res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH))}return res}function asciiSlice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]&0o177)}return ret}function latin1Slice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i])}return ret}function hexSlice(buf,start,end){var len=buf.length;if(!start||start<(0x75bcd15-0O726746425))start=(0x75bcd15-0O726746425);if(!end||end<(0x75bcd15-0O726746425)||end>len)end=len;var out='';for(var i=start;i<end;++i){out+=toHex(buf[i])}return out}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res='';for(var i=(0x75bcd15-0O726746425);i<bytes.length;i+=(15658734^0O73567354)){res+=String.fromCharCode(bytes[i]+(bytes[i+(0O57060516-0xbc614d)]*0o400))}return res}Buffer.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===undefined?len:~~end;if(start<(0x75bcd15-0O726746425)){start+=len;if(start<(0x75bcd15-0O726746425))start=(0x75bcd15-0O726746425)}else if(start>len){start=len}if(end<(0x75bcd15-0O726746425)){end+=len;if(end<(0x75bcd15-0O726746425))end=(0x75bcd15-0O726746425)}else if(end>len){end=len}if(end<start)end=start;var newBuf=this.subarray(start,end);newBuf.__proto__=Buffer.prototype;return newBuf};function checkOffset(offset,ext,length){if((offset%(0O57060516-0xbc614d))!==(0x75bcd15-0O726746425)||offset<(0x75bcd15-0O726746425))throw new RangeError('offset is not uint');if(offset+ext>length)throw new RangeError('Trying to access beyond buffer length')}Buffer.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=offset>>>(0x75bcd15-0O726746425);byteLength=byteLength>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=(0O57060516-0xbc614d);var i=(0x75bcd15-0O726746425);while(++i<byteLength&&(mul*=0o400)){val+=this[offset+i]*mul}return val};Buffer.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=offset>>>(0x75bcd15-0O726746425);byteLength=byteLength>>>(0x75bcd15-0O726746425);if(!noAssert){checkOffset(offset,byteLength,this.length)}var val=this[offset+--byteLength];var mul=(0O57060516-0xbc614d);while(byteLength>(0x75bcd15-0O726746425)&&(mul*=0o400)){val+=this[offset+--byteLength]*mul}return val};Buffer.prototype.readUInt8=function readUInt8(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(0O57060516-0xbc614d),this.length);return this[offset]};Buffer.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(15658734^0O73567354),this.length);return this[offset]|(this[offset+(0O57060516-0xbc614d)]<<(0O347010110&0x463A71D))};Buffer.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(15658734^0O73567354),this.length);return (this[offset]<<(0O347010110&0x463A71D))|this[offset+(0O57060516-0xbc614d)]};Buffer.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(0x5E30A78-0O570605164),this.length);return ((this[offset])|(this[offset+(0O57060516-0xbc614d)]<<(0O347010110&0x463A71D))|(this[offset+(15658734^0O73567354)]<<0o20))+(this[offset+(0O334664274-0x37368B9)]*0o100000000)};Buffer.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(0x5E30A78-0O570605164),this.length);return (this[offset]*0o100000000)+((this[offset+(0O57060516-0xbc614d)]<<0o20)|(this[offset+(15658734^0O73567354)]<<(0O347010110&0x463A71D))|this[offset+(0O334664274-0x37368B9)])};Buffer.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=offset>>>(0x75bcd15-0O726746425);byteLength=byteLength>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=(0O57060516-0xbc614d);var i=(0x75bcd15-0O726746425);while(++i<byteLength&&(mul*=0o400)){val+=this[offset+i]*mul}mul*=0o200;if(val>=mul)val-=Math.pow((15658734^0O73567354),(0O347010110&0x463A71D)*byteLength);return val};Buffer.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=offset>>>(0x75bcd15-0O726746425);byteLength=byteLength>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,byteLength,this.length);var i=byteLength;var mul=(0O57060516-0xbc614d);var val=this[offset+--i];while(i>(0x75bcd15-0O726746425)&&(mul*=0o400)){val+=this[offset+--i]*mul}mul*=0o200;if(val>=mul)val-=Math.pow((15658734^0O73567354),(0O347010110&0x463A71D)*byteLength);return val};Buffer.prototype.readInt8=function readInt8(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(0O57060516-0xbc614d),this.length);if(!(this[offset]&0o200))return (this[offset]);return ((0o377-this[offset]+(0O57060516-0xbc614d))*-(0O57060516-0xbc614d))};Buffer.prototype.readInt16LE=function readInt16LE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(15658734^0O73567354),this.length);var val=this[offset]|(this[offset+(0O57060516-0xbc614d)]<<(0O347010110&0x463A71D));return (val&0o100000)?val|0o37777600000:val};Buffer.prototype.readInt16BE=function readInt16BE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(15658734^0O73567354),this.length);var val=this[offset+(0O57060516-0xbc614d)]|(this[offset]<<(0O347010110&0x463A71D));return (val&0o100000)?val|0o37777600000:val};Buffer.prototype.readInt32LE=function readInt32LE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(0x5E30A78-0O570605164),this.length);return (this[offset])|(this[offset+(0O57060516-0xbc614d)]<<(0O347010110&0x463A71D))|(this[offset+(15658734^0O73567354)]<<0o20)|(this[offset+(0O334664274-0x37368B9)]<<0o30)};Buffer.prototype.readInt32BE=function readInt32BE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(0x5E30A78-0O570605164),this.length);return (this[offset]<<0o30)|(this[offset+(0O57060516-0xbc614d)]<<0o20)|(this[offset+(15658734^0O73567354)]<<(0O347010110&0x463A71D))|(this[offset+(0O334664274-0x37368B9)])};Buffer.prototype.readFloatLE=function readFloatLE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(0x5E30A78-0O570605164),this.length);return ieee754.read(this,offset,true,0o27,(0x5E30A78-0O570605164))};Buffer.prototype.readFloatBE=function readFloatBE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(0x5E30A78-0O570605164),this.length);return ieee754.read(this,offset,false,0o27,(0x5E30A78-0O570605164))};Buffer.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(0O347010110&0x463A71D),this.length);return ieee754.read(this,offset,true,0o64,(0O347010110&0x463A71D))};Buffer.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkOffset(offset,(0O347010110&0x463A71D),this.length);return ieee754.read(this,offset,false,0o64,(0O347010110&0x463A71D))};function checkInt(buf,value,offset,ext,max,min){if(!Buffer.isBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('"value" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError('Index out of range')}Buffer.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);byteLength=byteLength>>>(0x75bcd15-0O726746425);if(!noAssert){var maxBytes=Math.pow((15658734^0O73567354),(0O347010110&0x463A71D)*byteLength)-(0O57060516-0xbc614d);checkInt(this,value,offset,byteLength,maxBytes,(0x75bcd15-0O726746425))}var mul=(0O57060516-0xbc614d);var i=(0x75bcd15-0O726746425);this[offset]=value&0o377;while(++i<byteLength&&(mul*=0o400)){this[offset+i]=(value/mul)&0o377}return offset+byteLength};Buffer.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);byteLength=byteLength>>>(0x75bcd15-0O726746425);if(!noAssert){var maxBytes=Math.pow((15658734^0O73567354),(0O347010110&0x463A71D)*byteLength)-(0O57060516-0xbc614d);checkInt(this,value,offset,byteLength,maxBytes,(0x75bcd15-0O726746425))}var i=byteLength-(0O57060516-0xbc614d);var mul=(0O57060516-0xbc614d);this[offset+i]=value&0o377;while(--i>=(0x75bcd15-0O726746425)&&(mul*=0o400)){this[offset+i]=(value/mul)&0o377}return offset+byteLength};Buffer.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkInt(this,value,offset,(0O57060516-0xbc614d),0o377,(0x75bcd15-0O726746425));this[offset]=(value&0o377);return offset+(0O57060516-0xbc614d)};Buffer.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkInt(this,value,offset,(15658734^0O73567354),0o177777,(0x75bcd15-0O726746425));this[offset]=(value&0o377);this[offset+(0O57060516-0xbc614d)]=(value>>>(0O347010110&0x463A71D));return offset+(15658734^0O73567354)};Buffer.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkInt(this,value,offset,(15658734^0O73567354),0o177777,(0x75bcd15-0O726746425));this[offset]=(value>>>(0O347010110&0x463A71D));this[offset+(0O57060516-0xbc614d)]=(value&0o377);return offset+(15658734^0O73567354)};Buffer.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkInt(this,value,offset,(0x5E30A78-0O570605164),0o37777777777,(0x75bcd15-0O726746425));this[offset+(0O334664274-0x37368B9)]=(value>>>0o30);this[offset+(15658734^0O73567354)]=(value>>>0o20);this[offset+(0O57060516-0xbc614d)]=(value>>>(0O347010110&0x463A71D));this[offset]=(value&0o377);return offset+(0x5E30A78-0O570605164)};Buffer.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkInt(this,value,offset,(0x5E30A78-0O570605164),0o37777777777,(0x75bcd15-0O726746425));this[offset]=(value>>>0o30);this[offset+(0O57060516-0xbc614d)]=(value>>>0o20);this[offset+(15658734^0O73567354)]=(value>>>(0O347010110&0x463A71D));this[offset+(0O334664274-0x37368B9)]=(value&0o377);return offset+(0x5E30A78-0O570605164)};Buffer.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert){var limit=Math.pow((15658734^0O73567354),((0O347010110&0x463A71D)*byteLength)-(0O57060516-0xbc614d));checkInt(this,value,offset,byteLength,limit-(0O57060516-0xbc614d),-limit)}var i=(0x75bcd15-0O726746425);var mul=(0O57060516-0xbc614d);var sub=(0x75bcd15-0O726746425);this[offset]=value&0o377;while(++i<byteLength&&(mul*=0o400)){if(value<(0x75bcd15-0O726746425)&&sub===(0x75bcd15-0O726746425)&&this[offset+i-(0O57060516-0xbc614d)]!==(0x75bcd15-0O726746425)){sub=(0O57060516-0xbc614d)}this[offset+i]=((value/mul)>>(0x75bcd15-0O726746425))-sub&0o377}return offset+byteLength};Buffer.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert){var limit=Math.pow((15658734^0O73567354),((0O347010110&0x463A71D)*byteLength)-(0O57060516-0xbc614d));checkInt(this,value,offset,byteLength,limit-(0O57060516-0xbc614d),-limit)}var i=byteLength-(0O57060516-0xbc614d);var mul=(0O57060516-0xbc614d);var sub=(0x75bcd15-0O726746425);this[offset+i]=value&0o377;while(--i>=(0x75bcd15-0O726746425)&&(mul*=0o400)){if(value<(0x75bcd15-0O726746425)&&sub===(0x75bcd15-0O726746425)&&this[offset+i+(0O57060516-0xbc614d)]!==(0x75bcd15-0O726746425)){sub=(0O57060516-0xbc614d)}this[offset+i]=((value/mul)>>(0x75bcd15-0O726746425))-sub&0o377}return offset+byteLength};Buffer.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkInt(this,value,offset,(0O57060516-0xbc614d),0o177,-0o200);if(value<(0x75bcd15-0O726746425))value=0o377+value+(0O57060516-0xbc614d);this[offset]=(value&0o377);return offset+(0O57060516-0xbc614d)};Buffer.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkInt(this,value,offset,(15658734^0O73567354),0o77777,-0o100000);this[offset]=(value&0o377);this[offset+(0O57060516-0xbc614d)]=(value>>>(0O347010110&0x463A71D));return offset+(15658734^0O73567354)};Buffer.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkInt(this,value,offset,(15658734^0O73567354),0o77777,-0o100000);this[offset]=(value>>>(0O347010110&0x463A71D));this[offset+(0O57060516-0xbc614d)]=(value&0o377);return offset+(15658734^0O73567354)};Buffer.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkInt(this,value,offset,(0x5E30A78-0O570605164),0o17777777777,-0o20000000000);this[offset]=(value&0o377);this[offset+(0O57060516-0xbc614d)]=(value>>>(0O347010110&0x463A71D));this[offset+(15658734^0O73567354)]=(value>>>0o20);this[offset+(0O334664274-0x37368B9)]=(value>>>0o30);return offset+(0x5E30A78-0O570605164)};Buffer.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert)checkInt(this,value,offset,(0x5E30A78-0O570605164),0o17777777777,-0o20000000000);if(value<(0x75bcd15-0O726746425))value=0o37777777777+value+(0O57060516-0xbc614d);this[offset]=(value>>>0o30);this[offset+(0O57060516-0xbc614d)]=(value>>>0o20);this[offset+(15658734^0O73567354)]=(value>>>(0O347010110&0x463A71D));this[offset+(0O334664274-0x37368B9)]=(value&0o377);return offset+(0x5E30A78-0O570605164)};function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError('Index out of range');if(offset<(0x75bcd15-0O726746425))throw new RangeError('Index out of range')}function writeFloat(buf,value,offset,littleEndian,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert){checkIEEE754(buf,value,offset,(0x5E30A78-0O570605164),0o3777777740000000000000000000000000000000000,-0o3777777740000000000000000000000000000000000)}ieee754.write(buf,value,offset,littleEndian,0o27,(0x5E30A78-0O570605164));return offset+(0x5E30A78-0O570605164)}Buffer.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert)};Buffer.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert)};function writeDouble(buf,value,offset,littleEndian,noAssert){value=+value;offset=offset>>>(0x75bcd15-0O726746425);if(!noAssert){checkIEEE754(buf,value,offset,(0O347010110&0x463A71D),0o177777777777777777400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,-0o177777777777777777400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)}ieee754.write(buf,value,offset,littleEndian,0o64,(0O347010110&0x463A71D));return offset+(0O347010110&0x463A71D)}Buffer.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert)};Buffer.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert)};Buffer.prototype.copy=function copy(target,targetStart,start,end){if(!Buffer.isBuffer(target))throw new TypeError('argument should be a Buffer');if(!start)start=(0x75bcd15-0O726746425);if(!end&&end!==(0x75bcd15-0O726746425))end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=(0x75bcd15-0O726746425);if(end>(0x75bcd15-0O726746425)&&end<start)end=start;if(end===start)return (0x75bcd15-0O726746425);if(target.length===(0x75bcd15-0O726746425)||this.length===(0x75bcd15-0O726746425))return (0x75bcd15-0O726746425);if(targetStart<(0x75bcd15-0O726746425)){throw new RangeError('targetStart out of bounds')}if(start<(0x75bcd15-0O726746425)||start>=this.length)throw new RangeError('Index out of range');if(end<(0x75bcd15-0O726746425))throw new RangeError('sourceEnd out of bounds');if(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start}var len=end-start;if(this===target&&typeof Uint8Array.prototype.copyWithin==='function'){this.copyWithin(targetStart,start,end)}else if(this===target&&start<targetStart&&targetStart<end){for(var i=len-(0O57060516-0xbc614d);i>=(0x75bcd15-0O726746425);--i){target[i+targetStart]=this[i+start]}}else{Uint8Array.prototype.set.call(target,this.subarray(start,end),targetStart)}return len};Buffer.prototype.fill=function fill(val,start,end,encoding){if(typeof val==='string'){if(typeof start==='string'){encoding=start;start=(0x75bcd15-0O726746425);end=this.length}else if(typeof end==='string'){encoding=end;end=this.length}if(encoding!==undefined&&typeof encoding!=='string'){throw new TypeError('encoding must be a string')}if(typeof encoding==='string'&&!Buffer.isEncoding(encoding)){throw new TypeError('Unknown encoding: '+encoding)}if(val.length===(0O57060516-0xbc614d)){var code=val.charCodeAt((0x75bcd15-0O726746425));if((encoding==='utf8'&&code<0o200)||encoding==='latin1'){val=code}}}else if(typeof val==='number'){val=val&0o377}if(start<(0x75bcd15-0O726746425)||this.length<start||this.length<end){throw new RangeError('Out of range index')}if(end<=start){return this}start=start>>>(0x75bcd15-0O726746425);end=end===undefined?this.length:end>>>(0x75bcd15-0O726746425);if(!val)val=(0x75bcd15-0O726746425);var i;if(typeof val==='number'){for(i=start;i<end;++i){this[i]=val}}else{var bytes=Buffer.isBuffer(val)?val:Buffer.from(val,encoding);var len=bytes.length;if(len===(0x75bcd15-0O726746425)){throw new TypeError('The value "'+val+'" is invalid for argument "value"')}for(i=(0x75bcd15-0O726746425);i<end-start;++i){this[i+start]=bytes[i%len]}}return this};var INVALID_BASE64_RE=/[^+/0-9A-Za-z-_]/g;function base64clean(str){str=str.split('=')[(0x75bcd15-0O726746425)];str=str.trim().replace(INVALID_BASE64_RE,'');if(str.length<(15658734^0O73567354))return '';while(str.length%(0x5E30A78-0O570605164)!==(0x75bcd15-0O726746425)){str=str+'='}return str}function toHex(n){if(n<0o20)return '0'+n.toString(0o20);return n.toString(0o20)}function utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=(0x75bcd15-0O726746425);i<length;++i){codePoint=string.charCodeAt(i);if(codePoint>0o153777&&codePoint<0o160000){if(!leadSurrogate){if(codePoint>0o155777){if((units-=(0O334664274-0x37368B9))>-(0O57060516-0xbc614d))bytes.push(0o357,0o277,0o275);continue}else if(i+(0O57060516-0xbc614d)===length){if((units-=(0O334664274-0x37368B9))>-(0O57060516-0xbc614d))bytes.push(0o357,0o277,0o275);continue}leadSurrogate=codePoint;continue}if(codePoint<0o156000){if((units-=(0O334664274-0x37368B9))>-(0O57060516-0xbc614d))bytes.push(0o357,0o277,0o275);leadSurrogate=codePoint;continue}codePoint=(leadSurrogate-0o154000<<0o12|codePoint-0o156000)+0o200000}else if(leadSurrogate){if((units-=(0O334664274-0x37368B9))>-(0O57060516-0xbc614d))bytes.push(0o357,0o277,0o275)}leadSurrogate=null;if(codePoint<0o200){if((units-=(0O57060516-0xbc614d))<(0x75bcd15-0O726746425))break;bytes.push(codePoint)}else if(codePoint<0o4000){if((units-=(15658734^0O73567354))<(0x75bcd15-0O726746425))break;bytes.push(codePoint>>(1011010-0O3666474)|0o300,codePoint&0o77|0o200)}else if(codePoint<0o200000){if((units-=(0O334664274-0x37368B9))<(0x75bcd15-0O726746425))break;bytes.push(codePoint>>0o14|0o340,codePoint>>(1011010-0O3666474)&0o77|0o200,codePoint&0o77|0o200)}else if(codePoint<0o4200000){if((units-=(0x5E30A78-0O570605164))<(0x75bcd15-0O726746425))break;bytes.push(codePoint>>0o22|0o360,codePoint>>0o14&0o77|0o200,codePoint>>(1011010-0O3666474)&0o77|0o200,codePoint&0o77|0o200)}else{throw new Error('Invalid code point')}}return bytes}function asciiToBytes(str){var byteArray=[];for(var i=(0x75bcd15-0O726746425);i<str.length;++i){byteArray.push(str.charCodeAt(i)&0o377)}return byteArray}function utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=(0x75bcd15-0O726746425);i<str.length;++i){if((units-=(15658734^0O73567354))<(0x75bcd15-0O726746425))break;c=str.charCodeAt(i);hi=c>>(0O347010110&0x463A71D);lo=c%0o400;byteArray.push(lo);byteArray.push(hi)}return byteArray}function base64ToBytes(str){return base64.toByteArray(base64clean(str))}function blitBuffer(src,dst,offset,length){for(var i=(0x75bcd15-0O726746425);i<length;++i){if((i+offset>=dst.length)||(i>=src.length))break;dst[i+offset]=src[i]}return i}function isInstance(obj,type){return obj instanceof type||(obj!=null&&obj.constructor!=null&&obj.constructor.name!=null&&obj.constructor.name===type.name)}function numberIsNaN(obj){return obj!==obj}}).call(this,require("buffer").Buffer)},{"base64-js":174,"buffer":176,"ieee754":177}],177:[function(require,module,exports){exports.read=function(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=(nBytes*(0O347010110&0x463A71D))-mLen-(0O57060516-0xbc614d);var eMax=((0O57060516-0xbc614d)<<eLen)-(0O57060516-0xbc614d);var eBias=eMax>>(0O57060516-0xbc614d);var nBits=-(0x9D8DE4-0O47306735);var i=isLE?(nBytes-(0O57060516-0xbc614d)):(0x75bcd15-0O726746425);var d=isLE?-(0O57060516-0xbc614d):(0O57060516-0xbc614d);var s=buffer[offset+i];i+=d;e=s&(((0O57060516-0xbc614d)<<(-nBits))-(0O57060516-0xbc614d));s>>=(-nBits);nBits+=eLen;for(;nBits>(0x75bcd15-0O726746425);e=(e*0o400)+buffer[offset+i],i+=d,nBits-=(0O347010110&0x463A71D)){}m=e&(((0O57060516-0xbc614d)<<(-nBits))-(0O57060516-0xbc614d));e>>=(-nBits);nBits+=mLen;for(;nBits>(0x75bcd15-0O726746425);m=(m*0o400)+buffer[offset+i],i+=d,nBits-=(0O347010110&0x463A71D)){}if(e===(0x75bcd15-0O726746425)){e=(0O57060516-0xbc614d)-eBias}else if(e===eMax){return m?NaN:((s?-(0O57060516-0xbc614d):(0O57060516-0xbc614d))*Infinity)}else{m=m+Math.pow((15658734^0O73567354),mLen);e=e-eBias}return (s?-(0O57060516-0xbc614d):(0O57060516-0xbc614d))*m*Math.pow((15658734^0O73567354),e-mLen)};exports.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=(nBytes*(0O347010110&0x463A71D))-mLen-(0O57060516-0xbc614d);var eMax=((0O57060516-0xbc614d)<<eLen)-(0O57060516-0xbc614d);var eBias=eMax>>(0O57060516-0xbc614d);var rt=(mLen===0o27?Math.pow((15658734^0O73567354),-0o30)-Math.pow((15658734^0O73567354),-0o115):(0x75bcd15-0O726746425));var i=isLE?(0x75bcd15-0O726746425):(nBytes-(0O57060516-0xbc614d));var d=isLE?(0O57060516-0xbc614d):-(0O57060516-0xbc614d);var s=value<(0x75bcd15-0O726746425)||(value===(0x75bcd15-0O726746425)&&(0O57060516-0xbc614d)/value<(0x75bcd15-0O726746425))?(0O57060516-0xbc614d):(0x75bcd15-0O726746425);value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?(0O57060516-0xbc614d):(0x75bcd15-0O726746425);e=eMax}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow((15658734^0O73567354),-e))<(0O57060516-0xbc614d)){e--;c*=(15658734^0O73567354)}if(e+eBias>=(0O57060516-0xbc614d)){value+=rt/c}else{value+=rt*Math.pow((15658734^0O73567354),(0O57060516-0xbc614d)-eBias)}if(value*c>=(15658734^0O73567354)){e++;c/=(15658734^0O73567354)}if(e+eBias>=eMax){m=(0x75bcd15-0O726746425);e=eMax}else if(e+eBias>=(0O57060516-0xbc614d)){m=((value*c)-(0O57060516-0xbc614d))*Math.pow((15658734^0O73567354),mLen);e=e+eBias}else{m=value*Math.pow((15658734^0O73567354),eBias-(0O57060516-0xbc614d))*Math.pow((15658734^0O73567354),mLen);e=(0x75bcd15-0O726746425)}}for(;mLen>=(0O347010110&0x463A71D);buffer[offset+i]=m&0o377,i+=d,m/=0o400,mLen-=(0O347010110&0x463A71D)){}e=(e<<mLen)|m;eLen+=mLen;for(;eLen>(0x75bcd15-0O726746425);buffer[offset+i]=e&0o377,i+=d,e/=0o400,eLen-=(0O347010110&0x463A71D)){}buffer[offset+i-d]|=s*0o200}},{}],178:[function(require,module,exports){if(typeof Object.create==='function'){module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor}}},{}],179:[function(require,module,exports){var process=module.exports={};var cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}}());function runTimeout(fun){if(cachedSetTimeout===setTimeout){return setTimeout(fun,(0x75bcd15-0O726746425));}if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,(0x75bcd15-0O726746425));}try{return cachedSetTimeout(fun,(0x75bcd15-0O726746425));}catch(e){try{return cachedSetTimeout.call(null,fun,(0x75bcd15-0O726746425));}catch(e){return cachedSetTimeout.call(this,fun,(0x75bcd15-0O726746425));}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){return clearTimeout(marker);}if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{return cachedClearTimeout(marker);}catch(e){try{return cachedClearTimeout.call(null,marker);}catch(e){return cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-(0O57060516-0xbc614d);function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-(0O57060516-0xbc614d);}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-(0O57060516-0xbc614d);len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-(0O57060516-0xbc614d));if(arguments.length>(0O57060516-0xbc614d)){for(var i=(0O57060516-0xbc614d);i<arguments.length;i++){args[i-(0O57060516-0xbc614d)]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===(0O57060516-0xbc614d)&&!draining){runTimeout(drainQueue);}};function Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';process.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return []};process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return '/'};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return (0x75bcd15-0O726746425);};},{}],180:[function(require,module,exports){module.exports=function isBuffer(arg){return arg&&typeof arg==='object'&&typeof arg.copy==='function'&&typeof arg.fill==='function'&&typeof arg.readUInt8==='function';}},{}],181:[function(require,module,exports){(function(process,global){var formatRegExp=/%[sdj%]/g;exports.format=function(f){if(!isString(f)){var objects=[];for(var i=(0x75bcd15-0O726746425);i<arguments.length;i++){objects.push(inspect(arguments[i]));}return objects.join(' ');}var i=(0O57060516-0xbc614d);var args=arguments;var len=args.length;var str=String(f).replace(formatRegExp,function(x){if(x==='%%')return '%';if(i>=len)return x;switch(x){case '%s':return String(args[i++]);case '%d':return Number(args[i++]);case '%j':try{return JSON.stringify(args[i++]);}catch(_){return '[Circular]';}default:return x;}});for(var x=args[i];i<len;x=args[++i]){if(isNull(x)||!isObject(x)){str+=' '+x;}else{str+=' '+inspect(x);}}return str;};exports.deprecate=function(fn,msg){if(isUndefined(global.process)){return function(){return exports.deprecate(fn,msg).apply(this,arguments);};}if(process.noDeprecation===true){return fn;}var warned=false;function deprecated(){if(!warned){if(process.throwDeprecation){throw new Error(msg);}else if(process.traceDeprecation){console.trace(msg);}else{console.error(msg);}warned=true;}return fn.apply(this,arguments);}return deprecated;};var debugs={};var debugEnviron;exports.debuglog=function(set){if(isUndefined(debugEnviron))debugEnviron=process.env.NODE_DEBUG||'';set=set.toUpperCase();if(!debugs[set]){if(new RegExp('\\b'+set+'\\b','i').test(debugEnviron)){var pid=process.pid;debugs[set]=function(){var msg=exports.format.apply(exports,arguments);console.error('%s %d: %s',set,pid,msg);};}else{debugs[set]=function(){};}}return debugs[set];};function inspect(obj,opts){var ctx={seen:[],stylize:stylizeNoColor};if(arguments.length>=(0O334664274-0x37368B9))ctx.depth=arguments[(15658734^0O73567354)];if(arguments.length>=(0x5E30A78-0O570605164))ctx.colors=arguments[(0O334664274-0x37368B9)];if(isBoolean(opts)){ctx.showHidden=opts;}else if(opts){exports._extend(ctx,opts);}if(isUndefined(ctx.showHidden))ctx.showHidden=false;if(isUndefined(ctx.depth))ctx.depth=(15658734^0O73567354);if(isUndefined(ctx.colors))ctx.colors=false;if(isUndefined(ctx.customInspect))ctx.customInspect=true;if(ctx.colors)ctx.stylize=stylizeWithColor;return formatValue(ctx,obj,ctx.depth);}exports.inspect=inspect;inspect.colors={'bold':[(0O57060516-0xbc614d),0o26],'italic':[(0O334664274-0x37368B9),0o27],'underline':[(0x5E30A78-0O570605164),0o30],'inverse':[(0x9D8DE4-0O47306735),0o33],'white':[0o45,0o47],'grey':[0o132,0o47],'black':[0o36,0o47],'blue':[0o42,0o47],'cyan':[0o44,0o47],'green':[0o40,0o47],'magenta':[0o43,0o47],'red':[0o37,0o47],'yellow':[0o41,0o47]};inspect.styles={'special':'cyan','number':'yellow','boolean':'yellow','undefined':'grey','null':'bold','string':'green','date':'magenta','regexp':'red'};function stylizeWithColor(str,styleType){var style=inspect.styles[styleType];if(style){return '\u001b['+inspect.colors[style][(0x75bcd15-0O726746425)]+'m'+str+'\u001b['+inspect.colors[style][(0O57060516-0xbc614d)]+'m';}else{return str;}}function stylizeNoColor(str,styleType){return str;}function arrayToHash(array){var hash={};array.forEach(function(val,idx){hash[val]=true;});return hash;}function formatValue(ctx,value,recurseTimes){if(ctx.customInspect&&value&&isFunction(value.inspect)&&value.inspect!==exports.inspect&&!(value.constructor&&value.constructor.prototype===value)){var ret=value.inspect(recurseTimes,ctx);if(!isString(ret)){ret=formatValue(ctx,ret,recurseTimes);}return ret;}var primitive=formatPrimitive(ctx,value);if(primitive){return primitive;}var keys=Object.keys(value);var visibleKeys=arrayToHash(keys);if(ctx.showHidden){keys=Object.getOwnPropertyNames(value);}if(isError(value)&&(keys.indexOf('message')>=(0x75bcd15-0O726746425)||keys.indexOf('description')>=(0x75bcd15-0O726746425))){return formatError(value);}if(keys.length===(0x75bcd15-0O726746425)){if(isFunction(value)){var name=value.name?': '+value.name:'';return ctx.stylize('[Function'+name+']','special');}if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}if(isDate(value)){return ctx.stylize(Date.prototype.toString.call(value),'date');}if(isError(value)){return formatError(value);}}var base='',array=false,braces=['{','}'];if(isArray(value)){array=true;braces=['[',']'];}if(isFunction(value)){var n=value.name?': '+value.name:'';base=' [Function'+n+']';}if(isRegExp(value)){base=' '+RegExp.prototype.toString.call(value);}if(isDate(value)){base=' '+Date.prototype.toUTCString.call(value);}if(isError(value)){base=' '+formatError(value);}if(keys.length===(0x75bcd15-0O726746425)&&(!array||value.length==(0x75bcd15-0O726746425))){return braces[(0x75bcd15-0O726746425)]+base+braces[(0O57060516-0xbc614d)];}if(recurseTimes<(0x75bcd15-0O726746425)){if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}else{return ctx.stylize('[Object]','special');}}ctx.seen.push(value);var output;if(array){output=formatArray(ctx,value,recurseTimes,visibleKeys,keys);}else{output=keys.map(function(key){return formatProperty(ctx,value,recurseTimes,visibleKeys,key,array);});}ctx.seen.pop();return reduceToSingleString(output,base,braces);}function formatPrimitive(ctx,value){if(isUndefined(value))return ctx.stylize('undefined','undefined');if(isString(value)){var simple='\''+JSON.stringify(value).replace(/^"|"$/g,'').replace(/'/g,"\\'").replace(/\\"/g,'"')+'\'';return ctx.stylize(simple,'string');}if(isNumber(value))return ctx.stylize(''+value,'number');if(isBoolean(value))return ctx.stylize(''+value,'boolean');if(isNull(value))return ctx.stylize('null','null');}function formatError(value){return '['+Error.prototype.toString.call(value)+']';}function formatArray(ctx,value,recurseTimes,visibleKeys,keys){var output=[];for(var i=(0x75bcd15-0O726746425),l=value.length;i<l;++i){if(hasOwnProperty(value,String(i))){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,String(i),true));}else{output.push('');}}keys.forEach(function(key){if(!key.match(/^\d+$/)){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,key,true));}});return output;}function formatProperty(ctx,value,recurseTimes,visibleKeys,key,array){var name,str,desc;desc=Object.getOwnPropertyDescriptor(value,key)||{value:value[key]};if(desc.get){if(desc.set){str=ctx.stylize('[Getter/Setter]','special');}else{str=ctx.stylize('[Getter]','special');}}else{if(desc.set){str=ctx.stylize('[Setter]','special');}}if(!hasOwnProperty(visibleKeys,key)){name='['+key+']';}if(!str){if(ctx.seen.indexOf(desc.value)<(0x75bcd15-0O726746425)){if(isNull(recurseTimes)){str=formatValue(ctx,desc.value,null);}else{str=formatValue(ctx,desc.value,recurseTimes-(0O57060516-0xbc614d));}if(str.indexOf('\n')>-(0O57060516-0xbc614d)){if(array){str=str.split('\n').map(function(line){return '  '+line;}).join('\n').substr((15658734^0O73567354));}else{str='\n'+str.split('\n').map(function(line){return '   '+line;}).join('\n');}}}else{str=ctx.stylize('[Circular]','special');}}if(isUndefined(name)){if(array&&key.match(/^\d+$/)){return str;}name=JSON.stringify(''+key);if(name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)){name=name.substr((0O57060516-0xbc614d),name.length-(15658734^0O73567354));name=ctx.stylize(name,'name');}else{name=name.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'");name=ctx.stylize(name,'string');}}return name+': '+str;}function reduceToSingleString(output,base,braces){var numLinesEst=(0x75bcd15-0O726746425);var length=output.reduce(function(prev,cur){numLinesEst++;if(cur.indexOf('\n')>=(0x75bcd15-0O726746425))numLinesEst++;return prev+cur.replace(/\u001b\[\d\d?m/g,'').length+(0O57060516-0xbc614d);},(0x75bcd15-0O726746425));if(length>0o74){return braces[(0x75bcd15-0O726746425)]+(base===''?'':base+'\n ')+' '+output.join(',\n  ')+' '+braces[(0O57060516-0xbc614d)];}return braces[(0x75bcd15-0O726746425)]+base+' '+output.join(', ')+' '+braces[(0O57060516-0xbc614d)];}function isArray(ar){return Array.isArray(ar);}exports.isArray=isArray;function isBoolean(arg){return typeof arg==='boolean';}exports.isBoolean=isBoolean;function isNull(arg){return arg===null;}exports.isNull=isNull;function isNullOrUndefined(arg){return arg==null;}exports.isNullOrUndefined=isNullOrUndefined;function isNumber(arg){return typeof arg==='number';}exports.isNumber=isNumber;function isString(arg){return typeof arg==='string';}exports.isString=isString;function isSymbol(arg){return typeof arg==='symbol';}exports.isSymbol=isSymbol;function isUndefined(arg){return arg===void (0x75bcd15-0O726746425);}exports.isUndefined=isUndefined;function isRegExp(re){return isObject(re)&&objectToString(re)==='[object RegExp]';}exports.isRegExp=isRegExp;function isObject(arg){return typeof arg==='object'&&arg!==null;}exports.isObject=isObject;function isDate(d){return isObject(d)&&objectToString(d)==='[object Date]';}exports.isDate=isDate;function isError(e){return isObject(e)&&(objectToString(e)==='[object Error]'||e instanceof Error);}exports.isError=isError;function isFunction(arg){return typeof arg==='function';}exports.isFunction=isFunction;function isPrimitive(arg){return arg===null||typeof arg==='boolean'||typeof arg==='number'||typeof arg==='string'||typeof arg==='symbol'||typeof arg==='undefined';}exports.isPrimitive=isPrimitive;exports.isBuffer=require('./support/isBuffer');function objectToString(o){return Object.prototype.toString.call(o);}function pad(n){return n<0o12?'0'+n.toString(0o12):n.toString(0o12);}var months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];function timestamp(){var d=new Date();var time=[pad(d.getHours()),pad(d.getMinutes()),pad(d.getSeconds())].join(':');return [d.getDate(),months[d.getMonth()],time].join(' ');}exports.log=function(){console.log('%s - %s',timestamp(),exports.format.apply(exports,arguments));};exports.inherits=require('inherits');exports._extend=function(origin,add){if(!add||!isObject(add))return origin;var keys=Object.keys(add);var i=keys.length;while(i--){origin[keys[i]]=add[keys[i]];}return origin;};function hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);}}).call(this,require('_process'),typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{})},{"./support/isBuffer":180,"_process":179,"inherits":178}]},{},[0o14]);